{
    "CWG1": "What if two using-declarations refer to the same function but the declarations introduce different default-arguments?",
    "CWG2": "How can dependent names be used in member declarations that appear outside of the class template definition?",
    "CWG3": "The template compilation model rules render some explicit specialization declarations not visible during instantiation",
    "CWG4": "Does extern \"C\" affect the linkage of function names with internal linkage?",
    "CWG5": "CV-qualifiers and type conversions",
    "CWG6": "Should the optimization that allows a class object to alias another object also allow the case of a parameter in an inline function to alias its argument?",
    "CWG7": "Can a class with a private virtual base class be derived from?",
    "CWG8": "Access to template arguments used in a function return type and in the nested name specifier",
    "CWG9": "Clarification of access to base class members",
    "CWG10": "Can a nested class access its own class name as a qualified name if it is a private member of the enclosing class?",
    "CWG11": "How do the keywords typename/template interact with using-declarations?",
    "CWG12": "Default arguments on different declarations for the same function and the Koenig lookup",
    "CWG13": "extern \"C\" for Parameters of Function Templates",
    "CWG14": "extern \"C\" functions and declarations in different namespaces",
    "CWG15": "Default arguments for parameters of function templates",
    "CWG16": "Access to members of indirect private base classes",
    "CWG17": "Footnote 99 should discuss the naming class when describing members that can be accessed from friends",
    "CWG18": "f(TYPE) where TYPE is void should be allowed",
    "CWG19": "Clarify protected member access",
    "CWG20": "Some clarifications needed for 12.8 para 15",
    "CWG21": "Can a default argument for a template parameter appear in a friend declaration?",
    "CWG22": "Template parameter with a default argument that refers to itself",
    "CWG23": "Some questions regarding partial ordering of function templates",
    "CWG24": "Errors in examples in 14.7.3",
    "CWG25": "Exception specifications and pointers to members",
    "CWG26": "Copy constructors and default arguments",
    "CWG27": "Overload ambiguities for builtin ?: prototypes",
    "CWG28": "'exit', 'signal' and static object destruction",
    "CWG29": "Linkage of locally declared functions",
    "CWG30": "Valid uses of \"::template\"",
    "CWG31": "Looking up new/delete",
    "CWG32": "Clarification of explicit instantiation of non-exported templates",
    "CWG33": "Argument dependent lookup and overloaded functions",
    "CWG34": "Argument dependent lookup and points of instantiation",
    "CWG35": "Definition of default-initialization",
    "CWG36": "using-declarations in multiple-declaration contexts",
    "CWG37": "When is uncaught_exception() true?",
    "CWG38": "Explicit template arguments and operator functions",
    "CWG39": "Conflicting ambiguity rules",
    "CWG40": "Syntax of declarator-id",
    "CWG41": "Clarification of lookup of names after declarator-id",
    "CWG42": "Redefining names from base classes",
    "CWG43": "Copying base classes (PODs) using memcpy",
    "CWG44": "Member specializations",
    "CWG45": "Access to nested classes",
    "CWG46": "Explicit instantiation of member templates",
    "CWG47": "Template friend issues",
    "CWG48": "Definitions of unused static members",
    "CWG49": "Restriction on non-type, non-value template arguments",
    "CWG50": "Converting pointer to incomplete type to same type",
    "CWG51": "Overloading and user-defined conversions",
    "CWG52": "Non-static members, member selection and access checking",
    "CWG53": "Lvalue-to-rvalue conversion before certain static_casts",
    "CWG54": "Static_cast from private base to derived class",
    "CWG55": "Adding/subtracting pointer and enumeration value",
    "CWG56": "Redeclaring typedefs within classes",
    "CWG57": "Empty unions",
    "CWG58": "Signedness of bit fields of enum type",
    "CWG59": "Clarification of overloading and UDC to reference type",
    "CWG60": "Reference binding and valid conversion sequences",
    "CWG61": "Address of static member function \"&p->f\"",
    "CWG62": "Unnamed members of classes used as type parameters",
    "CWG63": "Class instantiation from pointer conversion to void*, null and self",
    "CWG64": "Partial ordering to disambiguate explicit specialization",
    "CWG65": "Typo in default argument example",
    "CWG66": "Visibility of default args vs overloads added after using-declaration",
    "CWG67": "Evaluation of left side of object-expression",
    "CWG68": "Grammar does not allow \"friend class A<int>;\"",
    "CWG69": "Storage class specifiers on template declarations",
    "CWG70": "Is an array bound a nondeduced context?",
    "CWG71": "Incorrect cross reference",
    "CWG72": "Linkage and storage class specifiers for templates",
    "CWG73": "Pointer equality",
    "CWG74": "Enumeration value in direct-new-declarator",
    "CWG75": "In-class initialized members must be const",
    "CWG76": "Are const volatile variables considered \"constant expressions\"?",
    "CWG77": "The definition of friend does not allow nested classes to be friends",
    "CWG78": "Section 8.5 paragraph 9 should state it only applies to non-static objects",
    "CWG79": "Alignment and placement new",
    "CWG80": "Class members with same name as class",
    "CWG81": "Null pointers and C compatibility",
    "CWG82": "Definition of \"using\" a constant expression",
    "CWG83": "Overloading and deprecated conversion of string literal",
    "CWG84": "Overloading and conversion loophole used by auto_ptr",
    "CWG85": "Redeclaration of member class",
    "CWG86": "Lifetime of temporaries in query expressions",
    "CWG87": "Exception specifications on function parameters",
    "CWG88": "Specialization of member constant templates",
    "CWG89": "Object lifetime does not account for reference rebinding",
    "CWG90": "Should the enclosing class be an \"associated class\" too?",
    "CWG91": "A union's associated types should include the union itself",
    "CWG92": "Should exception-specifications be part of the type system?",
    "CWG93": "Missing word in 3.8 basic.life paragraph 2",
    "CWG94": "Inconsistencies in the descriptions of constant expressions",
    "CWG95": "Elaborated type specifiers referencing names declared in friend decls",
    "CWG96": "Syntactic disambiguation using the template keyword",
    "CWG97": "Use of bool constants in integral constant expressions",
    "CWG98": "Branching into try block",
    "CWG99": "Partial ordering, references and cv-qualifiers",
    "CWG100": "Clarify why string literals are not allowed as template arguments",
    "CWG101": "Redeclaration of extern \"C\" names via using-declarations",
    "CWG102": "Operator lookup rules do not work well with parts of the library",
    "CWG103": "Is it extended-namespace-definition or extension-namespace-definition ?",
    "CWG104": "Destroying the exception temp when no handler is found",
    "CWG105": "Meaning of \"template function\"",
    "CWG106": "Creating references to references during template deduction/instantiation",
    "CWG107": "Linkage of operator functions",
    "CWG108": "Are classes nested in templates dependent?",
    "CWG109": "Allowing ::template in using-declarations",
    "CWG110": "Can template functions and classes be declared in the same scope?",
    "CWG111": "Copy constructors and cv-qualifiers",
    "CWG112": "Array types and cv-qualifiers",
    "CWG113": "Visibility of called function",
    "CWG114": "Virtual overriding by template member function specializations",
    "CWG115": "Address of template-id",
    "CWG116": "Equivalent and functionally-equivalent function templates",
    "CWG117": "Timing of destruction of temporaries",
    "CWG118": "Calls via pointers to virtual member functions",
    "CWG119": "Object lifetime and aggregate initialization",
    "CWG120": "Nonexistent non-terminal qualified-name",
    "CWG121": "Dependent type names with non-dependent nested-name-specifiers",
    "CWG122": "template-ids as unqualified-ids",
    "CWG123": "Bad cross-reference",
    "CWG124": "Lifetime of temporaries in default initialization of class arrays",
    "CWG125": "Ambiguity in friend declaration syntax",
    "CWG126": "Exception specifications and const",
    "CWG127": "Ambiguity in description of matching deallocation function",
    "CWG128": "Casting between enum types",
    "CWG129": "Stability of uninitialized auto variables",
    "CWG130": "Sequence points and new-expressions",
    "CWG131": "Typo in Lao characters",
    "CWG132": "Local types and linkage",
    "CWG133": "Exception specifications and checking",
    "CWG134": "Template classes and declarator-ids",
    "CWG135": "Class type in in-class member function definitions",
    "CWG136": "Default arguments and friend declarations",
    "CWG137": "static_cast of cv void*",
    "CWG138": "Friend declaration name lookup",
    "CWG139": "Error in friend lookup example",
    "CWG140": "Agreement of parameter declarations",
    "CWG141": "Non-member function templates in member access expressions",
    "CWG142": "Injection-related errors in access example",
    "CWG143": "Friends and Koenig lookup",
    "CWG144": "Position of friend specifier",
    "CWG145": "Deprecation of prefix ++",
    "CWG146": "Floating-point zero",
    "CWG147": "Naming the constructor",
    "CWG148": "POD classes and pointers to members",
    "CWG149": "Accessibility and ambiguity",
    "CWG150": "Template template parameters and default arguments",
    "CWG151": "Terminology of zero-initialization",
    "CWG152": "explicit copy constructors",
    "CWG153": "Misleading wording (rank of conversion)",
    "CWG154": "Anonymous unions in unnamed namespaces",
    "CWG155": "Brace initializer for scalar",
    "CWG156": "Name lookup for conversion functions",
    "CWG157": "Omitted typedef declarator",
    "CWG158": "Aliasing and qualification conversions",
    "CWG159": "Namespace qualification in declarators",
    "CWG160": "Missing std:: qualification",
    "CWG161": "Access to protected nested type",
    "CWG162": "(&C::f)() with nonstatic members",
    "CWG163": "Description of subaggregate initializer",
    "CWG164": "Overlap between Koenig and normal lookup",
    "CWG165": "Definitions of friends and block-scope externs",
    "CWG166": "Friend declarations of template-ids",
    "CWG167": "Deprecating static functions",
    "CWG168": "C linkage for static member functions",
    "CWG169": "template-ids in using-declarations",
    "CWG170": "Pointer-to-member conversions",
    "CWG171": "Global namespace scope",
    "CWG172": "Unsigned int as underlying type of enum",
    "CWG173": "Constraints on execution character set",
    "CWG174": "Undeprecating global static",
    "CWG175": "Class name injection and base name access",
    "CWG176": "Name injection and templates",
    "CWG177": "Lvalues vs rvalues in copy-initialization",
    "CWG178": "More on value-initialization",
    "CWG179": "Function pointers and subtraction",
    "CWG180": "typename and elaborated types",
    "CWG181": "Errors in template template-parameter example",
    "CWG182": "Access checking on explicit specializations",
    "CWG183": "typename in explicit specializations",
    "CWG184": "Default arguments in template template-parameters",
    "CWG185": "\"Named\" temporaries and copy elision",
    "CWG186": "Name hiding and template template-parameters",
    "CWG187": "Scope of template parameter names",
    "CWG188": "Comma operator and rvalue conversion",
    "CWG189": "Definition of operator and punctuator",
    "CWG190": "Layout-compatible POD-struct types",
    "CWG191": "Name lookup does not handle complex nesting",
    "CWG192": "Name lookup in parameters",
    "CWG193": "Order of destruction of local automatics of destructor",
    "CWG194": "Identifying constructors",
    "CWG195": "Converting between function and object pointers",
    "CWG196": "Arguments to deallocation functions",
    "CWG197": "Issues with two-stage lookup of dependent names",
    "CWG198": "Definition of \"use\" in local and nested classes",
    "CWG199": "Order of destruction of temporaries",
    "CWG200": "Partial ordering and explicit arguments",
    "CWG201": "Order of destruction of temporaries in initializers",
    "CWG202": "Use of overloaded function name",
    "CWG203": "Type of address-of-member expression",
    "CWG204": "Exported class templates",
    "CWG205": "Templates and static data members",
    "CWG206": "Semantic constraints on non-dependent names",
    "CWG207": "using-declarations and protected access",
    "CWG208": "Rethrowing exceptions in nested handlers",
    "CWG209": "Must friend declaration names be accessible?",
    "CWG210": "What is the type matched by an exception handler?",
    "CWG211": "Constructors should not be allowed to return normally after an exception",
    "CWG212": "Implicit instantiation is not described clearly enough",
    "CWG213": "Lookup in dependent base classes",
    "CWG214": "Partial ordering of function templates is underspecified",
    "CWG215": "Template parameters are not allowed in nested-name-specifiers",
    "CWG216": "Linkage of nameless class-scope enumeration types",
    "CWG217": "Default arguments for non-template member functions of class templates",
    "CWG218": "Specification of Koenig lookup",
    "CWG219": "Cannot defend against destructors that throw exceptions",
    "CWG220": "All deallocation functions should be required not to throw",
    "CWG221": "Must compound assignment operators be member functions?",
    "CWG222": "Sequence points and lvalue-returning operators",
    "CWG223": "The meaning of deprecation",
    "CWG224": "Definition of dependent names",
    "CWG225": "Koenig lookup and fundamental types",
    "CWG226": "Default template arguments for function templates",
    "CWG227": "How many scopes in an if statement?",
    "CWG228": "Use of template keyword with non-member templates",
    "CWG229": "Partial specialization of function templates",
    "CWG230": "Calls to pure virtual functions",
    "CWG231": "Visibility of names after using-directives",
    "CWG232": "Is indirection through a null pointer undefined behavior?",
    "CWG233": "References vs pointers in UDC overload resolution",
    "CWG234": "Reuse of base class subobjects",
    "CWG235": "Assignment vs initialization",
    "CWG236": "Explicit temporaries and integral constant expressions",
    "CWG237": "Explicit instantiation and base class members",
    "CWG238": "Precision and accuracy constraints on floating point",
    "CWG239": "Footnote 116 and Koenig lookup",
    "CWG240": "Uninitialized values and undefined behavior",
    "CWG241": "Error in example in 14.8.1",
    "CWG242": "Interpretation of old-style casts",
    "CWG243": "Weighting of conversion functions in direct-initialization",
    "CWG244": "Destructor lookup",
    "CWG245": "Name lookup in elaborated-type-specifiers",
    "CWG246": "Jumps in function-try-block handlers",
    "CWG247": "Pointer-to-member casts and function overload resolution",
    "CWG248": "Identifier characters",
    "CWG249": "What is a member function template?",
    "CWG250": "Address of function template specialization with non-deduced template arguments",
    "CWG251": "How many signed integer types are there?",
    "CWG252": "Looking up deallocation functions in virtual destructors",
    "CWG253": "Why must empty or fully-initialized const objects be initialized?",
    "CWG254": "Definitional problems with elaborated-type-specifiers",
    "CWG255": "Placement deallocation functions and lookup ambiguity",
    "CWG256": "Overflow in size calculations",
    "CWG257": "Abstract base constructors and virtual base initialization",
    "CWG258": "using-declarations and cv-qualifiers",
    "CWG259": "Restrictions on explicit specialization and instantiation",
    "CWG260": "User-defined conversions and built-in operator=",
    "CWG261": "When is a deallocation function \"used?\"",
    "CWG262": "Default arguments and ellipsis",
    "CWG263": "Can a constructor be declared a friend?",
    "CWG264": "Unusable template constructors and conversion functions",
    "CWG265": "Destructors, exceptions, and deallocation",
    "CWG266": "No grammar sentence symbol",
    "CWG267": "Alignment requirement for new-expressions",
    "CWG268": "Macro name suppression in rescanned replacement text",
    "CWG269": "Order of initialization of multiply-defined static data members of class templates",
    "CWG270": "Order of initialization of static data members of class templates",
    "CWG271": "Explicit instantiation and template argument deduction",
    "CWG272": "Explicit destructor invocation and qualified-ids",
    "CWG273": "POD classes and operator&()",
    "CWG274": "Cv-qualification and char-alias access to out-of-lifetime objects",
    "CWG275": "Explicit instantiation/specialization and using-directives",
    "CWG276": "Order of destruction of parameters and temporaries",
    "CWG277": "Zero-initialization of pointers",
    "CWG278": "External linkage and nameless entities",
    "CWG279": "Correspondence of \"names for linkage purposes\"",
    "CWG280": "Access and surrogate call functions",
    "CWG281": "inline specifier in friend declarations",
    "CWG282": "Namespace for extended_type_info",
    "CWG283": "Template type-parameters are not syntactically type-names",
    "CWG284": "qualified-ids in class declarations",
    "CWG285": "Identifying a function template being specialized",
    "CWG286": "Incorrect example in partial specialization",
    "CWG287": "Order dependencies in template instantiation",
    "CWG288": "Misuse of \"static type\" in describing pointers",
    "CWG289": "Incomplete list of contexts requiring a complete type",
    "CWG290": "Should memcpy be allowed into a POD with a const member?",
    "CWG291": "Overload resolution needed when binding reference to class rvalue",
    "CWG292": "Deallocation on exception in new before arguments evaluated",
    "CWG293": "Syntax of explicit instantiation/specialization too permissive",
    "CWG294": "Can static_cast drop exception specifications?",
    "CWG295": "cv-qualifiers on function types",
    "CWG296": "Can conversion functions be static?",
    "CWG297": "Which template does an explicit specialization specialize?",
    "CWG298": "T::x when T is cv-qualified",
    "CWG299": "Conversion on array bound expression in new",
    "CWG300": "References to functions in template argument deduction",
    "CWG301": "Syntax for template-name",
    "CWG302": "Value-initialization and generation of default constructor",
    "CWG303": "Integral promotions on bit-fields",
    "CWG304": "Value-initialization of a reference",
    "CWG305": "Name lookup in destructor call",
    "CWG306": "Ambiguity by class name injection",
    "CWG307": "Initialization of a virtual base class subobject",
    "CWG308": "Catching exceptions with ambiguous base classes",
    "CWG309": "Linkage of entities whose names are not simply identifiers, in introduction",
    "CWG310": "Can function templates differing only in parameter cv-qualifiers be overloaded?",
    "CWG311": "Using qualified name to reopen nested namespace",
    "CWG312": "\u201cuse\u201d of invalid pointer value not defined",
    "CWG313": "Class with single conversion function to integral as array size in new",
    "CWG314": "template in base class specifier",
    "CWG315": "Is call of static member function through null pointer undefined?",
    "CWG316": "Injected-class-name of template used as template template parameter",
    "CWG317": "Can a function be declared inline after it has been called?",
    "CWG318": "struct A::A should not name the constructor of A",
    "CWG319": "Use of names without linkage in declaring entities with linkage",
    "CWG320": "Question on copy constructor elision example",
    "CWG321": "Associated classes and namespaces for argument-dependent lookup",
    "CWG322": "Deduction of reference conversions",
    "CWG323": "Where must export appear?",
    "CWG324": "Can \"&\" be applied to assignment to bit-field?",
    "CWG325": "When are default arguments parsed?",
    "CWG326": "Wording for definition of trivial constructor",
    "CWG327": "Use of \"structure\" without definition",
    "CWG328": "Missing requirement that class member types be complete",
    "CWG329": "Evaluation of friends of templates",
    "CWG330": "Qualification conversions and pointers to arrays of pointers",
    "CWG331": "Allowed copy constructor signatures",
    "CWG332": "cv-qualified void parameter types",
    "CWG333": "Ambiguous use of \"declaration\" in disambiguation section",
    "CWG334": "Is a comma-expression dependent if its first operand is?",
    "CWG335": "Allowing export on template members of nontemplate classes",
    "CWG336": "Explicit specialization examples are still incorrect",
    "CWG337": "Attempt to create array of abtract type should cause deduction to fail",
    "CWG338": "Enumerator name with linkage used as class name in other translation unit",
    "CWG339": "Overload resolution in operand of sizeof in constant expression",
    "CWG340": "Unclear wording in disambiguation section",
    "CWG341": "extern \"C\" namespace member function versus global variable",
    "CWG342": "Terminology: \"indirection\" versus \"dereference\"",
    "CWG343": "Make template optional in contexts that require a type",
    "CWG344": "Naming destructors",
    "CWG345": "Misleading comment on example in templates chapter",
    "CWG346": "Typo in 15.4",
    "CWG347": "Use of derived class name in defining base class nested class",
    "CWG348": "delete and user-written deallocation functions",
    "CWG349": "Template argument deduction for conversion functions and qualification conversions",
    "CWG350": "signed char underlying representation for objects",
    "CWG351": "Sequence point error: unspecified or undefined?",
    "CWG352": "Nondeduced contexts",
    "CWG353": "Is deallocation routine called if destructor throws exception in delete?",
    "CWG354": "Null as nontype template argument",
    "CWG355": "Global-scope :: in nested-name-specifier",
    "CWG356": "Wording of behavior of generated copy constructor for scalar members",
    "CWG357": "Definition of signature should include name",
    "CWG358": "Namespaces and extern \"C\"",
    "CWG359": "Type definition in anonymous union",
    "CWG360": "Using-declaration that reduces access",
    "CWG361": "Forward reference to default argument",
    "CWG362": "Order of initialization in instantiation units",
    "CWG363": "Initialization of class from self",
    "CWG364": "Calling overloaded function with static in set, with no object",
    "CWG365": "Storage duration and temporaries",
    "CWG366": "String literal allowed in integral constant expression?",
    "CWG367": "throw operator allowed in constant expression?",
    "CWG368": "Uses of non-type parameters that should cause deduction to fail",
    "CWG369": "Are new/delete identifiers or preprocessing-op-or-punc?",
    "CWG370": "Can #include <...> form be used other than for standard C++ headers?",
    "CWG371": "Interleaving of constructor calls",
    "CWG372": "Is access granted by base class specifiers available in following base class specifiers?",
    "CWG373": "Lookup on namespace qualified name in using-directive",
    "CWG374": "Can explicit specialization outside namespace use qualified name?",
    "CWG375": "Confusing example on lookup with typename",
    "CWG376": "Class \"definition\" versus class \"declaration\"",
    "CWG377": "Enum whose enumerators will not fit in any integral type",
    "CWG378": "Wording that says temporaries are declared",
    "CWG379": "Change \"class declaration\" to \"class definition\"",
    "CWG380": "Definition of \"ambiguous base class\" missing",
    "CWG381": "Incorrect example of base class member lookup",
    "CWG382": "Allow typename outside of templates",
    "CWG383": "Is a class with a declared but not defined destructor a POD?",
    "CWG384": "Argument-dependent lookup and operator functions",
    "CWG385": "How does protected member check of 11.5 interact with using-declarations?",
    "CWG386": "Friend declaration of name brought in by using-declaration",
    "CWG387": "Errors in example in 14.6.5",
    "CWG388": "Catching base*& from a throw of derived*",
    "CWG389": "Unnamed types in entities with linkage",
    "CWG390": "Pure virtual must be defined when implicitly called",
    "CWG391": "Require direct binding of short-lived references to rvalues",
    "CWG392": "Use of full expression lvalue before temporary destruction",
    "CWG393": "Pointer to array of unknown bound in template argument list in parameter",
    "CWG394": "identifier-list is never defined",
    "CWG395": "Conversion operator template syntax",
    "CWG396": "Misleading note regarding use of auto for disambiguation",
    "CWG397": "Same address for string literals from default arguments in inline functions?",
    "CWG398": "Ambiguous wording on naming a type in deduction",
    "CWG399": "Destructor lookup redux",
    "CWG400": "Using-declarations and the \"struct hack\"",
    "CWG401": "When is access for template parameter default arguments checked?",
    "CWG402": "More on partial ordering of function templates",
    "CWG403": "Reference to a type as a template-id",
    "CWG404": "Unclear reference to construction with non-trivial constructor",
    "CWG405": "Unqualified function name lookup",
    "CWG406": "Static data member in class with name for linkage purposes",
    "CWG407": "Named class with associated typedef: two names or one?",
    "CWG408": "sizeof applied to unknown-bound array static data member of template",
    "CWG409": "Obsolete paragraph missed by changes for issue 224",
    "CWG410": "Paragraph missed in changes for issue 166",
    "CWG411": "Use of universal-character-name in character versus string literals",
    "CWG412": "Can a replacement allocation function be inline?",
    "CWG413": "Definition of \"empty class\"",
    "CWG414": "Multiple types found on destructor lookup",
    "CWG415": "Template deduction does not cause instantiation",
    "CWG416": "Class must be complete to allow operator lookup?",
    "CWG417": "Using derived-class qualified name in out-of-class nested class definition",
    "CWG418": "Imperfect wording on error on multiple default arguments on a called function",
    "CWG419": "Can cast to virtual base class be done on partially-constructed object?",
    "CWG420": "postfixexpression->scalar_type_dtor() inconsistent",
    "CWG421": "Is rvalue.field an rvalue?",
    "CWG422": "Is a typedef redeclaration allowed with a template type that might be the same?",
    "CWG423": "Can a conversion be done on the left operand of a compound assignment?",
    "CWG424": "Wording problem with issue 56 resolution on redeclaring typedefs in class scope",
    "CWG425": "Set of candidates for overloaded built-in operator with float operand",
    "CWG426": "Identically-named variables, one internally and one externally linked, allowed?",
    "CWG427": "static_cast ambiguity: conversion versus cast to derived",
    "CWG428": "Mention of expression with reference type",
    "CWG429": "Matching deallocation function chosen based on syntax or signature?",
    "CWG430": "Ordering of expression evaluation in initializer list",
    "CWG431": "Defect in wording in 14.2",
    "CWG432": "Is injected class name visible in base class specifier list?",
    "CWG433": "Do elaborated type specifiers in templates inject into enclosing namespace scope?",
    "CWG434": "Unclear suppression of standard conversions while binding reference to lvalue",
    "CWG435": "Change \"declararation or definition\" to \"declaration\"",
    "CWG436": "Problem in example in 9.6 paragraph 4",
    "CWG437": "Is type of class allowed in member function exception specification?",
    "CWG438": "Possible flaw in wording for multiple accesses to object between sequence points",
    "CWG439": "Guarantees on casting pointer back to cv-qualified version of original type",
    "CWG440": "Allow implicit pointer-to-member conversion on nontype template argument",
    "CWG441": "Ordering of static reference initialization",
    "CWG442": "Incorrect use of null pointer constant in description of delete operator",
    "CWG443": "Wording nit in description of lifetime of temporaries",
    "CWG444": "Overriding and the generated copy assignment operator",
    "CWG445": "Wording issue on friend declarations",
    "CWG446": "Does an lvalue-to-rvalue conversion on the \"?\" operator produce a temporary?",
    "CWG447": "Is offsetof type-dependent?",
    "CWG448": "Set of template functions in call with dependent explicit argument",
    "CWG449": "Consistency in use of hyphen with names of \"non\" entities",
    "CWG450": "Binding a reference to const to a cv-qualified array rvalue",
    "CWG451": "Expressions with invalid results and ill-formedness",
    "CWG452": "Wording nit on description of this",
    "CWG453": "References may only bind to \u201cvalid\u201d objects",
    "CWG454": "When is a definition of a static data member required?",
    "CWG455": "Partial ordering and non-deduced arguments",
    "CWG456": "Is initialized const int or const bool variable a null pointer constant?",
    "CWG457": "Wording nit on use of const variables in constant expressions",
    "CWG458": "Hiding of member template parameters by other members",
    "CWG459": "Hiding of template parameters by base class members",
    "CWG460": "Can a using-declaration name a namespace?",
    "CWG461": "Make asm conditionally-supported",
    "CWG462": "Lifetime of temporaries bound to comma expressions",
    "CWG463": "reinterpret_cast<T*>(0)",
    "CWG464": "Wording nit on lifetime of temporaries to which references are bound",
    "CWG465": "May constructors of global objects call exit()?",
    "CWG466": "cv-qualifiers on pseudo-destructor type",
    "CWG467": "Jump past initialization of local static variable",
    "CWG468": "Allow ::template outside of templates",
    "CWG469": "Const template specializations and reference arguments",
    "CWG470": "Instantiation of members of an explicitly-instantiated class template",
    "CWG471": "Conflicting inherited access specifications",
    "CWG472": "Casting across protected inheritance",
    "CWG473": "Block-scope declarations of allocator functions",
    "CWG474": "Block-scope extern declarations in namespace members",
    "CWG475": "When is std::uncaught_exception() true? (take 2)",
    "CWG476": "Determining the buffer size for placement new",
    "CWG477": "Can virtual appear in a friend declaration?",
    "CWG478": "May a function parameter be an array of an abstract class type?",
    "CWG479": "Copy elision in exception handling",
    "CWG480": "Is a base of a virtual base also virtual?",
    "CWG481": "Scope of template parameters",
    "CWG482": "Qualified declarators in redeclarations",
    "CWG483": "Normative requirements on integral ranges",
    "CWG484": "Can a base-specifier name a cv-qualified class type?",
    "CWG485": "What is a \u201cname\u201d?",
    "CWG486": "Invalid return types and template argument deduction",
    "CWG487": "Operator overloading in constant expressions",
    "CWG488": "Local types, overload resolution, and template argument deduction",
    "CWG489": "Must member function templates be instantiated during overload resolution?",
    "CWG490": "Name lookup in friend declarations",
    "CWG491": "Initializers for empty-class aggregrate members",
    "CWG492": "typeid constness inconsistent with example",
    "CWG493": "Type deduction from a bool context",
    "CWG494": "Problems with the resolution of issue 45",
    "CWG495": "Overload resolution with template and non-template conversion functions",
    "CWG496": "Is a volatile-qualified type really a POD?",
    "CWG497": "Missing required initialization in example",
    "CWG498": "Storage class specifiers in definitions of class members",
    "CWG499": "Throwing an array of unknown size",
    "CWG500": "Access in base-specifiers of friend and nested classes",
    "CWG501": "Visibility of friend declarations within the befriending class",
    "CWG502": "Dependency of nested enumerations and enumerators",
    "CWG503": "Cv-qualified function types in template argument deduction",
    "CWG504": "Should use of a variable in its own initializer require a diagnostic?",
    "CWG505": "Conditionally-supported behavior for unknown character escapes",
    "CWG506": "Conditionally-supported behavior for non-POD objects passed to ellipsis",
    "CWG507": "Ambiguity assigning class object to built-in type",
    "CWG508": "Non-constructed value-initialized objects",
    "CWG509": "Dead code in the specification of default initialization",
    "CWG510": "Default initialization of POD classes?",
    "CWG511": "POD-structs with template assignment operators",
    "CWG512": "Union members with user-declared non-default constructors",
    "CWG513": "Non-class \u201cmost-derived\u201d objects",
    "CWG514": "Is the initializer for a namespace member in the scope of the namespace?",
    "CWG515": "Non-dependent references to base class members",
    "CWG516": "Use of signed in bit-field declarations",
    "CWG517": "Partial specialization following explicit instantiation",
    "CWG518": "Trailing comma following enumerator-list",
    "CWG519": "Null pointer preservation in void* conversions",
    "CWG520": "Old-style casts between incomplete class types",
    "CWG521": "Requirements for exceptions thrown by allocation functions",
    "CWG522": "Array-to-pointer decay in template argument deduction",
    "CWG523": "Can a one-past-the-end pointer be invalidated by deleting an adjacent object?",
    "CWG524": "Can function-notation calls to operator functions be dependent?",
    "CWG525": "Missing * in example",
    "CWG526": "Confusing aspects in the specification of non-deduced contexts",
    "CWG527": "Problems with linkage of types",
    "CWG528": "Why are incomplete class types not allowed with typeid?",
    "CWG529": "Use of template<> with \u201cexplicitly-specialized\u201d class templates",
    "CWG530": "Nontype template arguments in constant expressions",
    "CWG531": "Defining members of explicit specializations",
    "CWG532": "Member/nonmember operator template partial ordering",
    "CWG533": "Special treatment for C-style header names",
    "CWG534": "template-names and operator-function-ids",
    "CWG535": "Copy construction without a copy constructor",
    "CWG536": "Problems in the description of id-expressions",
    "CWG537": "Definition of \u201csignature\u201d",
    "CWG538": "Definition and usage of structure, POD-struct, POD-union, and POD class",
    "CWG539": "Constraints on type-specifier-seq",
    "CWG540": "Propagation of cv-qualifiers in reference-to-reference collapse",
    "CWG541": "Dependent function types",
    "CWG542": "Value initialization of arrays of POD-structs",
    "CWG543": "Value initialization and default constructors",
    "CWG544": "Base class lookup in explicit specialization",
    "CWG545": "User-defined conversions and built-in operator overload resolution",
    "CWG546": "Explicit instantiation of class template members",
    "CWG547": "Partial specialization on member function types",
    "CWG548": "qualified-ids in declarations",
    "CWG549": "Non-deducible parameters in partial specializations",
    "CWG550": "Pointer to array of unknown bound in parameter declarations",
    "CWG551": "When is inline permitted in an explicit instantiation?",
    "CWG552": "Use of typename in the type in a non-type parameter-declaration",
    "CWG553": "Problems with friend allocation and deallocation functions",
    "CWG554": "Definition of \u201cdeclarative region\u201d and \u201cscope\u201d",
    "CWG555": "Pseudo-destructor name lookup",
    "CWG556": "Conflicting requirements for acceptable aliasing",
    "CWG557": "Does argument-dependent lookup cause template instantiation?",
    "CWG558": "Excluded characters in universal character names",
    "CWG559": "Editing error in issue 382 resolution",
    "CWG560": "Use of the typename keyword in return types",
    "CWG561": "Internal linkage functions in dependent name lookup",
    "CWG562": "qualified-ids in non-expression contexts",
    "CWG563": "Linkage specification for objects",
    "CWG564": "Agreement of language linkage or linkage-specifications?",
    "CWG565": "Conflict rules for using-declarations naming function templates",
    "CWG566": "Conversion of negative floating point values to integer type",
    "CWG567": "Can size_t and ptrdiff_t be larger than long?",
    "CWG568": "Definition of POD is too strict",
    "CWG569": "Spurious semicolons at namespace scope should be allowed",
    "CWG570": "Are references subject to the ODR?",
    "CWG571": "References declared const",
    "CWG572": "Standard conversions for non-built-in types",
    "CWG573": "Conversions between function pointers and void*",
    "CWG574": "Definition of \u201ccopy assignment operator\u201d",
    "CWG575": "Criteria for deduction failure",
    "CWG576": "Typedefs in function definitions",
    "CWG577": "void in an empty parameter list",
    "CWG578": "Phase 1 replacement of characters with universal-character-names",
    "CWG579": "What is a \u201cnested\u201d > or >>?",
    "CWG580": "Access in template-parameters of member and friend definitions",
    "CWG581": "Can a templated constructor be explicitly instantiated or specialized?",
    "CWG582": "Template conversion functions",
    "CWG583": "Relational pointer comparisons against the null pointer constant",
    "CWG584": "Unions and aliasing",
    "CWG585": "Friend template template parameters",
    "CWG586": "Default template-arguments and template argument deduction",
    "CWG587": "Lvalue operands of a conditional expression differing only in cv-qualification",
    "CWG588": "Searching dependent bases of classes local to function templates",
    "CWG589": "Direct binding of class and array rvalues in reference initialization",
    "CWG590": "Nested classes and the \u201ccurrent instantiation\u201d",
    "CWG591": "When a dependent base class is the current instantiation",
    "CWG592": "Exceptions during construction of local static objects",
    "CWG593": "Falling off the end of a destructor's function-try-block handler",
    "CWG594": "Coordinating issues 119 and 404 with delegating constructors",
    "CWG595": "Exception specifications in templates instantiated from class bodies",
    "CWG596": "Replacing an exception object",
    "CWG597": "Conversions applied to out-of-lifetime non-POD lvalues",
    "CWG598": "Associated namespaces of overloaded functions and function templates",
    "CWG599": "Deleting a null function pointer",
    "CWG600": "Does access control apply to members or to names?",
    "CWG601": "Type of literals in preprocessing expressions",
    "CWG602": "When is the injected-class-name of a class template a template?",
    "CWG603": "Type equivalence and unsigned overflow",
    "CWG604": "Argument list for overload resolution in copy-initialization",
    "CWG605": "Linkage of explicit specializations",
    "CWG606": "Template argument deduction for rvalue references",
    "CWG607": "Lookup of mem-initializer-ids",
    "CWG608": "Determining the final overrider of a virtual function",
    "CWG609": "What is a \u201ctop-level\u201d cv-qualifier?",
    "CWG610": "Computing the negative of 0U",
    "CWG611": "Zero-initializing references",
    "CWG612": "Requirements on a conforming implementation",
    "CWG613": "Unevaluated uses of non-static class members",
    "CWG614": "Results of integer / and %",
    "CWG615": "Incorrect description of variables that can be initialized",
    "CWG616": "Definition of \u201cindeterminate value\u201d",
    "CWG617": "Lvalue-to-rvalue conversions of uninitialized char objects",
    "CWG618": "Casts in preprocessor conditional expressions",
    "CWG619": "Completeness of array types",
    "CWG620": "Declaration order in layout-compatible POD structs",
    "CWG621": "Template argument deduction from function return types",
    "CWG622": "Relational comparisons of arbitrary pointers",
    "CWG623": "Use of pointers to deallocated storage",
    "CWG624": "Overflow in calculating size of allocation",
    "CWG625": "Use of auto as a template-argument",
    "CWG626": "Preprocessor string literals",
    "CWG627": "Values behaving as types",
    "CWG628": "The values of an enumeration with no enumerator",
    "CWG629": "auto parsing ambiguity",
    "CWG630": "Equality of narrow and wide character values in the basic character set",
    "CWG631": "Jumping into a \u201cthen\u201d clause",
    "CWG632": "Brace-enclosed initializer for scalar member of aggregate",
    "CWG633": "Specifications for variables that should also apply to references",
    "CWG634": "Conditionally-supported behavior for non-POD objects passed to ellipsis redux",
    "CWG635": "Names of constructors and destructors of templates",
    "CWG636": "Dynamic type of objects and aliasing",
    "CWG637": "Sequencing rules and example disagree",
    "CWG638": "Explicit specialization and friendship",
    "CWG639": "What makes side effects \u201cdifferent\u201d from one another?",
    "CWG640": "Accessing destroyed local objects of static storage duration",
    "CWG641": "Overload resolution and conversion-to-same-type operators",
    "CWG642": "Definition and use of \u201cblock scope\u201d and \u201clocal scope\u201d",
    "CWG643": "Use of decltype in a class member-specification",
    "CWG644": "Should a trivial class type be a literal type?",
    "CWG645": "Are bit-field and non-bit-field members layout compatible?",
    "CWG646": "Can a class with a constexpr copy constructor be a literal type?",
    "CWG647": "Non-constexpr instances of constexpr constructor templates",
    "CWG648": "Constant expressions in constexpr initializers",
    "CWG649": "Optionally ill-formed extended alignment requests",
    "CWG650": "Order of destruction for temporaries bound to the returned value of a function",
    "CWG651": "Problems in decltype specification and examples",
    "CWG652": "Compile-time evaluation of floating-point expressions",
    "CWG653": "Copy assignment of unions",
    "CWG654": "Conversions to and from nullptr_t",
    "CWG655": "Initialization not specified for forwarding constructors",
    "CWG656": "Direct binding to the result of a conversion operator",
    "CWG657": "Abstract class parameter in synthesized declaration",
    "CWG658": "Defining reinterpret_cast for pointer types",
    "CWG659": "Alignment of function types",
    "CWG660": "Unnamed scoped enumerations",
    "CWG661": "Semantics of arithmetic comparisons",
    "CWG662": "Forming a pointer to a reference type",
    "CWG663": "Valid Cyrillic identifier characters",
    "CWG664": "Direct binding of references to non-class rvalue references",
    "CWG665": "Problems in the specification of dynamic_cast",
    "CWG666": "Dependent qualified-ids without the typename keyword",
    "CWG667": "Trivial special member functions that cannot be implicitly defined",
    "CWG668": "Throwing an exception from the destructor of a local static object",
    "CWG669": "Confusing specification of the meaning of decltype",
    "CWG670": "Copy initialization via derived-to-base conversion in the second step",
    "CWG671": "Explicit conversion from a scoped enumeration type to integral type",
    "CWG672": "Sequencing of initialization in new-expressions",
    "CWG673": "Injection of names from elaborated-type-specifiers in friend declarations",
    "CWG674": "\u201cmatching specialization\u201d for a friend declaration",
    "CWG675": "Signedness of bit-field with typedef or template parameter type",
    "CWG676": "static_assert-declarations and general requirements for declarations",
    "CWG677": "Deleted operator delete and virtual destructors",
    "CWG678": "Language linkage of member function parameter types and the ODR",
    "CWG679": "Equivalence of template-ids and operator function templates",
    "CWG680": "What is a move constructor?",
    "CWG681": "Restrictions on declarators with late-specified return types",
    "CWG682": "Missing description of lookup of template aliases",
    "CWG683": "Requirements for trivial subobject special functions",
    "CWG684": "Constant expressions involving the address of an automatic variable",
    "CWG685": "Integral promotion of enumeration ignores fixed underlying type",
    "CWG686": "Type declarations/definitions in type-specifier-seqs and type-ids",
    "CWG687": "template keyword with unqualified-ids",
    "CWG688": "Constexpr constructors and static initialization",
    "CWG689": "Maximum values of signed and unsigned integers",
    "CWG690": "The dynamic type of an rvalue reference",
    "CWG691": "Template parameter packs in class template partial specializations",
    "CWG692": "Partial ordering of variadic class template partial specializations",
    "CWG693": "New string types and deprecated conversion",
    "CWG694": "Zero- and value-initialization of union objects",
    "CWG695": "Compile-time calculation errors in constexpr functions",
    "CWG696": "Use of block-scope constants in local classes",
    "CWG697": "Deduction rules apply to more than functions",
    "CWG698": "The definition of \u201csequenced before\u201d is too narrow",
    "CWG699": "Must constexpr member functions be defined in the class member-specification?",
    "CWG700": "Constexpr member functions of class templates",
    "CWG701": "When is the array-to-pointer conversion applied?",
    "CWG702": "Preferring conversion to std::initializer_list",
    "CWG703": "Narrowing for literals that cannot be exactly represented",
    "CWG704": "To which postfix-expressions does overload resolution apply?",
    "CWG705": "Suppressing argument-dependent lookup via parentheses",
    "CWG706": "Use of auto with rvalue references",
    "CWG707": "Undefined behavior in integral-to-floating conversions",
    "CWG708": "Partial specialization of member templates of class templates",
    "CWG709": "Enumeration names as nested-name-specifiers in deduction failure",
    "CWG710": "Data races during construction",
    "CWG711": "auto with braced-init-list",
    "CWG712": "Are integer constant operands of a conditional-expression \u201cused?\u201d",
    "CWG713": "Unclear note about cv-qualified function types",
    "CWG714": "Static const data members and braced-init-lists",
    "CWG715": "Class member access constant expressions",
    "CWG716": "Specifications that should apply only to non-static union data members",
    "CWG717": "Unintentional restrictions on the use of thread_local",
    "CWG718": "Non-class, non-function friend declarations",
    "CWG719": "Specifications for operator-function-id that should also apply to literal-operator-id",
    "CWG720": "Need examples of lambda-expressions",
    "CWG721": "Where must a variable be initialized to be used in a constant expression?",
    "CWG722": "Can nullptr be passed to an ellipsis?",
    "CWG723": "Archetypes in skipped declarations",
    "CWG724": "Qualified name lookup in a constrained context",
    "CWG725": "When should the requirement for std::Returnable<T>, etc., apply?",
    "CWG726": "Atomic and non-atomic objects in the memory model",
    "CWG727": "In-class explicit specializations",
    "CWG728": "Restrictions on local classes",
    "CWG729": "Qualification conversions and handlers of reference-to-pointer type",
    "CWG730": "Explicit specializations of members of non-template classes",
    "CWG731": "Omitted reference qualification of member function type",
    "CWG732": "Late-specified return types in function definitions",
    "CWG733": "Reference qualification of copy assignment operators",
    "CWG734": "Are unique addresses required for namespace-scope variables?",
    "CWG735": "Missing case in specification of safely-derived pointers",
    "CWG736": "Is the & ref-qualifier needed?",
    "CWG737": "Uninitialized trailing characters in string initialization",
    "CWG738": "constexpr not permitted by the syntax of constructor declarations",
    "CWG739": "Signedness of plain bit-fields",
    "CWG740": "Incorrect note on data races",
    "CWG741": "\u201cplain\u201d long long bit-fields",
    "CWG742": "Postfix increment/decrement with long bit-field operands",
    "CWG743": "Use of decltype in a nested-name-specifier",
    "CWG744": "Matching template arguments with template template parameters with parameter packs",
    "CWG745": "Effect of ill-formedness resulting from #error",
    "CWG746": "Use of auto in new-expressions",
    "CWG747": "Access of protected base classes",
    "CWG748": "Always-complete archetypes",
    "CWG749": "References to function types with a cv-qualifier or ref-qualifier",
    "CWG750": "Implementation constraints on reference-only closure objects",
    "CWG751": "Deriving from closure classes",
    "CWG752": "Name lookup in nested lambda-expressions",
    "CWG753": "Array names in lambda capture sets",
    "CWG754": "Lambda expressions in default arguments of block-scope function declarations",
    "CWG755": "Generalized lambda-captures",
    "CWG756": "Dropping cv-qualification on members of closure objects",
    "CWG757": "Types without linkage in declarations",
    "CWG758": "Missing cases of declarations that are not definitions",
    "CWG759": "Destruction of closure objects",
    "CWG760": "this inside a nested class of a non-static member function",
    "CWG761": "Inferred return type of closure object call operator",
    "CWG762": "Name lookup in the compound-statement of a lambda expression",
    "CWG763": "Is a closure object's operator() inline?",
    "CWG764": "Capturing unused variables in a lambda expression",
    "CWG765": "Local types in inline functions with external linkage",
    "CWG766": "Where may lambda expressions appear?",
    "CWG767": "void and other unnamed lambda-parameters",
    "CWG768": "Ellipsis in a lambda parameter list",
    "CWG769": "Initialization of closure objects",
    "CWG770": "Ambiguity in late-specified return type",
    "CWG771": "Move-construction of reference members of closure objects",
    "CWG772": "capture-default in lambdas in local default arguments",
    "CWG773": "Parentheses in address non-type template arguments",
    "CWG774": "Can a closure class be a POD?",
    "CWG775": "Capturing references to functions",
    "CWG776": "Delegating constructors, destructors, and std::exit",
    "CWG777": "Default arguments and parameter packs",
    "CWG778": "Template parameter packs in non-type template parameters",
    "CWG779": "Rvalue reference members of closure objects?",
    "CWG780": "Questions regarding the point of definition of a concept map",
    "CWG781": "Missing requirement in constrained function example",
    "CWG782": "Lambda expressions and argument-dependent lookup",
    "CWG783": "Definition of \u201cargument\u201d",
    "CWG784": "List of incompatibilities with the previous Standard",
    "CWG785": "\u201cExecution sequence\u201d is inappropriate phraseology",
    "CWG786": "Definition of \u201cthread\u201d",
    "CWG787": "Unnecessary lexical undefined behavior",
    "CWG788": "Relationship between locale and values of the execution character set",
    "CWG789": "Deprecating trigraphs",
    "CWG790": "Concatenation of raw and non-raw string literals",
    "CWG791": "Linkage of concept names",
    "CWG792": "Effects of std::quick_exit",
    "CWG793": "Use of class members during destruction",
    "CWG794": "Base-derived conversion in member type of pointer-to-member conversion",
    "CWG795": "Dependency of lambdas on <functional>",
    "CWG796": "Lifetime of a closure object with members captured by reference",
    "CWG797": "Converting a no-capture lambda to a function type",
    "CWG798": "Overloaded subscript operator described in clause 5",
    "CWG799": "Can reinterpret_cast be used to cast an operand to its own type?",
    "CWG800": "Safely-derived pointers and object pointers converted from function pointers",
    "CWG801": "Casting away constness in a cast to rvalue reference type",
    "CWG802": "Problems with restrictions on taking the address of a member of a concept map",
    "CWG803": "sizeof an enumeration type with a fixed underlying type",
    "CWG804": "Deducing the type in new auto(x)",
    "CWG805": "Which exception to throw for overflow in array size calculation",
    "CWG806": "Enumeration types in integral constant expressions",
    "CWG807": "typeid expressions in constant expressions",
    "CWG808": "Non-type decl-specifiers versus max-munch",
    "CWG809": "Deprecation of the register keyword",
    "CWG810": "Block-scope thread_local variables should be implicitly static",
    "CWG811": "Unclear implications of const-qualification",
    "CWG812": "Duplicate names in inline namespaces",
    "CWG813": "typename in a using-declaration with a non-dependent name",
    "CWG814": "Attribute to indicate that a function throws nothing",
    "CWG815": "Parameter pack expansion inside attributes",
    "CWG816": "Diagnosing violations of [[final]]",
    "CWG817": "Meaning of [[final]] applied to a class definition",
    "CWG818": "Function parameter packs in non-final positions",
    "CWG819": "Access control and deleted implicitly-declared special member functions",
    "CWG820": "Deprecation of export",
    "CWG821": "Exported concept map templates?",
    "CWG822": "Additional contexts for template aliases",
    "CWG823": "Literal types with constexpr conversions as non-type template arguments",
    "CWG824": "Constrained special member functions",
    "CWG825": "TriviallyCopyableType concept",
    "CWG826": "Accept boolean constant expressions as constraints",
    "CWG827": "Use of && as requirement separator",
    "CWG828": "Destruction of exception objects",
    "CWG829": "At what point is std::unexpected called?",
    "CWG830": "Deprecating exception specifications",
    "CWG831": "Limit on recursively nested template instantiations",
    "CWG832": "Value of preprocessing numbers",
    "CWG833": "Explicit conversion of a scoped enumeration value to a floating type",
    "CWG834": "What is an \u201cordinary string literal\u201d?",
    "CWG835": "Scoped enumerations and the \u201cusual arithmetic conversions\u201d",
    "CWG836": "[[noreturn]] applied to function types",
    "CWG837": "Constexpr functions and return braced-init-list",
    "CWG838": "Use of this in a brace-or-equal-initializer",
    "CWG839": "sizeof with opaque enumerations",
    "CWG840": "Rvalue references as nontype template parameters",
    "CWG841": "Ill-formed concept refinement example",
    "CWG842": "Casting to rvalue reference type",
    "CWG843": "Unclear interaction of constraints and special member functions",
    "CWG844": "Is a constrained member function a template?",
    "CWG845": "What is the \u201cfirst declaration\u201d of an explicit specialization?",
    "CWG846": "Rvalue references to functions",
    "CWG847": "Error in rvalue reference deduction example",
    "CWG848": "Unconstrained template template parameters in constrained contexts",
    "CWG849": "Constraints and template template parameters",
    "CWG850": "Restrictions on use of non-static data members",
    "CWG851": "Constraints and template aliases",
    "CWG852": "using-declarations and dependent base classes",
    "CWG853": "Support for relaxed pointer safety",
    "CWG854": "Left shift and unsigned extended types",
    "CWG855": "Incorrect comments in braced-init-list assignment example",
    "CWG856": "Overlapping concept and requirements scopes",
    "CWG857": "Implying requirements from enclosing scopes",
    "CWG858": "Example binding an rvalue reference to an lvalue",
    "CWG859": "Incomplete comment in late_check example",
    "CWG860": "Explicit qualification of constexpr member functions",
    "CWG861": "Unintended ambiguity in inline namespace lookup",
    "CWG862": "Undefined behavior with enumerator value overflow",
    "CWG863": "Rvalue reference cast to incomplete type",
    "CWG864": "braced-init-list in the range-based for statement",
    "CWG865": "Initializing a std::initializer_list",
    "CWG866": "Concept maps and the range-based for",
    "CWG867": "Naming a specialization of a constrained template",
    "CWG868": "Specifying a concept map in the name of a specialization",
    "CWG869": "Uninitialized thread_local objects",
    "CWG870": "Context of expression when satisfying an associated function requirement",
    "CWG871": "Satisfying associated functions with built-in operators",
    "CWG872": "Lexical issues with raw strings",
    "CWG873": "Deducing rvalue references in declarative contexts",
    "CWG874": "Class-scope definitions of enumeration types",
    "CWG875": "Associated conversion functions converting to the same type",
    "CWG876": "Type references in rvalue reference deduction specification",
    "CWG877": "Viable functions and binding references to rvalues",
    "CWG878": "Effective class types in built-in pointer-to-member operator",
    "CWG879": "Missing built-in comparison operators for pointer types",
    "CWG880": "Built-in conditional operator for scoped enumerations",
    "CWG881": "Inconsistent requirement for naming template parameters",
    "CWG882": "Defining main as deleted",
    "CWG883": "std::memcpy vs std::memmove",
    "CWG884": "Defining an explicitly-specialized static data member",
    "CWG885": "Partial ordering of function templates with unordered parameter pairs",
    "CWG886": "Member initializers and aggregates",
    "CWG887": "Move construction of thrown object",
    "CWG888": "Union member initializers",
    "CWG889": "Default implementations of associated functions",
    "CWG890": "Missing requirement in example",
    "CWG891": "const_cast to rvalue reference from objectless rvalue",
    "CWG892": "Missing requirements for constexpr constructors",
    "CWG893": "Brace syntax for enumerator-definitions",
    "CWG894": "Incorrect example for constrained overload resolution",
    "CWG895": "Missing destructor requirements",
    "CWG896": "Rvalue references and rvalue-reference conversion functions",
    "CWG897": "_Pragma and extended string-literals",
    "CWG898": "Declarations in constexpr functions",
    "CWG899": "Explicit conversion functions in direct class initialization",
    "CWG900": "Lifetime of temporaries in range-based for",
    "CWG901": "Deleted operator delete",
    "CWG902": "In-class initialization of non-constant static data members",
    "CWG903": "Value-dependent integral null pointer constants",
    "CWG904": "Parameter packs in lambda-captures",
    "CWG905": "Explicit defaulted copy constructors and trivial copyability",
    "CWG906": "Which special member functions can be defaulted?",
    "CWG907": "Default types in requirements in auto concepts",
    "CWG908": "Deleted global allocation and deallocation functions",
    "CWG909": "Old-style casts with conversion functions",
    "CWG910": "Move constructors and implicitly-declared copy constructors",
    "CWG911": "late_check and concept map templates",
    "CWG912": "Character literals and universal-character-names",
    "CWG913": "Deduction rules for array- and function-type conversion functions",
    "CWG914": "Value-initialization of array types",
    "CWG915": "Deleted specializations of member function templates",
    "CWG916": "Does a reference type have a destructor?",
    "CWG917": "Pointer conversions between archetypes",
    "CWG918": "Declaration/expression ambiguity in associated function expressions",
    "CWG919": "Contradictions regarding inline namespaces",
    "CWG920": "Interaction of inline namespaces and using-declarations",
    "CWG921": "Unclear specification of inline namespaces",
    "CWG922": "Implicit default constructor definitions and const variant members",
    "CWG923": "Inline explicit specializations",
    "CWG924": "alias-declaration as a class member",
    "CWG925": "Type of character literals in preprocessor expressions",
    "CWG926": "Inline unnamed namespaces",
    "CWG927": "Implicitly-deleted default constructors and member initializers",
    "CWG928": "Defaulting a function that would be implicitly defined as deleted",
    "CWG929": "What is a template alias?",
    "CWG930": "alignof with incomplete array type",
    "CWG931": "Confusing reference to the length of a user-defined string literal",
    "CWG932": "UCNs in closing delimiters of raw string literals",
    "CWG933": "32-bit UCNs with 16-bit wchar_t",
    "CWG934": "List-initialization of references",
    "CWG935": "Missing overloads for character types for user-defined literals",
    "CWG936": "Array initialization with new string literals",
    "CWG937": "Restrictions on values of template arguments in user-defined literals",
    "CWG938": "Initializer lists and array new",
    "CWG939": "Explicitly checking virtual function overriding",
    "CWG940": "Global anonymous unions",
    "CWG941": "Explicit specialization of deleted function template",
    "CWG942": "Is this an entity?",
    "CWG943": "Is T() a temporary?",
    "CWG944": "reinterpret_cast for all types with the same size and alignment",
    "CWG945": "Use of this in a late-specified return type",
    "CWG946": "Order of destruction of local static objects and calls to std::atexit",
    "CWG947": "Deducing type template arguments from default function arguments",
    "CWG948": "constexpr in conditions",
    "CWG949": "Requirements for freestanding implementations",
    "CWG950": "Use of decltype as a class-name",
    "CWG951": "Problems with attribute-specifiers",
    "CWG952": "Insufficient description of \u201cnaming class\u201d",
    "CWG953": "Rvalue references and function viability",
    "CWG954": "Overload resolution of conversion operator templates with built-in types",
    "CWG955": "Can a closure type's operator() be virtual?",
    "CWG956": "Function prototype scope with late-specified return types",
    "CWG957": "Alternative tokens and attribute-tokens",
    "CWG958": "Lambdas and decltype",
    "CWG959": "Alignment attribute for class and enumeration types",
    "CWG960": "Covariant functions and lvalue/rvalue references",
    "CWG961": "Overload resolution and conversion of std::nullptr_t to bool",
    "CWG962": "Attributes appertaining to class and enum types",
    "CWG963": "Comparing nullptr with 0",
    "CWG964": "Incorrect description of when the lvalue-to-rvalue conversion applies",
    "CWG965": "Limiting the applicability of the carries_dependency attribute",
    "CWG966": "Nested types without linkage",
    "CWG967": "Exception specification of replacement allocation function",
    "CWG968": "Syntactic ambiguity of the attribute notation",
    "CWG969": "Explicit instantiation declarations of class template specializations",
    "CWG970": "Consistent use of \u201cappertain\u201d and \u201capply\u201d",
    "CWG971": "Incorrect treatment of exception-declarations",
    "CWG972": "Allowing multiple attribute-specifiers",
    "CWG973": "Function types in exception-specifications",
    "CWG974": "Default arguments for lambdas",
    "CWG975": "Restrictions on return type deduction for lambdas",
    "CWG976": "Deduction for const T& conversion operators",
    "CWG977": "When is an enumeration type complete?",
    "CWG978": "Incorrect specification for copy initialization",
    "CWG979": "Position of attribute-specifier in declarator syntax",
    "CWG980": "Explicit instantiation of a member of a class template",
    "CWG981": "Constexpr constructor templates and literal types",
    "CWG982": "Initialization with an empty initializer list",
    "CWG983": "Ambiguous pointer-to-member constant",
    "CWG984": "\u201cDeduced type\u201d is unclear in auto type deduction",
    "CWG985": "Alternative tokens and user-defined literals",
    "CWG986": "Transitivity of using-directives versus qualified lookup",
    "CWG987": "Which declarations introduce namespace members?",
    "CWG988": "Reference-to-reference collapsing with decltype",
    "CWG989": "Misplaced list-initialization example",
    "CWG990": "Value initialization with multiple initializer-list constructors",
    "CWG991": "Reference parameters of constexpr functions and constructors",
    "CWG992": "Inheriting explicitness",
    "CWG993": "Freedom to perform instantiation at the end of the translation unit",
    "CWG994": "braced-init-list as a default argument",
    "CWG995": "Incorrect example for using-declaration and explicit instantiation",
    "CWG996": "Ambiguous partial specializations of member class templates",
    "CWG997": "Argument-dependent lookup and dependent function template parameter types",
    "CWG998": "Function parameter transformations and template functions",
    "CWG999": "\u201cImplicit\u201d or \u201cimplied\u201d object argument/parameter?",
    "CWG1000": "Mistaking member typedefs for constructors",
    "CWG1001": "Parameter type adjustment in dependent parameter types",
    "CWG1002": "Pack expansion for function arguments",
    "CWG1003": "Acceptable definitions of main",
    "CWG1004": "Injected-class-names as arguments for template template parameters",
    "CWG1005": "Qualified name resolution in member functions of class templates",
    "CWG1006": "std::nullptr_t as a non-type template parameter",
    "CWG1007": "Protected access and pointers to members",
    "CWG1008": "Querying the alignment of an object",
    "CWG1009": "Missing cases in the declarator-id of a function template declaration",
    "CWG1010": "Address of object with dynamic storage duration in constant expression",
    "CWG1011": "Standard conversions that cannot be inverted",
    "CWG1012": "Undeprecating static",
    "CWG1013": "Uninitialized std::nullptr_t objects",
    "CWG1014": "Overload resolution between const T& and T&&",
    "CWG1015": "Template arguments and argument-dependent lookup",
    "CWG1016": "Overloadable declarations, function templates, and references",
    "CWG1017": "Member access transformation in unevaluated operands",
    "CWG1018": "Ambiguity between simple-declaration and attribute-declaration",
    "CWG1019": "Dependent simple-template-ids in base-specifiers and mem-initializers",
    "CWG1020": "Implicitly-defined copy constructors and explicit base class constructors",
    "CWG1021": "Definitions of namespace members",
    "CWG1022": "Can an enumeration variable have values outside the values of the enumeration?",
    "CWG1023": "thread_local objects as non-type template arguments",
    "CWG1024": "Limits on multicharacter literals",
    "CWG1025": "Use of a reference as a non-type template argument",
    "CWG1026": "Cv-qualified non-class rvalues",
    "CWG1027": "Type consistency and reallocation of scalar types",
    "CWG1028": "Dependent names in non-defining declarations",
    "CWG1029": "Type of a destructor call",
    "CWG1030": "Evaluation order in initializer-lists used in aggregate initialization",
    "CWG1031": "Optional elements in attributes",
    "CWG1032": "Empty pack expansions",
    "CWG1033": "Restrictions on alignment attributes",
    "CWG1034": "Attributes for return statements in lambdas",
    "CWG1035": "Omitted and required decl-specifiers",
    "CWG1036": "Alignment attribute in an exception-declaration",
    "CWG1037": "Requirements for operands of delete-expressions and deallocation functions",
    "CWG1038": "Overload resolution of &x.static_func",
    "CWG1039": "Coordinating C and C++ alignment specifications",
    "CWG1040": "Memory model issues",
    "CWG1041": "alias-declarations as class members",
    "CWG1042": "Attributes in alias-declarations",
    "CWG1043": "Qualified name lookup in the current instantiation",
    "CWG1044": "Point of declaration for an alias-declaration",
    "CWG1045": "Requiring explicit instantiation declarations",
    "CWG1046": "What is a \u201cuse\u201d of a class specialization?",
    "CWG1047": "When is typeid value-dependent?",
    "CWG1048": "auto deduction and lambda return type deduction.",
    "CWG1049": "Copy elision through reference parameters of inline functions",
    "CWG1050": "Effects of thread support on object lifetime",
    "CWG1051": "Reference members and generated copy constructors",
    "CWG1052": "const non-static data member and PODness",
    "CWG1053": "Terminate vs undefined behavior for noexcept violation",
    "CWG1054": "Lvalue-to-rvalue conversions in expression statements",
    "CWG1055": "Permissible uses of void",
    "CWG1056": "Template aliases, member definitions, and the current instantiation",
    "CWG1057": "decltype and the current instantiation",
    "CWG1058": "Reference binding of incompatible array types",
    "CWG1059": "Cv-qualified array types (with rvalues)",
    "CWG1060": "Scoped enumerators in integral constant expressions",
    "CWG1061": "Negative array bounds in a new-expression",
    "CWG1062": "Syntax of attribute-specifiers in lambdas",
    "CWG1063": "[[hiding]] with non-attribute declarations",
    "CWG1064": "Defaulted move constructor for a union",
    "CWG1065": "[[hiding]] with [[override]]",
    "CWG1066": "When is a copy/move assignment operator implicitly defined?",
    "CWG1067": "[[hiding]], using-declarations, and multiple inheritance",
    "CWG1068": "Template aliases with default arguments and template parameter packs",
    "CWG1069": "Incorrect function type with trailing-return-type",
    "CWG1070": "Missing initializer clauses in aggregate initialization",
    "CWG1071": "Literal class types and trivial default constructors",
    "CWG1072": "Scoped enumerator with the same name as its containing class",
    "CWG1073": "Merging dynamic-exception-specifications and noexcept-specifications",
    "CWG1074": "Value-dependent noexcept-expressions",
    "CWG1075": "Grammar does not allow template alias in type-name",
    "CWG1076": "Value categories and lvalue temporaries",
    "CWG1077": "Explicit specializations in non-containing namespaces",
    "CWG1078": "Narrowing and the usual arithmetic conversions",
    "CWG1079": "Overload resolution involving aggregate initialization",
    "CWG1080": "Confusing relationship between templates and copy constructors",
    "CWG1081": "Defaulted destructor and unusable operator delete",
    "CWG1082": "Implicit copy function if subobject has none?",
    "CWG1083": "Passing an object to ellipsis with non-trivial move constructor",
    "CWG1084": "Conditions for a deleted move function",
    "CWG1085": "Move assignment operators and virtual bases",
    "CWG1086": "const_cast to rvalue reference to function type",
    "CWG1087": "Additional applications of issue 899",
    "CWG1088": "Dependent non-type template arguments",
    "CWG1089": "Template parameters in member selections",
    "CWG1090": "Alignment of subobjects",
    "CWG1091": "Inconsistent use of the term \u201cobject expression\u201d",
    "CWG1092": "Cycles in overload resolution during instantiation",
    "CWG1093": "Value-initializing non-objects",
    "CWG1094": "Converting floating-point values to scoped enumeration types",
    "CWG1095": "List-initialization of references",
    "CWG1096": "Missing requirement for template definitions",
    "CWG1097": "Aggregate initialization of function parameters",
    "CWG1098": "Pointer conversions in constant expressions",
    "CWG1099": "Infinite recursion in constexpr functions",
    "CWG1100": "constexpr conversion functions and non-type template arguments",
    "CWG1101": "Non-integral initialized static data members",
    "CWG1102": "Better example of undefined behavior",
    "CWG1103": "Reversion of phase 1 and 2 transformations in raw string literals",
    "CWG1104": "Global-scope template arguments vs the <: digraph",
    "CWG1105": "Issues relating to TR 10176:2003",
    "CWG1106": "Need more detail in nullptr keyword description",
    "CWG1107": "Overload resolution for user-defined integer literals",
    "CWG1108": "User-defined literals have not been implemented",
    "CWG1109": "When is \u201cuse\u201d a reference to the ODR meaning?",
    "CWG1110": "Incomplete return type should be allowed in decltype operand",
    "CWG1111": "Remove dual-scope lookup of member template names",
    "CWG1112": "constexpr variables should have internal linkage like const",
    "CWG1113": "Linkage of namespace member of unnamed namespace",
    "CWG1114": "Incorrect use of placement new in example",
    "CWG1115": "C-compatible alignment specification",
    "CWG1116": "Aliasing of union members",
    "CWG1117": "Incorrect note about xvalue member access expressions",
    "CWG1118": "Implicit lambda capture via explicit copy constructor",
    "CWG1119": "Missing case in description of member access ambiguity",
    "CWG1120": "reinterpret_cast and void*",
    "CWG1121": "Unnecessary ambiguity error in formation of pointer to member",
    "CWG1122": "Circular definition of std::size_t",
    "CWG1123": "Destructors should be noexcept by default",
    "CWG1124": "Error in description of value category of pointer-to-member expression",
    "CWG1125": "Unclear definition of \u201cpotential constant expression\u201d",
    "CWG1126": "constexpr functions in const initializers",
    "CWG1127": "Overload resolution in constexpr functions",
    "CWG1128": "attribute-specifiers in decl-specifier-seqs",
    "CWG1129": "Default nothrow for constexpr functions",
    "CWG1130": "Function parameter type adjustments and decltype",
    "CWG1131": "Template aliases in elaborated-type-specifiers",
    "CWG1132": "Keyword vs attribute for noreturn",
    "CWG1133": "Keywords vs attributes for control of hiding and overriding",
    "CWG1134": "When is an explicitly-defaulted function defined?",
    "CWG1135": "Explicitly-defaulted non-public special member functions",
    "CWG1136": "Explicitly-defaulted explicit constructors",
    "CWG1137": "Explicitly-defaulted virtual special member functions",
    "CWG1138": "Rvalue-ness check for rvalue reference binding is wrong",
    "CWG1139": "Rvalue reference binding to scalar xvalues",
    "CWG1140": "Incorrect redefinition of POD class",
    "CWG1141": "Non-static data member initializers have not been implemented",
    "CWG1142": "friend declaration of member function of containing class",
    "CWG1143": "Move semantics for *this have not been implemented",
    "CWG1144": "Remove access declarations",
    "CWG1145": "Defaulting and triviality",
    "CWG1146": "exception-specifications of defaulted functions",
    "CWG1147": "Destructors should be default nothrow",
    "CWG1148": "Copy elision and move construction of function parameters",
    "CWG1149": "Trivial non-public copy operators in subobjects",
    "CWG1150": "Inheriting constructors have not been implemented",
    "CWG1151": "Overload resolution with initializer-list and non-list constructors",
    "CWG1152": "Rules for determining existence of implicit conversion sequence",
    "CWG1153": "Type matching in address of overloaded function",
    "CWG1154": "Address of thread_local variable as non-type template argument",
    "CWG1155": "Internal-linkage non-type template arguments",
    "CWG1156": "Partial ordering in a non-call context",
    "CWG1157": "Partial ordering of function templates is still underspecified",
    "CWG1158": "Recursive instantiation via alias template",
    "CWG1159": "Class and enumeration definitions in template aliases",
    "CWG1160": "Definitions of template members and the current instantiation",
    "CWG1161": "Dependent nested-name-specifier in a pointer-to-member declarator",
    "CWG1162": "Dependent elaborated-type-specifiers in non-deduced contexts",
    "CWG1163": "extern template prevents inlining functions not marked inline",
    "CWG1164": "Partial ordering of f(T&) and f(T&&)",
    "CWG1165": "Exceptions when destroying array elements",
    "CWG1166": "exception-declarations that do not declare objects",
    "CWG1167": "function-try-blocks for destructors",
    "CWG1168": "Additional reasons to call std::terminate",
    "CWG1169": "Missing feature macro for strict pointer safety",
    "CWG1170": "Access checking during template argument deduction",
    "CWG1171": "Partial stack unwinding with noexcept violation",
    "CWG1172": "\u201cinstantiation-dependent\u201d constructs",
    "CWG1173": "Unclear specification of effects of signal handling",
    "CWG1174": "When is a pure virtual function \u201cused?\u201d",
    "CWG1175": "Disambiguating user-defined literals",
    "CWG1176": "Definition of release sequence",
    "CWG1177": "Intra-thread dependency-ordered-before",
    "CWG1178": "Deduction failure matching placement new",
    "CWG1179": "Cv-qualification of non-type template parameters",
    "CWG1180": "Over-aligned class types",
    "CWG1181": "What is a \u201cbuilt-in type?\u201d",
    "CWG1182": "Incorrect description of pack expansion syntax",
    "CWG1183": "Expansion of parameter packs in declarators",
    "CWG1184": "Argument conversions to nondeduced parameter types",
    "CWG1185": "Misleading description of language linkage and member function types",
    "CWG1186": "Non-dependent constexpr violations in function templates",
    "CWG1187": "Problems in initialization example",
    "CWG1188": "Type punning in constant expressions",
    "CWG1189": "Address of distinct base class subobjects",
    "CWG1190": "Operations on non-safely-derived pointers",
    "CWG1191": "Deleted subobject destructors and implicitly-defined constructors",
    "CWG1192": "Inadvertent change to ODR and templates",
    "CWG1193": "Use of address-constant pointers in constant expressions",
    "CWG1194": "Constexpr references",
    "CWG1195": "References to non-literal types in constexpr functions",
    "CWG1196": "Definition required for explicit instantiation after explicit specialization?",
    "CWG1197": "Constexpr arrays",
    "CWG1198": "Literal types and copy constructors",
    "CWG1199": "Deleted constexpr functions",
    "CWG1200": "Lookup rules for template parameters",
    "CWG1201": "Are deleted and defaulted functions definitions?",
    "CWG1202": "Calling virtual functions during destruction",
    "CWG1203": "Misleading note regarding initialized static data members",
    "CWG1204": "Specifiers in a for-range-declaration",
    "CWG1205": "Lvalue reference binding and function viability",
    "CWG1206": "Defining opaque enumeration members of class templates",
    "CWG1207": "Type of class member in trailing-return-type",
    "CWG1208": "Explicit noexcept in defaulted definition",
    "CWG1209": "Is a potentially-evaluated expression in a template definition a \u201cuse?\u201d",
    "CWG1210": "Injection of elaborated-type-specifier in enumeration scope",
    "CWG1211": "Misaligned lvalues",
    "CWG1212": "Non-function-call xvalues and decltype",
    "CWG1213": "Array subscripting and xvalues",
    "CWG1214": "Kinds of initializers",
    "CWG1215": "Definition of POD struct",
    "CWG1216": "Exceptions \u201callowed\u201d by a noexcept-specification",
    "CWG1217": "Are deleted functions implicitly noexcept?",
    "CWG1218": "What is the \u201ccurrently-handled exception\u201d in a multi-threaded program?",
    "CWG1219": "Non-static data member initializers in constant expressions",
    "CWG1220": "Looking up conversion-type-ids",
    "CWG1221": "Partial ordering and reference collapsing",
    "CWG1222": "Unnecessary restriction on auto array types",
    "CWG1223": "Syntactic disambiguation and trailing-return-types",
    "CWG1224": "constexpr defaulted copy constructors",
    "CWG1225": "constexpr constructors and virtual bases",
    "CWG1226": "Converting a braced-init-list default argument",
    "CWG1227": "Mixing immediate and non-immediate contexts in deduction failure",
    "CWG1228": "Copy-list-initialization and explicit constructors",
    "CWG1229": "Overload resolution with empty braced-init-list argument",
    "CWG1230": "Confusing description of ambiguity of destructor name",
    "CWG1231": "Variadic templates requiring an empty pack expansion",
    "CWG1232": "Creation of array temporaries using a braced-init-list",
    "CWG1233": "Pack expansions and dependent calls",
    "CWG1234": "abstract-declarator does not permit ... after ptr-operator",
    "CWG1235": "\u201cUnused\u201d ellipsis and default arguments in partial ordering",
    "CWG1236": "Inconsistently-interrelated examples",
    "CWG1237": "Deprecated implicit copy assignment in example",
    "CWG1238": "Overloading ambiguity binding reference to function",
    "CWG1239": "Hexadecimal floating-point literals vs user-defined literals",
    "CWG1240": "constexpr defaulted constructors",
    "CWG1241": "Which members does a destructor destroy?",
    "CWG1242": "Initializing variant class members",
    "CWG1243": "Misleading footnote regarding multiple-declarator declarations",
    "CWG1244": "Equivalence of alias templates and class templates",
    "CWG1245": "Matching declarations involving decltype",
    "CWG1246": "Non-deduced non-final parameter packs",
    "CWG1247": "Restriction on alias name appearing in type-id",
    "CWG1248": "Updating Annex C to C99",
    "CWG1249": "Cv-qualification of nested lambda capture",
    "CWG1250": "Cv-qualification of incomplete virtual function return types",
    "CWG1251": "C compatibility: casting to unqualified void*",
    "CWG1252": "Overloading member function templates based on dependent return type",
    "CWG1253": "Generic non-template members",
    "CWG1254": "odr-use vs template arguments and constexpr functions",
    "CWG1255": "Definition problems with constexpr functions",
    "CWG1256": "Unevaluated operands are not necessarily constant expressions",
    "CWG1257": "Instantiation via non-dependent references in uninstantiated templates",
    "CWG1258": "\u201cInstantiation context\u201d differs from dependent lookup rules",
    "CWG1259": "Deleting a POD via a pointer to base",
    "CWG1260": "Incorrect use of term \u201coverloaded\u201d in description of odr-use",
    "CWG1261": "Explicit handling of cv-qualification with non-class prvalues",
    "CWG1262": "Default template arguments and deduction failure",
    "CWG1263": "Mismatch between rvalue reference binding and overload resolution",
    "CWG1264": "Use of this in constexpr constructor",
    "CWG1265": "Mixed use of the auto specifier",
    "CWG1266": "user-defined-integer-literal overflow",
    "CWG1267": "Rvalue reference types in exception-specifications",
    "CWG1268": "reinterpret_cast of an xvalue operand",
    "CWG1269": "dynamic_cast of an xvalue operand",
    "CWG1270": "Brace elision in array temporary initialization",
    "CWG1271": "Imprecise wording regarding dependent types",
    "CWG1272": "Implicit definition of static data member of const literal type",
    "CWG1273": "Accessibility and function signatures",
    "CWG1274": "Common nonterminal for expression and braced-init-list",
    "CWG1275": "Incorrect comment in example of template parameter pack restriction",
    "CWG1276": "Reference to stdint.h",
    "CWG1277": "Lax definition of intmax_t and uintmax_t",
    "CWG1278": "Incorrect treatment of contrived object",
    "CWG1279": "Additional differences between C++ 2003 and C++ 2011",
    "CWG1280": "Object reallocation and reference members",
    "CWG1281": "Virtual and dependent base classes",
    "CWG1282": "Underspecified destructor exception-specification",
    "CWG1283": "Static data members of classes with typedef name for linkage purposes",
    "CWG1284": "Should the lifetime of an array be independent of that of its elements?",
    "CWG1285": "Trivial destructors and object lifetime",
    "CWG1286": "Equivalence of alias templates",
    "CWG1287": "Direct initialization vs \u201cimplicit\u201d conversion in reference binding",
    "CWG1288": "Reference list initialization",
    "CWG1289": "Can an alias template name the current instantiation?",
    "CWG1290": "Lifetime of the underlying array of an initializer_list member",
    "CWG1291": "Looking up a conversion-type-id",
    "CWG1292": "Dependent calls with braced-init-lists containing a pack expansion",
    "CWG1293": "String literals in constant expressions",
    "CWG1294": "Side effects in dynamic/static initialization",
    "CWG1295": "Binding a reference to an rvalue bit-field",
    "CWG1296": "Ill-formed template declarations (not just definitions)",
    "CWG1297": "Misplaced function attribute-specifier",
    "CWG1298": "Incorrect example in overload resolution",
    "CWG1299": "\u201cTemporary objects\u201d vs \u201ctemporary expressions\u201d",
    "CWG1300": "T() for array types",
    "CWG1301": "Value initialization of union",
    "CWG1302": "noexcept applied to expression of type void",
    "CWG1303": "C language linkage for template with internal linkage",
    "CWG1304": "Omitted array bound with string initialization",
    "CWG1305": "alignof applied to array of unknown size",
    "CWG1306": "Modifying an object within a const member function",
    "CWG1307": "Overload resolution based on size of array initializer-list",
    "CWG1308": "Completeness of class type within an exception-specification",
    "CWG1309": "Incorrect note regarding lookup of a member of the current instantiation",
    "CWG1310": "What is an \u201cacceptable lookup result?\u201d",
    "CWG1311": "Volatile lvalues in constant expressions",
    "CWG1312": "Simulated reinterpret_cast in constant expressions",
    "CWG1313": "Undefined pointer arithmetic in constant expressions",
    "CWG1314": "Pointer arithmetic within standard-layout objects",
    "CWG1315": "Restrictions on non-type template arguments in partial specializations",
    "CWG1316": "constexpr function requirements and class scope",
    "CWG1317": "Unnamed scoped enumerations",
    "CWG1318": "Syntactic ambiguities with final",
    "CWG1319": "Error in pack expansion example",
    "CWG1320": "Converting scoped enumerations to bool",
    "CWG1321": "Equivalency of dependent calls",
    "CWG1322": "Function parameter type decay in templates",
    "CWG1323": "Nonexistent nonterminal in alignment-specifier grammar",
    "CWG1324": "Value initialization and defaulted constructors",
    "CWG1325": "Omitted declarator in friend declarations",
    "CWG1326": "Deducing an array bound from an initializer-list",
    "CWG1327": "virt-specifier in a defaulted definition",
    "CWG1328": "Conflict in reference binding vs overload resolution",
    "CWG1329": "Recursive deduction substitutions",
    "CWG1330": "Delayed instantiation of noexcept specifiers",
    "CWG1331": "const mismatch with defaulted copy constructor",
    "CWG1332": "Handling of invalid universal-character-names",
    "CWG1333": "Omission of const in a defaulted copy constructor",
    "CWG1334": "Layout compatibility and cv-qualification",
    "CWG1335": "Stringizing, extended characters, and universal-character-names",
    "CWG1336": "Definition of \u201cconverting constructor\u201d",
    "CWG1337": "Partial ordering and non-deduced parameters",
    "CWG1338": "Aliasing and allocation functions",
    "CWG1339": "Parenthesized braced-init-list and arrays",
    "CWG1340": "Complete type in member pointer expressions",
    "CWG1341": "Bit-field initializers",
    "CWG1342": "Order of initialization with multiple declarators",
    "CWG1343": "Sequencing of non-class initialization",
    "CWG1344": "Adding new special member functions to a class via default arguments",
    "CWG1345": "Initialization of anonymous union class members",
    "CWG1346": "expression-list initializers and the auto specifier",
    "CWG1347": "Consistency of auto in multiple-declarator declarations",
    "CWG1348": "Use of auto in a trailing-return-type",
    "CWG1349": "Consistency of alias template redeclarations",
    "CWG1350": "Incorrect exception specification for inherited constructors",
    "CWG1351": "Problems with implicitly-declared exception-specifications",
    "CWG1352": "Inconsistent class scope and completeness rules",
    "CWG1353": "Array and variant members and deleted special member functions",
    "CWG1354": "Destructor exceptions for temporaries in noexcept expressions",
    "CWG1355": "Aggregates and \u201cuser-provided\u201d constructors",
    "CWG1356": "Exception specifications of copy assignment operators with virtual bases",
    "CWG1357": "brace-or-equal-initializers for function and typedef members",
    "CWG1358": "Unintentionally ill-formed constexpr function template instances",
    "CWG1359": "constexpr union constructors",
    "CWG1360": "constexpr defaulted default constructors",
    "CWG1361": "Requirement on brace-or-equal-initializers of literal types",
    "CWG1362": "Complete type required for implicit conversion to T&",
    "CWG1363": "Triviality vs multiple default constructors",
    "CWG1364": "constexpr function parameters",
    "CWG1365": "Calling undefined constexpr functions",
    "CWG1366": "Deleted constexpr constructors and virtual base classes",
    "CWG1367": "Use of this in a constant expression",
    "CWG1368": "Value initialization and defaulted constructors (part 2)",
    "CWG1369": "Function invocation substitution of this",
    "CWG1370": "identifier-list cannot contain ellipsis",
    "CWG1371": "Deduction from T&& in return types",
    "CWG1372": "Cross-references incorrect in conversion function template argument deduction",
    "CWG1373": "Overload resolution changes matching reference-binding changes",
    "CWG1374": "Qualification conversion vs difference in reference binding",
    "CWG1375": "Reference to anonymous union?",
    "CWG1376": "static_cast of temporary to rvalue reference",
    "CWG1377": "Access declarations not mentioned in Annex C",
    "CWG1378": "When is an instantiation required?",
    "CWG1379": "Is std::initializer_list an aggregate?",
    "CWG1380": "Type definitions in template-parameter parameter-declarations",
    "CWG1381": "Implicitly-declared special member functions and default nothrow",
    "CWG1382": "Dead code for constructor names",
    "CWG1383": "Clarifying discarded-value expressions",
    "CWG1384": "reinterpret_cast in constant expressions",
    "CWG1385": "Syntactic forms of conversion functions for surrogate call functions",
    "CWG1386": "Explicitly-specified partial argument list with multiple parameter packs",
    "CWG1387": "Missing non-deduced context for decltype",
    "CWG1388": "Missing non-deduced context following a function parameter pack",
    "CWG1389": "Recursive reference in trailing-return-type",
    "CWG1390": "Dependency of alias template specializations",
    "CWG1391": "Conversions to parameter types with non-deduced template arguments",
    "CWG1392": "Explicit conversion functions for references and non-references",
    "CWG1393": "Pack expansions in using-declarations",
    "CWG1394": "Incomplete types as parameters of deleted functions",
    "CWG1395": "Partial ordering of variadic templates reconsidered",
    "CWG1396": "Deferred instantiation and checking of non-static data member initializers",
    "CWG1397": "Class completeness in non-static data member initializers",
    "CWG1398": "Non-type template parameters of type std::nullptr_t",
    "CWG1399": "Deduction with multiple function parameter packs",
    "CWG1400": "Function pointer equality",
    "CWG1401": "Similar types and reference compatibility",
    "CWG1402": "Move functions too often deleted",
    "CWG1403": "Universal-character-names in comments",
    "CWG1404": "Object reallocation in unions",
    "CWG1405": "constexpr and mutable members of literal types",
    "CWG1406": "ref-qualifiers and added parameters of non-static member function templates",
    "CWG1407": "Integral to bool conversion in converted constant expressions",
    "CWG1408": "What is \u201cthe same aggregate initialization?\u201d",
    "CWG1409": "What is the second standard conversion sequence of a list-initialization sequence?",
    "CWG1410": "Reference overload tiebreakers should apply to rvalue references",
    "CWG1411": "More on global scope :: in nested-name-specifier",
    "CWG1412": "Problems in specifying pointer conversions",
    "CWG1413": "Missing cases of value-dependency",
    "CWG1414": "Binding an rvalue reference to a reference-unrelated lvalue",
    "CWG1415": "Missing prohibition of block-scope definition of extern object",
    "CWG1416": "Function cv-qualifiers and typeid",
    "CWG1417": "Pointers/references to functions with cv-qualifiers or ref-qualifier",
    "CWG1418": "Type of initializer_list backing array",
    "CWG1419": "Evaluation order in aggregate initialization",
    "CWG1420": "Abstract final classes",
    "CWG1421": "Full expressions and aggregate initialization",
    "CWG1422": "Type of character literals containing universal-character-names",
    "CWG1423": "Convertibility of nullptr to bool",
    "CWG1424": "When must sub-object destructors be accessible?",
    "CWG1425": "Base-class subobjects of standard-layout structs",
    "CWG1426": "Allowing additional parameter types in defaulted functions",
    "CWG1427": "Default constructor and deleted or inaccessible destructors",
    "CWG1428": "Dynamic const objects",
    "CWG1429": "Scope of a member template's template parameter",
    "CWG1430": "Pack expansion into fixed alias template parameter list",
    "CWG1431": "Exceptions from other than throw-expressions",
    "CWG1432": "Newly-ambiguous variadic template expansions",
    "CWG1433": "trailing-return-type and point of declaration",
    "CWG1434": "Parenthesized braced-init-list",
    "CWG1435": "template-id as the declarator for a class template constructor",
    "CWG1436": "Interaction of constant expression changes with preprocessor expressions",
    "CWG1437": "alignas in alias-declaration",
    "CWG1438": "Non-dereference use of invalid pointers",
    "CWG1439": "Lookup and friend template declarations",
    "CWG1440": "Acceptable decltype-specifiers used as nested-name-specifiers",
    "CWG1441": "Unclear wording for signal handler restrictions",
    "CWG1442": "Argument-dependent lookup in the range-based for",
    "CWG1443": "Default arguments and non-static data members",
    "CWG1444": "Type adjustments of non-type template parameters",
    "CWG1445": "Argument-dependent lookup of begin and end",
    "CWG1446": "Member function with no ref-qualifier and non-member function with rvalue reference",
    "CWG1447": "static_cast of bit-field lvalue to rvalue reference",
    "CWG1448": "Integral values of type bool",
    "CWG1449": "Narrowing conversion of negative value to unsigned type",
    "CWG1450": "INT_MIN % -1",
    "CWG1451": "Objects with no linkage in non-type template arguments",
    "CWG1452": "Value-initialized objects may be constants",
    "CWG1453": "Volatile members in literal classes?",
    "CWG1454": "Passing constants through constexpr functions via references",
    "CWG1455": "Lvalue converted constant expressions",
    "CWG1456": "Address constant expression designating the one-past-the-end address",
    "CWG1457": "Undefined behavior in left-shift",
    "CWG1458": "Address of incomplete type vs operator&()",
    "CWG1459": "Reference-binding tiebreakers in overload resolution",
    "CWG1460": "What is an empty union?",
    "CWG1461": "Narrowing conversions to bit-fields",
    "CWG1462": "Deduction failure vs \u201cill-formed, no diagnostic required\u201d",
    "CWG1463": "extern \"C\" alias templates",
    "CWG1464": "Negative array bound in a new-expression",
    "CWG1465": "noexcept and std::bad_array_new_length",
    "CWG1466": "Visible sequences of side effects are redundant",
    "CWG1467": "List-initialization of aggregate from same-type object",
    "CWG1468": "typeid, overload resolution, and implicit lambda capture",
    "CWG1469": "Omitted bound in array new-expression",
    "CWG1470": "Thread migration",
    "CWG1471": "Nested type of non-dependent base",
    "CWG1472": "odr-use of reference variables",
    "CWG1473": "Syntax of literal-operator-id",
    "CWG1474": "User-defined literals and <inttypes.h> format macros",
    "CWG1475": "Errors in [[carries_dependency]] example",
    "CWG1476": "Definition of user-defined type",
    "CWG1477": "Definition of a friend outside its namespace",
    "CWG1478": "template keyword for dependent template template arguments",
    "CWG1479": "Literal operators and default arguments",
    "CWG1480": "Constant initialization via non-constant temporary",
    "CWG1481": "Increment/decrement operators with reference parameters",
    "CWG1482": "Point of declaration of enumeration",
    "CWG1483": "Non-dependent static_assert-declarations",
    "CWG1484": "Unused local classes of function templates",
    "CWG1485": "Out-of-class definition of member unscoped opaque enumeration",
    "CWG1486": "Base-derived conversion in member pointer deduction",
    "CWG1487": "When are inheriting constructors declared?",
    "CWG1488": "abstract-pack-declarators in type-ids",
    "CWG1489": "Is value-initialization of an array constant initialization?",
    "CWG1490": "List-initialization from a string literal",
    "CWG1491": "Move construction and rvalue reference members",
    "CWG1492": "Exception specifications on template destructors",
    "CWG1493": "Criteria for move-construction",
    "CWG1494": "Temporary initialization for reference binding in list-initialization",
    "CWG1495": "Partial specialization of variadic class template",
    "CWG1496": "Triviality with deleted and missing default constructors",
    "CWG1497": "Aggregate initialization with parenthesized string literal",
    "CWG1498": "Lifetime of temporaries in range-based for",
    "CWG1499": "Missing case for deleted move assignment operator",
    "CWG1500": "Name lookup of dependent conversion function",
    "CWG1501": "Nested braces in list-initialization",
    "CWG1502": "Value initialization of unions with member initializers",
    "CWG1503": "Exceptions during copy to exception object",
    "CWG1504": "Pointer arithmetic after derived-base conversion",
    "CWG1505": "Direct binding of reference to temporary in list-initialization",
    "CWG1506": "Value category of initializer_list object",
    "CWG1507": "Value initialization with trivial inaccessible default constructor",
    "CWG1508": "Template initializer-list constructors",
    "CWG1509": "Definition of \u201cnon-template function\u201d",
    "CWG1510": "cv-qualified references via decltype",
    "CWG1511": "const volatile variables and the one-definition rule",
    "CWG1512": "Pointer comparison vs qualification conversions",
    "CWG1513": "initializer_list deduction failure",
    "CWG1514": "Ambiguity between enumeration definition and zero-length bit-field",
    "CWG1515": "Modulo 2n arithmetic for implicitly-unsigned types",
    "CWG1516": "Definition of \u201cvirtual function call\u201d",
    "CWG1517": "Unclear/missing description of behavior during construction/destruction",
    "CWG1518": "Explicit default constructors and copy-list-initialization",
    "CWG1519": "Conflicting default and variadic constructors",
    "CWG1520": "Alias template specialization vs pack expansion",
    "CWG1521": "T{expr} with reference types",
    "CWG1522": "Access checking for initializer_list array initialization",
    "CWG1523": "Point of declaration in range-based for",
    "CWG1524": "Incompletely-defined class template base",
    "CWG1525": "Array bound inference in temporary array",
    "CWG1526": "Dependent-class lookup in the current instantiation",
    "CWG1527": "Assignment from braced-init-list",
    "CWG1528": "Repeated cv-qualifiers in declarators",
    "CWG1529": "Nomenclature for variable vs reference non-static data member",
    "CWG1530": "Member access in out-of-lifetime objects",
    "CWG1531": "Definition of \u201caccess\u201d (verb)",
    "CWG1532": "Explicit instantiation and member templates",
    "CWG1533": "Function pack expansion for member initialization",
    "CWG1534": "cv-qualification of prvalue of type \u201carray of class\u201d",
    "CWG1535": "typeid in core constant expressions",
    "CWG1536": "Overload resolution with temporary from initializer list",
    "CWG1537": "Optional compile-time evaluation of constant expressions",
    "CWG1538": "C-style cast in braced-init-list assignment",
    "CWG1539": "Definition of \u201ccharacter type\u201d",
    "CWG1540": "Use of address constants in constant expressions",
    "CWG1541": "cv void return types",
    "CWG1542": "Compound assignment of braced-init-list",
    "CWG1543": "Implicit conversion sequence for empty initializer list",
    "CWG1544": "Linkage of member of unnamed namespace",
    "CWG1545": "friend function templates defined in class templates",
    "CWG1546": "Errors in function template default arguments",
    "CWG1547": "typename keyword in alias-declarations",
    "CWG1548": "Copy/move construction and conversion functions",
    "CWG1549": "Overloaded comma operator with void operand",
    "CWG1550": "Parenthesized throw-expression operand of conditional-expression",
    "CWG1551": "Wording problems in using-declaration specification",
    "CWG1552": "exception-specifications and defaulted special member functions",
    "CWG1553": "sizeof and xvalue bit-fields",
    "CWG1554": "Access and alias templates",
    "CWG1555": "Language linkage and function type compatibility",
    "CWG1556": "Constructors and explicit conversion functions in direct initialization",
    "CWG1557": "Language linkage of converted lambda function pointer",
    "CWG1558": "Unused arguments in alias template specializations",
    "CWG1559": "String too long in initializer list of new-expression",
    "CWG1560": "Gratuitous lvalue-to-rvalue conversion in conditional-expression with throw-expression operand",
    "CWG1561": "Aggregates with empty base classes",
    "CWG1562": "Non-static data member initializers and union ctor-initializer",
    "CWG1563": "List-initialization and overloaded function disambiguation",
    "CWG1564": "Template argument deduction from an initializer list",
    "CWG1565": "Copy elision and lifetime of initializer_list underlying array",
    "CWG1566": "Should new std::initializer_list<T> be ill-formed?",
    "CWG1567": "Inheriting constructors and copy/move constructors",
    "CWG1568": "Temporary lifetime extension with intervening cast",
    "CWG1569": "Deducing a function parameter pack before ellipsis",
    "CWG1570": "Address of subobject as non-type template argument",
    "CWG1571": "cv-qualification for indirect reference binding via conversion function",
    "CWG1572": "Incorrect example for rvalue reference binding via conversion function",
    "CWG1573": "Inherited constructor characteristics",
    "CWG1574": "Explicitly-defaulted constexpr functions in wrapper templates",
    "CWG1575": "Incorrect definition of \u201cstrict pointer safety\u201d",
    "CWG1576": "Discarded-value volatile xvalues",
    "CWG1577": "Unnecessary restrictions on partial specializations",
    "CWG1578": "Value-initialization of aggregates",
    "CWG1579": "Return by converting move constructor",
    "CWG1580": "Default arguments in explicit instantiations",
    "CWG1581": "When are constexpr member functions defined?",
    "CWG1582": "Template default arguments and deduction failure",
    "CWG1583": "Incorrect example of unspecified behavior",
    "CWG1584": "Deducing function types from cv-qualified types",
    "CWG1585": "Value category of member access of rvalue reference member",
    "CWG1586": "Naming a destructor via decltype",
    "CWG1587": "constexpr initialization and nested anonymous unions",
    "CWG1588": "Deducing cv-qualified auto",
    "CWG1589": "Ambiguous ranking of list-initialization sequences",
    "CWG1590": "Bypassing non-copy/move constructor copying",
    "CWG1591": "Deducing array bound and element type from initializer list",
    "CWG1592": "When do template parameters match?",
    "CWG1593": "\u201cParameter type\u201d of special member functions",
    "CWG1594": "Lazy declaration of special members vs overload errors",
    "CWG1595": "Constructors \u201cinvolved in\u201d subobject initialization",
    "CWG1596": "Non-array objects as array[1]",
    "CWG1597": "Misleading constexpr example",
    "CWG1598": "Criterion for equality of pointers to members",
    "CWG1599": "Lifetime of initializer_list underlying array",
    "CWG1600": "Erroneous reference initialization in example",
    "CWG1601": "Promotion of enumeration with fixed underlying type",
    "CWG1602": "Linkage of specialization vs linkage of template arguments",
    "CWG1603": "Errors resulting from giving unnamed namespaces internal linkage",
    "CWG1604": "Double temporaries in reference initialization",
    "CWG1605": "Misleading parenthetical comment for explicit destructor call",
    "CWG1606": "sizeof closure class",
    "CWG1607": "Lambdas in template parameters",
    "CWG1608": "Operator lookup in trailing return type",
    "CWG1609": "Default arguments and function parameter packs",
    "CWG1610": "Cv-qualification in deduction of reference to array",
    "CWG1611": "Deleted default constructor for abstract class",
    "CWG1612": "Implicit lambda capture and anonymous unions",
    "CWG1613": "Constant expressions and lambda capture",
    "CWG1614": "Address of pure virtual function vs odr-use",
    "CWG1615": "Alignment of types, variables, and members",
    "CWG1616": "Disambiguation parsing and template parameters",
    "CWG1617": "alignas and non-defining declarations",
    "CWG1618": "Gratuitously-unsigned underlying enum type",
    "CWG1619": "Definition of current instantiation",
    "CWG1620": "User-defined literals and extended integer types",
    "CWG1621": "Member initializers in anonymous unions",
    "CWG1622": "Empty aggregate initializer for union",
    "CWG1623": "Deleted default union constructor and member initializers",
    "CWG1624": "Destruction of union members with member initializers",
    "CWG1625": "Adding spaces between tokens in stringizing",
    "CWG1626": "constexpr member functions in brace-or-equal-initializers",
    "CWG1627": "Agreement of dependent alignas specifiers",
    "CWG1628": "Deallocation function templates",
    "CWG1629": "Can a closure class be a literal type?",
    "CWG1630": "Multiple default constructor templates",
    "CWG1631": "Incorrect overload resolution for single-element initializer-list",
    "CWG1632": "Lambda capture in member initializers",
    "CWG1633": "Copy-initialization in member initialization",
    "CWG1634": "Temporary storage duration",
    "CWG1635": "How similar are template default arguments to function default arguments?",
    "CWG1636": "Bits required for negative enumerator values",
    "CWG1637": "Recursion in constexpr template default constructor",
    "CWG1638": "Declaring an explicit specialization of a scoped enumeration",
    "CWG1639": "exception-specifications and pointer/pointer-to-member expressions",
    "CWG1640": "Array of abstract instance of class template",
    "CWG1641": "Assignment in member initializer",
    "CWG1642": "Missing requirements for prvalue operands",
    "CWG1643": "Default arguments for template parameter packs",
    "CWG1644": "Equivalent exception-specifications in function template declarations",
    "CWG1645": "Identical inheriting constructors via default arguments",
    "CWG1646": "decltype-specifiers, abstract classes, and deduction failure",
    "CWG1647": "Type agreement of non-type template arguments in partial specializations",
    "CWG1648": "thread_local vs block extern declarations",
    "CWG1649": "Error in the syntax of mem-initializer-list",
    "CWG1650": "Class prvalues in reference initialization",
    "CWG1651": "Lifetime extension of temporary via reference to subobject",
    "CWG1652": "Object addresses in constexpr expressions",
    "CWG1653": "Removing deprecated increment of bool",
    "CWG1654": "Literal types and constexpr defaulted constructors",
    "CWG1655": "Line endings in raw string literals",
    "CWG1656": "Encoding of numerically-escaped characters",
    "CWG1657": "Attributes for namespaces and enumerators",
    "CWG1658": "Deleted default constructor for abstract class via destructor",
    "CWG1659": "Initialization order of thread_local template static data members",
    "CWG1660": "member-declaration requirements and unnamed bit-fields",
    "CWG1661": "Preservation of infinite loops",
    "CWG1662": "Capturing function parameter packs",
    "CWG1663": "Capturing an empty pack expansion",
    "CWG1664": "Argument-dependent lookup of lambdas used in default arguments",
    "CWG1665": "Declaration matching in explicit instantiations",
    "CWG1666": "Address constant expressions",
    "CWG1667": "Function exiting via exception called by destructor during unwinding",
    "CWG1668": "Parameter type determination still not clear enough",
    "CWG1669": "auto return type for main",
    "CWG1670": "auto as conversion-type-id",
    "CWG1671": "Unclear rules for deduction with cv-qualification",
    "CWG1672": "Layout compatibility with multiple empty bases",
    "CWG1673": "Clarifying overload resolution for the second step of copy-initialization",
    "CWG1674": "Return type deduction for address of function",
    "CWG1675": "Size limit for automatic array object",
    "CWG1676": "auto return type for allocation and deallocation functions",
    "CWG1677": "Constant initialization via aggregate initialization",
    "CWG1678": "Naming the type of an array of runtime bound",
    "CWG1679": "Range-based for and array of runtime bound",
    "CWG1680": "Including <initializer_list> for range-based for",
    "CWG1681": "init-captures and nested lambdas",
    "CWG1682": "Overly-restrictive rules on function templates as allocation functions",
    "CWG1683": "Incorrect example after constexpr changes",
    "CWG1684": "Static constexpr member functions for non-literal classes",
    "CWG1685": "Value category of noexcept expression",
    "CWG1686": "Which variables are \u201cexplicitly declared const?\u201d",
    "CWG1687": "Conversions of operands of built-in operators",
    "CWG1688": "Volatile constexpr variables",
    "CWG1689": "Syntactic nonterminal for operand of alignas",
    "CWG1690": "Associated namespace for local type",
    "CWG1691": "Argument-dependent lookup and opaque enumerations",
    "CWG1692": "Associated namespaces of doubly-nested classes",
    "CWG1693": "Superfluous semicolons in class definitions",
    "CWG1694": "Restriction on reference to temporary as a constant expression",
    "CWG1695": "Lifetime extension via init-capture",
    "CWG1696": "Temporary lifetime and non-static data member initializers",
    "CWG1697": "Lifetime extension and copy elision",
    "CWG1698": "Files ending in \\",
    "CWG1699": "Does befriending a class befriend its friends?",
    "CWG1700": "Does the special rvalue-reference deduction apply to alias templates?",
    "CWG1701": "Array vs sequence in object representation",
    "CWG1702": "Rephrasing the definition of \u201canonymous union\u201d",
    "CWG1703": "Language linkage of names of functions with internal linkage",
    "CWG1704": "Type checking in explicit instantiation of variable templates",
    "CWG1705": "Unclear specification of \u201cmore specialized\u201d",
    "CWG1706": "alignas pack expansion syntax",
    "CWG1707": "template in elaborated-type-specifier without nested-name-specifier",
    "CWG1708": "overly-strict requirements for names with C language linkage",
    "CWG1709": "Stringizing raw string literals containing newline",
    "CWG1710": "Missing template keyword in class-or-decltype",
    "CWG1711": "Missing specification of variable template partial specializations",
    "CWG1712": "constexpr variable template declarations",
    "CWG1713": "Linkage of variable template specializations",
    "CWG1714": "odr-use of this from a local class",
    "CWG1715": "Access and inherited constructor templates",
    "CWG1716": "When are default arguments evaluated?",
    "CWG1717": "Missing specification of type of binary literal",
    "CWG1718": "Macro invocation spanning end-of-file",
    "CWG1719": "Layout compatibility and cv-qualification revisited",
    "CWG1720": "Macro invocation in #include directive",
    "CWG1721": "Diagnosing ODR violations for static data members",
    "CWG1722": "Should lambda to function pointer conversion function be noexcept?",
    "CWG1723": "Multicharacter user-defined character literals",
    "CWG1724": "Unclear rules for deduction failure",
    "CWG1725": "Trailing return type with nested function declarator",
    "CWG1726": "Declarator operators and conversion function",
    "CWG1727": "Type of a specialization of a variable template",
    "CWG1728": "Type of an explicit instantiation of a variable template",
    "CWG1729": "Matching declarations and definitions of variable templates",
    "CWG1730": "Can a variable template have an unnamed type?",
    "CWG1731": "is_trivially_X and definitions of special member functions",
    "CWG1732": "Defining types in conditions and range-based for statements",
    "CWG1733": "Return type and value for operator= with ref-qualifier",
    "CWG1734": "Nontrivial deleted copy functions",
    "CWG1735": "Out-of-range literals in user-defined-literals",
    "CWG1736": "Inheriting constructor templates in a local class",
    "CWG1737": "Type dependence of call to a member of the current instantiation",
    "CWG1738": "Explicit instantiation/specialization of inheriting constructor templates",
    "CWG1739": "Conversion of floating point to enumeration",
    "CWG1740": "Disambiguation of noexcept",
    "CWG1741": "odr-use of class object in lvalue-to-rvalue conversion",
    "CWG1742": "using-declarations and scoped enumerators",
    "CWG1743": "init-captures in nested lambdas",
    "CWG1744": "Unordered initialization for variable template specializations",
    "CWG1745": "thread_local constexpr variable",
    "CWG1746": "Are volatile scalar types trivially copyable?",
    "CWG1747": "Constant initialization of reference to function",
    "CWG1748": "Placement new with a null pointer",
    "CWG1749": "Confusing definition for constant initializer",
    "CWG1750": "\u201cArgument\u201d vs \u201cparameter\u201d",
    "CWG1751": "Non-trivial operations vs non-trivial initialization",
    "CWG1752": "Right-recursion in mem-initializer-list",
    "CWG1753": "decltype-specifier in nested-name-specifier of destructor",
    "CWG1754": "Declaration of partial specialization of static data member template",
    "CWG1755": "Out-of-class partial specializations of member templates",
    "CWG1756": "Direct-list-initialization of a non-class object",
    "CWG1757": "Const integral subobjects",
    "CWG1758": "Explicit conversion in copy/move list initialization",
    "CWG1759": "UTF-8 code units in plain char",
    "CWG1760": "Access of member corresponding to init-capture",
    "CWG1761": "Runtime check on size of automatic array",
    "CWG1762": "Reserved identifier used in literal-operator-id example",
    "CWG1763": "Length mismatch in template type deduction",
    "CWG1764": "Hiding of function from using-declaration by signature",
    "CWG1765": "Overflow of enumeration used as enumerator value",
    "CWG1766": "Values outside the range of the values of an enumeration",
    "CWG1767": "Scoped enumeration in a switch statement",
    "CWG1768": "Zero-element array of runtime bound",
    "CWG1769": "Catching a base class of the exception object",
    "CWG1770": "Type matching of non-type template parameters and arguments",
    "CWG1771": "Restricted lookup in nested-name-specifier",
    "CWG1772": "__func__ in a lambda body",
    "CWG1773": "Out-of-lifetime lvalue-to-rvalue conversion",
    "CWG1774": "Discrepancy between subobject destruction and stack unwinding",
    "CWG1775": "Undefined behavior of line splice in raw string literal",
    "CWG1776": "Replacement of class objects containing reference members",
    "CWG1777": "Empty pack expansion in dynamic-exception-specification",
    "CWG1778": "exception-specification in explicitly-defaulted functions",
    "CWG1779": "Type dependency of __func__",
    "CWG1780": "Explicit instantiation/specialization of generic lambda operator()",
    "CWG1781": "Converting from nullptr_t to bool in overload resolution",
    "CWG1782": "Form of initialization for nullptr_t to bool conversion",
    "CWG1783": "Why are virtual destructors non-trivial?",
    "CWG1784": "Concurrent execution during static local initialization",
    "CWG1785": "Conflicting diagnostic requirements for template definitions",
    "CWG1786": "Effect of merging allocations on memory leakage",
    "CWG1787": "Uninitialized unsigned char values",
    "CWG1788": "Sized deallocation of array of non-class type",
    "CWG1789": "Array reference vs array decay in overload resolution",
    "CWG1790": "Ellipsis following function parameter pack",
    "CWG1791": "Incorrect restrictions on cv-qualifier-seq and ref-qualifier",
    "CWG1792": "Incorrect example of explicit specialization of member enumeration",
    "CWG1793": "thread_local in explicit specializations",
    "CWG1794": "template keyword and alias templates",
    "CWG1795": "Disambiguating original-namespace-definition and extension-namespace-definition",
    "CWG1796": "Is all-bits-zero for null characters a meaningful requirement?",
    "CWG1797": "Are all bit patterns of unsigned char distinct numbers?",
    "CWG1798": "exception-specifications of template arguments",
    "CWG1799": "mutable and non-explicit const qualification",
    "CWG1800": "Pointer to member of nested anonymous union",
    "CWG1801": "Kind of expression referring to member of anonymous union",
    "CWG1802": "char16_t string literals and surrogate pairs",
    "CWG1803": "opaque-enum-declaration as member-declaration",
    "CWG1804": "Partial specialization and friendship",
    "CWG1805": "Conversions of array operands in conditional-expressions",
    "CWG1806": "Virtual bases and move-assignment",
    "CWG1807": "Order of destruction of array elements after an exception",
    "CWG1808": "Constructor templates vs default constructors",
    "CWG1809": "Narrowing and template argument deduction",
    "CWG1810": "Invalid ud-suffixes",
    "CWG1811": "Lookup of deallocation function in a virtual destructor definition",
    "CWG1812": "Omission of template in a typename-specifier",
    "CWG1813": "Direct vs indirect bases in standard-layout classes",
    "CWG1814": "Default arguments in lambda-expressions",
    "CWG1815": "Lifetime extension in aggregate initialization",
    "CWG1816": "Unclear specification of bit-field values",
    "CWG1817": "Linkage specifications and nested scopes",
    "CWG1818": "Visibility and inherited language linkage",
    "CWG1819": "Acceptable scopes for definition of partial specialization",
    "CWG1820": "Qualified typedef names",
    "CWG1821": "Qualified redeclarations in a class member-specification",
    "CWG1822": "Lookup of parameter names in lambda-expressions",
    "CWG1823": "String literal uniqueness in inline functions",
    "CWG1824": "Completeness of return type vs point of instantiation",
    "CWG1825": "Partial ordering between variadic and non-variadic function templates",
    "CWG1826": "const floating-point in constant expressions",
    "CWG1827": "Reference binding with ambiguous conversions",
    "CWG1828": "nested-name-specifier ambiguity",
    "CWG1829": "Dependent unnamed types",
    "CWG1830": "Repeated specifiers",
    "CWG1831": "Explicitly vs implicitly deleted move constructors",
    "CWG1832": "Casting to incomplete enumeration",
    "CWG1833": "friend declarations naming implicitly-declared member functions",
    "CWG1834": "Constant initialization binding a reference to an xvalue",
    "CWG1835": "Dependent member lookup before <",
    "CWG1836": "Use of class type being defined in trailing-return-type",
    "CWG1837": "Use of this in friend and local class declarations",
    "CWG1838": "Definition via unqualified-id and using-declaration",
    "CWG1839": "Lookup of block-scope extern declarations",
    "CWG1840": "Non-deleted explicit specialization of deleted function template",
    "CWG1841": "< following template injected-class-name",
    "CWG1842": "Unevaluated operands and \u201ccarries a dependency\u201d",
    "CWG1843": "Bit-field in conditional operator with throw operand",
    "CWG1844": "Defining \u201cimmediate context\u201d",
    "CWG1845": "Point of instantiation of a variable template specialization",
    "CWG1846": "Declaring explicitly-defaulted implicitly-deleted functions",
    "CWG1847": "Clarifying compatibility during partial ordering",
    "CWG1848": "Parenthesized constructor and destructor declarators",
    "CWG1849": "Variable templates and the ODR",
    "CWG1850": "Differences between definition context and point of instantiation",
    "CWG1851": "decltype(auto) in new-expressions",
    "CWG1852": "Wording issues regarding decltype(auto)",
    "CWG1853": "Defining \u201callocated storage\u201d",
    "CWG1854": "Disallowing use of implicitly-deleted functions",
    "CWG1855": "Out-of-lifetime access to nonstatic data members",
    "CWG1856": "Indirect nested classes of class templates",
    "CWG1857": "Additional questions about bits",
    "CWG1858": "Comparing pointers to union members",
    "CWG1859": "UTF-16 in char16_t string literals",
    "CWG1860": "What is a \u201cdirect member?\u201d",
    "CWG1861": "Values of a bit-field",
    "CWG1862": "Determining \u201ccorresponding members\u201d for friendship",
    "CWG1863": "Requirements on thrown object type to support std::current_exception()",
    "CWG1864": "List-initialization of array objects",
    "CWG1865": "Pointer arithmetic and multi-level qualification conversions",
    "CWG1866": "Initializing variant members with non-trivial destructors",
    "CWG1867": "Function/expression ambiguity with qualified parameter name",
    "CWG1868": "Meaning of \u201cplaceholder type\u201d",
    "CWG1869": "thread_local vs linkage-specifications",
    "CWG1870": "Contradictory wording about definitions vs explicit specialization/instantiation",
    "CWG1871": "Non-identifier characters in ud-suffix",
    "CWG1872": "Instantiations of constexpr templates that cannot appear in constant expressions",
    "CWG1873": "Protected member access from derived class friends",
    "CWG1874": "Type vs non-type template parameters with class keyword",
    "CWG1875": "Reordering declarations in class scope",
    "CWG1876": "Preventing explicit specialization",
    "CWG1877": "Return type deduction from return with no operand",
    "CWG1878": "operator auto template",
    "CWG1879": "Inadequate definition of alignment requirement",
    "CWG1880": "When are parameter objects destroyed?",
    "CWG1881": "Standard-layout classes and unnamed bit-fields",
    "CWG1882": "Reserved names without library use",
    "CWG1883": "Protected access to constructors in mem-initializers",
    "CWG1884": "Unclear requirements for same-named external-linkage entities",
    "CWG1885": "Return value of a function is underspecified",
    "CWG1886": "Language linkage for main()",
    "CWG1887": "Problems with :: as nested-name-specifier",
    "CWG1888": "Implicitly-declared default constructors and explicit",
    "CWG1889": "Unclear effect of #pragma on conformance",
    "CWG1890": "Member type depending on definition of member function",
    "CWG1891": "Move constructor/assignment for closure class",
    "CWG1892": "Use of auto in function type",
    "CWG1893": "Function-style cast with braced-init-lists and empty pack expansions",
    "CWG1894": "typedef-names and using-declarations",
    "CWG1895": "Deleted conversions in conditional operator operands",
    "CWG1896": "Repeated alias templates",
    "CWG1897": "ODR vs alternative tokens",
    "CWG1898": "Use of \u201cequivalent\u201d in overload resolution",
    "CWG1899": "Value-dependent constant expressions",
    "CWG1900": "Do friend declarations count as \u201cprevious declarations\u201d?",
    "CWG1901": "punctuator referenced but not defined",
    "CWG1902": "What makes a conversion \u201cotherwise ill-formed\u201d?",
    "CWG1903": "What declarations are introduced by a non-member using-declaration?",
    "CWG1904": "Default template arguments for members of class templates",
    "CWG1905": "Dependent types and injected-class-names",
    "CWG1906": "Name lookup in member friend declaration",
    "CWG1907": "using-declarations and default arguments",
    "CWG1908": "Dual destructor lookup and template-ids",
    "CWG1909": "Member class template with the same name as the class",
    "CWG1910": "\u201cShall\u201d requirement applied to runtime behavior",
    "CWG1911": "constexpr constructor with non-literal base class",
    "CWG1912": "exception-specification of defaulted function",
    "CWG1913": "decltype((x)) in lambda-expressions",
    "CWG1914": "Duplicate standard attributes",
    "CWG1915": "Potentially-invoked destructors in non-throwing constructors",
    "CWG1916": "\u201cSame cv-unqualified type\u201d",
    "CWG1917": "decltype-qualified enumeration names",
    "CWG1918": "friend templates with dependent scopes",
    "CWG1919": "Overload resolution for ! with explicit conversion operator",
    "CWG1920": "Qualification mismatch in pseudo-destructor-name",
    "CWG1921": "constexpr constructors and point of initialization of const variables",
    "CWG1922": "Injected class template names and default arguments",
    "CWG1923": "Lvalues of type void",
    "CWG1924": "Definition of \u201cliteral\u201d and kinds of literals",
    "CWG1925": "Bit-field prvalues",
    "CWG1926": "Potential results of subscript operator",
    "CWG1927": "Lifetime of temporaries in init-captures",
    "CWG1928": "Triviality of deleted special member functions",
    "CWG1929": "template keyword following namespace nested-name-specifier",
    "CWG1930": "init-declarator-list vs member-declarator-list",
    "CWG1931": "Default-constructible and copy-assignable closure types",
    "CWG1932": "Bit-field results of conditional operators",
    "CWG1933": "Implementation limit for initializer-list elements",
    "CWG1934": "Relaxing exception-specification compatibility requirements",
    "CWG1935": "Reuse of placement arguments in deallocation",
    "CWG1936": "Dependent qualified-ids",
    "CWG1937": "Incomplete specification of function pointer from lambda",
    "CWG1938": "Should hosted/freestanding be implementation-defined?",
    "CWG1939": "Argument conversions to nondeduced parameter types revisited",
    "CWG1940": "static_assert in anonymous unions",
    "CWG1941": "SFINAE and inherited constructor default arguments",
    "CWG1942": "Incorrect reference to trailing-return-type",
    "CWG1943": "Unspecified meaning of \u201cbit\u201d",
    "CWG1944": "New C incompatibilities",
    "CWG1945": "Friend declarations naming members of class templates in non-templates",
    "CWG1946": "exception-specifications vs pointer dereference",
    "CWG1947": "Digit separators following non-octal prefix",
    "CWG1948": "exception-specification of replacement global new",
    "CWG1949": "\u201csequenced after\u201d instead of \u201csequenced before\u201d",
    "CWG1950": "Restructuring description of ranks of conversion sequences",
    "CWG1951": "Cv-qualification and literal types",
    "CWG1952": "Constant expressions and library undefined behavior",
    "CWG1953": "Data races and common initial sequence",
    "CWG1954": "typeid null dereference check in subexpressions",
    "CWG1955": "#elif with invalid controlling expression",
    "CWG1956": "Reuse of storage of automatic variables",
    "CWG1957": "decltype(auto) with direct-list-initialization",
    "CWG1958": "decltype(auto) with parenthesized initializer",
    "CWG1959": "Inadvertently inherited copy constructor",
    "CWG1960": "Visibility of entity named in class-scope using-declaration",
    "CWG1961": "Potentially-concurrent actions within a signal handler",
    "CWG1962": "Type of __func__",
    "CWG1963": "Implementation-defined identifier characters",
    "CWG1964": "opaque-enum-declaration in alias-declaration?",
    "CWG1965": "Explicit casts to reference types",
    "CWG1966": "Colon following enumeration elaborated-type-specifier",
    "CWG1967": "Temporary lifetime and move-elision",
    "CWG1968": "Address of typeid in constant expressions",
    "CWG1969": "Missing exclusion of ~S as an ordinary function name",
    "CWG1970": "Ambiguity resolution for (T())*x",
    "CWG1971": "Unclear disambiguation of destructor and operator~",
    "CWG1972": "Identifier character restrictions in non-identifiers",
    "CWG1973": "Which parameter-declaration-clause in a lambda-expression?",
    "CWG1974": "Redundant specification of non-type typename-specifier",
    "CWG1975": "Permissible declarations for exception-specifications",
    "CWG1976": "Ambiguity of namespace-aliases",
    "CWG1977": "Contradictory results of failed destructor lookup",
    "CWG1978": "Redundant description of explicit constructor use",
    "CWG1979": "Alias template specialization in template member definition",
    "CWG1980": "Equivalent but not functionally-equivalent redeclarations",
    "CWG1981": "Implicit contextual conversions and explicit",
    "CWG1982": "Deduction extending parameter pack",
    "CWG1983": "Inappropriate use of virt-specifier",
    "CWG1984": "Lossless narrowing conversions",
    "CWG1985": "Unknown bound array member with brace-or-equal-initializer",
    "CWG1986": "odr-use and delayed initialization",
    "CWG1987": "constexpr static data members across translation units",
    "CWG1988": "Ambiguity between dependent and non-dependent bases in implicit member access",
    "CWG1989": "Insufficient restrictions on parameters of postfix operators",
    "CWG1990": "Ambiguity due to optional decl-specifier-seq",
    "CWG1991": "Inheriting constructors vs default arguments",
    "CWG1992": "new (std::nothrow) int[N] can throw",
    "CWG1993": "Use of template<> defining member of explicit specialization",
    "CWG1994": "Confusing wording regarding multiple template<> prefixes",
    "CWG1995": "exception-specifications and non-type template parameters",
    "CWG1996": "Reference list-initialization ignores conversion functions",
    "CWG1997": "Placement new and previous initialization",
    "CWG1998": "Additional sources of xvalue expressions",
    "CWG1999": "Representation of source characters as universal-character-names",
    "CWG2000": "header-name outside #include directive",
    "CWG2001": "non-directive is underspecified",
    "CWG2002": "White space within preprocessing directives",
    "CWG2003": "Zero-argument macros incorrectly specified",
    "CWG2004": "Unions with mutable members in constant expressions",
    "CWG2005": "Incorrect constexpr reference initialization requirements",
    "CWG2006": "Cv-qualified void types",
    "CWG2007": "Argument-dependent lookup for operator=",
    "CWG2008": "Default template-arguments underspecified",
    "CWG2009": "Unclear specification of class scope",
    "CWG2010": "exception-specifications and conversion operators",
    "CWG2011": "Unclear effect of reference capture of reference",
    "CWG2012": "Lifetime of references",
    "CWG2013": "Pointer subtraction in large array",
    "CWG2014": "Unneeded deallocation signatures",
    "CWG2015": "odr-use of deleted virtual functions",
    "CWG2016": "Confusing wording in description of conversion function",
    "CWG2017": "Flowing off end is not equivalent to no-expression return",
    "CWG2018": "Qualification conversion vs reference binding",
    "CWG2019": "Member references omitted from description of storage duration",
    "CWG2020": "Inadequate description of odr-use of implicitly-invoked functions",
    "CWG2021": "Function template redeclaration via alias template",
    "CWG2022": "Copy elision in constant expressions",
    "CWG2023": "Composite reference result type of conditional operator",
    "CWG2024": "Dependent types and unexpanded parameter packs",
    "CWG2025": "Declaration matching via alias templates",
    "CWG2026": "Zero-initialization and constexpr",
    "CWG2027": "Unclear requirements for multiple alignas specifiers",
    "CWG2028": "Converting constructors in rvalue reference initialization",
    "CWG2029": "Abstract class return type in decltype operand",
    "CWG2030": "Access of injected-class-name with template arguments",
    "CWG2031": "Missing incompatibility for &&",
    "CWG2032": "Default template-arguments of variable templates",
    "CWG2033": "Redundant restriction on partial specialization argument",
    "CWG2034": "Deprecating uncaught_exception()",
    "CWG2035": "Multi-section example is confusing",
    "CWG2036": "Refactoring parameters-and-qualifiers",
    "CWG2037": "Alias templates and template declaration matching",
    "CWG2038": "Document C++14 incompatibility of new braced deduction rule",
    "CWG2039": "Constant conversions to bool",
    "CWG2040": "trailing-return-type no longer ambiguous",
    "CWG2041": "Namespace for explicit class template specialization",
    "CWG2042": "Exceptions and deallocation functions",
    "CWG2043": "Generalized template arguments and array-to-pointer decay",
    "CWG2044": "decltype(auto) and void",
    "CWG2045": "\u201cIdentical\u201d template parameter lists",
    "CWG2046": "Incomplete thread specifications",
    "CWG2047": "Coordinating \u201cthrows anything\u201d specifications",
    "CWG2048": "C-style casts that cast away constness vs static_cast",
    "CWG2049": "List initializer in non-type template default argument",
    "CWG2050": "Consolidate specification of linkage",
    "CWG2051": "Simplifying alias rules",
    "CWG2052": "Template argument deduction vs overloaded operators",
    "CWG2053": "auto in non-generic lambdas",
    "CWG2054": "Missing description of class SFINAE",
    "CWG2055": "Explicitly-specified non-deduced parameter packs",
    "CWG2056": "Member function calls in partially-initialized class objects",
    "CWG2057": "Template template arguments with default arguments",
    "CWG2058": "More errors from internal-linkage namespaces",
    "CWG2059": "Linkage and deduced return types",
    "CWG2060": "Deduced return type for explicit specialization",
    "CWG2061": "Inline namespace after simplifications",
    "CWG2062": "Class template redeclaration requirements",
    "CWG2063": "Type/nontype hiding in class scope",
    "CWG2064": "Conflicting specifications for dependent decltype-specifiers",
    "CWG2065": "Current instantiation of a partial specialization",
    "CWG2066": "Does type-dependent imply value-dependent?",
    "CWG2067": "Generated variadic templates requiring empty pack",
    "CWG2068": "When can/must a defaulted virtual destructor be defined?",
    "CWG2069": "Do destructors have names?",
    "CWG2070": "using-declaration with dependent nested-name-specifier",
    "CWG2071": "typedef with no declarator",
    "CWG2072": "Default argument instantiation for member functions of templates",
    "CWG2073": "Allocating memory for exception objects",
    "CWG2074": "Type-dependence of local class of function template",
    "CWG2075": "Passing short initializer lists to array reference parameters",
    "CWG2076": "List-initialization of arguments for constructor parameters",
    "CWG2077": "Overload resolution and invalid rvalue-reference initialization",
    "CWG2078": "Name lookup of mem-initilizer-id",
    "CWG2079": "[[ appearing in a balanced-token-seq",
    "CWG2080": "Example with empty anonymous union member",
    "CWG2081": "Deduced return type in redeclaration or specialization of function template",
    "CWG2082": "Referring to parameters in unevaluated operands of default arguments",
    "CWG2083": "Incorrect cases of odr-use",
    "CWG2084": "NSDMIs and deleted union default constructors",
    "CWG2085": "Invalid example of adding special member function via default argument",
    "CWG2086": "Reference odr-use vs implicit capture",
    "CWG2087": "Left shift of negative value by zero bits",
    "CWG2088": "Late tiebreakers in partial ordering",
    "CWG2089": "Restricting selection of builtin overloaded operators",
    "CWG2090": "Dependency via non-dependent base class",
    "CWG2091": "Deducing reference non-type template arguments",
    "CWG2092": "Deduction failure and overload resolution",
    "CWG2093": "Qualification conversion for pointer-to-member handler matching",
    "CWG2094": "Trivial copy/move constructor for class with volatile member",
    "CWG2095": "Capturing rvalue references to functions by copy",
    "CWG2096": "Constraints on literal unions",
    "CWG2097": "Lambdas and noreturn attribute",
    "CWG2098": "Is uncaught_exceptions() per-thread?",
    "CWG2099": "Inferring the bound of an array static data member",
    "CWG2100": "Value-dependent address of static data member of class template",
    "CWG2101": "Incorrect description of type- and value-dependence",
    "CWG2102": "Constructor checking in new-expression",
    "CWG2103": "Lvalue-to-rvalue conversion is irrelevant in odr-use of a reference",
    "CWG2104": "Internal-linkage constexpr references and ODR requirements",
    "CWG2105": "When do the arguments for a parameter pack end?",
    "CWG2106": "Unclear restrictions on use of function-type template arguments",
    "CWG2107": "Lifetime of temporaries for default arguments in array copying",
    "CWG2108": "Conversions to non-class prvalues in reference initialization",
    "CWG2109": "Value dependence underspecified",
    "CWG2110": "Overload resolution for base class conversion and reference/non-reference",
    "CWG2111": "Array temporaries in reference binding",
    "CWG2112": "new auto{x}",
    "CWG2113": "Incompete specification of types for declarators",
    "CWG2114": "Missing description of incompatibility from aggregate NSDMIs",
    "CWG2115": "Order of implicit destruction vs release of automatic storage",
    "CWG2116": "Direct or copy initialization for omitted aggregate initializers",
    "CWG2117": "Explicit specializations and constexpr function templates",
    "CWG2118": "Stateful metaprogramming via friend injection",
    "CWG2119": "Disambiguation of multi-level covariant return type",
    "CWG2120": "Array as first non-static data member in standard-layout class",
    "CWG2121": "More flexible lambda syntax",
    "CWG2122": "Glvalues of void type",
    "CWG2123": "Omitted constant initialization of local static variables",
    "CWG2124": "Signature of constructor template",
    "CWG2125": "Copy elision and comma operator",
    "CWG2126": "Lifetime-extended temporaries in constant expressions",
    "CWG2127": "Partial specialization and nullptr",
    "CWG2128": "Imprecise rule for reference member initializer",
    "CWG2129": "Non-object prvalues and constant expressions",
    "CWG2130": "Over-aligned types in new-expressions",
    "CWG2131": "Ambiguity with opaque-enum-declaration",
    "CWG2132": "Deprecated default generated copy constructors",
    "CWG2133": "Converting std::nullptr_t to bool",
    "CWG2134": "Objectless references to non-static member functions",
    "CWG2135": "mem-initializers for virtual bases of abstract classes",
    "CWG2136": "Argument-dependent lookup and initializer lists",
    "CWG2137": "List-initialization from object of same type",
    "CWG2138": "Explicit member specialization vs implicit instantiation",
    "CWG2139": "Floating-point requirements for integer representation",
    "CWG2140": "Lvalue-to-rvalue conversion of std::nullptr_t",
    "CWG2141": "Ambiguity in new-expression with elaborated-type-specifier",
    "CWG2142": "Missing definition of associated classes and namespaces",
    "CWG2143": "Value-dependency via injected-class-name",
    "CWG2144": "Function/variable declaration ambiguity",
    "CWG2145": "Parenthesized declarator in function definition",
    "CWG2146": "Scalar object vs memory location in definition of \u201cunsequenced\u201d",
    "CWG2147": "Initializer-list arguments and pack deduction",
    "CWG2148": "Thread storage duration and order of initialization",
    "CWG2149": "Brace elision and array length deduction",
    "CWG2150": "Initializer list array lifetime",
    "CWG2151": "Exception object is not created",
    "CWG2152": "Can an alternative token be used as a ud-suffix?",
    "CWG2153": "pure-specifier in friend declaration",
    "CWG2154": "Ambiguity of pure-specifier",
    "CWG2155": "Defining classes and enumerations via using-declarations",
    "CWG2156": "Definition of enumeration declared by using-declaration",
    "CWG2157": "Further disambiguation of enumeration elaborated-type-specifier",
    "CWG2158": "Polymorphic behavior during destruction",
    "CWG2159": "Lambda capture and local thread_local variables",
    "CWG2160": "Issues with partial ordering",
    "CWG2161": "Explicit instantiation declaration and \u201cpreceding initialization\u201d",
    "CWG2162": "Capturing this by reference",
    "CWG2163": "Labels in constexpr functions",
    "CWG2164": "Name hiding and using-directives",
    "CWG2165": "Namespaces, declarative regions, and translation units",
    "CWG2166": "Unclear meaning of \u201cundefined constexpr function\u201d",
    "CWG2167": "Non-member references with lifetimes within the current evaluation",
    "CWG2168": "Narrowing conversions and +/- infinity",
    "CWG2169": "Narrowing conversions and overload resolution",
    "CWG2170": "Unclear definition of odr-use for arrays",
    "CWG2171": "Triviality of copy constructor with less-qualified parameter",
    "CWG2172": "Multiple exceptions with one exception object",
    "CWG2173": "Partial specialization with non-deduced contexts",
    "CWG2174": "Unclear rules for friend definitions in templates",
    "CWG2175": "Ambiguity with attribute in conversion operator declaration",
    "CWG2176": "Destroying the returned object when a destructor throws",
    "CWG2177": "Placement operator delete and parameter copies",
    "CWG2178": "Substitution of dependent template arguments in default template arguments",
    "CWG2179": "Required diagnostic for partial specialization after first use",
    "CWG2180": "Virtual bases in destructors and defaulted assignment operators",
    "CWG2181": "Normative requirements in an informative Annex",
    "CWG2182": "Pointer arithmetic in array-like containers",
    "CWG2183": "Problems in description of potential exceptions",
    "CWG2184": "Missing C compatibility entry for decrement of bool",
    "CWG2185": "Cv-qualified numeric types",
    "CWG2186": "Unclear point that \u201cpreceding initialization\u201d must precede",
    "CWG2187": "Protected members and access via qualified-id",
    "CWG2188": "empty-declaration grammar ambiguity",
    "CWG2189": "Surrogate call template",
    "CWG2190": "Insufficient specification of __has_include",
    "CWG2191": "Incorrect result for noexcept(typeid(v))",
    "CWG2192": "Constant expressions and order-of-eval undefined behavior",
    "CWG2193": "numeric_limits<int>::radix and digits",
    "CWG2194": "Impossible case in list initialization",
    "CWG2195": "Unsolicited reading of trailing volatile members",
    "CWG2196": "Zero-initialization with virtual base classes",
    "CWG2197": "Overload resolution and deleted special member functions",
    "CWG2198": "Linkage of enumerators",
    "CWG2199": "Typedefs and tags",
    "CWG2200": "Conversions in template argument deduction",
    "CWG2201": "Cv-qualification of array types",
    "CWG2202": "When does default argument instantiation occur?",
    "CWG2203": "Defaulted copy/move constructors and UDCs",
    "CWG2204": "Naming delegated constructors",
    "CWG2205": "Restrictions on use of alignas",
    "CWG2206": "Composite type of object and function pointers",
    "CWG2207": "Alignment of allocation function return value",
    "CWG2208": "static_assert-declaration does not declare a member",
    "CWG2209": "Destruction of constructed array elements",
    "CWG2210": "Principal/target constructor confusion",
    "CWG2211": "Hiding by lambda captures and parameters",
    "CWG2212": "Typedef changing linkage after use",
    "CWG2213": "Forward declaration of partial specializations",
    "CWG2214": "Missing requirement on representation of integer values",
    "CWG2215": "Redundant description of language linkage in function call",
    "CWG2216": "Exception specifications in unevaluated contexts",
    "CWG2217": "constexpr constructors for non-literal types",
    "CWG2218": "Ambiguity and namespace aliases",
    "CWG2219": "Dynamically-unreachable handlers",
    "CWG2220": "Hiding index variable in range-based for",
    "CWG2221": "Copying volatile objects",
    "CWG2222": "Additional contexts where instantiation is not required",
    "CWG2223": "Multiple alignas specifiers",
    "CWG2224": "Member subobjects and base-class casts",
    "CWG2225": "reinterpret_cast to same floating-point type",
    "CWG2226": "Xvalues vs lvalues in conditional expressions",
    "CWG2227": "Destructor access and default member initializers",
    "CWG2228": "Ambiguity resolution for cast to function type",
    "CWG2229": "Volatile unnamed bit-fields",
    "CWG2230": "Linkage of extern \"C\" function in unnamed namespace",
    "CWG2231": "Class member access to static data member template",
    "CWG2232": "thread_local anonymous unions",
    "CWG2233": "Function parameter packs following default arguments",
    "CWG2234": "Missing rules for simple-template-id as class-name",
    "CWG2235": "Partial ordering and non-dependent types",
    "CWG2236": "When is an alias template specialization dependent?",
    "CWG2237": "Can a template-id name a constructor?",
    "CWG2238": "Contradictory alignment requirements for allocation",
    "CWG2239": "Sized deallocation with a trivial destructor",
    "CWG2240": "this is not odr-used in a constant expression",
    "CWG2241": "Overload resolution is not invoked with a single function",
    "CWG2242": "ODR violation with constant initialization possibly omitted",
    "CWG2243": "Incorrect use of implicit conversion sequence",
    "CWG2244": "Base class access in aggregate initialization",
    "CWG2245": "Point of instantiation of incomplete class template",
    "CWG2246": "Access of indirect virtual base class constructors",
    "CWG2247": "Lambda capture and variable argument list",
    "CWG2248": "Problems with sized delete",
    "CWG2249": "identifiers and id-expressions",
    "CWG2250": "Implicit instantiation, destruction, and TUs",
    "CWG2251": "Unreachable enumeration list-initialization",
    "CWG2252": "Enumeration list-initialization from the same type",
    "CWG2253": "Unnamed bit-fields and zero-initialization",
    "CWG2254": "Standard-layout classes and bit-fields",
    "CWG2255": "Instantiated static data member templates",
    "CWG2256": "Lifetime of trivially-destructible objects",
    "CWG2257": "Lifetime extension of references vs exceptions",
    "CWG2258": "Storage deallocation during period of destruction",
    "CWG2259": "Unclear context describing ambiguity",
    "CWG2260": "Explicit specializations of deleted member functions",
    "CWG2261": "Explicit instantiation of in-class friend definition",
    "CWG2262": "Attributes for asm-definition",
    "CWG2263": "Default argument instantiation for friends",
    "CWG2264": "Memberwise copying with indeterminate value",
    "CWG2265": "Delayed pack expansion and member redeclarations",
    "CWG2266": "Has dependent type vs is type-dependent",
    "CWG2267": "Copy-initialization of temporary in reference direct-initialization",
    "CWG2268": "Unions with mutable members in constant expressions revisited",
    "CWG2269": "Additional recursive references in aggregate DMIs",
    "CWG2270": "Non-inline functions and explicit instantiation declarations",
    "CWG2271": "Aliasing this",
    "CWG2272": "Implicit initialization of aggregate members of reference type",
    "CWG2273": "Inheriting constructors vs implicit default constructor",
    "CWG2274": "Generic lambda capture vs constexpr if",
    "CWG2275": "Type-dependence of function template",
    "CWG2276": "Dependent noexcept and function type-dependence",
    "CWG2277": "Ambiguity inheriting constructors with default arguments",
    "CWG2278": "Copy elision in constant expressions reconsidered",
    "CWG2279": "Multiple attribute-specifiers in one attribute-list",
    "CWG2280": "Matching a usual deallocation function with placement new",
    "CWG2281": "Consistency of aligned operator delete replacement",
    "CWG2282": "Consistency with mismatched aligned/non-over-aligned allocation/deallocation functions",
    "CWG2283": "Missing complete type requirements",
    "CWG2284": "Sequencing of braced-init-list arguments",
    "CWG2285": "Issues with structured bindings",
    "CWG2286": "Assignment evaluation order",
    "CWG2287": "Pointer-interconvertibility in non-standard-layout unions",
    "CWG2288": "Contradictory optionality in simple-declaration",
    "CWG2289": "Uniqueness of structured binding names",
    "CWG2290": "Unclear specification for overload resolution and deleted special member functions",
    "CWG2291": "Implicit conversion sequences in non-call contexts",
    "CWG2292": "simple-template-id is ambiguous between class-name and type-name",
    "CWG2293": "Requirements for simple-template-id used as a class-name",
    "CWG2294": "Dependent auto static data members",
    "CWG2295": "Aggregates with deleted defaulted constructors",
    "CWG2296": "Are default argument instantiation failures in the \u201cimmediate context\u201d?",
    "CWG2297": "Unclear specification of atomic operations",
    "CWG2298": "Actions and expression evaluation",
    "CWG2299": "constexpr vararg functions",
    "CWG2300": "Lambdas in multiple definitions",
    "CWG2301": "Value-initialization and constexpr constructor evaluation",
    "CWG2302": "Address comparison between different member subobjects",
    "CWG2303": "Partial ordering and recursive variadic inheritance",
    "CWG2304": "Incomplete type vs overload resolution",
    "CWG2305": "Explicit instantiation of constexpr or inline variable template",
    "CWG2306": "Nested friend templates of class templates",
    "CWG2307": "Unclear definition of \u201cequivalent to a nontype template parameter\u201d",
    "CWG2308": "Structured bindings and lambda capture",
    "CWG2309": "Restrictions on nested statements within constexpr functions",
    "CWG2310": "Type completeness and derived-to-base pointer conversions",
    "CWG2311": "Missed case for guaranteed copy elision",
    "CWG2312": "Structured bindings and mutable",
    "CWG2313": "Redeclaration of structured binding reference variables",
    "CWG2314": "Structured bindings and lambda capture",
    "CWG2315": "What is the \u201ccorresponding special member\u201d of a variant member?",
    "CWG2316": "Simplifying class conversions in conditional expressions",
    "CWG2317": "Self-referential default member initializers",
    "CWG2318": "Nondeduced contexts in deduction from a braced-init-list",
    "CWG2319": "Nested brace initialization from same type",
    "CWG2320": "constexpr if and boolean conversions",
    "CWG2321": "Conditional operator and cv-qualified class prvalues",
    "CWG2322": "Substitution failure and lexical order",
    "CWG2323": "Expunge POD",
    "CWG2324": "Size of base class subobject",
    "CWG2325": "std::launder and reuse of character buffers",
    "CWG2326": "Type deduction with initializer list containing ambiguous functions",
    "CWG2327": "Copy elision for direct-initialization with a conversion function",
    "CWG2328": "Unclear presentation style of template argument deduction rules",
    "CWG2329": "Virtual base classes and generated assignment operators",
    "CWG2330": "Missing references to variable templates",
    "CWG2331": "Redundancy in description of class scope",
    "CWG2332": "template-name as simple-type-name vs injected-class-name",
    "CWG2333": "Escape sequences in UTF-8 character literals",
    "CWG2334": "Creation of objects by typeid",
    "CWG2335": "Deduced return types vs member types",
    "CWG2336": "Destructor characteristics vs potentially-constructed subobjects",
    "CWG2337": "Incorrect implication of logic ladder for conversion sequence tiebreakers",
    "CWG2338": "Undefined behavior converting to short enums with fixed underlying types",
    "CWG2339": "Underspecified template arguments in structured bindings",
    "CWG2340": "Reference collapsing and structured bindings",
    "CWG2341": "Structured bindings with static storage duration",
    "CWG2342": "Reference reinterpret_cast and pointer-interconvertibility",
    "CWG2343": "void* non-type template parameters",
    "CWG2344": "Redeclaration of names in init-statements",
    "CWG2345": "Jumping across initializers in init-statements and conditions",
    "CWG2346": "Local variables in default arguments",
    "CWG2347": "Passing short scoped enumerations to ellipsis",
    "CWG2348": "Non-templated constexpr if",
    "CWG2349": "Class/enumeration names vs conditions",
    "CWG2350": "Forwarding references and deduction guides",
    "CWG2351": "void{}",
    "CWG2352": "Similar types and reference binding",
    "CWG2353": "Potential results of a member access expression for a static data member",
    "CWG2354": "Extended alignment and object representation",
    "CWG2355": "Deducing noexcept-specifiers",
    "CWG2356": "Base class copy and move constructors should not be inherited",
    "CWG2357": "Lookup in member function declarations",
    "CWG2358": "Explicit capture of value",
    "CWG2359": "Unintended copy initialization with designated initializers",
    "CWG2360": "[[maybe_unused]] and structured bindings",
    "CWG2361": "Unclear description of longjmp undefined behavior",
    "CWG2362": "__func__ should be constexpr",
    "CWG2363": "Opaque enumeration friend declarations",
    "CWG2364": "Constant expressions, aggregate initialization, and modifications",
    "CWG2365": "Confusing specification for dynamic_cast",
    "CWG2366": "Can default initialization be constant initialization?",
    "CWG2367": "Lambdas in default arguments vs the ODR",
    "CWG2368": "Differences in relational and three-way constant comparisons",
    "CWG2369": "Ordering between constraints and substitution",
    "CWG2370": "friend declarations of namespace-scope functions",
    "CWG2371": "Use of the English term \u201cattributes\u201d is confusing",
    "CWG2372": "Incorrect matching rules for block-scope extern declarations",
    "CWG2373": "Incorrect handling of static member function templates in partial ordering",
    "CWG2374": "Overly permissive specification of enum direct-list-initialization",
    "CWG2375": "Multiple redeclarations of constexpr static data members",
    "CWG2376": "Class template argument deduction with array declarator",
    "CWG2377": "Explicit copy constructor vs function viability",
    "CWG2378": "Inconsistent grammar for reference init-capture of pack",
    "CWG2379": "Missing prohibition against constexpr in friend declaration",
    "CWG2380": "capture-default makes too many references odr-usable",
    "CWG2381": "Composite pointer type of pointers to plain and noexcept member functions",
    "CWG2382": "Array allocation overhead for non-allocating placement new",
    "CWG2383": "Variadic member functions of variadic class templates",
    "CWG2384": "Conversion function templates and qualification conversions",
    "CWG2385": "Lookup for conversion-function-ids",
    "CWG2386": "tuple_size requirements for structured binding",
    "CWG2387": "Linkage of const-qualified variable template",
    "CWG2388": "Applicability of contract-attribute-specifiers",
    "CWG2389": "Agreement of deduced and explicitly-specified variable types",
    "CWG2390": "Is the argument of __has_cpp_attribute macro-expanded?",
    "CWG2391": "Additional template parameters following pack expansion",
    "CWG2392": "new-expression size check and constant evaluation",
    "CWG2393": "Pseudo-destructors and object lifetime",
    "CWG2394": "Const-default-constructible for members",
    "CWG2395": "Parameters following a pack expansion",
    "CWG2396": "Lookup of names in complex conversion-type-ids",
    "CWG2397": "auto specifier for pointers and references to arrays",
    "CWG2398": "Template template parameter matching and deduction",
    "CWG2399": "Unclear referent of \u201cexpression\u201d in assignment-expression",
    "CWG2400": "Constexpr virtual functions and temporary objects",
    "CWG2401": "Array decay vs prohibition of subobject non-type arguments",
    "CWG2402": "When is the restriction to a single c-char in a Unicode literal enforced?",
    "CWG2403": "Temporary materialization and base/member initialization",
    "CWG2404": "[[no_unique_address]] and allocation order",
    "CWG2405": "Additional type-dependent expressions",
    "CWG2406": "[[fallthrough]] attribute and iteration statements",
    "CWG2407": "Missing entry in Annex C for defaulted comparison operators",
    "CWG2408": "Temporaries and previously-initialized elements in aggregate initialization",
    "CWG2409": "Explicit specializations of constexpr static data members",
    "CWG2410": "Implicit calls of immediate functions",
    "CWG2411": "Comparison of pointers to members in template non-type arguments",
    "CWG2412": "SFINAE vs undeduced placeholder type",
    "CWG2413": "typename in conversion-function-ids",
    "CWG2414": "Unclear results if both member and friend operator<=> are declared",
    "CWG2415": "using-declarations vs copy assignment operators",
    "CWG2416": "Explicit specializations vs constexpr and consteval",
    "CWG2417": "Explicit instantiation and exception specifications",
    "CWG2418": "Missing cases in definition of \u201cusable in constant expressions\u201d",
    "CWG2419": "Loss of generality treating pointers to objects as one-element arrays",
    "CWG2420": "Exception specifications in explicit instantiation",
    "CWG2421": "Explicit instantiation of constrained member functions",
    "CWG2422": "Incorrect grammar for deduction-guide",
    "CWG2423": "Typedefs, names, and entities",
    "CWG2424": "constexpr initialization requirements for variant members",
    "CWG2425": "Confusing wording for deduction from a type",
    "CWG2426": "Reference to destructor that cannot be invoked",
    "CWG2427": "Deprecation of volatile operands and unevaluated contexts",
    "CWG2428": "Deprecating a concept",
    "CWG2429": "Initialization of thread_local variables referenced by lambdas",
    "CWG2430": "Completeness of return and parameter types of member functions",
    "CWG2431": "Full-expressions and temporaries bound to references",
    "CWG2432": "Return types for defaulted <=>",
    "CWG2433": "Variable templates in the ODR",
    "CWG2434": "Mandatory copy elision vs non-class objects",
    "CWG2435": "Alias template specializations",
    "CWG2436": "Copy semantics of coroutine parameters",
    "CWG2437": "Conversion of std::strong_ordering in a defaulted operator<=>",
    "CWG2438": "Problems in the specification of qualification conversions",
    "CWG2439": "Undefined term in definition of \u201cusable in constant expressions\u201d",
    "CWG2440": "Allocation in core constant expressions",
    "CWG2441": "Inline function parameters",
    "CWG2442": "Incorrect requirement for default arguments",
    "CWG2443": "Meaningless template exports",
    "CWG2444": "Constant expressions in initialization odr-use",
    "CWG2445": "Partial ordering with rewritten candidates",
    "CWG2446": "Questionable type-dependency of concept-ids",
    "CWG2447": "Unintended description of abbreviated function templates",
    "CWG2448": "Cv-qualification of arithmetic types and deprecation of volatile",
    "CWG2449": "Thunks as an implementation technique for pointers to virtual functions",
    "CWG2450": "braced-init-list as a template-argument",
    "CWG2451": "promise.unhandled_exception() and final suspend point",
    "CWG2452": "Flowing off the end of a coroutine",
    "CWG2453": "Deduced return types and coroutine lambdas",
    "CWG2454": "Tail recursion and coroutine symmetric transfer",
    "CWG2455": "Concatenation of string literals vs translation phases 5 and 6",
    "CWG2456": "Viable user-defined conversions in converted constant expressions",
    "CWG2457": "Unexpanded parameter packs don't make a function type dependent",
    "CWG2458": "Value category of expressions denoting non-static member functions",
    "CWG2459": "Template parameter initialization",
    "CWG2460": "C language linkage and constrained non-template friends",
    "CWG2461": "Diagnosing non-bool type constraints",
    "CWG2462": "Problems with the omission of the typename keyword",
    "CWG2463": "Trivial copyability and unions with non-trivial members",
    "CWG2464": "Constexpr launder and unions",
    "CWG2465": "Coroutine parameters passed to a promise constructor",
    "CWG2466": "co_await should be a single evaluation",
    "CWG2467": "CTAD for alias templates and the deducible check",
    "CWG2468": "Omission of the typename keyword in a member template parameter list",
    "CWG2469": "Implicit object creation vs constant expressions",
    "CWG2470": "Multiple array objects providing storage for one object",
    "CWG2471": "Nested class template argument deduction",
    "CWG2472": "Value categories in await-expressions",
    "CWG2473": "Parentheses in pseudo-destructor calls",
    "CWG2474": "Cv-qualification and deletion",
    "CWG2475": "Object declarations of type cv void",
    "CWG2476": "placeholder-type-specifiers and function declarators",
    "CWG2477": "Defaulted vs deleted copy constructors/assignment operators",
    "CWG2478": "Properties of explicit specializations of implicitly-instantiated class templates",
    "CWG2479": "Missing specifications for consteval and constinit",
    "CWG2480": "Lookup for enumerators in modules",
    "CWG2481": "Cv-qualification of temporary to which a reference is bound",
    "CWG2482": "bit_cast and indeterminate values",
    "CWG2483": "Language linkage of static member functions",
    "CWG2484": "char8_t and char16_t in integral promotions",
    "CWG2485": "Bit-fields in integral promotions",
    "CWG2486": "Call to noexcept function via noexcept(false) pointer/lvalue",
    "CWG2487": "Type dependence of function-style cast to incomplete array type",
    "CWG2488": "Overloading virtual functions and functions with trailing requires-clauses",
    "CWG2489": "Storage provided by array of char",
    "CWG2490": "Restrictions on destruction in constant expressions",
    "CWG2491": "Export of typedef after its first declaration",
    "CWG2492": "Comparing user-defined conversion sequences in list-initialization",
    "CWG2493": "auto as a conversion-type-id",
    "CWG2494": "Multiple definitions of non-odr-used entities",
    "CWG2495": "Glvalue result of a function call",
    "CWG2496": "ref-qualifiers and virtual overriding",
    "CWG2497": "Points of instantiation for constexpr function templates",
    "CWG2498": "Partial specialization failure and the immediate context",
    "CWG2499": "Inconsistency in definition of pointer-interconvertibility",
    "CWG2500": "noexcept(false) functions and noexcept expressions",
    "CWG2501": "Explicit instantiation and trailing requires-clauses",
    "CWG2502": "Unintended declaration conflicts in nested statement scopes",
    "CWG2503": "Unclear relationship among name, qualified name, and unqualified name",
    "CWG2504": "Inheriting constructors from virtual base classes",
    "CWG2505": "Nested unnamed namespace of inline unnamed namespace",
    "CWG2506": "Structured bindings and array cv-qualifiers",
    "CWG2507": "Default arguments for operator[]",
    "CWG2508": "Restrictions on uses of template parameter names",
    "CWG2509": "decl-specifier-seq in lambda-specifiers",
    "CWG2510": "noexcept-specifier of friend function vs class completeness",
    "CWG2511": "cv-qualified bit-fields",
    "CWG2512": "typeid and incomplete class types",
    "CWG2513": "Ambiguity with requires-clause and operator-function-id",
    "CWG2514": "Modifying const subobjects",
    "CWG2515": "Result of a function call",
    "CWG2516": "Locus of enum-specifier or opaque-enum-declaration",
    "CWG2517": "Useless restriction on use of parameter in constraint-expression",
    "CWG2518": "Conformance requirements and #error/#warning",
    "CWG2519": "Object representation of a bit-field",
    "CWG2520": "Template signature and default template arguments",
    "CWG2521": "User-defined literals and reserved identifiers",
    "CWG2522": "Removing placemarker tokens and retention of whitespace",
    "CWG2523": "Undefined behavior via omitted destructor call in constant expressions",
    "CWG2524": "Distinguishing user-defined conversion sequences by ref-qualifier",
    "CWG2525": "Incorrect definition of implicit conversion sequence",
    "CWG2526": "Relational comparison of void* pointers",
    "CWG2527": "Non-class potentially-overlapping objects",
    "CWG2528": "Three-way comparison and the usual arithmetic conversions",
    "CWG2529": "Constant destruction of constexpr references",
    "CWG2530": "Multiple definitions of enumerators",
    "CWG2531": "Static data members redeclared as constexpr",
    "CWG2532": "Kind of pointer value returned by new T[0]",
    "CWG2533": "Storage duration of implicitly created objects",
    "CWG2534": "Value category of pseudo-destructor expression",
    "CWG2535": "Type punning in class member access",
    "CWG2536": "Partially initialized variables during constant initialization",
    "CWG2537": "Overbroad grammar for parameter-declaration",
    "CWG2538": "Can standard attributes be syntactically ignored?",
    "CWG2539": "Three-way comparison requiring strong ordering for floating-point types",
    "CWG2540": "Unspecified interpretation of numeric-escape-sequence",
    "CWG2541": "Linkage specifications, module purview, and module attachment",
    "CWG2542": "Is a closure type a structural type?",
    "CWG2543": "constinit and optimized dynamic initialization",
    "CWG2544": "Address of past-the-end of a potentially-overlapping subobject",
    "CWG2545": "Transparently replacing objects in constant expressions",
    "CWG2546": "Defaulted secondary comparison operators defined as deleted",
    "CWG2547": "Defaulted comparison operator function for non-classes",
    "CWG2548": "Array prvalues and additive operators",
    "CWG2549": "Implicitly moving the operand of a throw-expression in unevaluated contexts",
    "CWG2550": "Type \"reference to cv void\" outside of a declarator",
    "CWG2551": "\"Refers to allocated storage\" has no meaning",
    "CWG2552": "Constant evaluation of non-defining variable declarations",
    "CWG2553": "Restrictions on explicit object member functions",
    "CWG2554": "Overriding virtual functions, also with explicit object parameters",
    "CWG2555": "Ineffective redeclaration prevention for using-declarators",
    "CWG2556": "Unusable promise::return_void",
    "CWG2557": "Class member access referring to an unrelated class",
    "CWG2558": "Uninitialized subobjects as a result of an immediate invocation",
    "CWG2559": "Defaulted consteval functions",
    "CWG2560": "Parameter type determination in a requirement-parameter-list",
    "CWG2561": "Conversion to function pointer for lambda with explicit object parameter",
    "CWG2562": "Exceptions thrown during coroutine startup",
    "CWG2563": "Initialization of coroutine result object",
    "CWG2564": "Conversion to function pointer with an explicit object parameter",
    "CWG2565": "Invalid types in the parameter-declaration-clause of a requires-expression",
    "CWG2566": "Matching deallocation for uncaught exception",
    "CWG2567": "Operator lookup ambiguity",
    "CWG2568": "Access checking during synthesis of defaulted comparison operator",
    "CWG2569": "Use of decltype(capture) in a lambda's parameter-declaration-clause",
    "CWG2570": "Clarify constexpr for defaulted functions",
    "CWG2571": "Evaluation order for subscripting",
    "CWG2572": "Address of overloaded function with no target",
    "CWG2573": "Undefined behavior when splicing results in a universal-character-name",
    "CWG2574": "Undefined behavior when lexing unmatched quotes",
    "CWG2575": "Undefined behavior when macro-replacing \"defined\" operator",
    "CWG2576": "Undefined behavior with macro-expanded #include directives",
    "CWG2577": "Undefined behavior for preprocessing directives in macro arguments",
    "CWG2578": "Undefined behavior when creating an invalid string literal via stringizing",
    "CWG2579": "Undefined behavior when token pasting does not create a preprocessing token",
    "CWG2580": "Undefined behavior with #line",
    "CWG2581": "Undefined behavior for predefined macros",
    "CWG2582": "Differing member lookup from nested classes",
    "CWG2583": "Common initial sequence should consider over-alignment",
    "CWG2584": "Equivalent types in function template declarations",
    "CWG2585": "Name lookup for coroutine allocation",
    "CWG2586": "Explicit object parameter for assignment and comparison",
    "CWG2587": "Visible side effects and initial value of an object",
    "CWG2588": "friend declarations and module linkage",
    "CWG2589": "Context of access checks during constraint satisfaction checking",
    "CWG2590": "Underlying type should determine size and alignment requirements of an enum",
    "CWG2591": "Implicit change of active union member for anonymous union in union",
    "CWG2592": "Missing definition for placement allocation/deallocation function",
    "CWG2593": "Insufficient base class restriction for pointer-to-member expression",
    "CWG2594": "Disallowing a global function template main",
    "CWG2595": "\"More constrained\" for eligible special member functions",
    "CWG2596": "Instantiation of constrained non-template friends",
    "CWG2597": "Replaceable allocation and deallocation functions in the global module",
    "CWG2598": "Unions should not require a non-static data member of literal type",
    "CWG2599": "What does initializing a parameter include?",
    "CWG2600": "Type dependency of placeholder types",
    "CWG2601": "Tracking of created and destroyed subobjects",
    "CWG2602": "consteval defaulted functions",
    "CWG2603": "Holistic functional equivalence for function templates",
    "CWG2604": "Attributes for an explicit specialization",
    "CWG2605": "Implicit-lifetime aggregates",
    "CWG2606": "static_cast from \"pointer to void\" does not handle similar types",
    "CWG2607": "Visibility of enumerator names",
    "CWG2608": "Omitting an empty template argument list",
    "CWG2609": "Padding in class types",
    "CWG2610": "Indirect private base classes in aggregates",
    "CWG2611": "Missing parentheses in expansion of fold-expression could cause syntactic reinterpretation",
    "CWG2612": "Incorrect comment in example",
    "CWG2613": "Incomplete definition of resumer",
    "CWG2614": "Unspecified results for class member access",
    "CWG2615": "Missing __has_cpp_attribute(assume)",
    "CWG2616": "Imprecise restrictions on break and continue",
    "CWG2617": "Default template arguments for template members of non-template classes",
    "CWG2618": "Substitution during deduction should exclude exception specifications",
    "CWG2619": "Kind of initialization for a designated-initializer-list",
    "CWG2620": "Nonsensical disambiguation rule",
    "CWG2621": "Kind of lookup for using enum declarations",
    "CWG2622": "Compounding types from function and pointer-to-member types",
    "CWG2623": "Invoking destroying operator delete for constructor failure",
    "CWG2624": "Array delete expression with no array cookie",
    "CWG2625": "Deletion of pointer to out-of-lifetime object",
    "CWG2626": "Rephrase ones' complement using base-2 representation",
    "CWG2627": "Bit-fields and narrowing conversions",
    "CWG2628": "Implicit deduction guides should propagate constraints",
    "CWG2629": "Variables of floating-point type as switch conditions",
    "CWG2630": "Syntactic specification of class completeness",
    "CWG2631": "Immediate function evaluations in default arguments",
    "CWG2632": "'user-declared' is not defined",
    "CWG2633": "typeid of constexpr-unknown dynamic type",
    "CWG2634": "Avoid circularity in specification of scope for friend class declarations",
    "CWG2635": "Constrained structured bindings",
    "CWG2636": "Update Annex E based on Unicode 15.0 UAX #31",
    "CWG2637": "Injected-class-name as a simple-template-id",
    "CWG2638": "Improve the example for initializing by initializer list",
    "CWG2639": "new-lines after phase 1",
    "CWG2640": "Allow more characters in an n-char sequence",
    "CWG2641": "Redundant specification of value category of literals",
    "CWG2642": "Inconsistent use of T and C",
    "CWG2643": "Completing a pointer to array of unknown bound",
    "CWG2644": "Incorrect comment in example",
    "CWG2645": "Unused term \"default argument promotions\"",
    "CWG2646": "Defaulted special member functions",
    "CWG2647": "Fix for \"needed for constant evaluation\"",
    "CWG2648": "Correspondence of surrogate call function and conversion function",
    "CWG2649": "Incorrect note about implicit conversion sequence",
    "CWG2650": "Incorrect example for ill-formed non-type template arguments",
    "CWG2651": "Conversion function templates and \"noexcept\"",
    "CWG2652": "Overbroad definition of __STDCPP_BFLOAT16_T__",
    "CWG2653": "Can an explicit object parameter have a default argument?",
    "CWG2654": "Un-deprecation of compound volatile assignments",
    "CWG2655": "Instantiation of default arguments in lambda-expressions",
    "CWG2656": "Converting consteval lambda to function pointer in non-immediate context",
    "CWG2657": "Cv-qualification adjustment when binding reference to temporary",
    "CWG2658": "Trivial copying of unions in core constant expressions",
    "CWG2659": "Missing feature-test macro for lifetime extension in range-for loop",
    "CWG2660": "Confusing term \"this parameter\"",
    "CWG2661": "Missing disambiguation rule for pure-specifier vs. brace-or-equal-initializer",
    "CWG2662": "Example for member access control vs. overload resolution",
    "CWG2663": "Example for member redeclarations with using-declarations",
    "CWG2664": "Deduction failure in CTAD for alias templates",
    "CWG2665": "Replacing a subobject with a complete object",
    "CWG2666": "Lifetime extension through static_cast",
    "CWG2667": "Named module imports do not import macros",
    "CWG2668": "co_await in a lambda-expression",
    "CWG2669": "Lifetime extension for aggregate initialization",
    "CWG2670": "Programs and translation units",
    "CWG2671": "friend named by a template-id",
    "CWG2672": "Lambda body SFINAE is still required, contrary to intent and note",
    "CWG2673": "User-declared spaceship vs. built-in operators",
    "CWG2674": "Prohibit explicit object parameters for constructors",
    "CWG2675": "start_lifetime_as, placement-new, and active union members",
    "CWG2676": "Replacing a complete object having base subobjects",
    "CWG2677": "Replacing union subobjects",
    "CWG2678": "std::source_location::current is unimplementable",
    "CWG2679": "Implicit conversion sequence with a null pointer constant",
    "CWG2680": "Class template argument deduction for aggregates with designated initializers",
    "CWG2681": "Deducing member array type from string literal",
    "CWG2682": "Templated function vs. function template",
    "CWG2683": "Default arguments for member functions of templated nested classes",
    "CWG2684": "thread_local dynamic initialization",
    "CWG2685": "Aggregate CTAD, string, and brace elision",
    "CWG2686": "Pack expansion into a non-pack parameter of a concept",
    "CWG2687": "Calling an explicit object member function via an address-of-overload-set",
    "CWG2688": "Calling explicit object member functions",
    "CWG2689": "Are cv-qualified std::nullptr_t fundamental types?",
    "CWG2690": "Semantics of defaulted move assignment operator for unions",
    "CWG2691": "hexadecimal-escape-sequence is too greedy",
    "CWG2692": "Static and explicit object member functions with the same parameter-type-lists",
    "CWG2693": "Escape sequences for the string-literal of #line",
    "CWG2694": "string-literals of the _Pragma operator",
    "CWG2695": "Semantic ignorability of attributes",
    "CWG2696": "Relational comparisons of pointers to void",
    "CWG2697": "Deduction guides using abbreviated function syntax",
    "CWG2698": "Using extended integer types with z suffix",
    "CWG2699": "Inconsistency of throw-expression specification",
    "CWG2700": "#error disallows existing implementation practice",
    "CWG2701": "Default arguments in multiple scopes / inheritance of array bounds in the same scope",
    "CWG2702": "Constant destruction of reference members",
    "CWG2703": "Three-way comparison requiring strong ordering for floating-point types, take 2",
    "CWG2704": "Clarify meaning of \"bind directly\"",
    "CWG2705": "Accessing ambiguous subobjects",
    "CWG2706": "Repeated structured binding declarations",
    "CWG2707": "Deduction guides cannot have a trailing requires-clause",
    "CWG2708": "Parenthesized initialization of arrays",
    "CWG2709": "Parenthesized initialization of reference-to-aggregate",
    "CWG2710": "Loops in constant expressions",
    "CWG2711": "Source for copy-initializing the exception object",
    "CWG2712": "Simplify restrictions on built-in assignment operator candidates",
    "CWG2713": "Initialization of reference-to-aggregate from designated initializer list",
    "CWG2714": "Implicit deduction guides omit properties from the parameter-declaration-clause of a constructor",
    "CWG2715": "\"calling function\" for parameter initialization may not exist",
    "CWG2716": "Rule about self-or-base conversion is normatively redundant",
    "CWG2717": "Pack expansion for alignment-specifier",
    "CWG2718": "Type completeness for derived-to-base conversions",
    "CWG2719": "Creating objects in misaligned storage",
    "CWG2720": "Template validity rules for templated entities and alias templates",
    "CWG2721": "When exactly is storage reused?",
    "CWG2722": "Temporary materialization conversion for noexcept operator",
    "CWG2723": "Range of representable values for floating-point types",
    "CWG2724": "Clarify rounding for arithmetic right shift",
    "CWG2725": "Overload resolution for non-call of class member access",
    "CWG2726": "Alternative tokens appearing as attribute-tokens",
    "CWG2727": "Importing header units synthesized from source files",
    "CWG2728": "Evaluation of conversions in a delete-expression",
    "CWG2729": "Meaning of new-type-id",
    "CWG2730": "Comparison templates on enumeration types",
    "CWG2731": "List-initialization sequence with a user-defined conversion",
    "CWG2732": "Can importable headers react to preprocessor state from point of import?",
    "CWG2733": "Applying [[maybe_unused]] to a label",
    "CWG2734": "Immediate forward-declared function templates",
    "CWG2735": "List-initialization and conversions in overload resolution",
    "CWG2736": "Standard layout class with empty base class also in first member",
    "CWG2737": "Temporary lifetime extension for reference init-captures",
    "CWG2738": "\"denotes a destructor\" is missing specification",
    "CWG2739": "Nested requirement not a constant expression",
    "CWG2740": "Too many objects have constexpr-unknown type",
    "CWG2741": "Implicit conversion sequence from empty list to array of unknown bound",
    "CWG2742": "Guaranteed copy elision for brace-initialization from prvalue",
    "CWG2743": "Copying non-trivial objects nested within a union",
    "CWG2744": "Multiple objects of the same type at the same address",
    "CWG2745": "Dependent odr-use in generic lambdas",
    "CWG2746": "Checking of default template arguments",
    "CWG2747": "Cannot depend on an already-deleted splice",
    "CWG2748": "Accessing static data members via null pointer",
    "CWG2749": "Treatment of \"pointer to void\" for relational comparisons",
    "CWG2750": "construct_at without constructor call",
    "CWG2751": "Order of destruction for parameters for operator functions",
    "CWG2752": "Excess-precision floating-point literals",
    "CWG2753": "Storage reuse for string literal objects and backing arrays",
    "CWG2754": "Using *this in explicit object member functions that are coroutines",
    "CWG2755": "Incorrect wording applied by P2738R1",
    "CWG2756": "Completion of initialization by delegating constructor",
    "CWG2757": "Deleting or deallocating storage of an object during its construction",
    "CWG2758": "What is \"access and ambiguity control\"?",
    "CWG2759": "[[no_unique_address] and common initial sequence",
    "CWG2760": "Defaulted constructor that is an immediate function",
    "CWG2761": "Implicitly invoking the deleted destructor of an anonymous union member",
    "CWG2762": "Type of implicit object parameter",
    "CWG2763": "Ignorability of [[noreturn]] during constant evaluation",
    "CWG2764": "Use of placeholders affecting name mangling",
    "CWG2765": "Address comparisons between potentially non-unique objects during constant evaluation",
    "CWG2766": "Repeated evaluation of a string-literal may yield different objects",
    "CWG2767": "Non-defining declarations of anonymous unions",
    "CWG2768": "Assignment to enumeration variable with a braced-init-list",
    "CWG2769": "Substitution into template parameters and default template arguments should be interleaved",
    "CWG2770": "Trailing requires-clause can refer to function parameters before they are substituted into",
    "CWG2771": "Transformation for unqualified-ids in address operator",
    "CWG2772": "Missing Annex C entry for linkage effects of linkage-specification",
    "CWG2773": "Naming anonymous union members as class members",
    "CWG2774": "Value-dependence of requires-expressions",
    "CWG2775": "Unclear argument type for copy of exception object",
    "CWG2776": "Substitution failure and implementation limits",
    "CWG2777": "Type of id-expression denoting a template parameter object",
    "CWG2778": "Trivial destructor does not imply constant destruction",
    "CWG2779": "Restrictions on the ordinary literal encoding",
    "CWG2780": "reinterpret_cast to reference to function types",
    "CWG2781": "Unclear recursion in the one-definition rule",
    "CWG2782": "Treatment of closure types in the one-definition rule",
    "CWG2783": "Handling of deduction guides in global-module-fragment",
    "CWG2784": "Unclear definition of member-designator for offsetof",
    "CWG2785": "Type-dependence of requires-expression",
    "CWG2786": "Comparing pointers to complete objects",
    "CWG2787": "Kind of explicit object copy/move assignment function",
    "CWG2788": "Correspondence and redeclarations",
    "CWG2789": "Overload resolution with implicit and explicit object member functions",
    "CWG2790": "Aggregate initialization and user-defined conversion sequence",
    "CWG2791": "Unclear phrasing about \"returning to the caller\"",
    "CWG2792": "Clean up specification of noexcept operator",
    "CWG2793": "Block-scope declaration conflicting with parameter name",
    "CWG2794": "Uniqueness of lambdas in alias templates",
    "CWG2795": "Overlapping empty subobjects with different cv-qualification",
    "CWG2796": "Function pointer conversions for relational operators",
    "CWG2797": "Meaning of \"corresponds\" for rewritten operator candidates",
    "CWG2798": "Manifestly constant evaluation of the static_assert message",
    "CWG2799": "Inheriting default constructors",
    "CWG2800": "Instantiating constexpr variables for potential constant evaluation",
    "CWG2801": "Reference binding with reference-related types",
    "CWG2802": "Constrained auto and redeclaration with non-abbreviated syntax",
    "CWG2803": "Overload resolution for reference binding of similar types",
    "CWG2804": "Lookup for determining rewrite targets",
    "CWG2805": "Underspecified selection of deallocation function",
    "CWG2806": "Make a type-requirement a type-only context",
    "CWG2807": "Destructors declared consteval",
    "CWG2808": "Explicit specialization of defaulted special member function",
    "CWG2809": "An implicit definition does not redeclare a function",
    "CWG2810": "Requiring the absence of diagnostics for templates",
    "CWG2811": "Clarify \"use\" of main",
    "CWG2812": "Allocation with explicit alignment",
    "CWG2813": "Class member access with prvalues",
    "CWG2814": "Alignment requirement of incomplete class type",
    "CWG2815": "Overload resolution for references/pointers to noexcept functions",
    "CWG2816": "Unclear phrasing \"may assume ... eventually\"",
    "CWG2817": "sizeof(abstract class) is underspecified",
    "CWG2818": "Use of predefined reserved identifiers",
    "CWG2819": "Cast from null pointer value in a constant expression",
    "CWG2820": "Value-initialization and default constructors",
    "CWG2821": "Lifetime, zero-initialization, and dynamic initialization",
    "CWG2822": "Side-effect-free pointer zap",
    "CWG2823": "Implicit undefined behavior when dereferencing pointers",
    "CWG2824": "Copy-initialization of arrays",
    "CWG2825": "Range-based for statement using a braced-init-list",
    "CWG2826": "Missing definition of \"temporary expression\"",
    "CWG2827": "Representation of unsigned integral types",
    "CWG2828": "Ambiguous interpretation of C-style cast",
    "CWG2829": "Redundant case in restricting user-defined conversion sequences",
    "CWG2830": "Top-level cv-qualification should be ignored for list-initialization",
    "CWG2831": "Non-templated function definitions and requires-clauses",
    "CWG2832": "Invented temporary variables and temporary objects",
    "CWG2833": "Evaluation of odr-use",
    "CWG2834": "Partial ordering and explicit object parameters",
    "CWG2835": "Name-independent declarations",
    "CWG2836": "Conversion rank of long double and extended floating-point types",
    "CWG2837": "Instantiating and inheriting by-value copy constructors",
    "CWG2838": "Declaration conflicts in lambda-expressions",
    "CWG2839": "Explicit destruction of base classes",
    "CWG2840": "Missing requirements for fundamental alignments",
    "CWG2841": "When do const objects start being const?",
    "CWG2842": "Preferring an initializer_list over a single value",
    "CWG2843": "Undated reference to Unicode makes C++ a moving target",
    "CWG2844": "Enumerating a finite set of built-in candidates",
    "CWG2845": "Make the closure type of a captureless lambda a structural type",
    "CWG2846": "Out-of-class definitions of explicit object member functions",
    "CWG2847": "Constrained explicit specializations of function templates at class scope",
    "CWG2848": "Omitting an empty template argument list for explicit instantiation",
    "CWG2849": "Parameter objects are not temporary objects",
    "CWG2850": "Unclear storage duration for function parameter objects",
    "CWG2851": "Allow floating-point conversions in converted constant expressions",
    "CWG2852": "Complete-class contexts and class-scope lambdas",
    "CWG2853": "Pointer arithmetic with pointer to hypothetical element",
    "CWG2854": "Storage duration of exception objects",
    "CWG2855": "Undefined behavior in postfix increment",
    "CWG2856": "Copy-list-initialization with explicit default constructors",
    "CWG2857": "Argument-dependent lookup with incomplete class types",
    "CWG2858": "Declarative nested-name-specifiers and pack-index-specifiers",
    "CWG2859": "Value-initialization with multiple default constructors",
    "CWG2860": "Remove and fix the term \"vacuous initialization\"",
    "CWG2861": "dynamic_cast on bad pointer value",
    "CWG2862": "Unclear boundaries of template declarations",
    "CWG2863": "Unclear synchronization requirements for object lifetime rules",
    "CWG2864": "Narrowing floating-point conversions",
    "CWG2865": "Regression on result of conditional operator",
    "CWG2866": "Observing the effects of [[no_unique_address]]",
    "CWG2867": "Order of initialization for structured bindings",
    "CWG2868": "Self-references in trivially copyable objects as function return values",
    "CWG2869": "this in local classes",
    "CWG2870": "Combining absent encoding-prefixes",
    "CWG2871": "User-declared constructor templates inhibiting default constructors",
    "CWG2872": "Linkage and unclear \"can be referred to\"",
    "CWG2873": "Taking the address of a function involving template argument deduction",
    "CWG2874": "Qualified declarations of partial specializations",
    "CWG2875": "Missing support for round-tripping nullptr through indirection/address operators",
    "CWG2876": "Disambiguation of T x = delete(\"text\")",
    "CWG2877": "Type-only lookup for using-enum-declarator",
    "CWG2878": "C-style casts to reference types",
    "CWG2879": "Undesired outcomes with const_cast",
    "D0019": "(Untitled)",
    "D0019R8": "Update to P0019r7 with requested LWG edits",
    "D0057R9": "Application of Rebase Coro to C++17 to the Coroutine Working Draft",
    "D0122R7": "span, R7",
    "D0192R5": "Update of P0192R4 with open questions and SG-6 feedback.",
    "D0194R6": "Static Reflection",
    "D0201R5": "Draft with revised polymorphic_value wording",
    "D0201R6": "Revised edition of polymorphic_value wording",
    "D0211R2": "Allocator-aware library wrappers for dynamic allocation",
    "D0214R9": "simd paper with less SFINAE requirements",
    "D0260R6": "(Untitled)",
    "D0288R3": "(Untitled)",
    "D0288R4": "(Untitled)",
    "D0288R5": "any_invocable",
    "D0290R4": "Apply for synchronized_value, with changes based on LWG feedback",
    "D0323R7": "D0323r7",
    "D0325R3": "to_array from LFTS revision 3 (draft after small group)",
    "D0325R4": "to_array with expects, feature-test macro",
    "D0330": "D0330r8 Literal suffix for (signed) size_t",
    "D0340R2": "Making std::underlying_type SFINAE-friendly",
    "D0350R3": "Integrating simd with parallel algorithms",
    "D0355R6": "Date/time",
    "D0355R7": "Extending chrono to Calendars and Time Zones",
    "D0356R5": "(Untitled)",
    "D0357R3": "Updated to use new elements.",
    "D0388R4": "(Untitled)",
    "D0401R2": "Revised P0401R1, based on pre-meeting feedback",
    "D0424R3": "D0424R3 - Templated string UDL",
    "D0429R7": "Updated flat_map wording.",
    "D0429R8": "Update flat_map wording.",
    "D0454R1": "(Untitled)",
    "D0466R5": "LWG clarifications and fixes",
    "D0479R5": "Likely/unlikely revision",
    "D0482R4": "(Untitled)",
    "D0482R6": "(Untitled)",
    "D0493R4": "P0493R4 atomic min/max",
    "D0528R2": "D0528r2",
    "D0528R3": "D0528r3",
    "D0533R6": "Move proposed text from [expr.const] to [library.c]",
    "D0542R4": "Support for contract based programming in C++",
    "D0542R5": "D0542R5 - Support for contract based programming in C++",
    "D0551R3": "\"Don't Specialize std function templates!\"",
    "D0553R3": "Bit operations",
    "D0553R4": "(Untitled)",
    "D0586R1": "Update of P0586R0",
    "D0586R2": "Revision of p0586r1, updated as discussed",
    "D0591": "Revision of P0591r3 (uses-allocator construction) as per LWG wording review Tuesday",
    "D0593R4": "Implicit creation of objects for low-level object manipulation (with wording)",
    "D0593R5": "(Untitled)",
    "D0593R6": "Implicit creation of objects for low-level object manipulation",
    "D0602R2": "variant and optional should propagate copy/move triviality (rebased)",
    "D0608R2": "D0608R2 A sane variant converting constructor",
    "D0619R3": "Removing deprecated features",
    "D0619R4": "Remove deprecated facilities from C++20 please",
    "D0626R0": "No Internal Locks for C++ Atomics",
    "D0627R4": "std::unreachable() (fetch James Touton if this comes up)",
    "D0631R3": "Math Constants (Revision 3)",
    "D0631R7": "(Old: Please use D0631R8 instead) Updated Math Constant wording revision 7 (post telecon 2019-04-23)",
    "D0631R8": "Updated Math Constant wording revision 8 (post telecon 2019-04-23) updated 2019-07-17",
    "D0634R3": "Revision of Down with typename!",
    "D0642R4": "(Untitled)",
    "D0645R4": "Text Formatting",
    "D0645R6": "D0645R6 Text Formatting for C++20",
    "D0645R8": "(Old: use D0645R10 instead) Draft of P0645 with comments from March 18 LWG telecon addressed",
    "D0645R9": "(Old: use D0645R10 instead) Draft of P0645 with comments from June 14 LWG telecon addressed",
    "D0645R10": "Draft of P0645 with comments from June 21 LWG telecom addressed",
    "D0652R4": "Concurrent associative data structure with unsynchronized view",
    "D0660R7": "D0660R7 (interrupt tokens with callbacks and jthread)",
    "D0660R10": "jthread and stop_token Monday Evening and Night",
    "D0664R2": "Coroutine Issue List (March 2018)",
    "D0664R4": "Created issues 31 and 32 requested by SG1",
    "D0664R7": "Coroutines TS Issue list (with fixed wording for ready issues), others moved to not ready",
    "D0664R8": "Coroutine TS issues ready for CWG review",
    "D0668R5": "D0668R5 memory model",
    "D0670R4": "Function reflection",
    "D0722R3": "Efficient sized delete for variable sized classes",
    "D0732R1": "classes in non-type template parameters",
    "D0732R2": "D0732R2 class type NTTPs",
    "D0735R1": "D0735R1: Interaction of memory_order_consume with release sequences",
    "D0758R1": "D07581R1 Implicit conversion traits and utility functions",
    "D0759R1": "D07591R1 fpos Requirements",
    "D0769R1": "shift algorithm",
    "D0780R2": "(Untitled)",
    "D0784R2": "Standard containers and constexpr",
    "D0784R5": "(Untitled)",
    "D0784R6": "More constexpr containers (including EWG cut)",
    "D0784R7": "More constexpr containers",
    "D0798R8": "P0798R8 Monadic operations for std::optional",
    "D0806R2": "Deprecate implicit capture of \"this\" via [=]",
    "D0811R3": "Revisions to midpoint/lerp",
    "D0820R3": "Feedback on P0214 (simd<>)",
    "D0820R4": "Feedback on P0214",
    "D0823R0": "Modules: semantics of declarations",
    "D0840R2": "(Untitled)",
    "D0847R1": "(Untitled)",
    "D0847R3": "Deducing this",
    "D0848R1": "(Untitled)",
    "D0848R2": "(Untitled)",
    "D0848R3": "conditionally trivial",
    "D0870R2": "Revision of P0870R1, based on LEWG-I feedback today",
    "D0876R1": "fibers without scheduler, revised per SG1 in Jacksonville",
    "D0876R3": "Updated draft of fiber_handle proposal",
    "D0876R7": "K\u00f6ln update of P0876 based on Monday's SG1 feedback",
    "D0876R12": "fiber_context: fibers without scheduler - remove stop_source, stop_token, add ctor with explicit stack",
    "D0881R3": "Stacktrace wording (after LEWG address() votes)",
    "D0881R4": "Stacktrace with LEWG feedback",
    "D0881R6": "Stacktrace (after the CWG review)",
    "D0891R3": "D0981R3 (strong_order customization point + P1380R1 weak_order for floats)",
    "D0892R1": "(Untitled)",
    "D0892R2": "(Untitled)",
    "D0893R2": "(Untitled)",
    "D0898R3": "Standard Library Concepts",
    "D0905R1": "(Untitled)",
    "D0907R1": "D0907r1",
    "D0907R3": "D0907r3",
    "D0912R1": "Revised P0912r0 rendered as HTML + fixes",
    "D0917R1": "updated paper with more motivation for operator?:",
    "D0918R1": "Moar simd<> operations",
    "D0920R1": "(Untitled)",
    "D0920R2": "Precalculated hash values in lookup",
    "D0928R1": "D0928R1: Mitigating Speculation Attacks in C++",
    "D0929R1": "D0929R1: Checking for abstract class types (update for arrays)",
    "D0929R2": "(Untitled)",
    "D0941R2": "D0941R2 feature-test wording",
    "D0942R1": "(Untitled)",
    "D0943R1": "D0943R1: C atomics in C++ revision",
    "D0943R2": "D0943R2: Support C atomics in C++",
    "D0947R1": "(Untitled)",
    "D0957R4": "(Untitled)",
    "D0960R2": "Allow initializing aggregates from a parenthesized list of values",
    "D0960R3": "Allow initializing aggregates from a parenthesized list of values",
    "D0961R1": "(Untitled)",
    "D0962R1": "(Untitled)",
    "D0964R1": "Finding the right set of traits for simd",
    "D0966R1": "Mark Zeren - updated to deprecate default parameter.",
    "D0968R0": "Tentatively ready issues to be moved in Jacksonville",
    "D0969R0": "(Untitled)",
    "D0970R0": "Better, Safer Range Access Customization Points",
    "D0971": "(Untitled)",
    "D0973R0": "D0973R0: Coroutines TS Use Cases and Design Issues",
    "D0975R0": "Library impact of coroutines",
    "D0978R0": "Response to Coroutine Concerns raised in D0973r0",
    "D0979R0": "German position on merging Ranges TS",
    "D0980R1": "constexpr std::string with latest wording updates",
    "D0981R3": "D0981R3 (Let strong_order be a customization point) with LEWG Kona addenda",
    "D0982R1": "D0982",
    "D0991R0": "Comparison of Stackful Coroutine Proposals",
    "D0995R0": "D0995r0",
    "D0995R1": "D0995r1",
    "D0996R0": "Rebase Library Fundamentals on C++17",
    "D0996R1": "Rebase Library Fundamentals on C++17",
    "D0997R2": "Draft P0997 \"Retire Pernicious Language Constructs in Module Contexts\"",
    "D0997R3": "Draft 3 P0997 \"Retire Pernicious Language Constructs in Module Contexts\"",
    "D1000R4": "C++23 schedule",
    "D1001R0": "Target wavefront policies for C++20 rather than TS",
    "D1001R2": "vectorization parallel policy for C++20",
    "D1002R1": "D1002R1: Try-catch blocks in constexpr functions (with CWG live edits)",
    "D1004R2": "constexpr std::vector with latest wording updates",
    "D1005R0": "(Untitled)",
    "D1007R3": "Fixed wording of P1007R2 after review by Jens Maurer",
    "D1008R1": "(Untitled)",
    "D1009R2": "(Untitled)",
    "D1013": "D1013R1",
    "D1020R1": "Updated P1020 after initial wording review",
    "D1021R4": "(Untitled)",
    "D1021R5": "D1021R5 - Filling Holes in Class Template Argument Deduction",
    "D1024R2": "Revision of P1024r1 after LWG wording review on Wednesday",
    "D1024R3": "D1024R3 - Usability enhancements for std::span",
    "D1025R1": "D1025R1: Update the reference to the Unicode Standard",
    "D1035": "Rebases according to N4820",
    "D1035R7": "Applies Friday feedback",
    "D1040R1": "Latest Revision of Draft Proposal d1040r1 - std::embed based on LEWG feedback",
    "D1041R4": "(Untitled)",
    "D1045R1": "(Untitled)",
    "D1061R4": "1061 (structured bindings can introduce a pack)",
    "D1063R1": "Draft of P1063R1, Core Coroutines",
    "D1065R1": "(Untitled)",
    "D1065R2": "constexpr invoke",
    "D1069R1": "Split out make_unique/make_shared portion of P1069R0 as discussed with Titus",
    "D1072R5": "(Untitled)",
    "D1076R1": "(Untitled)",
    "D1084R2": "\"Today\u2019s return-type-requirements Are Insufficient\"",
    "D1087R1": "Modules for Standard C++ by Richard Smith and Gabriel Dos Reis",
    "D1091R3": "(Untitled)",
    "D1093R1": "Minor updates to P1093R0",
    "D1094R2": "Nested inline namespaces with revised core wording",
    "D1099R5": "D1099R5 (using enum) with fixes after Tuesday review round 1",
    "D1103R0": "Merging modules",
    "D1103R2": "(Untitled)",
    "D1103R3": "(Untitled)",
    "D1111R0": "D1111r0: Proposed Resolution to NB Comments on the Parallelism TS v2",
    "D1116R1": "(Untitled)",
    "D1118R0": "concat and split simd over and over",
    "D1119R0": "D1119r0",
    "D1120R0": "D1120R0: Wording for parts of P0946R0",
    "D1123R0": "Editorial Guidance for merging P0019r8 and P0528r3",
    "D1131R2": "(Untitled)",
    "D1132": "p1132 out_ptr with new benchmarks and edits for noexcept discussion",
    "D1135R2": "D1135R2: The C++20 Synchronization Library",
    "D1135R4": "The C++20 Synchronization Library",
    "D1135R5": "(old; use D1135R6 instead) The C++20 Synchronization Library",
    "D1135R6": "The C++20 Synchronization Library",
    "D1139R2": "(Untitled)",
    "D1141R2": "D1141R2: Yet another approach for constrained declarations (\"concepts terse syntax\")",
    "D1143R2": "(Untitled)",
    "D1143R3": "Adding the constinit keyword",
    "D1147R1": "P1147 printing volatile pointers",
    "D1152R2": "D1152R2 Deprecating volatile",
    "D1152R4": "D1152R4",
    "D1154": "D1154R2 forwarded to LWG from LEWG",
    "D1155R3": "Post-Kona draft of P1155 \"More implicit moves\"",
    "D1161R3": "(Untitled)",
    "D1165R1": "Make stateful allocator propagation more consistent for operator+(basic_string)",
    "D1185R1": "(Untitled)",
    "D1185R2": "(Untitled)",
    "D1186R1": "(Untitled)",
    "D1186R2": "(Untitled)",
    "D1186R3": "when do you use <=>",
    "D1187R1": "(Untitled)",
    "D1189R0": "(Untitled)",
    "D1206": "Revision to ranges::to",
    "D1206R2": "ranges::to",
    "D1207R3": "(Untitled)",
    "D1208": "Updated source_location wording by Daniel, Rob, and Peter (more input by Daniel)",
    "D1208R6": "final fix from Daniel (hopefully)",
    "D1213R1": "Update with 2 additional sections (2.3, 2.8)",
    "D1217R1": "D1217R1 out-of-thin-air, minor bug fix revision",
    "D1222R2": "Updated flat_set wording paper.",
    "D1223R3": "Update based on Tuesday review.",
    "D1236R0": "Alternative Wording for P0907R3 Signed Integers are Two's Complement",
    "D1236R1": "(Untitled)",
    "D1242R1": "D1242r1 - Single file modules",
    "D1243R4": "(Untitled)",
    "D1248R1": "Small qualification fixes and title change",
    "D1252R2": "Ranges design cleanup",
    "D1259R1": "Added section to explain what's still possible.",
    "D1264R1": "D1264R1: Revising the wording of stream input operations (after small group review)",
    "D1272R1": "D1272R1: Byteswapping for fun&&nuf",
    "D1272R4": "Byteswapping for fun&&nuf",
    "D1286R2": "(Untitled)",
    "D1289R1": "D1289R1 - Access control in contract conditions",
    "D1290R2": "D1290R2 - Avoiding undefined behavior in contracts",
    "D1293R1": "ostream_joiner as voted by committee",
    "D1301": "D1301R4 - nodiscard(\"should have a reason\"), Jens Updates with Aaron Fixes electric boogaloo",
    "D1306R2": "Wording for P1306 Expansion Statements",
    "D1306R3": "Updated wording for P1306 Expansion Statements",
    "D1323R2": "(Untitled)",
    "D1327R1": "(Untitled)",
    "D1330R0": "D1330R0: Changing the active member of a union inside constexpr",
    "D1331R2": "Updated wording prior to CWG discussion (per feedback from Jens)",
    "D1339R1": "Updated wording based on 2019-02-20 LEWG strawpoll",
    "D1344R0": "pre/post with WD text",
    "D1344R1": "contract pre/post with WD text",
    "D1348R0": "An Executor Property for Occupancy of Execution Agents",
    "D1353R0": "Missing feature test macros",
    "D1355R2": "D1355R2",
    "D1361R2": "Draft of P1361 \"Integration of chrono with text formatting\" with comments from June 28 LWG telecom addressed",
    "D1381R1": "(Untitled)",
    "D1385R6": "Draft of P1385R6, intended for pre-Varna mailing",
    "D1390R1": "Draft of Reflection NB comment resolutions",
    "D1391R2": "(Untitled)",
    "D1391R4": "range constructor for string view",
    "D1394R3": "(Untitled)",
    "D1394R4": "Range constructor for std::span",
    "D1413R2": "(Untitled)",
    "D1423R1": "(Untitled)",
    "D1423R3": "char8_t backward compatibility remediation",
    "D1426R0": "intended version",
    "D1426R1": "as meant to be published",
    "D1429R3": "Updated to P1429R2",
    "D1448R1": "D1448R1 - Simplifying Mixed Contract Modes",
    "D1450R3": "D1450R3: Enriching type modification traits",
    "D1452R2": "return-type-requirements",
    "D1456R1": "Move-only views",
    "D1458R1": "Updated \"Mandating the Standard Library\" papers",
    "D1459R1": "(Untitled)",
    "D1460R1": "(Untitled)",
    "D1462R1": "Updated \"Mandating the Standard Library\" papers",
    "D1463R1": "Updated \"Mandating the Standard Library\" papers",
    "D1464R1": "Reworked a bunch of \"Constraints\" elements",
    "D1466R1": "Miscellaneous minor fixes for chrono \u2014 updated",
    "D1466R3": "D1466R3: Miscellaneous minor fixes for chrono",
    "D1469R1": "D1469R1 - Disallow _ usage - With wording",
    "D1473R1": "Shadow namespaces",
    "D1474R1": "(Untitled)",
    "D1478R2": "Revision of D1478R2: byte-wise atomic memcpy",
    "D1482R0": "D1482r0 modules feedback",
    "D1485R0": "D1485R0 - Better keywords for the Coroutines TS",
    "D1486R0": "United Amendment to Contracts Facility for C++20",
    "D1486R1": "United Amendment to Contracts Facility for C++20",
    "D1487R0": "User Experience with Contracts That Work",
    "D1494R0": "Optimization barrier for undefined behavior",
    "D1496R0": "D1496R0 Formatting of negative zero",
    "D1502R0": "(Untitled)",
    "D1502R1": "(Untitled)",
    "D1505R0": "Mandating the Standard Library: Clause 30 - Atomic operations library",
    "D1522R1": "UPDATED: Iterator Difference Type and Integer Overflow",
    "D1523R1": "(Untitled)",
    "D1600": "slides from 'can we build it?' presentation. d1600 may change, assignment bug discovered",
    "D1607R1": "(Untitled)",
    "D1614R2": "the mothership paper",
    "D1616R1": "D1616R1: Using unconstrained template template parameters with constrained templates",
    "D1622R3": "D1622R3 Mandating the standard: Threads 32",
    "D1630R1": "spaceship tuneup",
    "D1633R1": "Ammendments to P1135",
    "D1636R1": "Formatters for library types",
    "D1638R1": "(Untitled)",
    "D1643R1": "Add wait/notify to atomic_ref",
    "D1645R1": "(Untitled)",
    "D1652R1": "Printf corner cases in std::format, rebased on coming D0645R10",
    "D1656R1": "D1656R1#2 - \"Throws: Nothing\" should be noexcept",
    "D1661R1": "Link to proper revision o P920",
    "D1664": "(Untitled)",
    "D1668R1": "(Untitled)",
    "D1686R2": "Mandating the Standard Library: Clause 27 - Time library",
    "D1690R1": "P1690 with a typo fix -> D1690R1",
    "D1703R1": "Wording for P1703R0",
    "D1714R1": "NTTP are incomplete without float, double, and long double!",
    "D1715R1": "Extra wording from CWG regarding deduced parameters for templated functions",
    "D1716R1": "Included proposed snake_case name alternatives.",
    "D1716R3": "Fixes LWG review",
    "D1718R2": "Mandating the Standard Library: Clause 25",
    "D1719R1": "Pre-mailing version - superseded",
    "D1719R2": "Mandating the Standard Library: Clause 26 - Numerics library",
    "D1720R1": "Pre-mailing version - superseded",
    "D1721R1": "Pre-mailing version - superseded",
    "D1721R2": "Mandating the Standard Library: Clause 29",
    "D1722R2": "Mandating the Standard Library: Clause 30",
    "D1723R1": "D1723R1: Mandating the Standard Library: Clause 31 - Atomics library",
    "D1723R2": "Mandating the Standard Library: Clause 31",
    "D1732R3": "(Untitled)",
    "D1739R1": "Draft of P1739 that contains the state approved by LEWG.",
    "D1739R3": "Avoid etc.",
    "D1739R4": "Avoid etc.",
    "D1766R1": "(Untitled)",
    "D1775R1": "UPDATED: Iterator Difference Type and Integer Overflow",
    "D1779R1": "ABI isolation for member functions",
    "D1779R2": "ABI isolation for member functions",
    "D1782R1": "Local contract restrictions",
    "D1787R1": "Declarations and where to find them",
    "D1787R4": "Declarations and where to find them",
    "D1806R0": "D1806R0: Put target_type/target in any_invocable",
    "D1807R0": "Overview of all contract papers",
    "D1808": "P1808R0: Contra P0339 polymorphic_allocator<> as a vocabulary type",
    "D1810": "A Quick Look at what P1754 will change (full)",
    "D1811R0": "(Untitled)",
    "D1812R0": "Axioms should be assumable",
    "D1814R0": "D1814R0: Wording for Class Template Argument Deduction for Alias Templates. Split from P1021 as requested",
    "D1815R0": "Translation-unit-local entities",
    "D1815R1": "Translation-unit-local entities",
    "D1815R2": "Translation-unit-local entities",
    "D1816R0": "Wording for the aggregate part of P1021 \"Filling holes in CTAD\"",
    "D1820R0": "A very early and rough draft of an executor error and cancellation handling compromise.",
    "D1823R0": "Wording to remove contracts from the WP",
    "D1824R1": "(Untitled)",
    "D1824R2": "Contracts direction (23)",
    "D1825R0": "Merged wording for P0527R1 and P1155R3",
    "D1831R1": "D1831R1",
    "D1839R3": "Accessing Object Representations",
    "D1847R3": "version used for presentation",
    "D1854": "Making non-encodable string literals ill-formed",
    "D1856R1": "Updated paper on the fix for std::byte",
    "D1857R2": "(Untitled)",
    "D1857R3": "Modules Dependency Discovery",
    "D1859R1": "Standard terminology character sets and encodings",
    "D1862": "(Untitled)",
    "D1862R1": "Ranges adaptors for non-copyable iterators",
    "D1865R1": "Add max() to latch and barrier",
    "D1868R0": "\ud83e\udd84 width: clarifying units of width and precision in std::format",
    "D1868R1": "D1868R1 \ud83e\udd84 width: clarifying units of width and precision in std::format with LWG comments from 7 Nov addressed",
    "D1868R2": "(Untitled)",
    "D1869R1": "Changes from SG1 review.",
    "D1870R1": "(Untitled)",
    "D1871R1": "Rename disable_sized_sentinel to disable_sized_sentinel_for",
    "D1874R1": "(Untitled)",
    "D1878R1": "D1878R1 Constraining Readable Types - s/readable/indirectly_readable/g",
    "D1879R1": "(Untitled)",
    "D1880R1": "(Untitled)",
    "D1881R2": "Adds \"Guiding Principles\" subsection",
    "D1892R1": "Extended locale-specific presentation specifiers for std::format",
    "D1902R1": "Feature test macro changes",
    "D1907R1": "(Untitled)",
    "D1914R1": "Updated paper on the name of shift algorithms",
    "D1935R1": "A C++ Approach to Physical Units",
    "D1937R2": "Fixing inconsistencies between constexpr and consteval functions",
    "D1938R1": "D1938R1 (if consteval)",
    "D1946R0": "Allow default by-value comparisons",
    "D1949R0": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "D1949R2": "Update p1949.",
    "D1950R1": "Updated draft of P1950 following LEWGI review on Monday",
    "D1956R1": "About PL326, US327, GB332, US328, GB331 (bit function names)",
    "D1956R2": "Updating P1956R0 (name of bit functions resolving PL326, US327, GB332, US328, GB331)",
    "D1956R3": "Updating D1956R2 (name of bit functions resolving PL326, US327, GB332, US328, GB331)",
    "D1957R0": "Converting from T* to bool should be considered narrowing (re: US 212)",
    "D1957R2": "Converting from T* to bool should be considered narrowing (re: US 212)",
    "D1959R0": "(Untitled)",
    "D1960R0": "NB comment changes from SG1",
    "D1961R0": "Harmonizing the definitions of total order for pointers (US 220 & US 176)",
    "D1963R0": "Fixing US 313",
    "D1964R0": "Casting convertible_to",
    "D1970R0": "Consistency for size() functions",
    "D1970R2": "size consistency: Add ranges::ssize",
    "D1976R0": "PL250: Fixed-size span construction from dynamic range",
    "D1981R0": "Addresses DE 345",
    "D1982R0": "Addresses DE 346",
    "D1983R0": "Wording for GB301, US296, US292, US291, and US283",
    "D1984": "Resolves GB315 and GB316",
    "D1985R1": "Greatly expanded the examples and clarified what is being proposed",
    "D2002R1": "consolidated fixes for defaulted comparison wording issues",
    "D2003R1": "(Untitled)",
    "D2006R1": "connect/start as more efficient basis operations for sender/receiver",
    "D2014R1": "(Untitled)",
    "D2014R2": "D2014R2 - align_val_t support for coroutine state allocation",
    "D2029R1": "Proposed resolution for core issues 411, 1656, and 2333; numeric and universal character escapes in character and string literals",
    "D2034R1": "(Untitled)",
    "D2045R1": "Missing Mandates for the standard library",
    "D2066R1": "Minimal Transactional Memory",
    "D2066R10": "(Untitled)",
    "D2077R3": "(Untitled)",
    "D2081R1": "Draft revision of P2081: Rebase the LFTSv3 on C++20",
    "D2082R1": "Fixing CTAD for aggregates",
    "D2085R0": "Consistent defaulted comparisons",
    "D2089R0": "Function parameter constraints are fragile (a response to P1733)",
    "D2091R0": "Issues with Range Access CPOs",
    "D2095R0": "Resolve lambda init-capture pack grammar (CWG2378)",
    "D2096R0": "Generalized wording for partial specializations",
    "D2100": "a response to US062 and FR066",
    "D2101R0": "\u201cModels\u201d subsumes \u201csatisfies\u201d (Wording for US298 and US300)",
    "D2102R0": "Make \u201cimplicit expression variations\u201d more explicit (Wording for US185)",
    "D2103R0": "Omnibus NB comment resolutions",
    "D2104R0": "Resolution for GB046 - Disallow changing concept values",
    "D2106R0": "Alternative wording for GB315 and GB316",
    "D2108R0": "CWG \"ready\" issue resolutions",
    "D2116R0": "Remove tuple-like protocol support from fixed-extent span",
    "D2308R0": "Template parameter initialization",
    "D2314R4": "(Untitled)",
    "D2361": "unevaluated strings",
    "D2415R2": "What is a view?",
    "D2418R2": "P2418R2 Add support for std::generator-like types to std::format",
    "D2432R1": "P2432R1: fix istream_view",
    "D2450R0": "Library Issues to be moved at plenary",
    "D2460": "p2460 inner-scope namespace entitities",
    "D2462R0": "Resolutions for CWG \"ready\" issues",
    "D2530R3": "Changes based on LWG 2023-02-07 review",
    "D2572R1": "P2572R1: std::format() fill character allowances",
    "D2609R3": "P2609R3",
    "D2616R4": "(Untitled)",
    "D2621": "UB? In My Lexer?",
    "D2652R2": "Disallow User Specialization of allocator_traits (Bug fix from R1)",
    "D2674R1": "A trait for implicit lifetime types",
    "D2679R2": "Fixing std::start_lifetime_as and std::start_lifetime_as_array",
    "D2693R1": "Formatting thread::id and stacktrace",
    "D2736R2": "Referencing The Unicode Standard",
    "D2770R0": "Stashing stashing iterators for proper flattening",
    "D2786R0": "trivial relocation proposal in response to P1144R6",
    "D2787R1": "pmr::generator - Promise Types are not Values",
    "D2788R0": "Linkage for modular constants",
    "D2789R0": "C++ Standard Library Ready Issues to be moved in Issaquah, Feb. 2023",
    "D2790R0": "Standard Library Immediate Issues",
    "D2796R0": "Core Language Working Group \"ready\" Issues for the February, 2023 meeting",
    "D2797R0": "2692, 2687 Static and explicit object member functions with the same parameter-type-lists",
    "D2808R0": "Internal linkage in the global module",
    "D4752": "(Draft) Responses to the National Body Comments on PDTS 19750 (Parallelism TS v2)",
    "EDIT1": "Add a GNU Makefile to simplify building the PDF",
    "EDIT2": "Make the standard build on OS X with macports sed.",
    "EDIT3": "self-explanatory",
    "EDIT4": "promote [iterator.range] to rSec1 not rSec2",
    "EDIT5": "post-rebase pull request",
    "EDIT6": "Add cross-references for iterator categories.",
    "EDIT7": "[storage.iterator] Remove redundant template argument lists.",
    "EDIT8": "post-rebase pull request",
    "EDIT9": "fix typeface in [pairs.pair]/20",
    "EDIT10": "Fix caption for Table 71",
    "EDIT11": "fix typo",
    "EDIT12": "Fix error in example in 5.1.2 p17",
    "EDIT13": "[string.cons] Remove redundant template argument lists.",
    "EDIT14": "Revert 'editorial' change to definition of literal type",
    "EDIT15": "partial_sum_copy should be partial_sum",
    "EDIT16": "first attempt to pull requests",
    "EDIT17": "Construction order for thread_local objects is unclear",
    "EDIT18": "Spotted a stray curly bracket in a declaration",
    "EDIT19": "Some more trivial syntax fixes",
    "EDIT20": "Replace \"iff\"",
    "EDIT21": "Replace \"iff\"",
    "EDIT22": "Editorial(?) changes in [conversions]",
    "EDIT23": "[thread.condition.condvar] Replace references to timed_wait",
    "EDIT24": "Editorial fixes in [streambuf]",
    "EDIT25": "[time] formatting fixes",
    "EDIT26": "Editorial(?) changes in [conversions]",
    "EDIT27": "\"free functions\" to \"non member functions\"",
    "EDIT28": "fix minor typo",
    "EDIT29": "Switch to basic regexen because sed's flag to turn on extended regex is non-portable.",
    "EDIT30": "fixed typo : mersenne_twister_engine's template parameter",
    "EDIT31": "Replaced \"encoding schemes\" with \"encoding forms\"",
    "EDIT32": "[deque.overview] add whitespace",
    "EDIT33": "[container.requirements.general] Remove type Q.",
    "EDIT34": "[containers]Use code font for erase.",
    "EDIT35": "Initializer List",
    "EDIT36": "[tuple.general] Fix return type of forward_as_tuple",
    "EDIT37": "[class.expl.init] Fix sample for copy-list-initialization",
    "EDIT38": "[Containers] Fix minor typo, etc.",
    "EDIT39": "[futures.async] Remove redundant Remarks clause.",
    "EDIT40": "unresolved references",
    "EDIT41": "[tuple.general] Fix forward_as_tuple signature.",
    "EDIT42": "[associative] Remove redundant template arguments.",
    "EDIT43": "Typefaces fixes",
    "EDIT44": "[func.wrap.func.targ] Use 'class' not 'typename'",
    "EDIT45": "Remove two redundant bullets.",
    "EDIT46": "[class] Hyphenate \"standard-layout\"",
    "EDIT47": "Extra comma in  [ios::failure]/3",
    "EDIT48": "basic_regex constructor inconsistencies",
    "EDIT49": "ios_base synopsis issues",
    "EDIT50": "[gram.dcl] assignment-expression -> alignment-expression",
    "EDIT51": "[tuple.swap] wrong subscript",
    "EDIT52": "Inconsistent null values throughout the draft",
    "EDIT53": "Inconsistent spacing between \"template\" and \"<\"",
    "EDIT54": "[containers.requirements.general] missing reference to table",
    "EDIT55": "[expr.cond]/3 typo - rvalue -> prvalue",
    "EDIT56": "Formatting issue in Cross References annex",
    "EDIT57": "[thread.condition.condvar], [thread.condition.condvarany] Misuse of term function scope",
    "EDIT58": "[atomics.types.generic]/7 Typo",
    "EDIT59": "[dcl.attr.grammar]/6 ill formed and malformed are poorly formed",
    "EDIT60": "[dcl.type.simple] erroneous example",
    "EDIT61": "\"sequenced after\" undefined",
    "EDIT62": "[vector.bool]/1 typos",
    "EDIT63": "[streambuf.virt.put]/5 \"NULL non-value\"",
    "EDIT64": "type-specifier-seq should be decl-specifier-seq",
    "EDIT65": "[thread.thread.class] missing declaration of swap(thread&,thread&)",
    "EDIT66": "[thread.threads] Namespace indentation ",
    "EDIT67": "[ratio.ratio] Order of ratio members",
    "EDIT68": "\"conditionally supported\" -> \"conditionally-supported\"",
    "EDIT69": "index: formatting issues",
    "EDIT70": "[pairs.pair] \"Requires Requires\" requires fewer Requires ",
    "EDIT71": "make_shared missing in synopsis for <memory>",
    "EDIT72": " [expr.static.cast]/12 specifies \"undefined result\" instead of undefined behaviour",
    "EDIT73": "Semicolons after references to functions in comments",
    "EDIT74": "\"integral literal\" should be \"integer literal\"",
    "EDIT75": "LaTeX: Pull contents for synopses in by reference as possible.",
    "EDIT76": "Lock tag types not in Index of library names",
    "EDIT77": "Change \"full specializations\" to \"explicit specializations\" in [atomic.types.generic]/4",
    "EDIT78": "[associative.reqmts] Terribly formatted table",
    "EDIT79": "[unord.set.overview] Remove bogus template parameters.",
    "EDIT80": "\u00a716.3.5 [cpp.scope] ends in an unmatched \"\u2014 end note ]\"",
    "EDIT81": "20.2.3 forward/move helpers [forward]",
    "EDIT82": "use of \"Remark\" element in library specifications",
    "EDIT83": "Apply N3668, std::exchange, to the Working Draft.",
    "EDIT84": "[adjacent.difference]'s Effects paragraph isn't numbered",
    "EDIT85": "[unord.req] says \"maximum load load factor\"",
    "EDIT86": "\"shall not participate in overload resolution unless\" considered not not harmful",
    "EDIT87": "[unord.req] Fix \"load load factor\" typo.",
    "EDIT88": "[thread.threads] Add lock tags to index of library names.",
    "EDIT89": "[associative.reqmts] begins a sentence with lowercase \"always\"",
    "EDIT90": "[over.ics.rank]/3 Horrible nested sub-bullets",
    "EDIT91": "Library N3656 make_unique",
    "EDIT92": "Library N3658 Compile-time integer sequences",
    "EDIT93": "Apply N3668, std::exchange, to the Working Draft.",
    "EDIT94": "Missing end-note tags",
    "EDIT95": "Inconsistent formatting of T1, T2, etc. placeholders",
    "EDIT96": "[dcl.array]/1 code example needs more \\tcode{}",
    "EDIT97": "[class.mem]/10 inconsistent formatting of \"static\"",
    "EDIT98": "implementation-defined bits not in implementation-defined index",
    "EDIT99": "deallocation function term defined in a weird spot",
    "EDIT100": "23.3.4.1 [forwardlist.overview]/3 typo: \"acess\"",
    "EDIT101": "Library N3657, Adding heterogeneous comparison lookup to associative containers",
    "EDIT102": "Library N3662, C++ Dynamic Arrays",
    "EDIT103": "Library N3669, Fixing constexpr member functions without const",
    "EDIT104": "Core N3652, Relaxing constraints on constexpr functions",
    "EDIT105": "[dcl.spec.auto] example inconsistent use of class and typename",
    "EDIT106": "Inconsistent formatting of \"public\" and \"inline\" in sentences",
    "EDIT107": "[basic.types] void -> cv void in literal type definition",
    "EDIT108": "[dcl.constexpr] class of (non-static member) function function is a member shall be a literal type",
    "EDIT109": "== operator vs operator == (and similar cases)",
    "EDIT110": "Formatting: Ugly breaks in [dcl.type.simple]",
    "EDIT111": "Run-on paragraph in [dcl.spec.auto]/7",
    "EDIT112": "Library N3672, a utility class to represent optional objects",
    "EDIT113": "Library N3654, Quoted Strings Library Proposal",
    "EDIT114": "Library N3670, Addressing Tuples by Type",
    "EDIT115": "Formatting issues in [tuple]",
    "EDIT116": " Library N3671, Making non-modifying sequence operations more robust",
    "EDIT117": "\"possibly const\" vs \"possibly \\tcode{const}\"",
    "EDIT118": "\"T* p\" vs. \"T *p\"",
    "EDIT119": "\"explicit constexpr\" vs. \"constexpr explicit\"",
    "EDIT120": "[sequence.reqmts] Table \"Sequence container requirements\" is bad, and it should feel bad",
    "EDIT121": "Library N3642, User-defined Literals for Standard Library Types",
    "EDIT122": "\"; otherwise\" vs \". Otherwise\" vs \". Otherwise,\"",
    "EDIT123": "\"synchronizes with\" italicized in some places",
    "EDIT124": "Missing index entries: std::tie and std::ignore",
    "EDIT125": "[utility] synopsis: T1/T2 vs T/U",
    "EDIT126": "[intseq] 20.5 Compile-time integer sequences ",
    "EDIT127": "[optional.syn] const placed on right",
    "EDIT128": "[optional.inplace] \"argument pack\" should be \"function parameter pack\"",
    "EDIT129": "Location of [dynarray]",
    "EDIT130": "[dynarray.overview] deleted assignment operator location, ordering of const",
    "EDIT131": "[dynarray.cons] location of Throws clause",
    "EDIT132": "[class]/3 identifier missing a grammarterm",
    "EDIT133": "[dcl.type.simple]/4 missing semicolon",
    "EDIT134": "Typo in [basic.scope.namespace]/3",
    "EDIT135": "[optional] Editorial fix",
    "EDIT136": "[optional] Editorial fix",
    "EDIT137": "[class.friend] Hyphenate \"nonclass\".",
    "EDIT138": "Remove trailing whitespace",
    "EDIT139": "Apply LWG DR 2109 to [optional.hash]",
    "EDIT140": "[optional] Declare std::nullopt as a constant, not a function as is done now.",
    "EDIT141": "Fix for issue #80, [cpp.scope] ends in an unmatched \"\u2014 end note ]\"",
    "EDIT142": "[optional.comp_with_t] Missing description for template <class T> constexpr bool operator<(const T&, const optional<T>&);",
    "EDIT143": "\"magic macros\"",
    "EDIT144": "[class.dtor]/5",
    "EDIT145": "Outdated text on signedness of bit-fields",
    "EDIT146": "Formatting: [ostreambuf.iter.cons]",
    "EDIT147": "HTML version",
    "EDIT148": "[temp.friend] Fix minor typo.",
    "EDIT149": "Wrong type for out << put_time(tmb, fmt)",
    "EDIT150": "[dcl.init] Function parameters can also be initialized by braced-init-lists",
    "EDIT151": "Declarations of call_once mismatch",
    "EDIT152": "Correct pasto in 14.7.3 example",
    "EDIT153": "Remove to_string(float)",
    "EDIT154": "Editorial fix in [namespace.def]",
    "EDIT155": "Sorry, please ignore...",
    "EDIT156": "[lex.icon] type of binary literals missing from Table 6 (Types of integer constants)",
    "EDIT157": "Exception specification of implicitly declared deallocation functions",
    "EDIT158": "Editorial change missing from resolution DR739: update note to reflect",
    "EDIT159": "Second sentence of 1.10p6 is redundant",
    "EDIT160": "editorial issue in [valarray.sub]",
    "EDIT161": "Replace NULL with null.",
    "EDIT162": "Typo in 14.2p5 code example",
    "EDIT163": "duplicate period in \u00a71.9/14 [intro.execution]",
    "EDIT164": "weibull_distribution : add missing semicolon",
    "EDIT165": "[strings] Use \"Equivalent to\" where appropriate",
    "EDIT166": "Placement of \"*\" and \"&\" inconsistent",
    "EDIT167": "runtime vs run-time",
    "EDIT168": "\"the program shall behave as if there were a single definition\" in [basic.def.odr]p6",
    "EDIT169": "[algorithms.general] Fix typo for search_n's return type",
    "EDIT170": "Wording change suggestion in function override rules",
    "EDIT171": "linear_congruential_engine : fix typo",
    "EDIT172": "Define non-trivial operations",
    "EDIT173": "ranlux48 : fix typo",
    "EDIT174": "14.7.3/7 is missing references to variable templates",
    "EDIT175": "Typo in 20.3.2 [pairs.pair]/1",
    "EDIT176": "Missing paragraph number in 21.4.6.3 [string::assign]",
    "EDIT177": "US-1: Use unique bullets in bulleted lists",
    "EDIT178": "US-15: Use the _t form of type traits",
    "EDIT179": "ES-7: Add \"binary constants\" to table column",
    "EDIT180": "US-11: having both \"bound\" and \"extent\" is redundant",
    "EDIT181": "CH-6: [over.literal]/8 Example can be improved",
    "EDIT182": "GB-5: [utility.exchange] missing MoveConstructible/MoveAssignable requirement",
    "EDIT183": "CH-7: [intseq.general]/2 index_sequence instead of integer_sequence",
    "EDIT184": "US-18: [meta.prop.unary]/6 absence of noexcept should be more explicit or declval used instead",
    "EDIT185": "GB-6: [category.ctype] Formatting of exposition-only members",
    "EDIT186": "GB-7: [container.requirements.general] Missing definitions in tables",
    "EDIT187": "ES-15: [associative.reqmts] Unnecessary definition of \"u\" in Table",
    "EDIT188": "GB-11: [re.iter] Formatting of exposition-only members",
    "EDIT189": "Typo in 23.4.7.2 [multiset.cons]/3",
    "EDIT190": "17.6.3.5 [allocator.requirements] defines \"a3\" then doesn't use it",
    "EDIT191": "Sundry typographical issues from BSI",
    "EDIT192": "std::hash<> could have a clearer index entry",
    "EDIT193": "16.8 says \"integer constant\" in a few places",
    "EDIT194": "[using.linkage] Fix reference to section of C standard in footnote",
    "EDIT195": "[allocator.requirements] Table 27 has a single colon instead of double colon for \"u\"",
    "EDIT196": "Capitalization of \"Effects: Equivalent to\" is not consistent",
    "EDIT197": "Wrong number of C headers",
    "EDIT198": "Add note to state that basic_string<charT, ...>::traits_type::char_type == charT",
    "EDIT199": "reverse_iterator synopsis includes associated functions in two places",
    "EDIT200": "[forwardlist.modifiers] contains a Returns clause that's not indented",
    "EDIT201": "[re.results] missing a reference",
    "EDIT202": "Clean up Mutex requirements throughout",
    "EDIT203": "Add names for the mutex requirements",
    "EDIT204": "[thread.lock.unique.cons]/11 Typo \"own\" -> \"owns\"",
    "EDIT205": "Weird special characters",
    "EDIT206": "Add note to [re.traits] about non-standard character classes are allowed",
    "EDIT207": "Remove some glitchy spaces.",
    "EDIT208": "Use nullptr in code blocks",
    "EDIT209": "\"lvalue-reference\" and \"rvalue-reference\" should not be hyphenated",
    "EDIT210": "reverse() should require ValueSwappable instead of swappable",
    "EDIT211": "[util.smartptr.shared.assign] assign from auto_ptr&& is in the wrong paragraph",
    "EDIT212": "Fix grammar's indent",
    "EDIT213": "parameter-type-list sometimes appears as a \\grammarterm{}",
    "EDIT214": "Many fixes in [diff]",
    "EDIT215": "Formatting of N in \"array of N T\"",
    "EDIT216": "[using.linkage] Cross reference typo",
    "EDIT217": "missing 'of' in 14.8.2.5 [temp.deduct.type] pg 383 of N3797, paragraph 9",
    "EDIT218": "Typo in 23.3.5.5 [list.ops]/20",
    "EDIT219": "Missing paragraph number in 18.8.6 [except.nested]",
    "EDIT220": "28.10.1 [re.results.const]/6 throws nothing if water is wet and kittens are cute",
    "EDIT221": "Re use of new type traits aliases",
    "EDIT222": "N3797 7.1.6.2.3 Note about signed specifier and bit-fields",
    "EDIT223": "\"Returns:\" should be followed by an English sentence",
    "EDIT224": "[util.smartptr.ownerless] is nested below [util.smartptr.weak]",
    "EDIT225": "Fixed typo",
    "EDIT226": "Fixes unformatted \"N\" in \"array of N T\".",
    "EDIT227": "Typo in 8.3.2 [dcl.ref]/1",
    "EDIT228": "\"Exception safety\" function attribute used but not in 17.5.1.4",
    "EDIT229": "Editorial: fix typo",
    "EDIT230": "Editorial fix - additional instances of 'an shared state'",
    "EDIT231": "20.3.4 [pair.astuple] takes Pairdemort, The Parameter Who Must Not Be Named",
    "EDIT232": "operator= missing from overview for (some) valarray classes",
    "EDIT233": "shuffle() in [algorithms.general] and [alg.random.shuffle] is poorly indented",
    "EDIT234": "\"class member\" -> \"member class\" in [temp.mem.class] (14.5.1.2) p1",
    "EDIT235": "[unord.req] should use dual-range is_permutation()",
    "EDIT236": "DefaultConstructible does not guarantee nullary copy-list-initialization",
    "EDIT237": "What is LIA-1?",
    "EDIT238": "Fixed nesting bugs for notes and examples",
    "EDIT239": "3/8 missing an update for variable templates",
    "EDIT240": "[container.requirements.general] should use dual-range equal()",
    "EDIT241": "Typo? in example in [temp.deduct.type]",
    "EDIT242": "23.6.5.2 [stack.defn] declares a bogus swap() for stack<T,Allocator>",
    "EDIT243": "[new.delete.single] uses \"returns 0\" in the context of a pointer",
    "EDIT244": "[util.smartptr.getdeleter] uses \"returns 0\" in the context of a pointer",
    "EDIT245": "[intseq] missing [make_]index_sequence",
    "EDIT246": "errno et al do not appear in index",
    "EDIT247": "std::tuple_element_t<> used without being defined",
    "EDIT248": "20.8.1.2.5 [unique.ptr.single.modifiers]/4 should say \"if and only if\"",
    "EDIT249": "shared_ptr(unique_ptr<Y, D>&&r) is missing a space",
    "EDIT250": "allocator_arg and piecewise_construct should use {}",
    "EDIT251": "Fix editorial issues.",
    "EDIT252": "[util.smartptr.hash] at wrong level",
    "EDIT253": "basic_string::replace description : fix missing words.",
    "EDIT254": "Use \"return-type\" instead of \"rt\" for \"member functions of the forms\" sections",
    "EDIT255": "Avoid ambiguity between \"size of\" and \"sizeof\" in [string.capacity] max_size()",
    "EDIT256": "[cpp.predefined] (16.8) paragraph 1",
    "EDIT257": "20.7.9.1 [allocator.members] should use addressof()",
    "EDIT258": "20.7.3.2 [pointer.traits.functions] needs paragraph numbers and capitalization",
    "EDIT259": "20.9.9.1.1 [func.bind.isbind] says \"have a BaseCharacteristics\"",
    "EDIT260": "24.4.1 [iterator.traits]/4's zombie note about far pointers should be removed",
    "EDIT261": "There's potentially more than one function named main, and recursion is forbidden to a well-known one of them",
    "EDIT262": "[dcl.type.simple]/3 Note claims that signedness of bitfields is impl-defined, but it's not",
    "EDIT263": "Fix typo in [ios.members.static]",
    "EDIT264": "function::swap : remove noexcept.",
    "EDIT265": "Fix typeo in [alg.remove]/7",
    "EDIT266": "Meaning of \"Return Type\" not specified in [structure.specifications]",
    "EDIT267": "Missing noexcept on operator delete declarations",
    "EDIT268": "italicized \"deallocated storage\" in 3.7.4.2/4",
    "EDIT269": "\"are said to be global name.\": missing s",
    "EDIT270": "[string::compare] Use of \"smallest\" instead of  \"smaller\"",
    "EDIT271": "clause [istream.extractors] is named [istream::extractors]",
    "EDIT272": "Verbiage about compilation errors in the non-immediate context spammed out everywhere",
    "EDIT273": "[dcl.init.list]p2 says \"orresponding\"",
    "EDIT274": "[dcl.link]p4 says \"gotten\", \"obtained\" would be a better choice of word",
    "EDIT275": "operator delete missing noexcept",
    "EDIT276": "Example in [over.literal] is incorrect",
    "EDIT277": "Fix Copyright Year",
    "EDIT278": "[basic.stc.dynamic] Don't italicize \"deallocated storage\".",
    "EDIT279": "[re.alg.replace]p1 has spaces to the left of ::s",
    "EDIT280": "std::initializer_list is not a type",
    "EDIT281": "commit 66f9c9960884970dccafe6f09fe0c941b114f6f8 appears to be non-editorial",
    "EDIT282": "Replace \"Remark\", \"Postcondition\", \"Precondition\" with their plural equivalents",
    "EDIT283": "In [func.wrap.func.con], reference to \"Table 17.6.3.5\"",
    "EDIT284": "[bind] section contains only [func.bind]; should be merged",
    "EDIT285": "References to \"raise\" should probably be to \"std::raise\"",
    "EDIT286": "shared_ptr : fix missing semicolon",
    "EDIT287": "26.7.5 [adjacent.difference]/1 needs more monospace",
    "EDIT288": "[alg.lex.comparison] has two 'Remarks' paragraphs with an unexplained code snippet between them",
    "EDIT289": "is_partitioned in mutating sequence operations",
    "EDIT290": "cv tuple_size/_element are partial specializations",
    "EDIT291": "Edits missing from N3789",
    "EDIT292": "[except.spec]/14 should reference [class.dtor]/3",
    "EDIT293": "Inconsistent capitalization of notes",
    "EDIT294": "20.6.1 [bitset.cons]/6 says \"0 zero\"",
    "EDIT295": "Some references to \"size_t\" should probably be \"std::size_t\"?",
    "EDIT296": "universal-character-name isn't \\grammarterm'd",
    "EDIT297": "add cross references for \"referenceable type\"",
    "EDIT298": "[lib.complex.member.ops] fix operator declarations",
    "EDIT299": "[atomics.types.operations.req] Hyphenate \"non member\".",
    "EDIT300": "instantiation -> specialization in [refwrap]",
    "EDIT301": "[func.bind.bind] follows following following",
    "EDIT302": "20.7.2 [memory.syn]/1 says \"template functions\"",
    "EDIT303": "Missing edits for CWG908",
    "EDIT304": "Fix term: template parameter -> argument.",
    "EDIT305": "More consistent formatting of complexity requirements and others.",
    "EDIT306": "Invalid example in [diff.cpp11.lex]",
    "EDIT307": "Inconsistent use of \"in this section\" vs \"in this sub-clause\"",
    "EDIT308": "Index footers say \"Cross references\"",
    "EDIT309": "Index entry for `__cplusplus` is in the wrong place",
    "EDIT310": "Index of library names is inconsistent",
    "EDIT311": "SFINAE is a Remark not Requires.",
    "EDIT312": "Table extends into page footer",
    "EDIT313": "use digit separators where appropriate in code snippets",
    "EDIT314": "Move footnote ref. number",
    "EDIT315": "Example of xvalue",
    "EDIT316": "Typo in [func.bind.bind]",
    "EDIT317": "CWG1710 is hard to follow",
    "EDIT318": "term \"at least as specialized\"  is not in italics",
    "EDIT319": "\\placeholer{} adds a space",
    "EDIT320": "spec is inconsistant wrt use of \\term{} vs. \\tcode{} vs. placeholder{} for variables ",
    "EDIT321": "true and false should be in \\tcode{} when refering to bool value",
    "EDIT322": "literal isn't \\grammarterm'd",
    "EDIT323": "grammar terms are indistinguishable from defined terms",
    "EDIT324": "bad formatting of 'see' for 'conditionally-supported behavior' index entry",
    "EDIT325": "[intro.defs] defines 'actual argument' and 'actual parameter'",
    "EDIT326": "placeholders should be formatted with math fonts",
    "EDIT327": "document what our macros do and when to use them",
    "EDIT328": "[associative.reqmts] inconsistent capitalization of associative container requirements table",
    "EDIT329": "All definitions should be indexed",
    "EDIT330": "inconsistent formatting for \"underlying type\"",
    "EDIT331": "Return type/expression mismatch",
    "EDIT332": "List initialization clause appears to exclude form with equals sign",
    "EDIT333": "Definition of copy-initialization doesn't obviously include copy-list-initialization",
    "EDIT334": "Fixed up several wording and variable naming issues in requirements tables",
    "EDIT335": "[util.smartptr] says \"shall not participate in the overload resolution\"",
    "EDIT336": "[futures.overview] has invalid declaration of swap for packaged_task",
    "EDIT337": "\"default initializ*\" should be \"default-initializ*\"",
    "EDIT338": "[dcl.dcl] paragraphs are in a strange order",
    "EDIT339": "don't need to say that destructors don't throw",
    "EDIT340": "[atomics.syn] has a period that should be a comma",
    "EDIT341": "[allocator.adaptor] is in the wrong place",
    "EDIT342": "templates using  >> or > >",
    "EDIT343": "IEC 559 does not name a standard",
    "EDIT344": "[except.handle]p3 - missing \"or, \"",
    "EDIT345": "remove unnecessary `<T>` from `valarray`.",
    "EDIT346": "[over.inc] forgets \"nonstatic\"",
    "EDIT347": "[utility] Add index_sequence et al to the library index.",
    "EDIT348": "Fix typography of \"C.\" (spacing)",
    "EDIT349": "Add character map and change minimum font size",
    "EDIT350": "[localization] Change bold-slanted font, removes warning",
    "EDIT351": "Typographic fixes in [strings]",
    "EDIT352": "[algorithms] Uniform notation of distance(first, last) to (last - first)",
    "EDIT353": "[algorithms] Fix for a note for conditions of strict-weak-ordering",
    "EDIT354": "[stack.defn] Fix swap signature.",
    "EDIT355": "Subsection nesting in [containers.adaptors] is inconsistent",
    "EDIT356": "Header synopses for sequence containers don't have their own sections",
    "EDIT357": "[stack.syn] Move <stack> synopsis after <queue> synopsis.",
    "EDIT358": "[refwrap] Use injected class name in reference_wrapper special member fu...",
    "EDIT359": "29.2 [atomics.syn] declares atomic_compare)exchange_strong_explicit",
    "EDIT360": "[util.smartptr.shared.const]",
    "EDIT361": "Fix several omissions of semicolon.",
    "EDIT362": "[thread.mutex] Mutex types defined in requirements",
    "EDIT363": "throw_with_nested declaration has invalid attribute",
    "EDIT364": "[intro.refs] Fixed consistency of 'EMCA' and 'technology'",
    "EDIT365": "Typographic fixes, spacing after \\opt",
    "EDIT366": "C++14 DIS does not have a Foreword",
    "EDIT367": "Move normative reference to ISO/IEC 2382 to bibliography",
    "EDIT368": "Rename Table 6 column 3 to \"Octal, hexadecimal, or binary literal\" for consistency",
    "EDIT369": "Grammatical issue in 5.3.4/10",
    "EDIT370": "Check removal of rule from [dcl.constexpr]p8 is intentional",
    "EDIT371": "Deduction of return type from returned expression is unclear",
    "EDIT372": "[logical.operations]: `constexpr` should go before `bool`",
    "EDIT373": "Effects clauses contain sentences lacking a subject",
    "EDIT374": "[thread.sharedtimedmutex.class] formatting not consistent with similar cases",
    "EDIT375": "[thread.sharedtimedmutex.class] Missing \"or\" between bullets",
    "EDIT376": "Extra \"and\" remains; should have been removed by N3776.",
    "EDIT377": "Standard has hanging paragraphs, not permitted by ISO",
    "EDIT378": "[facet.num.get.virtuals]p3 clarify behavior on empty sequence",
    "EDIT379": "[special] multiple concepts conflated in same paragraph",
    "EDIT380": "[expr.new] Avoid \"heap allocation\"",
    "EDIT381": "[depr.strstreambuf.virtuals]p20 requirement in table continues on to the next paragraph",
    "EDIT382": "Table 102 \"Associative container requirements\" header appears twice on page 751",
    "EDIT383": "The copyright disclaimer does not go into the generated PDF",
    "EDIT384": "[ostreambuf.iter.cons] forgot some words",
    "EDIT385": "[file.streams] Change sub-clauses to rSec2, similar to [string.streams]",
    "EDIT386": "\"const iterator\" and \"constant iterator\" used interchangeably",
    "EDIT387": "Replace 'prototype' with 'declaration'",
    "EDIT388": "Replace 'prototype' with 'declaration'",
    "EDIT389": "[diff.expr] replace \"declare\" with \"define\"",
    "EDIT390": "7.1.5/3 and /4 define 'constraints' that are later referred to as 'requirements'",
    "EDIT391": "\"underlying type\" for a reference is used in a few places",
    "EDIT392": "[class.static.data] unusual wording",
    "EDIT393": "Fix formatting of DECAY_COPY",
    "EDIT394": "Fix formatting of INVOKE",
    "EDIT395": "[priqueue.special] fix typo",
    "EDIT396": "[dcl.init.aggr] resolve core issue 1985: array of unknown bound vs. default member initializer",
    "EDIT397": "[class.conv.fct] Remove text \"If a conversion function is a member function\"",
    "EDIT398": "library index not exactly in alphabetical order",
    "EDIT399": "Format 'new expression' consistently as non-code",
    "EDIT400": "Editorial: Make names and synopses of unordered_* consistent with other containers",
    "EDIT401": "Define and apply \"placement new-expression\"",
    "EDIT402": "[class, utility] Clarify 'cv-void class members' and make spelling more consistent",
    "EDIT403": "inconsistently including or omitting comma between \"// x.y.z\" and rest of comment in synopses",
    "EDIT404": "Document and apply code formatting style",
    "EDIT405": "[lex] Fix some minor issues of regular lexical definition and improve the consistence",
    "EDIT406": "\\returns in [time.duration.nonmember] missing \\tcode",
    "EDIT407": "use more sensible file names in the [temp.over.link] example",
    "EDIT408": "[func.wrap.func.inv] is missing a semicolon",
    "EDIT409": "Index entry for \"undefined behavior\" is incorrect",
    "EDIT410": "Fixes issue #409: undefined behavior index entry.",
    "EDIT411": "I changed NULL to null pointer",
    "EDIT412": "[alg.move] Complexity of move_backward",
    "EDIT413": "Added missing line breaks for wording incorporated from N4230.",
    "EDIT414": "Do destructors have names?",
    "EDIT415": "[re.regiter.incr] fix typo",
    "EDIT416": "[istream.manip] and [ostream.manip] say \"namespace std { }\" unnecessarily",
    "EDIT417": "[thread.lock.unique.cons] should say \"owns\"",
    "EDIT418": "Simplify the wording of static_pointer_cast<> and friends.",
    "EDIT419": "[expr.sizeof] redundant wording",
    "EDIT420": "[dcl.link] Fix indentation of example code",
    "EDIT421": "[{i,o}stream.manip] Remove redundant \"namespace std\"",
    "EDIT422": "insert_or_assign (23.5.4.4p7 and 23.4.4.4p5) reference undefined \"args\"",
    "EDIT423": "[stmt.ranged] Minor editorial issues",
    "EDIT424": "add an example of conversion-type-id containing a placeholder type",
    "EDIT425": "[temp] Improve the overall definition of term \"template\"",
    "EDIT426": "<shared_mutex> is missing from table 14",
    "EDIT427": "Fix typo in example of shared_from_this",
    "EDIT428": "[defns.ill.formed] should link to [defns.well.formed]",
    "EDIT429": "[temp.deduct] Correct \"void ()(const int, int[5])\"",
    "EDIT430": "Choose whether to put a space on the left or right of `...` and apply consistently throughout library",
    "EDIT431": "Qualifying std::move, std::forward, etc. is unnecessary",
    "EDIT432": "Editorial: Space between \"insert\" and \"(\" in two places",
    "EDIT433": "[valarray.syn]'s footnote references wrong section",
    "EDIT434": "Typo in definition of std::basic_string<...>::assign",
    "EDIT435": "[expr.rel] and unrelated pointers",
    "EDIT436": "Table 9 is missing `decltype(auto)`",
    "EDIT437": "[dcl.spec.auto] is disorganized and hard to follow",
    "EDIT438": "basic_ostream::flush() linking to the wrong requirements",
    "EDIT439": "[swappable.requirements] add comma",
    "EDIT440": "nonX vs. non-X and similar hyphenation issues",
    "EDIT441": "Example in 3.2/6 (6.6) is obsolete",
    "EDIT442": "[reverse.iter.requirements] Avoid saying 'global operators'",
    "EDIT443": "Inconsistent qualification in [re.const]",
    "EDIT444": "\"conversion operator\" denotes functions or operators?",
    "EDIT445": "20.10.6 [meta.rel] says \"return-statement\"",
    "EDIT446": "\"lvalue reference\" vs \"lvalue-reference\"",
    "EDIT447": "Incorrect(?) italics in [class.mfct.non-static]/4",
    "EDIT448": "Should \"Copy Operation\" be a word of power?",
    "EDIT449": "Fix link in basic_ostream::flush() description",
    "EDIT450": "[expr.dynamic.cast] has redundant wording",
    "EDIT451": "[basic.lookup.unqual]/6 is hard to parse",
    "EDIT452": " [string.cons] Adjust wording to match [sequence.reqmts]",
    "EDIT453": "Missing item in [except.terminate]/p1",
    "EDIT454": "[unique.ptr.runtime.ctor]/2.2 needs monospace",
    "EDIT455": "Buggy footnote in [type.descriptions.general]",
    "EDIT456": "[support.types]/4 offsetof inconsistent formatting",
    "EDIT457": "[input.iterators]/2 Inconsistent parens formatting",
    "EDIT458": "[thread.lock.unique.locking] and [thread.lock.shared.locking] need more bullets",
    "EDIT459": "[thread.lock.shared] needs more \\ref",
    "EDIT460": "[unique.ptr.single.ctor] is missing \"a\" word",
    "EDIT461": "23.2.3[sequence.reqmts]/5 is redundant with Table 96",
    "EDIT462": "Consistency cleanups in [containers]: Whitespace",
    "EDIT463": "behavior/behaviour",
    "EDIT464": "CWG1531 resolution doesn't appear to have been applied",
    "EDIT465": "[thread.lock.shared.cons] fix typos",
    "EDIT466": "Add a few missing semicolons.",
    "EDIT467": "[basic.align], [syserr] Add missing semicolons.",
    "EDIT468": "[support.start.term] Add missing semicolon.",
    "EDIT469": "pick formatting for const object and apply it consistently",
    "EDIT470": "Odd phrasing makes C library dependent on C++",
    "EDIT471": "Fix formatting of P",
    "EDIT472": "[diff] Use paragraph numbering for changes.",
    "EDIT473": "Adding a bullet to [except.terminate] for condition variables",
    "EDIT474": "Annex F (XREF) has some errors.",
    "EDIT475": "\"side-effects\" should not be hyphenated",
    "EDIT476": "Optional for-init statement and missing semicolon",
    "EDIT477": "Consistency cleanups in [containers] (cf. Issue #400): Ordering, whitespace",
    "EDIT478": "[containers] Consistency improvements: Intra-synopsis comments",
    "EDIT479": "[containers] Minor whitespace and ordering improvements",
    "EDIT480": "[re.badexp] Remove redundant colon.",
    "EDIT481": "[lex, dcl.decl] Use \\nontermdef and \\grammarterm more consistently.",
    "EDIT482": "[gram.dcl] Extra line between using-declaration and using-directive",
    "EDIT483": "Fix several index entries.",
    "EDIT484": "Forcing git to consider PDFs as binary files",
    "EDIT485": "Synopsis in [support.exception] gives no clue that uncaught_exception() is in [depr.uncaught]",
    "EDIT486": "Grammatical improvement; NFC intended",
    "EDIT487": "Use \"class template\" instead of \"template struct\" and \"struct template\"",
    "EDIT488": "\"Expression\" column in tables",
    "EDIT489": "Qualify move & forward with std::",
    "EDIT490": "Add subclauses to 12.8 for constructors, assignment, copy elision",
    "EDIT491": "[pairs.spec] talks about \"if Ui equals reference_wrapper<X>\"",
    "EDIT492": "Get rid of Notes: elements in library clauses",
    "EDIT493": "Fix bad \"shall\"s in 7.6.2",
    "EDIT494": "[iostream.forward.overview] Notezilla",
    "EDIT495": "Fix \"ill-formed program\" definition.",
    "EDIT496": "[class] (9)/7.8 has ambiguous wording",
    "EDIT497": "Editorial: \"sub-clause\" vs \"subclause\"",
    "EDIT498": "fix uses of \"pointer to function\" to say \"pointer to function /function-suffix/\"",
    "EDIT499": "No qualified std::fclose call",
    "EDIT500": "s/template classes/class templates/",
    "EDIT501": "Do not use \u201cmust\u201d as an alternative for \u201cshall\u201d",
    "EDIT502": "[dcl.init.ref] Replace normative note with actual note.",
    "EDIT503": "[fstream.members]/5 says \"returns returns\"",
    "EDIT504": "Inconsistent formatting of \"cv-qualified\"",
    "EDIT505": "[basic.ios.members] p16 has numbered list that should use bullets",
    "EDIT506": "Nit: \"standard layout\" vs. \"standard-layout\"",
    "EDIT507": "[support.dynamic] LWG2458 remove correct signatures",
    "EDIT508": "[headers] Add <shared_mutex> to Table 14.",
    "EDIT509": "Nit: value of some object <ins>of</ins> type T",
    "EDIT510": "value-initialized and value initializing",
    "EDIT511": "\"object type\" has three definitions",
    "EDIT512": "Annex F should be built as an index",
    "EDIT513": "conflicting sentences in section \"floating literals\"?",
    "EDIT514": "Requirement in [class.union]/2 probably should use \"shall\"",
    "EDIT515": "Align declarations",
    "EDIT516": "[tuple.helper] Inconsistent formatting of BaseCharacteristic etc.",
    "EDIT517": "[temp.deduct.call] wording",
    "EDIT518": "[allocator.adaptor.members] Imprecise wording for scoped_allocator_adaptor::select_on_container_copy_construction",
    "EDIT519": "erroneous sentence in [dcl.decl] p5",
    "EDIT520": "Use of cv-qualified as a grammar term",
    "EDIT521": "Local definition of \"char-like type\" from Clause 21 referenced in Cla\u2026",
    "EDIT522": "Typographic fixes, spacing after \\opt",
    "EDIT523": "template partial ordering rules underspecified",
    "EDIT524": "27.7.3.5 [ostream.seeks]/3 is slightly damaged",
    "EDIT525": "Unify the spelling of one-definition rule to be consistent.",
    "EDIT526": "Fix misuse of cv-unqualified as a grammar term",
    "EDIT527": "Example in [class.protected] needs to be updated",
    "EDIT528": "\"undefined\" vs \"not defined\" for declared-but-not-defined primary templates",
    "EDIT529": "Remarks: vs. Remark: and Postconditions: vs. Postcondition: in library",
    "EDIT530": "[diff.cpp11] Supply a compatibility note for CWG1560",
    "EDIT531": "[ext.manip] Replace a colon with a semi-colon.",
    "EDIT532": "[lex.name] Reserved identifiers",
    "EDIT533": "[util.smartptr.shared] misuses italics",
    "EDIT534": "Inconsistent class-key in class template declarations",
    "EDIT535": "Wrong term used in [over.best.ics]/10",
    "EDIT536": "[tuple.assign] Fix typo",
    "EDIT537": "[diff.cpp03] etc introduction incorrect",
    "EDIT538": "17.1 [library.general]/6 \"such as a tuples\" typo",
    "EDIT539": "Refine \"Index of library names\" for operator<< and operator>>",
    "EDIT540": "Change \"typename decay<F>::type\" to \"decay_t<F>\"",
    "EDIT541": "[over.best.ics] Fix a typo in \"user-defined conversion sequence\" (fixes #535)",
    "EDIT542": "confused collection of synopses for <cstdlib>",
    "EDIT543": "LWG 206 doesn't seem to have been applied correctly",
    "EDIT544": "Inconsistent formatting of `void` in [meta.unary.prop]",
    "EDIT545": "std::thread termination",
    "EDIT546": "Reference collapsing",
    "EDIT547": "Correct verb form in sentence",
    "EDIT548": "Remove 'all' from the left argument",
    "EDIT549": "move last 4 paragraphs of 9.5 to subsection \"Anonymous unions\"",
    "EDIT550": "[ostream.iterator.cons.des] uses italics for exposition only members",
    "EDIT551": "Fix \"returns returns\"",
    "EDIT552": "inconsistent use of 'side effect' versus 'side-effect'",
    "EDIT553": "Remove space after \\placeholder so can embed in code.",
    "EDIT554": "Make \"at least as specialized\" an indexed term.",
    "EDIT555": "[unord.req] Clarify the complexity of clear() method",
    "EDIT556": "Format in [class.copy]/17",
    "EDIT557": "UB wording in \u00a712.6.2/16",
    "EDIT558": "Fix incorrect section reference as pointed out in LWG 2181 which beca\u2026",
    "EDIT559": "stop using teletype font for `constexpr` function",
    "EDIT560": "[sequences.general] Promote header synopses to rSec2",
    "EDIT561": "Resolution of CWG 2017 \"Flowing off end is not equivalent to no-expression return\"",
    "EDIT562": "20.12.6.7 [time.point.cast] is missing parens",
    "EDIT563": "20.7.2 [memory.syn] should mention owner_less's default template arg",
    "EDIT564": "inconsistent periods in compatibility annex",
    "EDIT565": "[locale.id] Add missing \\tcode",
    "EDIT566": "Synopses should have numbered headers",
    "EDIT567": "[library] Fix index entry",
    "EDIT568": "[dcl.array] Padding before/after sequence of array subobjects",
    "EDIT569": "[support, diagnostics] Turn synopses into numbered sections",
    "EDIT570": "[futures.async] Use code font for \"std::async\"",
    "EDIT571": "[macros] Disable italic correction for monospaced italics",
    "EDIT572": "Syntax highlighted code for drafts",
    "EDIT573": "[diff.library] (C.5) is woefully out of date",
    "EDIT574": "Avoid hanging paragraphs as well as 'in general' / 'overview' subclauses",
    "EDIT575": "update Annex F introductory text",
    "EDIT576": "[func.wrap.func.con] Fix error in note",
    "EDIT577": "Whitespace fixes around punctuators (library)",
    "EDIT578": "Replace raw string 'C++' with the appropriate macro",
    "EDIT579": "[macros] Change \\Cpp macro to look nicer",
    "EDIT580": "Use textual angle brackets rather than relational operators",
    "EDIT581": "replace `typedef` declarations with *alias-declaration*s in the library",
    "EDIT582": "[iterators, locales] Apply \\placeholder macro",
    "EDIT583": "[lib-intro, utilities] Apply \\placeholder macro",
    "EDIT584": "[atomics] Reword table headers, removing mention of \"inttypes.h\"",
    "EDIT585": "unique_ptr's \"see below\" points the wrong way",
    "EDIT586": "[diff.library] NULL <cstdio> missing in Table 149",
    "EDIT587": "[diff.library] add missing NULL <cstdio> to Table 149",
    "EDIT588": "[macros] Add space into \\range, reflow [alg.transform]",
    "EDIT589": "Clarify the return value range of log(x)",
    "EDIT590": "[algorithms] Improve typographic consistency of complexity expressions",
    "EDIT591": "[macros, atomic] Align placeholders",
    "EDIT592": "[basic.types]p2 comment in example says \"scalar\" where \"trivially copyable\" is meant",
    "EDIT593": "[temp] Overall definition of term \"template\"",
    "EDIT594": "Use of \"value\" in [expr.const]/5",
    "EDIT595": "Problem with application of LWG 436",
    "EDIT596": "[c.files] table 134 lists SCNX* macros, which do not exist",
    "EDIT597": "[c.files] cinttypes synopsis refers to SCNX* macros which do not exist",
    "EDIT598": "Lines run over the right margin",
    "EDIT599": "[dcl.type.cv]/6 \"program behavior\" vs \"behavior\"",
    "EDIT600": "[expr.const] adjust note",
    "EDIT601": "Making identifier label into a definition.",
    "EDIT602": "Adding a note about what a member subobject is",
    "EDIT603": "Missing closing parenthesis in [except.handle]",
    "EDIT604": "Remove redundant constraint in [class.static.data]",
    "EDIT605": "[facet.num.put.virtuals] Table 89 refers to an undefined variable and reapplies a bitwise &",
    "EDIT606": "Words in italics",
    "EDIT607": "[defns.const.subexpr] Remove superfluous words",
    "EDIT608": "[support.types] Remove \"field\", which is not a defined term in C++",
    "EDIT609": "[expr.prim.lambda] Missing capture default in example 5.1.2.4",
    "EDIT610": "[expr.prim.lambda] Fix the capture list in code example",
    "EDIT611": "[terminate] Fix typo \"terminate_handleri\"",
    "EDIT612": "Improper usage of \"comparison operator\"",
    "EDIT613": "[expr.const]p7 should be closer to p3",
    "EDIT614": "Remove incorrect \"shall\"",
    "EDIT615": "[unique.ptr.runtime.ctor] Fix format",
    "EDIT616": "Swap effects of `basic_regex::operator=` and `assign`",
    "EDIT617": "Re-synchronize generated grammar.tex with grambase.tex.",
    "EDIT618": "Synchronize grammar for namespace-name",
    "EDIT619": "Uniform \"ones' complement\" and \"two's complement\"",
    "EDIT620": "The libreqtab4 LaTeX environment doesn't work",
    "EDIT621": "Index subentries for make_error_code and make_error_condition",
    "EDIT622": "No \\idxhdr index entry for <chrono>",
    "EDIT623": "Why does the size of the PDF fluctuate between 5 MB and 11 MB?",
    "EDIT624": "[diff.class] Fix typo \"choise\"",
    "EDIT625": "[conv.qual] Fix typo \"desecender\"",
    "EDIT626": "[futures.shared_future] Remove duplicated word \"shared\"",
    "EDIT627": "Delete the notionally redundant 'update' when describing actions upon ...",
    "EDIT628": "user-defined versus user defined",
    "EDIT629": "[meta.trans.other] Table 57 uses the layout for type predicates (Tables 47-49,51) instead of type transformations/queries (Tables 50,52-56)",
    "EDIT630": "inconsistent terminology: \"key equality\" predicate\" versus \"key equality function\"",
    "EDIT631": "[lex] Remove spurious whitespace",
    "EDIT632": "[diff] Use \\Cpp macro",
    "EDIT633": "Replaced \\note with \\remark and \\notes with \\remarks.",
    "EDIT634": "[utilities] Add some hyphenation hints for long inline expressions",
    "EDIT635": "Travis CI support",
    "EDIT636": "Improve consistency of complexity descriptions",
    "EDIT637": "[re.alg.match] Fix typo \"otherwis\"",
    "EDIT638": "[temp.variadic] Fix typo \"evalutes\"",
    "EDIT639": "[macros] Make \\Cpp work in PDF bookmarks again",
    "EDIT640": "Add missing \"*\" in example.",
    "EDIT641": "Fix wrong reference",
    "EDIT642": "[gslice.array.comp.assign] Fix missing title",
    "EDIT643": "[valarray.members] add missing \\end{itemdescr} and \\begin{itemdescr}",
    "EDIT644": "[strings] Formatting and whitespace harmonization",
    "EDIT645": "(may be wrong) [tuple.apply] Use existing std::invoke function rather than magic INVOKE",
    "EDIT646": "Move removal of bool++ from C++14 compatibility annex to C++17 annex",
    "EDIT647": "References to tables in Clause 28 should use \"Table\" not \"table\"",
    "EDIT648": "Filesystem library should be mentioned in 17.1 [library.general]",
    "EDIT649": "[enum.copy_options] refers to \"Filesystem library\"",
    "EDIT650": "[dcl.attr] Fix wrong source encoding",
    "EDIT651": "[dcl.init.aggr] Fix an example in extended init.",
    "EDIT652": "[defns.const.subexpr] Place defintition in alphabetical order",
    "EDIT653": "\"ith\" should be consistently formatted",
    "EDIT654": "[expr.new] Terminate a parenthetical",
    "EDIT655": "[class.conv.fct] add \\tcode{} around `*`",
    "EDIT656": "[expr.prim.lambda] Replace EM-SPACE(U+2003) with space(U+0020)",
    "EDIT657": "[class.mem] Convert nonstatic to non-static since the hyphenated use \u2026",
    "EDIT658": "[class.mem, class.mfct.non-static] Convert nonstatic to non-static si\u2026",
    "EDIT659": "[algorithms] Use \\Cpp macro",
    "EDIT660": "[inclusive.scan] Add missing template parameter.",
    "EDIT661": "[tools] simplify makegram",
    "EDIT662": "[intro.object] For object names, don't refer to 'name' grammar rule, \u2026",
    "EDIT663": "[cstdint] Fix macro name patterns",
    "EDIT664": "Whitespace in index",
    "EDIT665": "Index entries for [hardware.interference]",
    "EDIT666": "[cpp.replace] Remove a bogus grammar term",
    "EDIT667": "[c.limits] Remove an incorrect note about type of constant macros",
    "EDIT668": "[sf.cmath] Use \\indextext and \\indexlibrary instead of \\index.",
    "EDIT669": "[error.reporting] references in [filesystems] should be to [fs.err.report] instead",
    "EDIT670": "[numerics] Use simpler table for header content",
    "EDIT671": "Consider changing title of [fs.err.report]",
    "EDIT672": "Restore links in filesystem synopses",
    "EDIT673": "[string.view, alg.random.sample, numerics] Use \\bigoh.",
    "EDIT674": "Why do we name `fail` in [iostate.flags]?",
    "EDIT675": "Overlong line in [new.delete.array]",
    "EDIT676": "Overlong line in [syserr.errcode.nonmembers]",
    "EDIT677": "[cpp.predefined] Use \\xname in index entry for __cplusplus.",
    "EDIT678": "Two index entries for ~",
    "EDIT679": "\"Equivalent to return foo();\" vs. \"Equivalent to foo()\".",
    "EDIT680": "Need Annex C entry for hexfloat ",
    "EDIT681": "[meta.unary.prop] add missing \\ in is_swappable.",
    "EDIT682": "[intseq] consolidate <utility> docs",
    "EDIT683": "[allocator.adaptor] consolidate memory utilities",
    "EDIT684": "[meta.unary.prop] Consistent formatting for 'void'",
    "EDIT685": "[unique.ptr.special] prefer use of common_type_t",
    "EDIT686": "[tuple.helper] prefer to use tuple_element_t",
    "EDIT687": "implementation-defined vs. implementation defined vs. impldef",
    "EDIT688": "Formatting of \"Type/Name(s)\" Tables is confusing",
    "EDIT689": "How to interpret Table 152 \"Header <cinttypes> synopsis\"?",
    "EDIT690": "inconsistency in library type requirements",
    "EDIT691": "is_swappable is damaged in [meta.unary.prop]",
    "EDIT692": "[tuple.cnstr] fix the position of \\end{itemdescr}",
    "EDIT693": "\"Underfull\" and \"Overfull\" warnings emitted from Latex.",
    "EDIT694": "Formatting in \"Effects: Equivalent to\" is confusing",
    "EDIT695": "What is \"it\" in [memory.resource.prot]/7?",
    "EDIT696": "cross-references needed to library types and their requirements",
    "EDIT697": "cross-references needed at uses of \"writable to\" in the library",
    "EDIT698": "Fix the definition of \"writable to\"",
    "EDIT699": "Reference comments missing from [memory.polymorphic.allocator.class] synopsis",
    "EDIT700": "[dcl.enum] This is not where layout-compatible is defined",
    "EDIT701": "grammar terms aren't \\grammarterm'd",
    "EDIT702": "cross-references to hard-coded paragraph numbers",
    "EDIT703": "[support.runtime] Clarify va_start requirements",
    "EDIT704": "[18-30] Replace typedefs with alias",
    "EDIT705": "[alg.random.sample] reword and add cross-reference",
    "EDIT706": "[algorithms] [numeric.ops] Crossref \"writable\"",
    "EDIT707": "\"deallocation function\" is \\term'd",
    "EDIT708": "Fix uses of \"value-initialize\"/\"value initialize\"",
    "EDIT709": "[meta.rel] New 'is_callable' entries overflow the middle cell of table",
    "EDIT710": "[meta.rel] Fix for for INVOKE in table 54",
    "EDIT711": "Add name \"high\" to locale::narrow in [category.ctype]",
    "EDIT712": "class.copy rules for overloading as rvalue",
    "EDIT713": "[compatibility] Add compatibility notices for pp-number",
    "EDIT714": "Fix typo and bad formatting",
    "EDIT715": "Incorrect section references in filesystems subclause",
    "EDIT716": "Clean up apparent stray HTML formatting",
    "EDIT717": "[ext.manip] fix typo in put_money description",
    "EDIT718": "Remove the semicolon in \"Returns: expr;\"",
    "EDIT719": "[deque.overview] deque should not reference vector",
    "EDIT720": "[expr.ass] What's \"the expression\"?",
    "EDIT721": "Why value_type for ostream_iterator is void?",
    "EDIT722": "[class.member.lookup] 'overloading resolution' sounds odd - every oth\u2026",
    "EDIT723": "[class.member.lookup] 'overloading resolution' sounds odd - every oth\u2026",
    "EDIT724": "[class.abstract] The intro para seems like it should be a note - noth\u2026",
    "EDIT725": "[class.virtual] This seems like it should be a note: it is the only s\u2026",
    "EDIT726": "[namespace.udecl] tweak the example in para 17 so that the comment is\u2026",
    "EDIT727": "Fix incorrect variable references",
    "EDIT728": "[util.smartptr.enab] make p6 appear in its own line",
    "EDIT729": "[quoted.manip] incorrect reference to basic_istream::operator>>",
    "EDIT730": "[fs.norm.ref]: random reference to \"MAC OS\"",
    "EDIT731": "[class.path]: literal missing backslash-escape",
    "EDIT732": "Fix other incorrect variable names in Table 28",
    "EDIT733": "Define \\defnnote for notes in \"Terms and definitions\"",
    "EDIT734": "[class.path] escape backslash in character literal",
    "EDIT735": "[lex.pptoken] fix term",
    "EDIT736": "23.2.5[unord.req]p12 refers to key_equal as a function",
    "EDIT737": "23.2.5[unord.req]p12 should refer to key_eq(), not key_equal()",
    "EDIT738": "[time.duration.comparisons] Fix index entry for duration operator<",
    "EDIT739": "[string.view.comparison] Fix index for basic_string_view operators",
    "EDIT740": "[18-28] Fix index entry for constructors",
    "EDIT741": "[18-27] Remove tcode from index entries",
    "EDIT742": "[support.runtime] Fix name of stdarg.h in index",
    "EDIT743": "Odd indexing for bitset::set",
    "EDIT744": "[bad.cast], [bad.exception] nest index entries consistently",
    "EDIT745": "duplicate index entries when items referenced from tables",
    "EDIT746": "[valarray.sub] Fix error in example code",
    "EDIT747": "[meta.trans.other] Reformat Other Transformations table",
    "EDIT748": "Exceptions classes deriving directly from std::exception should be presented consistently",
    "EDIT749": "[namespace.udecl]/17 Fix the note and comment to better reflect that \u2026",
    "EDIT750": "[18,20] Consistent indexing of simple exception types",
    "EDIT751": "Should the library use override, instead of virtual, in derived classes?",
    "EDIT752": "[basic.lookup] Fix typos",
    "EDIT753": "[18-20,27] Prefer to use 'override' where appropriate",
    "EDIT754": "[strings,containers] Add iterators to index of implemenetation define\u2026",
    "EDIT755": "Readme points to an out of date web address for Defect Reports",
    "EDIT756": "[Readme] Fix isocpp link for DR submission",
    "EDIT757": "[strings] Fix spacing around commas",
    "EDIT758": "Remove std:: from normative wording",
    "EDIT759": "Latex environments",
    "EDIT760": "Inconsistent punctuation in Table Associative container requirements",
    "EDIT761": "\\opt vs. \\opt{}",
    "EDIT762": "[impldef] Fixed index entry collation to support keys containing code",
    "EDIT763": "[macros,intro] Present example/note formatting better",
    "EDIT764": "[overloading] Make operators appear in code font",
    "EDIT765": "[fs.op.absolute] s/absolute_error/absolute/g;",
    "EDIT766": "remove counts of headers etc from [headers] and [depr.c.headers]",
    "EDIT767": "[diff.cpp11.special] Move to [diff.cpp14.special]",
    "EDIT768": "[temp.deduct.call] [temp.deduct.conv] Hyphenate top-level",
    "EDIT769": "Replace NULL with \"null pointer value\"",
    "EDIT770": "[macros] Replace cooked underscore with raw version",
    "EDIT771": "[utility,iterator] Apply p0174r2 deprecating vestigial library compon\u2026",
    "EDIT772": "[impldef] Fixed index entry collation to support keys containing code",
    "EDIT773": "[utility,iterator] Apply p0174r2 deprecating vestigial library compon\u2026",
    "EDIT774": "[utility,containers] Apply p0181r1, a default order",
    "EDIT775": "[constraints] Apply p0180r2, reserve future namespaces",
    "EDIT776": "P0305R1 Selection statements with initializer",
    "EDIT777": "P0292R2 constexpr if: a slightly different syntax",
    "EDIT778": "P0391R0 Introducing the term \"templated entity\"",
    "EDIT779": "[ratio.si] fix typo",
    "EDIT780": "Travis CI: Fail build if regenerated xref and grammar files don't match those in repository",
    "EDIT781": "\\pnums in examples and notes are ugly and confusing",
    "EDIT782": "[dcl.spec.auto] Add 'The' to heading",
    "EDIT783": "[19-26] Consistent use of _v",
    "EDIT784": "[cpp] Fix index text for STDCPP_DEFAULT_NEW_ALIGNMENT",
    "EDIT785": "Sections 18.3.2.1 and 18.3.2.3 have the same name",
    "EDIT786": "[stmt.if] Balance brackets and fix indentation.",
    "EDIT787": "\"punctuator\" grammar rule not defined",
    "EDIT788": "Some thoughts about C++",
    "EDIT789": "[diff.basic] Fix format and inexact wording",
    "EDIT790": "[gram] Change \"syntax\" to \"grammar\".",
    "EDIT791": "[valarray.members] add valarray index entry for named member functions",
    "EDIT792": "\"pre:\" and \"post:\" in container requirements tables",
    "EDIT793": "Inconsistent wording in [new.delete.single] and [new.delete.array]",
    "EDIT794": "Stable names in 20.11 are too long",
    "EDIT795": "[diagnostics] Make system_error synopsis more consistent",
    "EDIT796": "[list.ops] p12 has Effects in the Requires paragraph",
    "EDIT797": "[alg.random.sample] has period in middle of sentence",
    "EDIT798": "Inconsistent formatting of cv-qualified",
    "EDIT799": "[LaTeX] Simplify index entries for class members",
    "EDIT800": "Missing index entries for operator!=",
    "EDIT801": "Stable name [util.smartptr.weakptr] is awful",
    "EDIT802": "[lib] How to format sectioning comments in synopsis",
    "EDIT803": "[input.output] Remove obsolete, commented out content",
    "EDIT804": "[class.union] Fix typo.",
    "EDIT805": "\"// see below\" vs @\\seebelow@",
    "EDIT806": "Improve cross references",
    "EDIT807": "Make universal-character-name \\grammarterm'd",
    "EDIT808": "[valarray.members] Fix up index entries for named valarray member functions",
    "EDIT809": "[input.output,strings,utilities] Don't format informative 'see below' as code",
    "EDIT810": "[variant.visit] Remove superfluous colon.",
    "EDIT811": "[variant.visit] Add missing std:: qualification on uses of std::forward.",
    "EDIT812": "[/tools] Delete vestigial support files",
    "EDIT813": "make_any",
    "EDIT814": "[\ufb01lesystems] add missing parens",
    "EDIT815": "filesystem: Bad mixing of effects in Returns element",
    "EDIT816": "[gram] Use 'extract' package for grammar summary",
    "EDIT817": "[macros,gram] Simplify definition of non-copying grammar environments",
    "EDIT818": "[locale.codecvt.virtuals] Use \\range and \\crange for ranges",
    "EDIT819": "[func.default.traits] remove crossref to [unord]",
    "EDIT820": "[clause 27] Index all member functions in clause 27",
    "EDIT821": "\\pnums in effects/returns/etc. are confusing",
    "EDIT822": "[variant.assign] consider converting \"If an exception is thrown\" sentences in Remarks: clauses into bulleted lists",
    "EDIT823": "[support] clean up index for clause 18",
    "EDIT824": "consistently render, or omit, labels for tables",
    "EDIT825": "\"constexpr constructor\" and \"constexpr function\" are defined terms and should not be formatted in code font",
    "EDIT826": "[futures.overview] and [futures.async] use sloppy terminology for launch bitmask",
    "EDIT827": "[future.async]p3 use neither/nor",
    "EDIT828": "[path.type.cvt] remove redundant word",
    "EDIT829": "[diagnostics] audit index entries for clause 19",
    "EDIT830": "Update the reference to the C standard in intro.scope",
    "EDIT831": "[reverse.iter.ops] Sync and simplify several reverse_iterator member function prototype declarations",
    "EDIT832": "Add back function lvalues to [dcl.init.ref]/5.2.1.2",
    "EDIT833": "[Editorial] Typo <memory_resorce>",
    "EDIT834": "[impldef] Collate index correctly",
    "EDIT835": "[18,19] Add and use new indexlibrarymember macro",
    "EDIT836": "[hardware.interference] prefer itemdecl to codeblock",
    "EDIT837": "Use new macro \\indexlibrarymember to simplify the library index",
    "EDIT838": "Fix formatting in [dcl.init.ref]/4.2",
    "EDIT839": "Add constexpr to optional::value_or(U&&) &&",
    "EDIT840": "[language.support] review library indexing of clause 18",
    "EDIT841": "[support,utilities] More uses of \\indexlibrarymember",
    "EDIT842": "23.1.1 Node handles [container.node] in the wrong place?",
    "EDIT843": "[cstdint, cinttypes.syn] Reorganize <cstdint> presentation",
    "EDIT844": "Incorrect underline character in the title of [util.smartptr.getdeleter]",
    "EDIT845": "[temp.deduct.call] Avoid line wrap in long comment.",
    "EDIT846": "[path.generic.obs] Escape backslash in string literal in example.",
    "EDIT847": "[file_status.obs] Remove stray \\begin{itemdecl}.",
    "EDIT848": "[numeric.ops.gcd] Don't format \"that\" as code in note.",
    "EDIT849": "[stmt.dcl]/4 Thread-safe statics \"deadlock\" footnote causing confusion.",
    "EDIT850": "[container.node] Move sub-clause to after [sequence.reqmts]",
    "EDIT851": "[atomics.order] Remove redundant typedef-name for memory_order",
    "EDIT852": "[basic, memory, time] Use \\impldef consistently.",
    "EDIT853": "[intro.progress] Add missing impldef index entry for concurrent forward progress guarantees provided by threads of execution.",
    "EDIT854": "[basic.life] Fix modal verb",
    "EDIT855": "[utilities] review of library index",
    "EDIT856": "[language.support] review of library index",
    "EDIT857": "[diagnostics] review of library index",
    "EDIT858": "[strings] review of library index",
    "EDIT859": "[iterators] review of library index",
    "EDIT860": "[numerics] review of library index",
    "EDIT861": "Review of library index entries",
    "EDIT862": "Remaining reference to <cstring> in 20.10.1 [memory.general]",
    "EDIT863": "[special, strings, localization, numerics] Add missing trailing periods in footnotes",
    "EDIT864": "[re.tokiter.incr] Add missing \\pnum for \"Returns:\" element.",
    "EDIT865": "[re.traits] Remove excessive parentheses in \"Returns:\" element.",
    "EDIT866": "[re.syn] Synchronize regex_constants type declarations with those in [re.const].",
    "EDIT867": "[re.traits] Remove excessive newlines from codeblocks.",
    "EDIT868": "[cpp.predefined] Make description for __cplusplus non-redundant and consistent with rest.",
    "EDIT869": "[depr.{i,o}strstream.cons] Remove stray parentheses.",
    "EDIT870": "[dcl.attr.deprecated, depr.ostream.members] Fix trailing whitespace in \\tcode.",
    "EDIT871": "[depr.strstream.dest] Move rdbuf() to [depr.strstream.oper].",
    "EDIT872": "Replace 0 with nullptr or 'null pointer value'.",
    "EDIT873": "[meta.unary.cat] Use core term non-union class type",
    "EDIT874": "fix incorrect use of \\idxhdr",
    "EDIT875": "[depr.strstreambuf.cons] Remove stray period in footnote.",
    "EDIT876": "[depr.strstreambuf.cons] Don't use an itemdecl and index entry for a mere use of setg.",
    "EDIT877": "[depr.strstreambuf.virtuals] Fix typo: (unsigned char*)gnext -> (unsigned char)*gnext.",
    "EDIT878": "[depr.istrstream.cons] Add missing constructor.",
    "EDIT879": "[input.output] Review library index for clause 27",
    "EDIT880": "operator< for error_condition in wrong(?) place",
    "EDIT881": "[system_error.syn] [syserr.compare] Declare all nonmembers in the synopsis",
    "EDIT882": "[temp.deduct.call] Don't nest paragraphs inside eachother.",
    "EDIT883": "[depr] Reviewed index for Anndex D",
    "EDIT884": "Remove redundant `this->` in library specification",
    "EDIT885": "[thread.thread.id] Consistently use an lvalue reference for operator<<'s first parameter.",
    "EDIT886": "g/special math functions/s//mathematical special functions/",
    "EDIT887": "[container.requirements.general] Use proper environment for note.",
    "EDIT888": "[associative.reqmts] Add missing line break.",
    "EDIT889": "[futures.promise] Make swapping std::promises consistently noexcept.",
    "EDIT890": "[cstdlib.syn] Add missing extern-C/C++ overloads for at_exit, at_quick_exit",
    "EDIT891": "Editorial review of Clause 27 [input.output]",
    "EDIT892": "Use 'if and only if' for conditions that are sufficient as well as necessary.",
    "EDIT893": "[depr.func.adaptor.typedefs] Clarify that reference_wrapper does not define argument_type for non-nullary member function pointer types.",
    "EDIT894": "Remove imports for unused packages: verbatim, fixme, and booktabs.",
    "EDIT895": "[util.smartptr.getdeleter] Remove broken 'std:' qualification on addressof.",
    "EDIT896": "[set.cons, multiset.cons] Specify correct constructed type and add missing \\tcode.",
    "EDIT897": "[temp.over.link] replace \"file\" with \"translation unit\", add space after //",
    "EDIT898": "[expr.call]p1 Use a more idiomatic way to specify the expression has undefined behavior",
    "EDIT899": "[whole standard] Audit index of implementation-defined behavior",
    "EDIT900": "[depr, exception.syn] Consistently move deprecated decls to Annex D",
    "EDIT901": "[thread] Index review clause 30",
    "EDIT902": "[lex.phases] Index and xref raw string literels",
    "EDIT903": "chmod 644 source/{containers,lib-intro}.tex",
    "EDIT904": "What is the meaning of 'section' in the standard?",
    "EDIT905": "type traits do not show in the index of library names",
    "EDIT906": "[intro.progress] fix typo: guaranteees -> guarantees",
    "EDIT907": "[class.local, facet.num.{get,put}.virtuals, temp.expl.spec] Remove stray whitespace.",
    "EDIT908": "[facet.num.put.virtuals] Fix grammar: determining -> determine.",
    "EDIT909": "[function.objects] Use formal Returns: clause for std functors",
    "EDIT910": "[optional.object.ctor] remove redundant <T>",
    "EDIT911": "[ostream.inserters] vs [istream::extractors] and [alg.any_of] vs [alg.nth.element]",
    "EDIT912": "[input.iterators] Fix formatting of parentheses and p.",
    "EDIT913": "Small typo in [any.modifiers]/2",
    "EDIT914": "[any.nonmembers]/3 is missing a parameter name",
    "EDIT915": "[expr.prim.paren] Clarify that parentheses preserve all value categories, not just lvalueness.",
    "EDIT916": "[time.duration.nonmember] is missing formatting",
    "EDIT917": "[dcl.type.auto.deduct] Use void() instead of the ill-formed void{}.",
    "EDIT918": "[thread.once] should have the call_once class defintion",
    "EDIT919": "Typo in specification of merge for associative containers",
    "EDIT920": "[thread.once] Move struct once_flag defintion into corresponding subc\u2026",
    "EDIT921": "[thread.lock.shared] Apply conventional indent to shared_lock class d\u2026",
    "EDIT922": "[meta] Add index entries for each type trait",
    "EDIT923": "[class.base.init] Remove stray indentation in codeblock.",
    "EDIT924": "[new.delete.array] Add missing [].",
    "EDIT925": "[inner.product] Fix typo",
    "EDIT926": "[iterator.iterators] Remove unmatched parenthesis, formatting",
    "EDIT927": "[stmt.return] Change 'void' to 'cv void'",
    "EDIT928": "Reword implementation-defined nature of <> and \"\" for #include",
    "EDIT929": "[dcl.type.simple] consistent indexing of type specifiers",
    "EDIT930": "[diff.cpp14.special] Clarify example comment",
    "EDIT931": "[basic.link] consistent indexing of 'translation unit'",
    "EDIT932": "[lex.literal] consistent indexing of prefix and suffix",
    "EDIT933": "[index] consistent indexing of name hiding",
    "EDIT934": "Consistently use the stdlib designations defined in [intro.refs]/2 and [library.general]/1.",
    "EDIT935": "[time.syn] Format whitespace more consistently with the rest of the WD",
    "EDIT936": "[time.duration.nonmember] Add missing \\tcode",
    "EDIT937": "NB US-91 (C++17 CD): [algorithm][numeric] Specify all parallel algorithms",
    "EDIT938": "Index entry for DECAY_COPY not formatted",
    "EDIT939": "Index entry for terminate has argument list",
    "EDIT940": "Not all headers are indexed in the main index.",
    "EDIT941": "[extern.names] Use \\tcode when referring to namespace std.",
    "EDIT942": "[class, class.derived, special] Write space in 'access control' consistently in index keys.",
    "EDIT943": "Fix lots of see/seealso references, especially regarding operators.",
    "EDIT944": "[basic.def.odr] brittle and broken count of bullets in normative text",
    "EDIT945": "[basic.def.odr] dangling reference to 7.1.2 for \"inline\"",
    "EDIT946": "generated pdf doesn't contain hyperlinks for grammer terms.",
    "EDIT947": "[expr.reinterpret.cast] Fix indentation artifact by adding missing % after \\indextext.",
    "EDIT948": "[basic, stmt, dcl.dcl] Move surrounding punctuation out of \\grammarterm arguments.",
    "EDIT949": "[basic, class.this, algorithms] Remove parentheses after \"see\".",
    "EDIT950": "[class.conv.fct] Add missing 'the'.",
    "EDIT951": "[optional.nullopt] Add missing 'the'.",
    "EDIT952": "Subhead with no [stable.tag]",
    "EDIT953": "Inconsistency in [expr.ass] and [intro.execution]",
    "EDIT954": "[stmt.stmt] condition contains brace-or-equal",
    "EDIT955": "[streambuf.virt.put] Fix typo",
    "EDIT956": "[temp.alias, rand.dist.pois.exp] Fix typos",
    "EDIT957": "Special math functions editorial issues found by Matwey V. Kornilov f\u2026",
    "EDIT958": "[whole standard] fix typos (#647)",
    "EDIT959": "[syntax] Use a different example",
    "EDIT960": "[stmt.iter] Remove superfluous and incorrect note",
    "EDIT961": "[iterator.synopsis] Add specialization specified in [iterator.traits]/3",
    "EDIT962": "[iterator.range]/1 List <string_view>, specified in [string.view.synop]/1",
    "EDIT963": "<string_view> is missing from the list of headers in  [iterator.range]/1:",
    "EDIT964": "Example in [temp.variadic] attached to wrong paragraph",
    "EDIT965": "References to \"member subobject\" and \"base class subobject\" on [intro.object]/2 in italics",
    "EDIT966": "Behaviour of `std::pmr::memory_resource::do_allocate()` is ambiguous",
    "EDIT967": "[string.view.io] Update Effects: with P0254R2 changes",
    "EDIT968": "[associative.reqmts] Fully qualify 'mapped_type'",
    "EDIT969": "[associative.reqmts, unord.req] insert_return_type only for unique keys",
    "EDIT970": "Add index entries for ones' and two's complements",
    "EDIT971": "OK, error, ambiguous consistency of comments in examples.",
    "EDIT972": "Editorial: execpol.vec was renamed to unsequenced",
    "EDIT973": "After applying CWG1860, replace \"anonymous union\" and \"anonymous union member\" with \"anonymous union object\" where relevant",
    "EDIT974": "Unify the wording style of saying \"T in Types\"",
    "EDIT975": "iostream.tex wrong index ref in comment of stringstream synopsis (ed)",
    "EDIT976": "Editorial: remove '+' from title",
    "EDIT977": "[whole draft] Use \\tcode{true} and \\tcode{false} consistently",
    "EDIT978": "[iostreams] Refer to int values as nonzero instead of true",
    "EDIT979": "Use decay_t<> rather than typename decay<>::type.",
    "EDIT980": "Use \\term and \\defnx more correctly and consistently",
    "EDIT981": "NB GB-11 (C++17 CD): [intro.memory] add a footnote referencing CHAR_BIT",
    "EDIT982": "NB GB-32 (C++17 CD): [defns.additional] make this clause a note in [d\u2026",
    "EDIT983": "NB GB-33 (C++17 CD): [objects.within.classes] change external behavio\u2026",
    "EDIT984": "P0435R1 \"Resolving LWG Issues re common_type\" + misc cleanups",
    "EDIT985": "[dcl.init] don't mention expresion where braced-init-list may appear",
    "EDIT986": "Updated required package list.",
    "EDIT987": "[class.dtor] add paragraph number",
    "EDIT988": "NB GB-48 (C++17 CD): [parallel.execpol.objects] simplify stable tag",
    "EDIT989": "NB GB-29 (C++17 CD): [intro.defs] move block and unblock definitions",
    "EDIT990": "[intro.races] remove redundant constraint on modification order",
    "EDIT991": "NB GB-8 (C++17 CD): [intro.object] clearer definition for complete ob\u2026",
    "EDIT992": "Added wording for partial ordering of template template parameters and arguments (P0522R0).",
    "EDIT993": "[alg.reverse] use ValueSwappable instead of swappable requirement",
    "EDIT994": "[string.capacity] improve max_size() description by copying from string_view",
    "EDIT995": "Tidy referenceable definition",
    "EDIT996": "[expr.reinterpret.cast]: requirement redundant with static_cast: make it into a note",
    "EDIT997": "NB JP-21 (C++17 CD): [algorithms] Order elements consistently",
    "EDIT998": "[string::compare] replace smallest by smaller",
    "EDIT999": "[string.classes] replace :: in stable names with .",
    "EDIT1000": "[lib] Make Remark: and Postcondition: plural",
    "EDIT1001": "[istream.extractors] rename stable name from istream::extractors",
    "EDIT1002": "Improve synopsis presentation for function pointers with different language linkages",
    "EDIT1003": "[intro.multithread] add 'std' to standard library names",
    "EDIT1004": "[diff.cpp11.lex] fix example for digit separators",
    "EDIT1005": "[func.bind.bind] fix intro sentence for local definitions",
    "EDIT1006": "Clean up C.5",
    "EDIT1007": "[dcl.init] clarify invocation of list-initialization for '= braced-init-list'",
    "EDIT1008": "[lib] modernize closing template brackets",
    "EDIT1009": "[numeric.limits.members] replace IEC 559 by ISO/IEC/IEEE 60559",
    "EDIT1010": "[facet.num.get.virtuals] Clarify 'fails to convert' for empty sequence",
    "EDIT1011": "[class.ctor] split into numbered paragraphs",
    "EDIT1012": "[containers] 'const iterator' should be 'constant iterator'",
    "EDIT1013": "[over.match] 'underlying type' for a reference is undefined",
    "EDIT1014": "[any,thread] Whitespace for template parameter packs",
    "EDIT1015": "[expr.rel] Complete the definition of 'compares greater than'",
    "EDIT1016": "[dcl.type.simple] Add decltype(auto) to the table giving meaning to",
    "EDIT1017": "Subnormal instead of denormal",
    "EDIT1018": "[vector.bool] Excise use of undefined term 'conversion operator'",
    "EDIT1019": "[diff.cpp03.input.output] \"explicit\" should be in code font",
    "EDIT1020": "[intro.execution] Adjust example to new rules for sequencing of",
    "EDIT1021": "[atomics] Fix standard-layout requirement for atomic types",
    "EDIT1022": "Ensure PDF files are not compared with text-based diff",
    "EDIT1023": "[type.descriptions.general] Remove reference to undefined library concepts.",
    "EDIT1024": "[expr.dynamic.cast] Remove redundant specification of value category",
    "EDIT1025": "Harmonize formatting of 'cv-qualified'",
    "EDIT1026": "[namespace.udecl] Remove stray newline in grammar production",
    "EDIT1027": "[basic.type.qualifier] add const-qualified / volatile-qualified to the index",
    "EDIT1028": "[expr.const] Avoid 'value' of a glvalue in definition of",
    "EDIT1029": "[string.require] Add note that traits::char_type is the same as",
    "EDIT1030": "[intro.scope, namespace.udecl, temp.deduct.type] Avoid \"and so\"",
    "EDIT1031": " [fpos.operations] Unclear assertions in requirements table",
    "EDIT1032": "[tables] Formatting of \"Effects:\", \"pre:\" and \"post:\"",
    "EDIT1033": "[index] Using \"type!POD\" vs. \"POD type\"",
    "EDIT1034": "[containers] Consistent semicolons in tables",
    "EDIT1035": "[whole standard] Add a space before \\begin{example}",
    "EDIT1036": "Late 15 (C++17 CD): [path.gen] Simplify and clarify specification of lexically_relative",
    "EDIT1037": "[containers] Fix typos",
    "EDIT1038": "[atomics] Clean up indexing of atomics clause",
    "EDIT1039": "[lex.ext] Add hyphen in index entry for user-defined literals",
    "EDIT1040": "Replace 'sub-clause' by 'subclause'",
    "EDIT1041": "[meta] add cross-references to 'referenceable type'",
    "EDIT1042": "Change 'result is undefined' to 'has undefined behavior'",
    "EDIT1043": "[dcl.align] Avoid 'shall' for a requirement on the implementation",
    "EDIT1044": "[container.requirements.general] Remove redundant Requires",
    "EDIT1045": "[cpp.replace] Delete obsolete footnote",
    "EDIT1046": "[clause 21] Index cstd header synopses",
    "EDIT1047": "Correct typo in algorithms.tex",
    "EDIT1048": "[utility] shorten stable names",
    "EDIT1049": "[cstdlib.syn, csignal.syn] Introduce exposition-only function types with C and C++ language linkage to improve the presentation of C library functions that take callbacks.",
    "EDIT1050": "Define a new macro \\caret and use it",
    "EDIT1051": "[diff.mods.to.headers] Explain what happened to meaningless C headers",
    "EDIT1052": "[diff.library] Remove listings of content shared between C and C++.",
    "EDIT1053": "Replace 'run-time' by 'runtime' for consistency.",
    "EDIT1054": "Move specification of deprecated headers to Annex D",
    "EDIT1055": "monotonic_buffer_resource: initial_size vs buffer_size",
    "EDIT1056": "[diff.mods.to.definitions] Add entry for 'nullptr_t in stddef.h'",
    "EDIT1057": "[exception] Rephrase to avoid overfull hbox",
    "EDIT1058": "[support.types.layout], [diff.offsetof] Use \\placeholder",
    "EDIT1059": "[diff.cpp03.input.output] Use code font for 'explicit'",
    "EDIT1060": "Separate textual and code placeholders; use slanted font for the latter",
    "EDIT1061": "[basic] Replace \\term with \\defnx as appropriate",
    "EDIT1062": "[intro] Replace \\term with \\placeholder or \\defn as appropriate",
    "EDIT1063": "[utilities], [futures.task] Use 'not defined', not 'undefined', to pr\u2026",
    "EDIT1064": "Tildes in index entries",
    "EDIT1065": "[facet.num.put.virtuals] define showpoint and don't apply & twice",
    "EDIT1066": "Use \\cv{}, not \\cv\\ .",
    "EDIT1067": "[lex] Replace \\term with \\placeholder or \\defn as appropriate",
    "EDIT1068": "Resolve some 'Overfull \\hbox' warnings.",
    "EDIT1069": "[variant.assign] Introduce bullets for 'If an exception is thrown...'\u2026",
    "EDIT1070": "[numeric] Order elements correctly",
    "EDIT1071": "[valarray] wording needs major overhaul",
    "EDIT1072": "LWG2754 The in_place constructors and emplace functions added by P0032R3 don't require CopyConstructible",
    "EDIT1073": "[class.union]/3 note contradicts normative wording",
    "EDIT1074": "[class.mem] 9.2p1 should talk about member names instead of members? Members can be added later, names not.",
    "EDIT1075": "[lib] Spell value-initialization with a hyphen.",
    "EDIT1076": "[class] Rephrase definition of M(X) used to define a standard-layout \u2026",
    "EDIT1077": "[class.copy] Introduce three subsections.",
    "EDIT1078": "[17-30] Create index entries for all namespaces",
    "EDIT1079": "Multiple global style improvements",
    "EDIT1080": "[associative.reqmts], [unord.req] fix typo in precondition for the me\u2026",
    "EDIT1081": "Replace \\textit{cv} with \\cv{} or \\cvqual{...} as appopriate.",
    "EDIT1082": "[temp.variadic] Move example so that it attaches to the correct parag\u2026",
    "EDIT1083": "[dcl.ref] Introduce the phrase 'reference collapsing' in a note.",
    "EDIT1084": "[intro.execution] Adjust example for unsequenced side effects",
    "EDIT1085": "[lib] Remove 'std::' prefix from library names.",
    "EDIT1086": "[lib] When to use 'shall' in library clauses?",
    "EDIT1087": "[lib] Harmonize sectioning comments of synopses.",
    "EDIT1088": "[lib] Inconsistent style in \\complexity",
    "EDIT1089": "Fix typos and add missing \\tcode{}s",
    "EDIT1090": "Meaning of \"program-defined\"",
    "EDIT1091": "[lib] Referring to \\requires, \\effects and others",
    "EDIT1092": "[basic.lookup.argdep] Mark definitions of 'associated class/namespace'.",
    "EDIT1093": "[library] Use \\effects etc. when referring to them in text",
    "EDIT1094": "[library] Change program-defined to user-defined",
    "EDIT1095": "[futures.overview], [futures.async] Use 'bitmask type' terminology.",
    "EDIT1096": "[class.copy] Rephrase rule preferring a move constructor",
    "EDIT1097": "[styles] Give lists uniform vertical spacing.",
    "EDIT1098": "[reverse.iter.ops] Simplify reverse_iterator operator function declar\u2026",
    "EDIT1099": "[istream], [ostream] Remove paragraph numbers in cross-references.",
    "EDIT1100": "[quoted.manip] operator>> is not a member of basic_istream.",
    "EDIT1101": "[iterator.requirements.general] Rephrase definition of 'writable to'",
    "EDIT1102": "[basic.scope.class] Use a regular itemize environment instead of enumeraten",
    "EDIT1103": "[basic.scope.class] Add missing whitespace before example.",
    "EDIT1104": "[class.conv.fct] Add an example for a conversion function with a dedu\u2026",
    "EDIT1105": "[macros, basic, streambuf] Retire enumeraten environment in favour of\u2026",
    "EDIT1106": "[basic.lookup.unqual] Rephrase unqualified lookup in a function defin\u2026",
    "EDIT1107": "[sequence.reqmts] Remove redundant 'forward iterator' requirement",
    "EDIT1108": "[temp.deduct.call] Add example involving cv-qualifiers and references.",
    "EDIT1109": "[basic.def.odr] Avoid counting bullets in normative text.",
    "EDIT1110": "[thread.mutex.requirements] Make references to mutex requirements con\u2026",
    "EDIT1111": "[streambuf.virtuals] Simplify the logic of exposition; remove several unneeded lists",
    "EDIT1112": "For some X, choose a consistent spelling between non-X vs. nonX.",
    "EDIT1113": "[class.union] Clarify in the note that a default member",
    "EDIT1114": "[diff] Miscellaneous fixes.",
    "EDIT1115": "Use teletype font for T throughout [variant]",
    "EDIT1116": "Replace \"Error reporting (27.10.7)\" with just \"27.10.7\" throughout [filesystems]",
    "EDIT1117": "fix paragraph ordering after LWG2729",
    "EDIT1118": "[locale.facet] Don't bother itemizing a single item.",
    "EDIT1119": "Style of \"equivalent to\"",
    "EDIT1120": "[atomics] Use \\placeholder instead of \\textit or \\term.",
    "EDIT1121": "[dcl.decl] Turn very large footnote into ordinary note.",
    "EDIT1122": "[thread.lock] Extract error conditions from 'Throws' element.",
    "EDIT1123": "[filesystems] Do not repeat section title in cross-references to [fs.\u2026",
    "EDIT1124": "[re.matchflag] Remove namespace qualification when mentioning match_f\u2026",
    "EDIT1125": "[variant] Use \\tcode for type designators, not math mode.",
    "EDIT1126": "[thread.lock.shared] Add sectioning comments to synopsis.",
    "EDIT1127": "Adjust italics and index entries for 'underlying type'.",
    "EDIT1128": "UK spelling \"behaviour\" appears in description of pairs",
    "EDIT1129": "[re.regex.const] missing multiline from LWG2503",
    "EDIT1130": "Missing definition of \"direct-non-list-initialization\"",
    "EDIT1131": "remove \\exor command",
    "EDIT1132": "Application of LWG 2567 missed a few `bool(Bi::value)` casts",
    "EDIT1133": "[meta.logical] Fix application of LWG 2567 and add further explicit boolean conversions editorially.",
    "EDIT1134": "Alternative lists adjustment",
    "EDIT1135": "[macros] Reduce whitespace at the end of code blocks",
    "EDIT1136": "s/behaviour/behavior/",
    "EDIT1137": "[basic.scope.class] Break up list",
    "EDIT1138": "[fpos.operations] Use code font for a type",
    "EDIT1139": "Format indexed variables with code and maths properly",
    "EDIT1140": "[except.spec] missing linebreak",
    "EDIT1141": "[unord.req.except] Add missing \\tcode for Hash and Pred.",
    "EDIT1142": "s/(possibly cv-qualified)/\\\\cv{}~/ and allied changes.",
    "EDIT1143": "[numeric.limits] Add missing \\tcode around true",
    "EDIT1144": "[new.delete] Use \\replaceable instead of \\textit",
    "EDIT1145": "[new.delete] Multiple \\requires elements for one function",
    "EDIT1146": "[containers] Add a space after \"Requires:\"",
    "EDIT1147": "[syserr.syserr.members] Use \\ntbs macro",
    "EDIT1148": "[whole standard] Put commas outside quotes",
    "EDIT1149": "[library] Fix capitalization and add missing \\tcode in headings",
    "EDIT1150": "[meta] Formatting of \"UnaryTypeTrait\"",
    "EDIT1151": "[utilities] Use code font for named requirements",
    "EDIT1152": "Comments in code example in footnotes should be italic like elsewhere",
    "EDIT1153": "Do not use code font for constexpr constructor and constexpr function",
    "EDIT1154": "BaseCharacteristic, unlike all other technical terms we define, is in CamelCase",
    "EDIT1155": "[expr.prim.lambda] p 6, 7 obnoxiously long",
    "EDIT1156": "[over.best.ics] Turn a rationalizing footnote into a note with an acc\u2026",
    "EDIT1157": "[streambuf.virt.get] use half-open ranges in underflow effects",
    "EDIT1158": "[expr.prim.lambda] Split specification of lambda expressions into sub\u2026",
    "EDIT1159": "[limits] Integrate section [limits.numeric] into section [numeric.lim\u2026",
    "EDIT1160": "[lib] Replace 'Notes:' elements with regular [ Note: ... \u2014 end note]",
    "EDIT1161": "[util.smartptr] Cleanse of italics infestation.",
    "EDIT1162": "[re.regex] Add missing 'multiline' constant.",
    "EDIT1163": "[re.regex]/3 regex_constants presentation",
    "EDIT1164": "[utilities] Do not use CamelCase for 'BaseCharacteristic'.",
    "EDIT1165": "Fix duplicate index entries for 'base class'.",
    "EDIT1166": "[class.mi] Redirect index entry for virtual base class to base class.",
    "EDIT1167": "[headers], [depr.c.headers] Avoid brittle counts of headers.",
    "EDIT1168": "Which codeblocks should contain \"namespace std\"?",
    "EDIT1169": "[basic.scope.class] is redundant",
    "EDIT1170": "[macros, styles] Make BNF vertical spacing like that of normal paragraphs",
    "EDIT1171": "Inconsistent noexcept",
    "EDIT1172": "[utility] Harmonize spelling of template parameters for std::pair<T1,\u2026",
    "EDIT1173": "Capitalize notes.",
    "EDIT1174": "Capitalize examples outside sentences.",
    "EDIT1175": "Class members are introduced by a member-declaration, not member-de\u2026",
    "EDIT1176": "remove apply example in 20.3.1",
    "EDIT1177": "[temp.class] Start paragraph 2 at beginning of example rather than in the middle",
    "EDIT1178": "[pairs.pair] Further harmonize spelling of template parameters for pa\u2026",
    "EDIT1179": "[function.objects] Introduce a new subsection for the <functional> sy\u2026",
    "EDIT1180": "[temp.class] Reorganize examples into separate paragraph",
    "EDIT1181": "[lib] Adjust whitespace to attach & to the type, not the declarator-id.",
    "EDIT1182": "[class.virtual] Remove awkward 'but'.",
    "EDIT1183": "[lib] More & and && adjustments for #166",
    "EDIT1184": "[containers], [alg.transform] Minor presentation fixes.",
    "EDIT1185": "[iterators] Fix whitespace to attach & to the type",
    "EDIT1186": "[sequence.reqmts] Use placeholders for 'member functions of the form'.",
    "EDIT1187": "[intseq.general] Remove example not quite mirroring a standard function.",
    "EDIT1188": "[class.bit] Add missing \"bit-\" to \"field declaration\" in index entry",
    "EDIT1189": "Remove tildes from index entries.",
    "EDIT1190": "[namespace.udecl] Restore accidentally deleted }",
    "EDIT1191": "[depr] Add missing parentheses and fix formatting",
    "EDIT1192": "[numeric.special] Remove redundant 'inline' specifiers in example.",
    "EDIT1193": "[complex.numbers] Use \\cv{}",
    "EDIT1194": "[rand.req.adapt] Fix syntax error",
    "EDIT1195": "[char.traits] Use \\tcode around parameter name",
    "EDIT1196": "Clean up duplicate 'itemdescr' items.",
    "EDIT1197": "[lib] Add main index entries for all headers.",
    "EDIT1198": "[expr.ass] The right operand is not necessarily an expression.",
    "EDIT1199": "[allocator] Format OUTERMOST in code font",
    "EDIT1200": "[diff] Capitalization of headings",
    "EDIT1201": "[diff] Capitalize clause headings",
    "EDIT1202": "The ValueType parameter of std::any_cast is confusingly named",
    "EDIT1203": "[limits] Use 'subnormal number' as defined by IEEE 754-2008 = ISO 60559.",
    "EDIT1204": "For 'immediate context', refer to [temp.deduct].",
    "EDIT1205": "Synopses in [localization] use non-standard indentation style",
    "EDIT1206": "[pairs.pair, tuple.cnstr] Replace 'The constructor initializes' with just 'Initializes', which is how we say it in many other places.",
    "EDIT1207": "[dcl.fct.default] Restore }, again",
    "EDIT1208": "[variant.bad.access] use override in synopsis",
    "EDIT1209": "[mem.res.syn] should call polymorphic_allocator a template",
    "EDIT1210": "[{ex,in}clusive.scan]: Rephase 'for each *j' in terms of indexes",
    "EDIT1211": "[class.temporary] Add paragraph number and split off example into its\u2026",
    "EDIT1212": "[pairs.spec], [tuple.creation] Avoid 'equality' of types phrasing.",
    "EDIT1213": "[utility], [bitset] Introduce a separate heading for the synopsis.",
    "EDIT1214": "[thread] Add numbered headings for synopses.",
    "EDIT1215": "[numarray] Add standard description elements.",
    "EDIT1216": "Delete accidentally added vim swap file.",
    "EDIT1217": "[strings, algorithms, diff] Replace 'routine' with 'function'.",
    "EDIT1218": "[bitset.members] Remove confusing index entries for 'set' and 'any'.",
    "EDIT1219": "Last example in [dcl.init.ref] uses \"type qualifier\", which is C terminology, not C++",
    "EDIT1220": "[any] Rename the ValueType template parameter to T.",
    "EDIT1221": "[list.ops] Move effects to 'Effects' element.",
    "EDIT1222": "[dcl.init.ref] Replace 'type qualifier' with 'cv-qualifier' in example.",
    "EDIT1223": "[lib] Harmonize index entries for 'make_error_code' and 'make_error_c\u2026",
    "EDIT1224": "[lib] Use 'comparison function', not 'comparison operator'.",
    "EDIT1225": "[temp] Add variable templates to the definition of 'template'.",
    "EDIT1226": "[mem.res.monotonic.buffer.ctor] Spell reference to a parameter correc\u2026",
    "EDIT1227": "[localization] Fix indentation in class template synopses.",
    "EDIT1228": "[input.output] Add numbered headings for synopses.",
    "EDIT1229": "[localization] Add numbered headings for synopses.",
    "EDIT1230": "[algorithms] Add numbered heading for synopsis.",
    "EDIT1231": "Remove \\synopsis macro.",
    "EDIT1232": "Footnote 133 should be reimagined",
    "EDIT1233": "Inconsistent placeholder styling in [over.built]",
    "EDIT1234": "[intro.races] Remove duplicated index entry for 'data race'.",
    "EDIT1235": "[string.view.hash] Add a note about equality to string hashes.",
    "EDIT1236": "[path.non-member] Structure multi-paragraph note using an itemization instead.",
    "EDIT1237": "[over.built] Rework formatting of placeholders.",
    "EDIT1238": "[library] Add full stops to \\returns etc.",
    "EDIT1239": "Don't re-use note environments for unrelated notes in subsequent paragraphs.",
    "EDIT1240": "[class.derived] Don't bother splitting last remark in note off into separate paragraph.",
    "EDIT1241": "[unord] Use 'key equality predicate' consistently.",
    "EDIT1242": "[lib] Subheadings in class descriptions",
    "EDIT1243": "disambiguate an odr usage requirement in [basic.def.odr]",
    "EDIT1244": "[iostream.forward.overview] Promote introductory sentences",
    "EDIT1245": "[algorithms] Move non-modifying algorithms away",
    "EDIT1246": "[filesystems] Filesystem library edits/issues",
    "EDIT1247": "[cmath.syn] C functions show five overloads; those from [sf.math] only three",
    "EDIT1248": "[cmplx.over], [cmath.syn] use of undefined phrase \"effectively cast\"",
    "EDIT1249": "[cmath.syn] \"have type float\"",
    "EDIT1250": "[sf.math] parenthesized \"of the first/second kind\"?",
    "EDIT1251": "[tuple.creation] Simplify the introductory notation, and then use notation that matches the introduction.",
    "EDIT1252": "[temp.deduct] Avoid talking about 'side effect' and 'evaluation'",
    "EDIT1253": "[meta.rel] Fix incorrect use of \\grammarterm{return-statement}.",
    "EDIT1254": "[namespace.udecl] Clarify error in example.",
    "EDIT1255": "[unique.ptr.single.modifiers] Use 'if and only if' when calling deleter.",
    "EDIT1256": "[sf.math] Promote parenthesized parts of function names",
    "EDIT1257": "[mem.res.pool], [mem.res.monotonic.buffer] \"owns\" defined, but not used",
    "EDIT1258": "[mem.res.pool.overview] Implicit definition of terms",
    "EDIT1259": "[mem.res] Miscellaneous changes",
    "EDIT1260": "[mem.res.pool], [mem.res.monotonic.buffer] Do not define the otherwis\u2026",
    "EDIT1261": "[dcl.array], [temp.deduct.type] Split notes spanning numbered paragra\u2026",
    "EDIT1262": "Avoid \\pnum inside examples.",
    "EDIT1263": "[lib] Referring to standard library requirements.",
    "EDIT1264": "[lib] Harmonize casing for 'shall meet the requirements of ... iterator'.",
    "EDIT1265": "[class.derived] Avoid \\pnum inside examples.",
    "EDIT1266": "[stmt.dcl] Clarify footnote about deadlock avoidance.",
    "EDIT1267": "[ostream.iterator], [istream.iterator] Format exposition-only members",
    "EDIT1268": "Define 'object type' only once.",
    "EDIT1269": "Fix typos in [mem.poly.allocator.mem]/9.1 and /9.5",
    "EDIT1270": "[dcl.init.aggr] Add example for array of unknown bound",
    "EDIT1271": "[associative.reqmts] Harmonize capitalization.",
    "EDIT1272": "[unord.req] Split column heading into two rows",
    "EDIT1273": "[containers] Replace pre: and post: in requirements tables",
    "EDIT1274": "Use \\tcode for indexed type placeholders (also in math mode)",
    "EDIT1275": "[lib] For showing complexity, use $N \\log N$",
    "EDIT1276": "[cstdint.syn] should list the macros it defines",
    "EDIT1277": "[lex.literal] Avoid references to plain 'literal'",
    "EDIT1278": "Harmonize spacing for template headers.",
    "EDIT1279": "[intro.refs] Add normative references to LIA-1 and IEEE 754.",
    "EDIT1280": "Inconsistencies with \"object declarations\", \"declarations that declare objects\" and \"class members of object type\"",
    "EDIT1281": "More pre:'s and post:'s in library specification",
    "EDIT1282": "[string.view.find] Fix grammar (add missing 'be').",
    "EDIT1283": "Mechanically harmonize indexed types to $\\tcode{T}_i$.",
    "EDIT1284": "[lib] Replace pre: and post: in requirements tables",
    "EDIT1285": "[func.bind.bind] Reformat to use math-style indexing.",
    "EDIT1286": "[except] Replace \\term and \\textit",
    "EDIT1287": "[utilities] Tweaks for better linebreaks",
    "EDIT1288": "[string.view] Remove unnecessary std:: prefixes.",
    "EDIT1289": "[strings] Remove remarks that repeat what was stated a few lines before.",
    "EDIT1290": "[sf.cmath.cyl_bessel_j] Remove parentheses for index entry",
    "EDIT1291": "[sf.cmath] association of Greek math variables with parameters fails",
    "EDIT1292": "[meta.trans.other] add missing cv for common_type",
    "EDIT1293": "[char.traits.specializations] Inconsistent punctuation in stable names of subsections",
    "EDIT1294": "[char.traits.specializations] Add missing \\tcode.",
    "EDIT1295": "Decide on \\defn{thing}{s} vs \\defnx{things}{thing}",
    "EDIT1296": "Consistently italicize definitions' plural 's'.",
    "EDIT1297": "Capitalize notes.",
    "EDIT1298": "[class.virtual] Adjust whitespace to fix vertical alignment in code example.",
    "EDIT1299": "[util.smartptr.enab]/8 and P0033R1",
    "EDIT1300": "[expr] Split off definition of 'composite pointer type' into dedicated paragraph.",
    "EDIT1301": "[expr.reinterpret.cast] impldef not indexed",
    "EDIT1302": "Replace 'sub-clause' by 'subclause'",
    "EDIT1303": "[limits] Use normal font in \"try block\"",
    "EDIT1304": "\"main()\" vs. \"main function\"",
    "EDIT1305": "Code font in \"return statement\"",
    "EDIT1306": "[class.virtual] Add index entry for covariant return types.",
    "EDIT1307": "[expr.reinterpret.cast] Index implementation-defined behavior.",
    "EDIT1308": "Harmonize formatting of 'main' function.",
    "EDIT1309": "Consider using more \"Descriptive variable definitions\" tables for requirements",
    "EDIT1310": "Decide as what kind of entity to annotate \"derived-declarator-type-list\"",
    "EDIT1311": "[expr.unary.noexcept] expression grammarterm marked as \\tcode",
    "EDIT1312": "Replace \\nonterminal with \\grammarterm or \\cv or \\cvqual or ...",
    "EDIT1313": "[expr.unary.noexcept] Use \\grammarterm{expression}, not \\tcode.",
    "EDIT1314": "[util.smartptr.enab] Remove leftover postcondition after P0033R1.",
    "EDIT1315": "[dcl.meaning] Consistently use \\placeholder{derived-declarator-type-l\u2026",
    "EDIT1316": "Replace \\nonterminal with \\grammarterm or \\cvqual, as appropriate.",
    "EDIT1317": "[sf.cmath] Fix 'where' associations of Greek variable names.",
    "EDIT1318": "[conv.lval] Split off description of conversion result into dedicated paragraph.",
    "EDIT1319": "Add missing hyphen in 'floating-point'.",
    "EDIT1320": "wrongly added {}",
    "EDIT1321": "[basic] Remove stray whitespace after \\tcode{...}",
    "EDIT1322": "[stmt.stmt] Remove stray {} after \\grammarterm.",
    "EDIT1323": "[re.submatch.op] Remove excessive parentheses in \"Returns:\" element.",
    "EDIT1324": "[complex.ops] Don't repeat declaration in \"Effects:\" element.",
    "EDIT1325": "Issues of ending indeces.",
    "EDIT1326": "[dcl.link] missing impldef index",
    "EDIT1327": "[dcl.init] Fix a typo in definition of const-default-constructible",
    "EDIT1328": "Fix range_close markers for index ranges",
    "EDIT1329": "[rand.util.seedseq] Consistently format T(...) as ordinary math, not code.",
    "EDIT1330": "[dcl.link] Index implementation-defined behavior.",
    "EDIT1331": "[rand.adapt.shuf] Declaration and initialization order of \"exposition only\" variables does not match",
    "EDIT1332": "[rand.adapt.shuf] Show exposition-only members in the order",
    "EDIT1333": "[string.io] Don't refer to sentry by name it was not given.",
    "EDIT1334": "[class.gslice.overview] Replace $$...$$ with \\[...\\].",
    "EDIT1335": "Cleanup \"partial specializations\" language in [atomics.syn]",
    "EDIT1336": "[rand.adapt.ibits] Don't typeset binary + as unary +.",
    "EDIT1337": "[valarray.access] 'evaluates as' -> 'evaluates to'.",
    "EDIT1338": "[string.insert] Typo fix for argument name",
    "EDIT1339": "[dcl.enum, conv.prom] Style min/max subscripts as labels, not variables.",
    "EDIT1340": "[rand.req.eng] Omit superfluous dollar-math wrapping inside \\bigoh.",
    "EDIT1341": "[iterator.traits] Add index entry for std::iterator_traits.",
    "EDIT1342": "Preserve whitespace after \\shr and \\shl where appropriate.",
    "EDIT1343": "10.2p12 wrong example.",
    "EDIT1344": "Replace \\mbox with \\text where appropriate",
    "EDIT1345": "[rand.util.seedseq] Replace nested ternary expressions with definition by cases.",
    "EDIT1346": "Remove \\shl and \\shr.",
    "EDIT1347": "[class.temporary/1] `(\\ref{class.access})` should be `(Clause~\\ref{class.access})`",
    "EDIT1348": "[class.temporary] Use 'Clause~\\ref{class.access}'",
    "EDIT1349": "[dcl.enum] Fix calculation for bmax",
    "EDIT1350": "In math, do not needlessly wrap \\tcode inside \\text.",
    "EDIT1351": "Inconsistent italicization of \\nontermdef's colon in bnf and bnfkeywordtab envs",
    "EDIT1352": "[dcl.enum] Add missing \\tcode in comment in example code.",
    "EDIT1353": "[expr.prim.fold]  Fix alignment in list of fold-operators.",
    "EDIT1354": "[numerics] Remove useless \\mbox wrappings.",
    "EDIT1355": "Do not italicize colons when defining grammar non-terminals or",
    "EDIT1356": "Capitalize examples where appropriate.",
    "EDIT1357": "Remove stray whitespace around scope resolution operator.",
    "EDIT1358": "[re] Remove whitespace before \\colcol.",
    "EDIT1359": "Inconsistent use of \\colcol vs. ::\\brk{}",
    "EDIT1360": "[any.class]/3 Rephrase example",
    "EDIT1361": "[temp.deduct.type] Don't style prose as monotype.",
    "EDIT1362": "[dcl.fct] Make bnf indentation in source match presentation.",
    "EDIT1363": "[any.modifiers] Remove space in 'forward<Args> (args)'.",
    "EDIT1364": "Remove stray whitespace after opening parentheses.",
    "EDIT1365": "consistent whitespace in \\tcode types",
    "EDIT1366": "Fix remaining uses of \\Cpp macro",
    "EDIT1367": "[diff] Consider assigning paragraph numbers to changes",
    "EDIT1368": "[diff.expr] Remove stray paragraph break.",
    "EDIT1369": "\"pointer to member\" vs \"pointer-to-member\"",
    "EDIT1370": "[temp] Replace \\term with \\defn or \\placeholder",
    "EDIT1371": "[dcl.ambig.res] Describe example ambiguous case more clearly.",
    "EDIT1372": "[dcl.ptr] Remove unnecessary line break in comment in example code.",
    "EDIT1373": "[expr.cond]/4.3 simplification",
    "EDIT1374": "[expr.cond] drop redundant subclause",
    "EDIT1375": "Style references to numbered lines in example code consistently",
    "EDIT1376": "[utilities.general] Missing row separator in table",
    "EDIT1377": "[cpp.concat] In example code comment, remove unnecessary line break and format code as code.",
    "EDIT1378": "CWG telecon: \"re-declared\" -> \"redeclared\"",
    "EDIT1379": "CWG telecon: mix of \"base subobject\" and \"base class subobject\"",
    "EDIT1380": "Consistently use 'this International Standard'.",
    "EDIT1381": "[stmt.stmt], [dcl.attr.deprecated] Remove hyphen in 're-declared'",
    "EDIT1382": "Use 'base class subobject', not 'base subobject'",
    "EDIT1383": "Use body font, not \\tcode, for '#1' code line references in running t\u2026",
    "EDIT1384": "'floating-point something', not 'floating point something'",
    "EDIT1385": "Remove space between period/comma and footnote reference.",
    "EDIT1386": "Hyphenate 'pointer-to-member' when it is an adjective.",
    "EDIT1387": "[cpp.pragma.op] Add missing \\pnums and remove unwanted paragraph breaks.",
    "EDIT1388": "[cpp.pragma.op] Take into account encoding-prefixes other than 'L'",
    "EDIT1389": "Use \"this document\" instead of \"this International Standard\"",
    "EDIT1390": "Comment out ellipses when they mean \"more code here\" rather than an actual ellipsis token.",
    "EDIT1391": "Format index entries that redirect to multiple other index entries consistently",
    "EDIT1392": "[optional.ctor] missing \\pnum",
    "EDIT1393": "Comment out ellipses when they mean \"more code here\" rather than an actual ellipsis token.",
    "EDIT1394": "[optional.observe] Redundant remarks?",
    "EDIT1395": "[namespace.memdef]/3",
    "EDIT1396": "Add missing \\pnums.",
    "EDIT1397": "[basic.ios.cons] Remove stray semicolon.",
    "EDIT1398": "[variant.assign], [variant.swap]: place \\item before or after \"Otherwise,\"?",
    "EDIT1399": "[variant.visit], [variant.monostate], missing \\pnum",
    "EDIT1400": "[tuple.creation] Fix formatting errors and capitalization in description of tuple_cat.",
    "EDIT1401": "[any] \"contained value\" vs \"contained object\"",
    "EDIT1402": "Header <ratio> synopsis has two blocks for \"ratio comparisons\", one of them with a bad link",
    "EDIT1403": "Term \"functor\" is used but never defined",
    "EDIT1404": "[support.types] Mixed-up description of <cstddef>",
    "EDIT1405": "[function.objects] removes uses of term functor",
    "EDIT1406": "s/0-based/zero-based/",
    "EDIT1407": "Reasoning about IO types",
    "EDIT1408": "[dcl.attr.depend] Fix spacing in /**/ comments in example.",
    "EDIT1409": "[alg.heap.operations] Use \\bigoh instead of \\mathcal{O}.",
    "EDIT1410": "[dcl.enum] Italicize 'unscoped enumeration' in its definition.",
    "EDIT1411": "Use `value_type` instead of `charT` in the `string_view` declarations.",
    "EDIT1412": "[locale.time.get] change undefined term \"record\" to \"object\"",
    "EDIT1413": "[valarray.members] Style unary minus sign as math symbol, not as hyphen.",
    "EDIT1414": "Footnote 152 contains \"should\"",
    "EDIT1415": "[support.types] Properly describe <cstddef> header",
    "EDIT1416": "Change the `reference`, `pointer` etc typedefs in `string_view` to us\u2026",
    "EDIT1417": "[expr.delete] Missing tilde in index entry?",
    "EDIT1418": "[locale.facet] add missing backslash in \\defn",
    "EDIT1419": "[basic.types]/9 refers to [basic.type.qualifier] five times.",
    "EDIT1420": "Don't parenthesize \\refs after 'in'/'of'/'notwithstanding'.",
    "EDIT1421": "[lex.phases] Remove stray period.",
    "EDIT1422": "[enum.copy_options] Poor wording for requirement on elements set in copy_options",
    "EDIT1423": "[unord.req] variable `p` should be `q` in table",
    "EDIT1424": "[associative.set.syn] Wrong link in synopsis",
    "EDIT1425": "Indexing issues in [containers]",
    "EDIT1426": "Use columns=fullflexible listings option.",
    "EDIT1427": "Remove stray whitespace resulting from use of \" ~\".",
    "EDIT1428": "[cpp.preprocessor] Remove additional \"implementation defined\" index entries.",
    "EDIT1429": "[ostreambuf.iter.ops] not divided into subsections as [istreambuf.iter.ops]",
    "EDIT1430": "[intro] Uncapitalize index entries for 'sequenced before' and 'evaluate'.",
    "EDIT1431": "Add missing \\tcode.",
    "EDIT1432": "[algorithms.parallel] missing \\pnum",
    "EDIT1433": "Review use of \\xspace in macro definitions",
    "EDIT1434": "[expr.mptr.oper] Use defined term 'null member pointer value'.",
    "EDIT1435": "[expr.new] Add missing space",
    "EDIT1436": "[containers, regex, utilities] Parenthesize some \\refs.",
    "EDIT1437": "[multibyte.strings] Move punctuation out of \\term.",
    "EDIT1438": "[dcl.stc] Remove stray whitespace in plural \\grammarterm",
    "EDIT1439": "Remove \\xspace",
    "EDIT1440": "[unord.req] Insert hint is 'p', not 'q'",
    "EDIT1441": "[temp.class.spec/1] Wrongly used \\defnx",
    "EDIT1442": "[container.requirements.general] Refer to table series a bit more smoothly",
    "EDIT1443": "[any.assign] T -> VT",
    "EDIT1444": "[basic.types] Remove excessive references to [basic.type.qualifier].",
    "EDIT1445": "[enum.copy_options] Rephrase restriction on copy_options values.",
    "EDIT1446": "[temp.class.spec] Fix index entry for 'primary class template'.",
    "EDIT1447": "[expr.delete] Remove bad index entry and",
    "EDIT1448": "[any.assign] Rename T to VT.",
    "EDIT1449": "[istreambuf.iterator] Join subsections for operations descriptions.",
    "EDIT1450": "Harmonize use of \"no diagnostic required\"",
    "EDIT1451": "Replace \\colcol by ::",
    "EDIT1452": "Index all mentions of a grammarterm?",
    "EDIT1453": "[expr.dynamic.cast] Incorrect wording regarding dynamic_cast",
    "EDIT1454": "Consistently use bold font for table headers.",
    "EDIT1455": "[alg.min.max] Make lfloor/rfloor delimiters stretchable.",
    "EDIT1456": "Harmonize punctuation for 'ill-formed, no diagnostic required'",
    "EDIT1457": "[any] Use 'contained value' consistently.",
    "EDIT1458": "[dcl.fct.spec] mistakenly used as reference for 'inline'",
    "EDIT1459": "[move.iter.op.index] Wrong \\text{} marking",
    "EDIT1460": "[alg.min.max] Remove space before footnote mark.",
    "EDIT1461": "[basic] Misuse of '@' in index entries",
    "EDIT1462": "Move plural 's' outside of \\grammarterm.",
    "EDIT1463": "Fix index entries for 'nested/local class'.",
    "EDIT1464": "Fix cross-reference for 'inline'.",
    "EDIT1465": "[basic.fundamental] Fix index entries for sizeof",
    "EDIT1466": "Fix destructor declaration indentation",
    "EDIT1467": "[cpp.cond] Make `defined` and `__has_include` show up in Annex A",
    "EDIT1468": "Remove trailing whitespace in LaTeX sources.",
    "EDIT1469": "[class.dtor, cpp.cond] Add missing \\grammarterm.",
    "EDIT1470": "example in [dcl.attr.nodiscard]p3 is insufficiently clear",
    "EDIT1471": "[dcl.attr.nodiscard] Clarify example with reference return type.",
    "EDIT1472": "`Index style file basic.gst not found.`",
    "EDIT1473": "[conv]p4 incorrect formatting.",
    "EDIT1474": "Consistently use \\mathit for italic 'cv' (or not)",
    "EDIT1475": "[temp.arg.template] Reference given for \"equivalent types\" only defines other kinds of equivalence",
    "EDIT1476": "[expr] Built-in operators shouldn't \"return\" things",
    "EDIT1477": "Add Travis CI check for whitespace at the ends of lines.",
    "EDIT1478": "[except.spec] Add missing 'an'.",
    "EDIT1479": "[meta.unary.prop, meta.trans.other] Omit unhelpful second argument in static_asserts.",
    "EDIT1480": "Missing cross-references to INVOKE in Clause 20",
    "EDIT1481": "[rand.req.eng, rand.req.dist] Replace square brackets around reference with regular parentheses.",
    "EDIT1482": "[localization, diff] Omit superfluous 'return 0;' in main.",
    "EDIT1483": "Type of an enumerator in the declaration of its enumeration",
    "EDIT1484": "Do not use code font for constexpr constructor and constexpr function",
    "EDIT1485": "[stmt.while] Equivalence given for \"while (T t = x)\" should also cover \"while (T t{...})\"?",
    "EDIT1486": "[expr.eq] Remove space before footnote mark.",
    "EDIT1487": "Harmonize index entries for \"null pointer value\"",
    "EDIT1488": "[lex.ccon, stmt.ranged] Fix index entries that misuse \\idxcode.",
    "EDIT1489": "[basic] Use less monospace in index entries.",
    "EDIT1490": "[allocator.uses.construction] Uncapitalize index entry for 'uses-allocator construction'.",
    "EDIT1491": "[dcl.init] Add index entry for direct-initialization.",
    "EDIT1492": "[intro] Promote \"Scope\", \"Normative references\", \"Terms and definitions\"",
    "EDIT1493": "[macros] Remove terms-and-definitions entries from TOC and bookmarks",
    "EDIT1494": "[diff.decl] Fix typo",
    "EDIT1495": "[lex] Complete index redirects to 'backslash character'.",
    "EDIT1496": "[implimits] Add cross-references for Annex B",
    "EDIT1497": "\"a possibly const value of type X\"",
    "EDIT1498": "Revise problematic stable labels",
    "EDIT1499": "Review rev7 of ISO Directives, Part 2 for changes",
    "EDIT1500": "Change \"name space\" to \"namespace\"?",
    "EDIT1501": "Consistently use repeated \\indextext for index redirects with multiple targets.",
    "EDIT1502": "Change stable names for Filesystem subclause",
    "EDIT1503": "[meta.trans] uses \"shall\" incorrectly",
    "EDIT1504": "[expr.prim.id.qual] Redirect '::' index entry directly to 'operator, scope resolution'.",
    "EDIT1505": "editorial fixups post-P0270R3",
    "EDIT1506": "Change stable names for Filesystem subclause",
    "EDIT1507": "[meta.trans] replace \"shall name\" with \"names\" in traits tables",
    "EDIT1508": "[cpp] Change index redirect from '#' to '# operator' (and same for ##).",
    "EDIT1509": "[util.smartptr.ownerless] Remove 'struct' from index entry for owner_less.",
    "EDIT1510": "remove space after INVOKE (please complete before applying p0604r0)",
    "EDIT1511": "Move <numeric> to the algorithms clause",
    "EDIT1512": "Consistent comma after e.g. and i.e.",
    "EDIT1513": "Update __cplusplus",
    "EDIT1514": "[dcl.dcl] Consider using less awkward example to illustrate static_assert",
    "EDIT1515": "[unord.req] Move library name index entries to library name index.",
    "EDIT1516": "Class templates in Clause 33 are not indented",
    "EDIT1517": "[over.best.ics]p4 contains an irrelevant example",
    "EDIT1518": "Inconsistent phrasing for \"Shall not participate ...\"",
    "EDIT1519": "[dcl.dcl] Capitalize grammarterms that start a sentence.",
    "EDIT1520": "Move plural 's' out of \\grammarterm.",
    "EDIT1521": "operator~ in index uses ugly ~",
    "EDIT1522": "atomic<integral>'s operator^= does not collate well with others",
    "EDIT1523": "Exposition-only alias templates for associative container deduction guides",
    "EDIT1524": "Assorted wording issues with P0433R2 ",
    "EDIT1525": "[gram.cpp] Add space before comma in bnf.",
    "EDIT1526": "Capitalization in [path.generic] grammar ",
    "EDIT1527": "P0492R2 makes dot and dot-dot no longer grammarterms",
    "EDIT1528": "[pairs.pair] use code font for 'pair'",
    "EDIT1529": "[expr.mptr.oper] Add missing indentation in example code.",
    "EDIT1530": "[unique.ptr.single.ctor] Sloppy wording after application of LWG 2905",
    "EDIT1531": "[re.results.state] fix bad index for match_result",
    "EDIT1532": "[expr.delete] Properly italicize the term 'delete array', as done elsewhere",
    "EDIT1533": "Add instructions for helpless Ubuntu users like myself.",
    "EDIT1534": "[fs.definitions] needs overhaul",
    "EDIT1535": "[fs] negation style needs to be harmonized with rest of document",
    "EDIT1536": "[basic.start.dynamic] says \"of a thread\", what thread?",
    "EDIT1537": "Absolute values need to be displayed as maths, not code.",
    "EDIT1538": "[meta.reqmts] UnaryTypeTrait and friends are not in code font in their definition",
    "EDIT1539": "[intro] contains subclauses that belong in [basic]",
    "EDIT1540": "[filesystems] Overfull hboxes in Filesystem subclause",
    "EDIT1541": "[filesystems] uses of \"respectively\" in wording is incorrect",
    "EDIT1542": "[dcl.init.list] Replace misuse of \\grammarterm with \\defn",
    "EDIT1543": "Possible CI check: bad use of \\grammarterm",
    "EDIT1544": "[basic.link, expr.add, cstdlib.syn] Small fixes regarding spacing before commas",
    "EDIT1545": "[any.modifiers] fix emplace return type for 'any'",
    "EDIT1546": "Fix misuses of \\grammarterm.",
    "EDIT1547": "Add mapping from removed section labels to new location of content in xrefs",
    "EDIT1548": "[containers] Rephrase deduction guide constraints",
    "EDIT1549": "[swappable.requirements] Mark up the swappable requirement in code font",
    "EDIT1550": "[dcl.init.list] Fix misuses of \\grammarterm.",
    "EDIT1551": "[input.output] Invalid use of injected-class-name of dependent base",
    "EDIT1552": "[stringbuf.virtuals] has \"Returns:\" inside Effects:",
    "EDIT1553": "[partial.sort] Remove 'It takes' from complexity specification.",
    "EDIT1554": "Move \\opt out of \\grammarterm",
    "EDIT1555": "Remove bad \\grammarterm for \"injected-class-name\"",
    "EDIT1556": "\"opt\" should not be italicised",
    "EDIT1557": "In Mac Preview, searching for \"func.wrap.func.con\" finds only the cross reference",
    "EDIT1558": "[stmt.ranged] Do not use \\grammarterm for begin-expr and end-expr.",
    "EDIT1559": "Fix some more inappropriate \\grammarterm uses.",
    "EDIT1560": "[library] Add a noun 'subclause' or 'annex' to references that are used as nouns",
    "EDIT1561": "Don't abuse \\xref",
    "EDIT1562": "index entries for library declarations should point at the declaration itself, not the start of the synopsis",
    "EDIT1563": "Rephrase \"possibly const value\" in terms of types",
    "EDIT1564": "Consistently use math mode for index notation and ellipses in INVOKE expressions",
    "EDIT1565": "[language.support] Reserve \\xref for references to the C standard.",
    "EDIT1566": "[numerics] Use absolute-value markers in math mode.",
    "EDIT1567": "N4659 Table 31 starts at a weird position",
    "EDIT1568": "[rand, atomics] Don't needlessly escape underscores.",
    "EDIT1569": "[intro.memory] What is a \"field\"?",
    "EDIT1570": "[intro.memory] Replace undefined 'field' with 'member' in note.",
    "EDIT1571": "figure out what's wrong with the \"Allocator requirements\" table and prevent it ever happening again",
    "EDIT1572": "Process: IS final release",
    "EDIT1573": "\"method\" as synonym for \"class member function\"",
    "EDIT1574": "[mem.poly.allocator.mem], [string.view.iterators] Replace 'method' wi\u2026",
    "EDIT1575": "[utility] Change 'nonzero' to more proper words",
    "EDIT1576": "Indentation style for classes and class templates",
    "EDIT1577": "[string.cons] Consolidate two functions into one description",
    "EDIT1578": "[alg.equal] Wrong wording (by copy/paste?)",
    "EDIT1579": "[any.bad_any_cast] Not bad_any_access",
    "EDIT1580": "[any.cons] Replace 'contained object' by 'contained value' in Kona motion edits",
    "EDIT1581": "[meta.unary.prop] Fix index entry for is_aggregate.",
    "EDIT1582": "[any.cons] Use 'contained value', not 'contained object'.",
    "EDIT1583": "[filesystems] Change '!predicate' phrasing to 'predicate is false'.",
    "EDIT1584": "Do not use \\tcode for non-syntax.",
    "EDIT1585": "Use 'subclause', not 'section'.",
    "EDIT1586": "[lib] Use nullptr, not 0, for null pointer values.",
    "EDIT1587": "\"well-defined\" vs. \"well defined\"",
    "EDIT1588": "[class.mfct.non-static], [class.this] Define and use cv member function.",
    "EDIT1589": "[tables] Do not show labels for 'concepttable' environment.",
    "EDIT1590": "[basic.scope.pdecl] Capitalize note.",
    "EDIT1591": "[expr.type.conv]/2: Priority of first \"if\", and binding of \"otherwise\"",
    "EDIT1592": "LWG 2260 and 'r'",
    "EDIT1593": "[support.runtime, list.ops] Move non-code punctuation out of \\tcode.",
    "EDIT1594": "[charconv] Elementary string conversions wording nits",
    "EDIT1595": "[except.handle] Add index entry for 'active handler'.",
    "EDIT1596": "[basic.start.main] Remove space before plural 's'.",
    "EDIT1597": "[expr]/12 optional conversion",
    "EDIT1598": "[expr.type.conv] Clarify if ... otherwise ladder.",
    "EDIT1599": "Spell 'well-defined' with a hyphen when it is an adjective.",
    "EDIT1600": "[string.streams], [file.streams] Use simple-template-id when naming b\u2026",
    "EDIT1601": "[dcl.attr] \"implementations are encouraged\" vs. \"should\"",
    "EDIT1602": "Remove \\tcode from 'const object'.",
    "EDIT1603": "No synopsis for <strstream>",
    "EDIT1604": "macros: Remove unused SectionDepthBase functionality.",
    "EDIT1605": "[re.def] Incorrect clause numbers for definitions",
    "EDIT1606": "Remove need to redefine \\definition.",
    "EDIT1607": "Replace 'encouraged' with 'should'.",
    "EDIT1608": "[temp.deduct.type] Use \\cv instead of \\grammarterm{cv-list}.",
    "EDIT1609": "Standard omission pertaining to the subscript operator",
    "EDIT1610": "Fix header synopses",
    "EDIT1611": "[intro.races] CWG 2297: Unclear specification of atomic operations",
    "EDIT1612": "[intro.races] Clarify 'synchronization operation'.",
    "EDIT1613": "[streambuf.virt.put] Fix logic in overflow() effects specification.",
    "EDIT1614": "[class.protected] Add missing period at end of sentence.",
    "EDIT1615": "[dcl.init] should this 'declarator' be the 'initializer'8",
    "EDIT1616": "[dcl.init] A declarator does not have an initializer.",
    "EDIT1617": "[dcl.init] It is the 'initializer' who specifies an initial value for\u2026",
    "EDIT1618": "\"well formed\" vs. \"well-formed\"",
    "EDIT1619": "Use 'well-formed' (with hyphen) consistently.",
    "EDIT1620": "fs.op.canonical still defined in terms of absolute(p, base)",
    "EDIT1621": "[expr.prim.lambda.capture] Question about the example in p9",
    "EDIT1622": "[dcl.attr.depend] Remove paragraph break before end of example.",
    "EDIT1623": "[lex.phases] Capitalize example.",
    "EDIT1624": "[class.union] inaccurate note in p2",
    "EDIT1625": "[class.union] Only standard-layout unions are pointer-interconvertible",
    "EDIT1626": "Change the return type of monotonic_buffer_resource's deleted assignment",
    "EDIT1627": "Bad example in [expr.const]p7",
    "EDIT1628": "[any.nonmembers] fix LWG2769 by merging with #1220",
    "EDIT1629": "[filesystem_error.members] what() function to use non-existant function native_string() ",
    "EDIT1630": "[fs.dir.entry.obs] directory_entry members to call non-existent functions",
    "EDIT1631": "[fs.filesystem.syn] only lists old absolute function",
    "EDIT1632": "[fs.op.canonical] uses non-existent absolute(p, base);",
    "EDIT1633": "[filesystem_error.members] doesn't have \"fs.\" prefix",
    "EDIT1634": "Building pdf is not working",
    "EDIT1635": "[lex.string] p5 examples involving non-trigraphs",
    "EDIT1636": "Fixed ref to effects of invalid pointer values.",
    "EDIT1637": "Support XeTeX.",
    "EDIT1638": "[facet.num.put.virtuals]/1 Bad grammar",
    "EDIT1639": "[cfenv.syn] some FE_ macros may not be defined",
    "EDIT1640": "For 'signal-safe', refer to [support.signal] (21.10.4), not [csignal.syn] (21.10.3).",
    "EDIT1641": "The term \"class name declaration\" used in [basic.def]/2 (2.5) is not defined in the Standard",
    "EDIT1642": "[over.call] wording makes little sense",
    "EDIT1643": "[unique.ptr]  Consider removing \"transfer ownership\" definition",
    "EDIT1644": "Spurious remove_all_extents<T> in is_destructible definition",
    "EDIT1645": "[dcl.array]/7 describes pointer arithmetic in a non-standard way and prematurely decays arrays",
    "EDIT1646": "[locale.moneypunct.virtuals] Footnote on moneypunct::do_curr_symbol could be more helpful",
    "EDIT1647": "[atomics.syn] missed edit for atomic_exchange signature in P558R1",
    "EDIT1648": "size of strings",
    "EDIT1649": "[memory.syn] Add reinterpret_pointer_cast to synopsis",
    "EDIT1650": "Wrong comment in [intro.execution]/12's example",
    "EDIT1651": "inconsistent invalidation rules for the pointers to container elements",
    "EDIT1652": "Why does [basic.scope.class]/2 must be NDR?",
    "EDIT1653": "Fix spelling mistake in 'if constexpr' wording",
    "EDIT1654": "[stringbuf.virtuals] balance parentheses in seekoff table",
    "EDIT1655": "[filesystem_error.members] Rename to [fs.filesystem_error.members]",
    "EDIT1656": "[allocator.requirements] Fix pointer_to expression",
    "EDIT1657": "[stringbuf.virtuals] Rephrase DR 453 resolution for seekoff",
    "EDIT1658": "Clarify a note on cmpxchg",
    "EDIT1659": "Globally replace unqualified uses of \"concept\"",
    "EDIT1660": "Redundant changes to [basic] and [basic.def.odr]",
    "EDIT1661": "Move reference to LIA-1 into a new section 'Bibliography'",
    "EDIT1662": "[util.smartptr.shared] should not duplicate non-member functions in class synopsis",
    "EDIT1663": "[variant.visit], [tuple.apply], [futures.task.members] add cross-refe\u2026",
    "EDIT1664": "intro.scope implies that C++ is a strict superset of C",
    "EDIT1665": "Replace \\term+\\indextext pairs with \\defn(x).",
    "EDIT1666": "[expr.mptr.oper] Add missing indentation in example code.",
    "EDIT1667": "[dcl.enum] Add index entry for 'fixed' underlying type.",
    "EDIT1668": "[re.traits] Use \\placeholdernc for a placeholder.",
    "EDIT1669": "[expr.mptr.oper] Index second definition of 'object expression'.",
    "EDIT1670": "Globally replace ambiguous use of \"constraints\"",
    "EDIT1671": "Avoid \"requirement\" as a grammar non-terminal",
    "EDIT1672": "Use \"trailing requires-clause\" where we mean it",
    "EDIT1673": "[iterator.synopsis, template.bitset] Add missing whitespace.",
    "EDIT1674": "[class.temporary]p6: \"should\" in note",
    "EDIT1675": "Editorial: difference between \"well defined\" and \"well-defined\"?",
    "EDIT1676": "Capitalize after \"Effects:\"/\"Returns:\"/\"Throws:\"/\"Requires:\".",
    "EDIT1677": "Merge small selection of editorial fixes since C++17 branched",
    "EDIT1678": "[Editorial] Clarify UTF-8 character literal definition",
    "EDIT1679": "[class.temporary] Remove note giving questionable implementation advice.",
    "EDIT1680": "[expr] Use 'possibly converted' for discarded-value expression.",
    "EDIT1681": "[class.derived] has confusing cross-reference for inheriting constructors",
    "EDIT1682": "Remove trailing whitespace.",
    "EDIT1683": "[over.call.object] Reference postfix-expression in call syntax correctly",
    "EDIT1684": "[meta.endian] Simplify wording, avoid \"shall\"",
    "EDIT1685": "[xrefdelta] one remaining \\CppXIV -> \\CppXVII",
    "EDIT1686": "[temp] concept-definition is missing a terminating semicolon",
    "EDIT1687": "[class.derived] Add cross-reference to [class.inhctor.init]",
    "EDIT1688": "[std] Allow linebreaks before \\ref in select places",
    "EDIT1689": "[temp] Add missing semicolon in grammar for concept-definition",
    "EDIT1690": "[everywhere] Rework how we mark up inline references.",
    "EDIT1691": "[over.over]/p4 what \"set of selected functions\"?",
    "EDIT1692": "[dcl.decl, temp.deduct.type] Fix inappropriate uses of \\grammarterm.",
    "EDIT1693": "[expr.const] Move p7 next to p3.",
    "EDIT1694": "Remove accidentally committed tmp.tex.",
    "EDIT1695": "[defns.well.formed] remove full stop",
    "EDIT1696": "[util.smartptr.shared.create]: Broken declaration by \"\\placeholder{}\" macro",
    "EDIT1697": "[memory.syn] does not have declarations for the new make/allocate_shared overloads",
    "EDIT1698": "[mem.res.private] Questionable note in p7",
    "EDIT1699": "[temp.constr.order]/p2 wrong definition for subsume",
    "EDIT1700": "[diff.cpp14.library] missing Annex C note for new C++17 headers",
    "EDIT1701": "[meta.endian] Unclear wording regarding size of scalar types",
    "EDIT1702": "[intro.defs] Should the definition of 'signature' explicitly exclude default template arguments?",
    "EDIT1703": "[diff.cpp14.library] Add Annex C entry for new headers in C++17",
    "EDIT1704": "[array.size] shows full template header",
    "EDIT1705": "Consistently place footnote mark after sentence full stop, not before it.",
    "EDIT1706": "Incorrect comment in [intro.execution] p. 12",
    "EDIT1707": "[futures.async] remove parens from DECAY_COPY()",
    "EDIT1708": "[intro.races] Add index entries for notions of coherence.",
    "EDIT1709": "Minor styles inconsistency in single-line comments",
    "EDIT1710": "[re.grammar] Fix typeface of 'match_type_flag'",
    "EDIT1711": "[rand.eng.lcong] Fix the modulus m",
    "EDIT1712": "Index additional member typedefs.",
    "EDIT1713": "[C++17 DIS comment 001] remove [intro.refs] bullet 1.4",
    "EDIT1714": "[C++17 DIS comment 002] update [intro.defs] to use text that can be substituted for the use of the term",
    "EDIT1715": "[C++17 DIS comment 003] update [intro.defs] to use \"Note to entry\"",
    "EDIT1716": "[C++17 DIS comment 004] Fix page break within Table 7",
    "EDIT1717": "[C++17 DIS comment 005] Update [over.match.funcs] to not contain a number of contexts (which is now incorrect)",
    "EDIT1718": "[C++17 DIS comment 006] [temp.over.link]p8: change comments to lowercase",
    "EDIT1719": "[C++17 DIS comment 007] [support.start.term]p13 restore xref to C 7.22.4.5",
    "EDIT1720": "[C++17 DIS comment 008] [new.delete.single]p16 remove \"Replaceable:\" from note",
    "EDIT1721": "[C++17 DIS comment 010] [any_cons]p2, `in_place<T>` should say `in_place_type<T>`",
    "EDIT1722": "[C++17 DIS comment 011] [any.nonmembers]p4-6 replace \"ValueType\" with \"T\"",
    "EDIT1723": "[C++17 DIS comment 009] Avoid splitting footnote#218 across pages",
    "EDIT1724": "[C++17 DIS comment 012] [algorithms.parallel.user]p1 Repeated period at end of paragraph..",
    "EDIT1725": "[C++17 DIS comment 013] [alg.equal]p3 \"For the overloads with no ExecutionPolicy\" repeated twice",
    "EDIT1726": "[C++17 DIS comment 014] [alg.reverse] reverse has two Requires: clauses",
    "EDIT1727": "[C++17 DIS comment 015] Move LIA-1 from Normative References to Bibliography",
    "EDIT1728": "[C++17 DIS comment 016] Add Foreword",
    "EDIT1729": "[C++17 DIS comment 017] Convert to UK English spelling",
    "EDIT1730": "[C++17 DIS comment 018] Hanging paragraphs",
    "EDIT1731": "[C++17 DIS comment 019] Document has lists of tables and figures, xrefs, and indices",
    "EDIT1732": "[C++17 DIS comment 020] Use of \"this International Standard\"",
    "EDIT1733": "[C++17 DIS comment 021] Review all 'must's and fix as appropriate",
    "EDIT1734": "[C++17 DIS comment 022] Change from letter to A4",
    "EDIT1735": "[C++17 DIS comment 023] [support.runtime] Remove index entry for __bool_true_false_are_defined",
    "EDIT1736": "[alg.reverse] remove duplicated Requires: element",
    "EDIT1737": "[travis] Add newly required package",
    "EDIT1738": "[intro.defs, definitions, fs.definitions] change notes in Terms and Definitions to say \"Note X to entry\"",
    "EDIT1739": "[class.copy.assign] Remove extraneous space before the first word of para 1",
    "EDIT1740": "[class.virtual] Incorrect comments in [class.virtual] p.9",
    "EDIT1741": "Reword [over.ics.rank]/3.2.3",
    "EDIT1742": "Wrong example of unspecified behavior in [intro.abstract]/3",
    "EDIT1743": "[intro.refs] Remove redundant reference to C11 Technical Corrigendum 1.",
    "EDIT1744": "[over.match.funcs] Remove the number of overload resolution contexts",
    "EDIT1745": "[temp.over.link] Change leading letter in comments in example to lowercase.",
    "EDIT1746": "Add Foreword.",
    "EDIT1747": "Convert \"must\"s in normative wording that do not indicate logical",
    "EDIT1748": "Replace \"this International Standard\" with \"this document\" when",
    "EDIT1749": "[expr.prim.lambda] 8.1.5/4 Add capture to the j variant to make the example to be compiled",
    "EDIT1750": "Can we flatten the list in [dcl.init.ref]p5",
    "EDIT1751": "Add Foreword.",
    "EDIT1752": "Improve automatic widow/club control",
    "EDIT1753": "[mismatch] and [alg.equal] have slightly off horizontal whitespace in itemdecls",
    "EDIT1754": "Decide how to indent class template definitions",
    "EDIT1755": "[thread.condition.condvarany]/9 is incorrect",
    "EDIT1756": "support LuaLaTeX",
    "EDIT1757": "[meta.trans.other] Consider referencing p2 from the aligned_storage and aligned_union rows in Table 50",
    "EDIT1758": "[unique.ptr, util.smartptr.shared] Remove redundant repetitions of declarations that already appear in the synopsis",
    "EDIT1759": "[containers] Remove repeated statement of relational operator declarations",
    "EDIT1760": "[dcl.fct.def.general] Typeset placeholder consistently.",
    "EDIT1761": "Remove \\xspace everywhere except for \\opt",
    "EDIT1762": "[mem.res.private] Remove misleading 'typical' in note.",
    "EDIT1763": "[thread.condition.condvarany] Remove note made incorrect by LWG 2135.",
    "EDIT1764": "[styles] Improve automatic page breaking",
    "EDIT1765": "[fs.filesystem.syn] fix ordering of exists and equivalent",
    "EDIT1766": "[intro.execution] Fix indentation of example code",
    "EDIT1767": "[class.virtual] Correct function names in example comments.",
    "EDIT1768": "[alg.count,mismatch,alg.equal] Fix indentation of declaration.",
    "EDIT1769": "The deduction guides for unordered_map and unordered_multimap use an exposition-only helper that does not exist",
    "EDIT1770": "[Editorial][util.smartptr.shared.cmp] add missing typename for operaotr<",
    "EDIT1771": "Hanging paragraphs vs. warm-up introduction",
    "EDIT1772": "[unord.map.overview], [unord.multimap.overview] Use iter_val_t inst\u2026",
    "EDIT1773": "[utilities, depr] Replace \"member typedef\" with \"nested type\" ",
    "EDIT1774": "[macros] Prevent unfortunate page break",
    "EDIT1775": "[lib] Harmonize introductory comments in synopses",
    "EDIT1776": "[lib] Add hyphen to 'well-defined'",
    "EDIT1777": "[csetjmp.syn] Restrictions cannot be mandatory",
    "EDIT1778": "[csetjmp.syn] Imprecise description of UB",
    "EDIT1779": "[locale.moneypunct.virtuals] Add reference to ISO 4217.",
    "EDIT1780": "[travis] Make overfull hboxes a presubmit error.",
    "EDIT1781": "C++17",
    "EDIT1784": "[implimits] Add cross-references to the definition of the respective \u2026",
    "EDIT1785": "[expr.prim.lambda.capture]p11 description of capture-by-reference of references is out of place",
    "EDIT1786": "[expr.prim.lambda.capture] Move discusssion of capture-by-reference o\u2026",
    "EDIT1787": "[temp] p1 what is a family of classes?  and can they claim dependents? ;) ",
    "EDIT1788": "[bitmask.types] Potential undefined behavior in operator~",
    "EDIT1789": "Use 'trailing requires-clause'",
    "EDIT1790": "[array.size] Remove full template declaration.",
    "EDIT1791": "[array] Dissolve single-item subclauses.",
    "EDIT1792": "[basic.def.odr] Intervening declarative region should be refered to as such",
    "EDIT1793": "I do not think [fs.req.namespaces] means what it thinks it means",
    "EDIT1794": "[implimits] Unclear text",
    "EDIT1795": "[any.class] Revert dot to comma typo from bdff8687c",
    "EDIT1796": "[tuple.cnstr] \\tcode one instance of \"tuple\".",
    "EDIT1797": "[basic.link] members of unnamed namespace have internal linkage",
    "EDIT1798": "[intro], [basic] Rearrange subclauses",
    "EDIT1799": "[expr] Add subclauses.",
    "EDIT1800": "[intro.execution] Clarify full-expression in example.",
    "EDIT1801": "[algorithms.general] & [algorithm.syn] name \"mutating sequence operat\u2026",
    "EDIT1802": "[conv.rank] Move from [conv] to [basic.types]",
    "EDIT1803": "[diff] Give numbers to changes.",
    "EDIT1804": "[expr], [over] Add cross-references for usual arithmetic conversions.",
    "EDIT1805": "Fix some more subscripts for T, also fix cv in a few places.",
    "EDIT1806": "[unord.req], [fs.path.io] Fix \"Effects: Equivalent to\" styles",
    "EDIT1807": "rationalize library header name indexing",
    "EDIT1808": "[temp.constr.order] In definition of 'subsumes', remove",
    "EDIT1809": "[basic.link] Entities declared in an unnamed namespace",
    "EDIT1810": "[macros] Introduce \\indexhdr and apply it for all headers.",
    "EDIT1811": "[over.over] Consistently use 'set of overloaded functions'",
    "EDIT1812": "[unique.ptr] Remove definition of 'transfers ownership'.",
    "EDIT1813": "[variant] Move 'Otherwise' to start of following bullet.",
    "EDIT1814": "[util.sharedptr] Dissolve subclause and integrate contents into parent.",
    "EDIT1815": "[lib] Harmonize punctuation of 'Effects: Equivalent to'",
    "EDIT1816": "[temp.arg.explicit] Remove note after merge of P0846R0",
    "EDIT1817": "[basic.def] 'class name declaration' is undefined.",
    "EDIT1818": "[expr.compound] Expression operators do not 'return' results.",
    "EDIT1819": "Use \\tcode for return/if/switch statement.",
    "EDIT1820": "[expr.delete] destructor invoked for null pointer values?",
    "EDIT1821": "fix bnf / bnftab / bnfkeywordtab mess",
    "EDIT1822": "[complex.value.ops] and [complex.transcendentals] contain failed attempts to xref the C standard",
    "EDIT1823": "[strings.general] Use plural to take string_view into account",
    "EDIT1824": "[temp.arg.explicit] Remove note obsoleted by P0846R0",
    "EDIT1825": "[structure.summary] Remove obsolete paragraph about Note(s): and Example(s): elements that we no longer provide",
    "EDIT1826": "[dcl.enum] Duplicate sentences about redeclarations",
    "EDIT1827": "[dcl.enum] Merge duplicate normative paragraphs on redeclarations.",
    "EDIT1828": "[complex.numbers] Use \\xref for references to the C standard.",
    "EDIT1829": "[swappable.requirements] Merge example's comment to one line",
    "EDIT1830": "[layout] Feet at bottom",
    "EDIT1831": "Add Arch Linux getting started instructions",
    "EDIT1832": "[reverse.iterators] Dissolve single-item subclauses.",
    "EDIT1833": "[atomics.types.operations]p22 has spurious paragraph break",
    "EDIT1834": "[atomics.types.operations] Remove spurious paragraph break.",
    "EDIT1835": "Create a new index for library headers",
    "EDIT1836": "Merge [depr.ispod] with [depr.meta.types]?",
    "EDIT1837": "[diff] Introduce numbered paragraphs",
    "EDIT1838": "Convert blah\\opt to \\opt{blah}",
    "EDIT1839": "Typo, missing \"be\"",
    "EDIT1840": "[mem.res] Fix whitespace around ptr-declarators and template arguments",
    "EDIT1841": "Does [basic.life] have the wrong cross-reference?",
    "EDIT1842": "[basic.life],[mem.res.private],[mem.res.pool.mem],[mem.res.monotonic.buffer] fix cross-references",
    "EDIT1843": "[func.require] Clarify which assignment operators",
    "EDIT1844": "[vector.bool] Use injected-class-name in synopsis",
    "EDIT1845": "Type of an enumerator inside the declaration of its enumeration - a conflict",
    "EDIT1846": "[tuple.tuple] Remove extra space before class scope",
    "EDIT1847": "[lex.ccon] Align char16_t phrasing to UTF-8 one",
    "EDIT1848": "[fs.op.funcs] Separate effects from returns.",
    "EDIT1849": "[fs.op.funcs] has 39 immediately-nested subclauses",
    "EDIT1850": "[allocator.adaptor.syn] Fix index entries for scoped_allocator_adaptor member typedefs.",
    "EDIT1851": "Remove \\tilde in favour of \\~.",
    "EDIT1852": "Consider removing [facets.examples]",
    "EDIT1853": "CI failing due to \"disk quota exceeded\"",
    "EDIT1854": "missing xrefdelta updates for recent reorganization work",
    "EDIT1855": "[basic.compound], [conv.ptr] Improve index for 'null pointer value'",
    "EDIT1856": "[class.friend], [expr.ref], [expr.mptr.oper] Apply \\grammarterm markings",
    "EDIT1857": "[xrefdelta] Add deprecation of [util.smartptr.shared.atomic]",
    "EDIT1858": "[macros] Index all occurrences of \\grammarterm",
    "EDIT1859": "[intro.scope] C++ is not a strict superset of C",
    "EDIT1860": "Possibly misleading sentence in [temp.spec]/5",
    "EDIT1861": "[facet.num.put.virtuals] Fix definition and use of 'loc'",
    "EDIT1862": "[charconv.to.chars, charconv.from.chars] Replace 'minus sign' with '-'",
    "EDIT1863": "[filesystems] 'dot' and 'dot-dot' are not \\grammarterms",
    "EDIT1864": "[fs.path.decompose] 'root-path' is not a grammar non-terminal     ",
    "EDIT1865": "[except] Fix index entry for 'exception object'",
    "EDIT1866": "[over.best.ics] Adjust example for [over.match.list] case",
    "EDIT1867": "[language.support, utilities] Condense description of exception classes",
    "EDIT1868": "Use 'anonymous union object' where appropriate.",
    "EDIT1869": "[utilities] Remove \\placeholder when naming a specific type",
    "EDIT1870": "basic_string_view begins_with has an incorrect reference implementation",
    "EDIT1871": "Fix misuses of \\grammarterm for other purposes",
    "EDIT1872": "[class] Replace \\term with \\defn or \\defnx",
    "EDIT1873": "[cpp] Replace \\term with \\defn",
    "EDIT1874": "Indexing of examples",
    "EDIT1875": "[string.cons] Editorial change for caption on table 56",
    "EDIT1876": "[string.cons] Replace postcondition tables by ordinary Postcondition elements",
    "EDIT1877": "[library] Replace \\term with \\defnx",
    "EDIT1878": "[diff.mods.to.headers] De-index non-existent headers",
    "EDIT1879": "[basic.string] State class invariants about [data(), data() + size()] in the introduction.",
    "EDIT1880": "[conv] Replace \\term with \\defn or \\defnx",
    "EDIT1881": "[over] Replace \\term with \\defnx to add index entries",
    "EDIT1882": "Clean up some index entries related to functions",
    "EDIT1883": "[string.view.template] Add missing stable reference",
    "EDIT1884": "[dcl.struct.bind] Clarify that structured bindings are entities (as contrast to names)",
    "EDIT1885": "[defns.undefined] Constant expressions can have \"library UB\"",
    "EDIT1886": "[string.view.template] Add reference to [string.view.find] \u2026",
    "EDIT1887": "[temp.dep.type] Clarify that a simple-template-id denotes a type",
    "EDIT1888": "[refwrap] Fix wrong use of \"shall\"",
    "EDIT1889": "[thread.thread.id] Fix wrong uses of \"shall\"",
    "EDIT1890": "[atomics.types.memop] Add missing \\pnum",
    "EDIT1891": "Use 'one of' formulation for binary-digit",
    "EDIT1892": "[basic.scope.class,basic.lookup.unqual] Use the term \"default member initializer\"",
    "EDIT1893": "[re.regex.construct] Add default argument to itemdecl",
    "EDIT1894": "[expr.const] Fix no longer correct comment",
    "EDIT1895": "[variant.visit] qualify std::forward for consistency",
    "EDIT1896": "[dcl.enum] use indefinite article before \"fixed underlying type\"",
    "EDIT1897": "[basic.lookup] Clarify name lookup consistency",
    "EDIT1898": "[namespace.udir] Ambiguous lookup results are covered in [basic.lookup]",
    "EDIT1899": "[everywhere] Remove paragraph breaks in the middle of sentences",
    "EDIT1900": "[temp.local]/3 Wrong example?",
    "EDIT1901": "[class.temporary, temp.inst, temp.dep, temp.res] Capitalize some sentences.",
    "EDIT1902": "Replace \\^ with \\caret",
    "EDIT1903": "[fs.rec.dir.itr.members] Grammar fixes.",
    "EDIT1904": "Update the description for array.data",
    "EDIT1905": "Fix references to container requirements tables.",
    "EDIT1906": "Problems with [expr.ass]p3 with initializer lists and ambiguity of term \"expression\"",
    "EDIT1907": "Harmonize wording about reallocation invalidating pointers in `vector`",
    "EDIT1908": "Fix decay index redirects.",
    "EDIT1909": "Atomic cmpxchg note clarification",
    "EDIT1910": "[expr.comma, class.base.init] What is \"temporary expression\"?",
    "EDIT1911": "[over.match.ctor] Initialization by \"()\" neither is copy-initialization nor direct-initialization. ",
    "EDIT1912": "Not a real PR, do not merge",
    "EDIT1913": "[contents,fs.req.namespace] Qualify only namespace-scope names",
    "EDIT1914": "[expr.typeid, time.syn, class.access.base] Replace \\term with \\placeholder where appropriate.",
    "EDIT1915": "'floating type' is not a defined term in C++",
    "EDIT1916": "[intro.defs] Default template arguments are not part of the signature",
    "EDIT1917": "Grammar index broken by #1858",
    "EDIT1918": "Remove uses of 'concept' with ordinary English meaning.",
    "EDIT1919": "[conv,class] Clause reorganization in core sections",
    "EDIT1920": "[utility] Make content in hanging paragraph non-normative.",
    "EDIT1921": "[rand.req.eng] Use \\text, not \\mbox, in math mode",
    "EDIT1922": "[depr.str.strstreams] Add synopsis for <strstream> header",
    "EDIT1923": "[dcl.dcl] Change example for static_assert",
    "EDIT1924": "[insert.iterators] Dissolve single-item subclauses.",
    "EDIT1925": "[dcl.fct.def.delete] questionable example in p3",
    "EDIT1926": "[over.match.oper] p6.2 Add a note for the synthesized <=> candidate",
    "EDIT1927": "[over.match.oper] Add a note for conversions on synthesized candidates.",
    "EDIT1928": "[string.classes] Remove class name repeated in subheadings",
    "EDIT1929": "[fs.path.nonmember] Grammar",
    "EDIT1930": "[intro.abstract] Change example for unspecified behavior.",
    "EDIT1931": "[stmt.while] Generalize the equivalence for a declaration as the condition.",
    "EDIT1932": "[locale] Remove class name repeated in subheadings",
    "EDIT1933": "[containers] Remove class name repeated in subheadings",
    "EDIT1934": "[expr.dynamic.cast] cv-qualification cleanups",
    "EDIT1935": "[unord] \"Specialized algorithms\" vs. \"Swap\"",
    "EDIT1936": "[expr.dynamic.cast] Remove redundant statements on casting away constness",
    "EDIT1937": "[lib] Harmonize references to standard library requirements.",
    "EDIT1938": "[expr.rel] \"compares greater\" term is needlessly confusing",
    "EDIT1939": "[std] Improve index by adding cross-references to defined terms",
    "EDIT1940": "[access] Remove inappropriate uses of \\term",
    "EDIT1941": "[dcl.dcl] Replace \\term with  \\defn or \\defnx",
    "EDIT1942": "update [dcl.spec.auto]p9 to match the form of wording used by cwg2285",
    "EDIT1943": "[fs.class.filesystem_error] Rephrase para 1 to avoid \"class defines t\u2026",
    "EDIT1944": "[class.temporary] Repair example",
    "EDIT1945": "10.1.7.1 [dcl.type.cv] has a broken PDF bookmark name",
    "EDIT1946": "[dcl.type.cv] Do not use \\grammarterm in heading",
    "EDIT1947": "[dcl.spec.auto] Use of undeduced placeholder types",
    "EDIT1948": "[std] Review cross-references to [expr.prim]",
    "EDIT1949": "CWG2345 Jumping across initializers in init-statements and conditions",
    "EDIT1950": "[dcl.fct.def.delete] Adjust 'onlydouble' example.",
    "EDIT1951": "Index entries for \"implementation-dependent\"",
    "EDIT1952": "Imprecise wording regarding pointers to members?",
    "EDIT1953": "[error.reporting] placement and tag are questionable",
    "EDIT1954": "[error.reporting] Change \\rSec3 to \\rSec2",
    "EDIT1955": "[ios.base] has too many variables called \"index\"",
    "EDIT1956": "add example if/when the [[likely]] / [[unlikely]] paper is merged",
    "EDIT1957": "Remove [facets.examples].",
    "EDIT1958": "rename [time.syn] to [chrono.syn]",
    "EDIT1959": "[associative.reqmts] Turn emphasis into a note.",
    "EDIT1960": "[time.syn] Rename to [chrono.syn], consistent with header name",
    "EDIT1961": "[xrefdelta] Use \\deprxref",
    "EDIT1962": "Typos in P0753R2",
    "EDIT1963": "[expr.reinterpret.cast] Define reinterpret_cast from nullptr_t in terms of reinterpret_cast<void*> rather than c-style cast",
    "EDIT1964": "[mem.res.pool.overview] add proper definitions of terms",
    "EDIT1965": "Use \\placeholder for alias templates in container deduction guides",
    "EDIT1966": "Clarifying \"the value of the expression\" in simple assignment expression",
    "EDIT1967": "Index all mentions of 'implementation-dependent'",
    "EDIT1968": "[conv.fctptr,special] Pointers to members designate their target",
    "EDIT1969": "[ios.base] Disambiguate parameters from static data members",
    "EDIT1970": "[support.types.byteops] byte spec has wrong sequence of Remarks/Effects in C++17 std",
    "EDIT1971": "[intro.refs] add normative reference on ISO 8601",
    "EDIT1972": "[intro.refs] Add normative reference to ISO 8601",
    "EDIT1973": "[support.types.byteops] Move 'Remarks' to after 'Effects'",
    "EDIT1974": "improve `std::chrono::month` `operator+`'s description of arithmetic mod 12",
    "EDIT1975": "[namespace.udecl]p16 references nonexistent \"implicit this parameter\"",
    "EDIT1976": "[namespace.udecl] Demote normative duplication to notes",
    "EDIT1977": "[expr.rel] Clarify auxiliary partial ordering",
    "EDIT1978": "[containers] Removed redundant specifications of non-member swap",
    "EDIT1979": "[index] Do not index examples",
    "EDIT1980": "[temp.spec] Fix cross-reference to one-definition rule.",
    "EDIT1981": "[temp.local] Fix example not to name the constructor.",
    "EDIT1982": "[lib] \\xref may refer to standards other than C",
    "EDIT1983": "[implimits] Clarify meaning of implementation limits",
    "EDIT1984": "[re.regex] Avoid duplicate list of constants",
    "EDIT1985": "[time.duration.nonmember] Replace type designator CR with its definition",
    "EDIT1986": "[lib] Avoid 'shall' and 'should' in footnotes.",
    "EDIT1987": "[over.best.ics] p6, [over.ics.ref] p1 Fix case",
    "EDIT1988": "[dcl.type.cv] P4 doesn't sufficiently define \"modify\"",
    "EDIT1989": "Update container advice",
    "EDIT1990": "[utility.syn]p2 should be moved to [charconv.syn]",
    "EDIT1991": "Rename [cmp.syn] to [compare.syn]",
    "EDIT1992": "[utilities] Move chars_format bitmask statement to [charconv.syn]",
    "EDIT1993": "[cmp.syn] Rename to [compare.syn] to match the header name",
    "EDIT1994": "[any.class] Rephrase small-object optimization",
    "EDIT1995": "[conv,expr] Use \\cv{} where appropriate",
    "EDIT1996": "[basic.def.odr] Adds note that x may be part of a qualified id",
    "EDIT1997": "consider whether [cinttypes.syn] is in the right place",
    "EDIT1998": "P0969R0 editorial fix",
    "EDIT1999": "[time.cal.month.nonmembers,time.cal.wd.nonmembers] Do not digress to \u2026",
    "EDIT2000": "th should be \\textrm'ed",
    "EDIT2001": "uses of \"parameter pack\" should specify \"template\" or \"function\"",
    "EDIT2002": "[ostream.manip] fix \"basic_osyncbuf\" typo",
    "EDIT2003": "More places to use i^\\text{th} for i-th",
    "EDIT2004": "[ostream.manip] fix \"basic_osyncbuf\" typo",
    "EDIT2005": "[ostream.manip,time] Replace \"can not\" with \"cannot\"",
    "EDIT2006": "[span.cons] Fix indentation of remarks.",
    "EDIT2007": "[span.elem] Fix misplaced colon",
    "EDIT2008": "[stmt.while] no rewrite rule for non-variable condition case",
    "EDIT2009": "Travis CI: Upgrade to newer TeX Live distribution.",
    "EDIT2010": "[temp.concept]: Use note; no syntax for explicit specialization, etc.",
    "EDIT2011": "empty xrefdelta.gls",
    "EDIT2012": "[dcl.init.aggr] Does p9 apply to function-style casts?",
    "EDIT2013": "[grammar index] Fix warnings; prefer listing bold page locators.",
    "EDIT2014": "unify capitalization of node_handle and INSERT_RETURN_TYPE",
    "EDIT2015": "[xrefdelta] Fixes for reverse_iterator cleanup",
    "EDIT2016": "[stmt.while] Simplify rewrite rule.",
    "EDIT2017": "[time.syn] groups the new <chrono> literal operators incorrectly",
    "EDIT2018": "[time.syn] Add comments pointing to specification of literal operators",
    "EDIT2019": "[dcl.array] Clarify that an array bound is deduced in an explicit typ\u2026",
    "EDIT2020": "Clarify which kind of parameter pack is intended.",
    "EDIT2021": "[move.iterators] Dissolve single-item subclauses.",
    "EDIT2022": "[macros, lex, over] Dissolve bnfkeytab environments. Use a fixed-width (\\fw{...}) code field instead.",
    "EDIT2023": "[numarray] Wildly inconsistent formatting for valarray helpers",
    "EDIT2024": "[template.slice.array] Harmonize presentation with neighboring parall\u2026",
    "EDIT2025": "[dcl.type.cv,expr.ass] Clarify the meaning of \"modify\" for an object.",
    "EDIT2026": "Word-for-word repetition in [views.general] and [span.overview]",
    "EDIT2027": "Use \\commentellip macro for omitted program text.",
    "EDIT2028": "[time.syn][time.zone] Various editorial fixes",
    "EDIT2029": "library wording uses meaningless term \"is convertible to\"",
    "EDIT2030": "[basic.def.odr] What does \"non-trivial functions\" mean?",
    "EDIT2031": "[enumerated.types,bitmask.types] Use \\vdots and \\ldots instead of ...\u2026",
    "EDIT2032": "Mixed use of \\ldots and \\dotsc",
    "EDIT2033": "[rand] Use \\dotsc, not \\ldots for comma-separated lists",
    "EDIT2034": "[class.spaceship] Use math mode for the entire formula,",
    "EDIT2035": "[cpp, lex, over] Make bnf indentation in source match presentation.",
    "EDIT2036": "[pairs.pair]/25 operator= Effects clause uses wrong type names U and V",
    "EDIT2037": "[pairs.pair] Missed rename from U,V to U1,U2.",
    "EDIT2038": "The Note in [over.oper]/1 requires a change",
    "EDIT2039": "[template.gslice.array.overview] Join two single-sentence paragraphs.",
    "EDIT2040": "[over.oper] Remove incorrect and redundant sentence in a note.",
    "EDIT2041": "[temp.arg.explicit] Misleading note about explicit template arguments on constructors",
    "EDIT2042": "The example in [over.sub]p1 is incorrect",
    "EDIT2043": "[temp.arg.explicit,temp.mem] Clarify note about explicit template arg\u2026",
    "EDIT2044": "[basic.lval]/4 (Note): add non-lvalue array subscripting expression to xvalue examples",
    "EDIT2045": "[basic.lval] Add array subscripting to note enumerating xvalues.",
    "EDIT2046": "[over.match] Why \"glvalue or class prvalue\"?",
    "EDIT2047": "[over.match,over.match.ref] Drop obsolete mention of class prvalues.",
    "EDIT2048": "[dcl.array]: delete note about non-modifiability of arrays",
    "EDIT2049": "[dcl.array]/8 does not take into account array xvalues",
    "EDIT2050": "[dcl.array,expr.sub] Consolidate notes on symmetry of array subscript\u2026",
    "EDIT2051": "[expr.ref]/2 ",
    "EDIT2052": "Order library comparisons canonically",
    "EDIT2053": "[over.match.copy]: \"return lvalues or xvalues\" makes me uncomfortable",
    "EDIT2054": "[over.match.copy] Clarify candidate function selection for references.",
    "EDIT2055": "[basic.scope.pdecl] Change \"type-id\" to \"defining-type-id\"",
    "EDIT2056": "[algorithms.parallel.defns] Fix cross-reference to [algorithms.requirements]",
    "EDIT2057": "[atomics.types.operations] misuses \"underlying type\"",
    "EDIT2058": "[class.dtor] Typo.",
    "EDIT2059": "[span.overview] Fix typo",
    "EDIT2060": "Delete redundant and wrong example",
    "EDIT2061": "[atomics.types.operations] Avoid inappropriate use of 'underlying type'",
    "EDIT2062": "[views.general] Remove redundant introduction for span.",
    "EDIT2063": "Fixed example about [[likely]] attribute",
    "EDIT2064": "Follow \"semantic line breaks\" in the LaTeX sources",
    "EDIT2065": "Improve indexing for \"trivial class\" et al",
    "EDIT2066": "[class] Split paragraph defining standard-layout class",
    "EDIT2067": "Adding index cross-references for definitions where index entry is for a different term",
    "EDIT2068": "[expr.new] p18 Weird index entries for initialization in new-expression",
    "EDIT2069": "Consider consistently omitting \"expression\" in \"{l,r,x,pr,gl}value expression\"",
    "EDIT2070": "[rand] Use itemize envs instead of enumeratea",
    "EDIT2071": "Unify typesetting of ordinals.",
    "EDIT2072": "Overuse and misuse of \\techterm in [rand]",
    "EDIT2073": "Improves the spacing around bit operators.",
    "EDIT2074": "Misplaced index entries on [class] p6",
    "EDIT2075": "Improved typesetting of probability functions.",
    "EDIT2076": "Evaluate uses of `\\textit` in text",
    "EDIT2077": "[dcl.attr.likelihood] Fix error in example",
    "EDIT2078": "[istreambuf.iterator.proxy] correct title and remove default template\u2026",
    "EDIT2079": "[conv.lval] Move a misplaced note",
    "EDIT2080": "[macros,class] Define \\defnc and use it experimentally",
    "EDIT2081": "[expr.new] Remove misplaced index entries",
    "EDIT2082": "Probably wrong complexity of std::includes",
    "EDIT2083": "[output.iterators] Strike useless sentence from note",
    "EDIT2084": "[class] Remove misplaced index entries",
    "EDIT2085": "Drop redundant 'expression'",
    "EDIT2086": "[dcl.init,over.match.ctor] Clarify copy-initialization for empty argu\u2026",
    "EDIT2087": "Wrong specification of `basic_string_view::starts_with(basic_string_view)`",
    "EDIT2088": "[intro.abstract] Move \\indextext under \\pnum",
    "EDIT2089": "Fix a typo in the note for `std::less`.",
    "EDIT2090": "[intro.refs]/1 Plurality correction",
    "EDIT2091": "[over.match.viable] Fix cross-reference to satisfaction of constraints",
    "EDIT2092": "[smartptr] Remove class name repeated in subheadings",
    "EDIT2093": "[syserr] Remove class name repeated in subheadings",
    "EDIT2094": "Harmonize \"lambda expression\" towards \"lambda-expression\" (grammar term)",
    "EDIT2095": "[basic.fundamental] is missing a definition of \"fundamental type\"",
    "EDIT2096": "[optional.syn] is the wrong place to state requirements on std::optional",
    "EDIT2097": "[lib] Make use of \"introduce data races\" consistent",
    "EDIT2098": "[fs.path.append] Fix examples to show correct results for Windows",
    "EDIT2099": "[container.list/forward_list] fix missing 'to' in 'referred [to] by'",
    "EDIT2100": "[(forward)list.modifiers] fix missing 'to' in 'referred [to] by'",
    "EDIT2101": "we say ISO 10646 in some places where we mean ISO/IEC 10646",
    "EDIT2102": "[depr.locale.stdcvt.req] D.18.2 normative references for UCS-2 and UCS-4 ",
    "EDIT2103": "[time.zone.db.remote] replace \"this section\" with \"this subclause\"",
    "EDIT2104": "[atomics.types.operations]p20's note makes incorrect assumptions about atomic representation",
    "EDIT2105": "[basic.types] p4: definition of \"value representation\" unnecessarily vague",
    "EDIT2106": "[atomics.types.operations] ISO frowns on \"may\" and \"may not\" in notes",
    "EDIT2107": "Add cross-references to lists of delayed-parsed region",
    "EDIT2108": "contracts: rework change to basic.def.odr",
    "EDIT2109": "[lex.charset] ISO/IEC 10646 does not define \"character short name\"",
    "EDIT2110": "Harmonize index entries for list items",
    "EDIT2111": "[dcl.mptr] Add index entry for pointer to member clause",
    "EDIT2112": "[span.overview] fix reverse_iterator for span",
    "EDIT2113": "[2018-06 CWG Motion 1] P1113R0 CWG \"ready\" Issues for the June, 2018 (Rapperswil) meeting",
    "EDIT2114": "[2018-06 CWG Motion 2] P1114R0 CWG \"tentatively ready\" Issues for the June, 2018 (Rapperswil) meeting",
    "EDIT2115": "[2018-06 CWG Motion 3] P0806R2 Deprecate implicit capture of this via [=]",
    "EDIT2116": "[2018-06 CWG Motion 4] P1042R1 __VA_OPT__ wording clarifications",
    "EDIT2117": "[2018-06 CWG Motion 5] P0929R2 Checking for abstract class types",
    "EDIT2118": "[2018-06 CWG Motion 6] P0732R2 Class types in non-type template parameters",
    "EDIT2119": "<deleted>",
    "EDIT2120": "[2018-06 CWG Motion 8] P1025R1 Update the reference to the Unicode standard",
    "EDIT2121": "[2018-06 CWG Motion 9] P0528R3 The curious case of padding bits, featuring atomic compare-and-exchange",
    "EDIT2122": "[2018-06 CWG Motion 10] P0722R3 Efficient sized delete for variable sized classes",
    "EDIT2123": "[2018-06 CWG Motion 11] P1064R0 Allowing virtual function calls in constant expressions",
    "EDIT2124": "[2018-06 CWG Motion 12] P1008R1 Prohibit aggregates with user-declared constructors",
    "EDIT2125": "[2018-06 CWG Motion 13] P1120R0 Consistency improvements for <=> and other comparison operators",
    "EDIT2126": "[2018-06 CWG Motion 14] P0542R5 Support for contract based programming in C++",
    "EDIT2127": "[2018-06 CWG Motion 15] P0941R2 Integrating feature-test macros into the C++ WD (rev. 2)",
    "EDIT2128": "[2018-06 CWG Motion 16] P0892R2 explicit(bool)",
    "EDIT2129": "[2018-06 LWG Motion 11] P1082R0 LWG Issues to be moved in Rapperswil (except issue 3071)",
    "EDIT2130": "[2018-06 LWG Motion 12] P0475R1 LWG 2511: guaranteed copy elision for piecewise construction",
    "EDIT2131": " [2018-06 LWG Motion 13] P0476R2 Bit-casting object representations",
    "EDIT2132": " [2018-06 LWG Motion 14] P0788R3 Standard library specification in a concepts and contracts world",
    "EDIT2133": " [2018-06 LWG Motion 16] P0458R2 Checking for existence of an element in associative containers",
    "EDIT2134": " [2018-06 LWG Motion 17] P0759R1 fpos requirements",
    "EDIT2135": " [2018-06 LWG Motion 18] P1023R0 constexpr comparison operators for std::array",
    "EDIT2136": "[2018-06 LWG Motion 19] P0769R2 Add shift to <algorithm>",
    "EDIT2137": "[2018-06 LWG Motion 20] P0887R1 The identity metafunction",
    "EDIT2138": "[2018-06 LWG Motion 21] P0879R0 Constexpr for swap and swap related functions",
    "EDIT2139": "[2018-06 LWG Motion 22] P0758R1 Implicit conversion traits and utility functions",
    "EDIT2140": "[2018-06 LWG Motion 23] P0556R3 Integral power-of-2 operations",
    "EDIT2141": "[2018-06 LWG Motion 24] P0019R8 Atomic ref",
    "EDIT2142": "[2018-06 LWG Motion 25] P0935R0 Eradicating unnecessarily explicit default constructors from the standard library",
    "EDIT2143": "[2018-06 LWG Motion 26] P0646R1 Improving the return value of erase-like algorithms",
    "EDIT2144": "[2018-06 LWG Motion 27] P0619R4 Reviewing deprecated facilities of C++17 for C++20",
    "EDIT2145": "[2018-06 LWG Motion 28] P0898R3 Standard library concepts",
    "EDIT2146": "P1025R1 Update the reference to the Unicode standard",
    "EDIT2147": "P0806R2 Deprecate implicit capture of this via [=]",
    "EDIT2148": "P1042R1 __VA_OPT__ wording clarifications",
    "EDIT2149": "P0929R2 Checking for abstract class types",
    "EDIT2150": "Calling std::terminate() vs. std::terminate (no parens)",
    "EDIT2151": "P0542R5 Support for contract based programming in C++",
    "EDIT2152": "P0892R2 explicit(bool)",
    "EDIT2153": "P0941R2 Integrating feature-test macros into the C++ WD",
    "EDIT2154": "P0528R3 The curious case of padding bits, featuring atomic compare-and-exchange",
    "EDIT2155": "P1023R0 constexpr comparison operators for std::array",
    "EDIT2156": "P0556R3: Integral power-of-2 operations",
    "EDIT2157": "P0769R2 Add shift to <algorithm>",
    "EDIT2158": "P0759R1 fpos requirements",
    "EDIT2159": "P0887R1 The identity metafunction",
    "EDIT2160": "P0879R0 Constexpr for swap and swap-related functions",
    "EDIT2161": "P0758R1 Implicit conversion traits and utility functions",
    "EDIT2162": "P0935R0 Eradicating unnecessarily explicit default constructors from the standard library",
    "EDIT2163": "P0458R2 Checking for existence of an element in associative containers",
    "EDIT2164": "P0788R3 Standard library specification in a concepts and contracts world",
    "EDIT2165": "P0646R1 Improving the return value of erase-like algorithms",
    "EDIT2166": " P0722R3 Efficient sized delete for variable sized classes",
    "EDIT2167": "P1064R0 Allowing virtual function calls in constant expressions",
    "EDIT2168": "P0476R2 Bit-casting object representations",
    "EDIT2169": "P1008R1 Prohibit aggregates with user-declared constructors",
    "EDIT2170": "P1120R0 Consistency improvements for <=> and other comparison operators",
    "EDIT2171": "P0732R2 Class types in non-type template parameters",
    "EDIT2172": "P0019R8 Atomic ref",
    "EDIT2173": "P0619 Review of deprecated facilities",
    "EDIT2174": "[macros,headers] Introduce 'multicoltable'",
    "EDIT2175": "[dcl.array]/1 This grammar does not always declare an array.",
    "EDIT2176": "P0898R3 Standard Library Concepts",
    "EDIT2177": "Typo: [temp.dep]/1 says \"An expressions\"",
    "EDIT2178": " [vector.cons]/1 should say noexcept",
    "EDIT2179": "[class.copy.assign]/7.4 misses the unsuccessful overload resolution case",
    "EDIT2180": "[dcl.init.ref]/5 misuses \"underlying type\" for references",
    "EDIT2181": "[temp.dep] Typo fix: 'An expressions...'",
    "EDIT2182": "[vector.cons] vector(Allocator) should be noexcept",
    "EDIT2183": "[dcl.init.ref] Avoid use of 'underlying type' for references",
    "EDIT2184": "[temp.constr.constr]/2, [iterator.requirements.general]/14, [re.results.size]/1 Replace \"section\" with \"subclause\"",
    "EDIT2185": "[cpp.subst] Create new grammar production for __VA_OPT__(content)",
    "EDIT2186": "P1113R0 CWG \"ready\" Issues for the June, 2018 (Rapperswil) meeting",
    "EDIT2187": "[basic.start,except] Harmonize references to std::terminate",
    "EDIT2188": "[temp.explicit] Restrictions on explicit instantiations are inconsistently placed",
    "EDIT2189": "P1114R0 CWG \"tentatively ready\" Issues for the June, 2018 (Rapperswil) meeting",
    "EDIT2190": "\"dynamic type\" is defined as a property of expressions but sometimes used as a property of objects",
    "EDIT2191": "Harmonize phrasings of \"this destructor is trivial\"",
    "EDIT2192": "Typo in Rapperswil CWG motion 14",
    "EDIT2193": "P1082R0 LWG Issues to be moved in Rapperswil (except issue 3071)",
    "EDIT2194": "P0475R1 LWG 2511: guaranteed copy elision for piecewise construction",
    "EDIT2195": "[re.general] Refer to table as done in the other clauses",
    "EDIT2196": "[string.view], [string.classes] Hanging paragraphs",
    "EDIT2197": "add subclause structure to [dcl.attr.contract]",
    "EDIT2198": "[dcl.attr.contract] Introduce subheadings and reorder paragraphs to fit",
    "EDIT2199": "[dcl] Large variation in phrasing of restrictions for decl-specifiers",
    "EDIT2200": "[cpp.predefined] Feature-test macro for P0732R2",
    "EDIT2201": "[lex.charset] Change \"short name\" to \"short identifier\" to match ISO 10646",
    "EDIT2202": "[time.duration] repeats \"duration\" in subclauses",
    "EDIT2203": "[input.iterators] odd phrasing for postconditions of iterator `operator++`",
    "EDIT2204": "[cpp.cond] Add contract attributes for feature testing P0542R5",
    "EDIT2205": "[cpp.predefined] Feature-test macro for P0892R2",
    "EDIT2206": "[expr.spaceship] strong_ordering::unequal / strong_ordering::nonequal",
    "EDIT2207": "library index entries for memory_order, memory_order_* in wrong type face",
    "EDIT2208": "[time.duration.io] Requires: element should be a Remarks:",
    "EDIT2209": "[time] Inconsistent ordering of elements of description",
    "EDIT2210": "P0619R4 Review of deprecated facilities",
    "EDIT2211": "[iterator.requirements.general] eliminate extra leading space in para 13",
    "EDIT2212": "[alg.shift], [fpos.operations] Annotate \"old\" requirements with \\oldc\u2026",
    "EDIT2213": "quantification of \"satisfied\" definitions for concepts",
    "EDIT2214": "[macros] Make colon in Note: and Example: upright and reduce spacing around brackets",
    "EDIT2215": "What \"temporary variable\" is?",
    "EDIT2216": "[expr.spaceship] Fix typo for std::strong_equality::nonequal",
    "EDIT2217": "[diff.cpp17.depr] apparent typo in p0619r4: raw_memory_iterator",
    "EDIT2218": "[algorithm.syn] Algorithm ordering inconsistency",
    "EDIT2219": "[algorithm.syn] Relocate the \"partitions\" algorithms",
    "EDIT2220": "[basic.types] Remove extraneous leading whitespace in para 9",
    "EDIT2221": "[variant.get] Consistently place comma after \"otherwise\"",
    "EDIT2222": "[atomics.order] Index entries for memory_order should be in code font",
    "EDIT2223": "[lib] Review macros for library index",
    "EDIT2224": "[input.iterators,fs.rec.dir.itr.members] Disambiguate phrasing for pr\u2026",
    "EDIT2225": "[depr.locale.stdcvt.req] Add normative references for encoding forms",
    "EDIT2226": "[lex] Correctly cite ISO/IEC 10646",
    "EDIT2227": "[optional] Move requirements from header synopsis to class template",
    "EDIT2228": "[basic.fundamental] Add definition of 'fundamental type'",
    "EDIT2229": "[dcl.attr.contract] Clarify interaction of parameters and postconditions",
    "EDIT2230": "[expr.prim.lambda,depr.capture.this] Replace 'lambda expression'",
    "EDIT2231": "[class.mem] Define complete-class context",
    "EDIT2232": "[expr.prim.id.unqual] Fix cross reference",
    "EDIT2233": "[{i,o}{string,f}stream.cons] remove dangling )",
    "EDIT2234": "[expr.prim.id.{un,}qual] A structured binding name is an lvalue",
    "EDIT2235": "[span.overview]p2-3 Requirements should be moved after the synopsis",
    "EDIT2236": "[diff] Use plural form of \\diffref for changes affecting multiple subclauses.",
    "EDIT2237": "[concept.swappable] remove wrongly included text",
    "EDIT2238": "Fix for typo in code example in [class.copy.elision] section of document",
    "EDIT2239": "\\diffref and \\diffrefs now take a comma-separated list of references.",
    "EDIT2240": "[concepts.object] Dissolve single-item subclauses.",
    "EDIT2241": "[concepts.{lang,compare,callable}.general] Replace \"section\" with \"subclause\"",
    "EDIT2242": "[structure.specifications] spell static_assert-declaration without \\_",
    "EDIT2243": "P1076R1: Editorial clause reorganization",
    "EDIT2244": "Travis CI: Check for undefined references.",
    "EDIT2245": "New placeholder macro that uses italics or slanted type depending on the context",
    "EDIT2246": "[basic.types] Clarify that 'value representation' does not depend on \u2026",
    "EDIT2247": "[concept.common] Confusing wording",
    "EDIT2248": "intro.defs: Use https; see Directives, Part 2:2018",
    "EDIT2249": "[time.point,time.duration] Avoid repetition of class name in subheadi\u2026",
    "EDIT2250": "[class] Introduce a subheading 'Properties of classes'.",
    "EDIT2251": "[intro.abstract]p7 belongs in [expr]",
    "EDIT2252": "Reorder [basic] before [lex]",
    "EDIT2253": "[std] Fix cross-reference that should point to [class.prop]",
    "EDIT2254": "[expr.pre] Add note on operator regrouping here,",
    "EDIT2255": "\"cv-qualified versions of cv-unqualified scalar types\" are just \"scalar types\"",
    "EDIT2256": "Proposal: Pull all macros into a custom documentclass",
    "EDIT2257": "Use the Oxford comma in [class.copy.assign].",
    "EDIT2258": "[std] Use \\defnadj where appropriate",
    "EDIT2259": "Simplify definition of \"data race\"",
    "EDIT2260": "[span.overview] Move requirements on types to after the synposis.",
    "EDIT2261": "[string.view] Move complexity requirement into [string.view.template].",
    "EDIT2262": "[library.general] Fixup the library categories table",
    "EDIT2263": "[iterators.general] Fixup Iterators library summary table",
    "EDIT2264": "Unnecessary overhead in placement new [ ]",
    "EDIT2265": "[basic.lval,expr.delete] 'dynamic type' refers to lvalues, not objects",
    "EDIT2269": "Names from namespace std::pmr need to be qualified",
    "EDIT2270": "[copy.ctor] Rearrange constructor subclauses",
    "EDIT2271": "[diff] Remove headings that refer to dissolved clauses",
    "EDIT2272": "[stmt.switch] p4 is unclear on whether operator== might be used",
    "EDIT2273": "[stmt.switch] Clarify comparison for case labels",
    "EDIT2274": "[dcl.array] Rework description.",
    "EDIT2275": "[class.dtor] Clean up awkward '.. is the type of the class' phrasing.",
    "EDIT2276": "note on locations where nodeclspec-function-declarator can appear seems to be incorrect",
    "EDIT2277": "[dcl.dcl] Remove incorrect footnote about the implicit int rule.",
    "EDIT2278": "[containers,utilities] Mark exposition-only names",
    "EDIT2279": "[expr.new]p1 is too generic in its wording",
    "EDIT2280": "Fix spelling error \"Tueday\" --> \"Tuesday\" (4x)",
    "EDIT2281": "Add index entry for atomic union with padding",
    "EDIT2282": "Update Getting Started On Fedora to include latexmk",
    "EDIT2283": "[basic] Fix index entry for 'odr-use'",
    "EDIT2284": "[expr.new] Use 'object', not 'entity', for new-expression.",
    "EDIT2285": "[fs.filesystem.syn] Fixes related to chrono::file_clock usage in <filesystem>",
    "EDIT2286": "[concepts.equality] modifying and non-modifying expressions",
    "EDIT2287": "The word \"below\" in [basic.lookup.argdep]/3 should be replaced by \"above\". ",
    "EDIT2288": "[over.best.ics] Wording might be confusing",
    "EDIT2289": "[std] Use of undefined term \"structure\"",
    "EDIT2290": "[class.virtual] missing a definition of \"virtual function\"",
    "EDIT2291": "[temp.param] fix spaceship example",
    "EDIT2292": "[forwardlist.modifiers] Remove index entry for forward_list::erased",
    "EDIT2293": "[unord.req] Move index entry for \"erase\" to previous row",
    "EDIT2294": "[unord.req] index \"extract\" and \"merge\"",
    "EDIT2295": "[associative.reqmts] index all members",
    "EDIT2296": "[std] Replace use of 'structure' by 'class'",
    "EDIT2297": "[class.virtual] Define 'virtual function'",
    "EDIT2298": "[dcl.init] Rephrase \"user-defined conversion sequence\"",
    "EDIT2299": "[expr.add]p4 seem to conflict with [expr.add]p7",
    "EDIT2300": "Contradiction on result objects of prvalues",
    "EDIT2301": "ADL is invoked by the compiler when a postfix-expression in a function call is an unqualified-id.",
    "EDIT2302": "[rand.util.seedseq] Typo \"for( \" should be \"for (\"",
    "EDIT2303": "[class.member.lookup]/1 is confusing",
    "EDIT2304": "[dcl.ref]/5 CWG 453: What is a valid object? function?",
    "EDIT2305": "[class.temporary]/1: prvalue can't be materialized, it is an expression",
    "EDIT2306": "[expr.prim.this]/2 alludes to the grammar production `declarator` without necessity",
    "EDIT2307": "[expr.const]/2.11 CWG 2186: \"Preceding\" is unclear",
    "EDIT2308": "[intro.object]/1: the (interpretation of the) value of an object is determined by the type of the expressions used to access it",
    "EDIT2309": "[basic.life] Change \"class or aggregate type\" to \"class or array type\"",
    "EDIT2310": "[intro.object]: the term \"subobject\" should consistently be either transitive or intransitive",
    "EDIT2311": "[class.this]/1 lags behind in terms of pointer values",
    "EDIT2312": "[array.zero] paragraph 2 has confusing mathmatical notation using C++\u2026",
    "EDIT2313": "[basic.life,etc] Fix imbalanced spacing around parens",
    "EDIT2314": "[expr.prim.id] Fix typo \"the the\"",
    "EDIT2315": "[expr.add] Clarify if/otherwise ladder",
    "EDIT2316": "[basic.lval] Clarify result object for prvalues as operands",
    "EDIT2317": "[class.member.lookup] 'unqualified-id' is the correct complement for \u2026",
    "EDIT2318": "[expr.prim.this] Do not mention 'declarator';",
    "EDIT2319": "[class.this] A pointer represents more than an address",
    "EDIT2320": "[class.temporary] prvalues are not materialized,",
    "EDIT2321": "[dcl.dcl] nodeclspec-function-declaration should probably allow trailing requires-clause",
    "EDIT2322": "[temp.constr.order] Fix typo: conjuctive -> conjunctive",
    "EDIT2323": "[basic.type.qualifier] Clarify the definitions of const/volatile object",
    "EDIT2324": "[basic.def.odr] Replace undefined term 'non-trivial function'",
    "EDIT2325": "[basic.def.odr] Clarify antecedent for declarative region",
    "EDIT2326": "[unique.ptr.single.ctor] Simplify description of unique_ptr constructors",
    "EDIT2327": "[expr.new] Harmonize rules of constant array bounds > 0",
    "EDIT2328": "[string.classes] Avoid special characters in stable labels",
    "EDIT2329": "Non-type paramaters can have class type",
    "EDIT2330": "Update the descriptions of `map`s indexing operators to use `mapped_t\u2026",
    "EDIT2331": "[class.union]/1 and /2 use term struct",
    "EDIT2332": "[class.union] use 'class', not (undefined) 'struct'",
    "EDIT2333": "Fix lambda-declarator",
    "EDIT2334": "[basic.fundamental] CWG 2185: Missing \"and cv-qualified versions of those types\" for various type categories",
    "EDIT2335": "[dcl.init.aggr] Bad phrase \"empty initializer list\"",
    "EDIT2336": "[dcl.init.aggr] initializer-list (grammar) is never empty",
    "EDIT2337": "[alg.shift] Slight mismatch with accepted proposal wording",
    "EDIT2338": "[expr.prim.lambda] Avoid decl-specifier-seq in lambda-declarator",
    "EDIT2339": "[temp.arg.nontype] Use struct instead of class to make example valid",
    "EDIT2340": "[dcl.attr.contract.check]p6 user-provided and throwing violation handler",
    "EDIT2341": "[dcl.attr.contract.check] Violation handlers are not 'user-provided'",
    "EDIT2342": "[basic.life] Remove description of impossible UB",
    "EDIT2343": "[temp] Add 'static' to examples for static data member template",
    "EDIT2344": "[class.copy.ctor] Add missing cross-references to Annex D",
    "EDIT2345": "[dcl.init.aggr] p4.1 Add example to clarify anonymous union case",
    "EDIT2346": "Move \"plain ints\" statement to a note",
    "EDIT2347": "[class.this] restriction on constructors and destructors has nothing to do with this pointer",
    "EDIT2348": "[class.this] Turn redundant statement on cv-qualified constructors/de\u2026",
    "EDIT2349": "[dcl.spec.auto] p10 Return type deduction should refer to templated entity",
    "EDIT2350": "[dcl.spec.auto] Return type deduction should refer to templated entity",
    "EDIT2351": "[decl.init]/10 Fix specified initialization.",
    "EDIT2352": "[lib] Replace \\postconditions with \\ensures",
    "EDIT2353": "[class.mem] Add opaque-enum-declaration to member-declaration",
    "EDIT2354": "Remove \"shall equals\" naming from conditional/decay/enable_if",
    "EDIT2355": "[utilities] Remove class name repeated in subheadings",
    "EDIT2356": "[re] Remove class name repeated in subheadings",
    "EDIT2357": "Wonky wording: operators that \"admit\" other operators?",
    "EDIT2358": "[iterators] Remove class name repeated in subheadings",
    "EDIT2359": "Correct an article in the prvalue definition",
    "EDIT2360": "[output.iterators] Remove misleading italics from note",
    "EDIT2361": "[iterator.operations] Harmonize bad wording with shiny new Ranges wording",
    "EDIT2362": "[numerics] Remove class name repeated in subheadings",
    "EDIT2363": "[dcl.init.aggr] Add example for anonymous union",
    "EDIT2364": "[localization] Remove class name repeated in subheadings",
    "EDIT2365": "Wording issue between [over.call.func] and [basic.lookup]",
    "EDIT2366": "[input.output] Remove class name repeated in subheadings",
    "EDIT2367": "Should the PDF title be different for drafts?",
    "EDIT2368": "[thread] Remove class name repeated in subheadings",
    "EDIT2369": "[rand.dist.uni.real] Correct a typo",
    "EDIT2370": "[basic.lookup,over.call.func] Clarify lookup rules for function calls.",
    "EDIT2371": "\"explicit constexpr\" vs. \"constexpr explicit\"",
    "EDIT2372": "[conv.lval] Improve the note about std::nullptr_t case",
    "EDIT2373": "[dcl.init] Initialization of non-class types with direct initialization with multiple arguments",
    "EDIT2374": "[dcl.init] vague wording for non-class initializer conversions",
    "EDIT2375": "[iterator.requirements.general] operations satisfy requirements, not \u2026",
    "EDIT2376": "[numerics.defns] should be moved to [algorithms]",
    "EDIT2377": "[alg.find.end] and [alg.search] should not use \"subsequence\"",
    "EDIT2378": "[numeric.ops] Move [numerics.defns] to the point-of-use.",
    "EDIT2379": "[alg.find.end,alg.search] Remove redundant 'Effects' paragraphs",
    "EDIT2380": "[class.bit] talks about round-tripping enumerator values, should apply to all values of the enumeration",
    "EDIT2381": "[iterator.requirements.general] Allowed operations on singular iterators needs rephrasing",
    "EDIT2382": "[structure.specification] p3 add note for \"Mandates\" item",
    "EDIT2383": "Cleanup quoted mentions of \"happens before\"",
    "EDIT2384": "[allocator.uses.construction] Rephrase note on uses-allocator construction",
    "EDIT2385": "\\tcode{min} vs. $\\min$",
    "EDIT2386": "[dcl.init.aggr] braced-enclosed initializer-list is never empty",
    "EDIT2387": "[dcl.attr.contract.check] redundant wording on implementation-defined nature of violation handler",
    "EDIT2388": "\"standard conversion sequence\" should say \"implicit conversion sequence\" in some places",
    "EDIT2389": "[over.ics.user] Mark \"user-defined conversion sequence\" as a term of art",
    "EDIT2390": "harmonize \"deduced to\" versus \"deduced as\" in [temp.deduct]",
    "EDIT2391": "Cross-references for \"composite pointer type\"",
    "EDIT2392": "Different vertical positioning of items in top-level clause summary tables",
    "EDIT2393": "Add precisions for void expressions",
    "EDIT2394": "[2018-11 CWG Motion 1] P1350R0 (Core Language Working Group \"tentatively ready\" Issues (San Diego)",
    "EDIT2395": "[2018-11 CWG Motion 2]  P0668R5 Revising the C++ memory model",
    "EDIT2396": "[2018-11 CWG Motion 3] P0982R1 Weaken Release Sequences",
    "EDIT2397": "[2018-11 CWG Motion 4] P1084R2 Today's return-type-requirements Are Insufficient",
    "EDIT2398": "[2018-11 CWG Motion 5] P1131R2 Core Issue 2292: simple-template-id is ambiguous between class-name and type-name",
    "EDIT2399": "[2018-11 CWG Motion 6] P1289R1 Access control in contract conditions",
    "EDIT2400": "[2018-11 CWG Motion 8] P1002R1 Try-catch blocks in constexpr functions",
    "EDIT2401": "[2018-11 CWG Motion 9] P1327R1 Allowing dynamic_cast, polymorphic typeid in Constant Expression",
    "EDIT2402": "[2018-11 CWG Motion 10] P1236R1 Alternative Wording for P0907R4 Signed Integers are Two's Complement",
    "EDIT2403": "[2018-11 CWG Motion 11] P0482R6 char8_t: A type for UTF-8 characters and strings (Revision 6)",
    "EDIT2404": "[2018-11 CWG Motion 12] P1353R0 Missing Feature Test Macros",
    "EDIT2405": "[2018-11 CWG Motion 13] P1073R3 Immediate functions",
    "EDIT2406": "[2018-11 CWG Motion 14] P0595R2 std::is_constant_evaluated()",
    "EDIT2407": "[2018-11 CWG Motion 15] P1141R2 Yet another approach for constrained declarations",
    "EDIT2408": "[2018-11 CWG Motion 16] P1094R2 Nested Inline Namespaces",
    "EDIT2409": "[2018-11 CWG Motion 17] P1330R0 Changing the active member of a union inside constexpr",
    "EDIT2410": "[2018-11 LWG Motion 4] P1224R0 C++ Standard Library Issues to be moved in San Diego except...",
    "EDIT2411": "[2018-11 LWG Motion 5] P1123R0 Editorial Guidance for merging P0019r8 and P0528r3",
    "EDIT2412": "[2018-11 LWG Motion 6] P0487R1Fixing operator>>(basic_istream&, CharT*) (LWG 2499)",
    "EDIT2413": "[2018-11 LWG Motion 7] P0602R4 variant and optional should propagate copy/move triviality",
    "EDIT2414": "[2018-11 LWG Motion 8] P0655R1 visit<R>: Explicit Return Type for visit",
    "EDIT2415": "[2018-11 LWG Motion 9] P0972R0 <chrono> zero(), min(), and max() should be noexcept",
    "EDIT2416": "[2018-11 LWG Motion 10] P1006R1 Constexpr in std::pointer_traits",
    "EDIT2417": "[2018-11 LWG Motion 11] P1032R1 Misc constexpr bits",
    "EDIT2418": "[2018-11 LWG Motion 12] P1148R0 Cleaning up Clause 20",
    "EDIT2419": "[2018-11 LWG Motion 13] P0318R1 unwrap_ref_decay and unwrap_reference",
    "EDIT2420": "[2018-11 LWG Motion 14] P0357R3 reference_wrapper for incomplete types",
    "EDIT2421": "[2018-11 LWG Motion 15] P0608R3 A sane variant converting constructor",
    "EDIT2422": "[2018-11 LWG Motion 16] P0771R1 std::function move constructor should be noexcept",
    "EDIT2423": "[2018-11 LWG Motion 17] P1007R3 std::assume_aligned",
    "EDIT2424": "[2018-11 LWG Motion 18] P1020R1 Smart pointer creation with default initialization",
    "EDIT2425": "[2018-11 LWG Motion 19] P1285R0 Improving Completeness Requirements for Type Traits",
    "EDIT2426": "[2018-11 LWG Motion 20] P1248R1 Remove CommonReference requirement from StrictWeakOrdering (a.k.a Fixing Relations)",
    "EDIT2427": "[2018-11 LWG Motion 21] P0591R4 Utility functions to implement uses-allocator construction",
    "EDIT2428": "[2018-11 LWG Motion 22] P0899R1 LWG 3016 is Not a Defect",
    "EDIT2429": "[2018-11 LWG Motion 23] P1085R2 Should Span be Regular?",
    "EDIT2430": "[2018-11 LWG Motion 24] P1165R1 Make stateful allocator propagation more consistent for operator+(basic_string)",
    "EDIT2431": "[2018-11 LWG Motion 25] P0896R4 The One Ranges Proposal",
    "EDIT2432": "[2018-11 LWG Motion 26] P0356R5 Simplified partial function application",
    "EDIT2433": "[2018-11 LWG Motion 27] P0919R3 Heterogeneous lookup for unordered containers",
    "EDIT2434": "[2018-11 LWG Motion 28] P1209R0 Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20",
    "EDIT2435": "11.3.3.1 [over.best.ics] paragraph 2 \"such as\" sentences should be a note",
    "EDIT2436": "P1289R1 Access control in contract conditions",
    "EDIT2437": "P0668R5 Revising the C++ memory model",
    "EDIT2438": "P1236R1 Alternative Wording for P0907R4 Signed Integers are Two's Com\u2026",
    "EDIT2439": "P0982R1 Weaken Release Sequences",
    "EDIT2440": "[time] Use outputblock environment where appropriate.",
    "EDIT2441": "[expr.static.cast] Say 'lvalue denoting ...' instead of 'lvalue to ...'",
    "EDIT2442": "P0595R2 std::is_constant_evaluated()",
    "EDIT2443": "P1353R0 Missing Feature Test Macros",
    "EDIT2444": " P1131R2 Core Issue 2292: simple-template-id is ambiguous between class-name and type-name",
    "EDIT2445": "P1327R1 Allowing dynamic_cast, polymorphic typeid in Constant Express\u2026",
    "EDIT2446": "P1002R1 Try-catch blocks in constexpr functions",
    "EDIT2447": "P0899R1 LWG 3016 is Not a Defect (issue #2428)",
    "EDIT2448": "P1094R2 Nested Inline Namespaces",
    "EDIT2449": "P1330R0 Changing the active member of a union inside constexpr",
    "EDIT2450": "P1084R2 Today\u2019s return-type-requirements Are Insufficient",
    "EDIT2451": "P1350R0 Core Language Working Group \"tentatively ready\" Issues (San Diego)",
    "EDIT2452": "P1224R0 C++ Standard Library Issues to be moved in San Diego except 2697, 2960 and 3134",
    "EDIT2453": "P1141R2 Yet another approach for constrained declarations",
    "EDIT2454": "I'm unable to generate the PDF file with Archlinux",
    "EDIT2455": "P1006R1 Constexpr in std::pointer_traits",
    "EDIT2456": "P0972R0 <chrono> zero(), min(), and max() should be noexcept",
    "EDIT2457": "P0655R1 visit<R>: Explicit Return Type for visit",
    "EDIT2458": "P0602R4 variant and optional should propagate copy/move triviality",
    "EDIT2459": "P0487R1 Fixing operator>>(basic_istream&, CharT*) (LWG 2499)",
    "EDIT2460": "P1123R0 Editorial Guidance for merging P0019r8 and P0528r3",
    "EDIT2461": "P1073R3 Immediate functions",
    "EDIT2462": "Add an index entry for \"extern template\"",
    "EDIT2463": "P0482R6 char8_t: A type for UTF-8 characters and strings",
    "EDIT2464": "P0357R3 reference_wrapper for incomplete types",
    "EDIT2465": "P0608R3 A sane variant converting constructor",
    "EDIT2466": "P0771R1 std::function move constructor should be noexcept",
    "EDIT2467": "P1007R3 std::assume_aligned",
    "EDIT2468": "P1020R1 Smart pointer creation with default initialization",
    "EDIT2469": "P1285R0 Improving Completeness Requirements for Type Traits",
    "EDIT2470": "P1248R1 Remove CommonReference requirement from StrictWeakOrdering (a\u2026",
    "EDIT2471": "P0318R1 unwrap_ref_decay and unwrap_reference",
    "EDIT2472": "[over.best.ics] Turn 'such as' list into a note",
    "EDIT2473": "[styles] Also allow 'listings' package v1.7",
    "EDIT2474": "P1165R1 Make stateful allocator propagation more consistent for opera\u2026",
    "EDIT2475": "[array.syn] Add reference to [array.tuple]",
    "EDIT2476": "[tuple.helper, pair.astuple, array.tuple] Unconventional description of `tuple_element`",
    "EDIT2477": "[dcl.type.auto.deduct] Use \"immediately-declared constraint of\"",
    "EDIT2478": "P1085R2 Should Span be Regular?",
    "EDIT2479": "P0919R3 Heterogeneous lookup for unordered containers",
    "EDIT2480": "P1209R0 Adopt Consistent Container Erasure from Library Fundamentals \u2026",
    "EDIT2481": "[diff] Rename \"basic concepts\" to \"basics\"",
    "EDIT2482": "Link in [expr.call]/6 is probably wrong. It should be [expr.reinterpret.cast] instead of [dcl.link].",
    "EDIT2483": "[basic.fundamental] boolean note nitpick",
    "EDIT2484": "[expr.new] Is a copy constructor call elided in a new-expression?",
    "EDIT2485": "P0591R4 Utility functions to implement uses-allocator construction",
    "EDIT2486": "[func.bind_front] use unwrap_ref_t for bind_front",
    "EDIT2487": "P0356R5 Simplified partial function application",
    "EDIT2488": "[concepts] P1084R2 library wording changes",
    "EDIT2489": "[cmp.categories,time.cal] Change \"explicit constexpr\" to \"constexpr e\u2026",
    "EDIT2490": "[utility.syn,pairs.spec,tuple.syn,tuple.creation] Use unwrap_ref_deca\u2026",
    "EDIT2491": "Wrong link in [basic.stc.dynamic.allocation]/3",
    "EDIT2492": "[pairs.general] Don't encourage use of `make_pair` since we have CTAD",
    "EDIT2493": "[expr.prim.lambda.capture] CWG 2378: Resolve FIXME regarding ellipses in captures",
    "EDIT2494": "[dcl.fct] Add missing period after last sentence in example.",
    "EDIT2495": "P1032R1 Misc constexpr bits",
    "EDIT2496": "P1148R0 Cleaning up Clause 20",
    "EDIT2497": "[2018-11 LWG Motion 25] P0896R4 \u2014 Clause 17",
    "EDIT2498": "[2018-11 LWG Motion 25] P0896R4 \u2014 Clause 18",
    "EDIT2499": "[2018-11 LWG Motion 25] P0896R4 \u2014 Clause 19",
    "EDIT2500": "[2018-11 LWG Motion 25] P0896R4 \u2014 Clause 22",
    "EDIT2501": "[2018-11 LWG Motion 25] P0896R4 \u2014 Clause 24",
    "EDIT2502": "[basic.stc.dynamic.allocation] Fix cross-reference for get_new_handler",
    "EDIT2503": "[over.ics.ref] unclear about reference binding occurring as part of the second standard conversion sequence in a user-defined conversion sequence",
    "EDIT2504": "always parenthesize the constraint-logical-or-expression in a requires-clause",
    "EDIT2505": "[structure.summary] Unaccounted templated entities",
    "EDIT2506": "[depr.locale.category] Replace tcode environments with codeblock environments.",
    "EDIT2507": "use return-type-requirements where applicable",
    "EDIT2508": "P1085R2 Should Span be Regular?",
    "EDIT2509": "clean up [algorithms] source code",
    "EDIT2510": "consider moving requires-clause in a template-head onto the same line as the rest of the template-head where profitable",
    "EDIT2511": "formatting for \"E\" variant marker in [algorithms]",
    "EDIT2512": "always use sub-namespace in itemdecls",
    "EDIT2513": "revise section labels introduced by ranges",
    "EDIT2514": "define DECAY_COPY more centrally",
    "EDIT2515": "P0896R4 The One Ranges Proposal",
    "EDIT2516": "consider renaming [*.erasure] to [*.erase]",
    "EDIT2517": "[ranges] Shorten and adjust stable labels",
    "EDIT2518": "[algorithms] Long and unwieldly declarations",
    "EDIT2519": "[structure.summary] Add missing templated entities",
    "EDIT2520": "[func.bind_front] Use unwrap_ref_decay_t",
    "EDIT2521": "[dcl.attr.contract.check] Remove redundant statement that violation ha\u2026",
    "EDIT2522": "[expr] Fix cross-references for 'composite pointer type'",
    "EDIT2523": "[temp] Use 'deduced as' instead of 'deduced to'",
    "EDIT2524": "Derived constructor is not preferred, rather the base constructor does not belong to the set of candidate.",
    "EDIT2525": "[range.cmp] \"Range comparisons\" is not a great subclause title",
    "EDIT2526": "[depr.locale.category] Don't parenthesize reference after 'in'.",
    "EDIT2527": "[allocator.uses.construction] the argument name is alloc, not allocator",
    "EDIT2528": "[structure] needs an overhaul",
    "EDIT2529": "When to use \\ldots v. \\cdots v. ...?",
    "EDIT2530": "[cpp.subst] Introduce grammar non-terminal 'va-opt-replacement'",
    "EDIT2531": "[algorithms] Use math \\min when computing complexities.",
    "EDIT2532": "[over.best.ics] Clarify ambiguous conversion sequence",
    "EDIT2533": "[cmp.categories] Replace 'operator admits' phrasing.",
    "EDIT2534": "[dcl.init] Clarify standard conversions for built-in types",
    "EDIT2535": "[over.ics.ref] Use 'implicit conversion sequence',",
    "EDIT2536": "[dcl.init.aggr] Resolve grammar confusion around arrays of unknown bound",
    "EDIT2537": "[structure.specifications] Clarify that 'Mandates' conditions may or \u2026",
    "EDIT2538": "[class.bit] Bit-fields of sufficient width can store any value of an \u2026",
    "EDIT2539": "[dcl.struct.bind,numarray] Use '\\dotsc' for comma-separated lists",
    "EDIT2540": "[dcl.spec] Harmonize phrasing of restrictions on decl-specifiers",
    "EDIT2541": "[class.dtor]/12.3 causes linking to depend on run-time behavior",
    "EDIT2542": "undefined boolean note clarification",
    "EDIT2543": "[utilities] Harmonize 'For T in Types' phrasing.",
    "EDIT2544": "[input.output] Avoid colons in stable labels",
    "EDIT2545": "Use \\logop consistently.",
    "EDIT2546": "[view.interface] Use \"inherits\"/\"derives\" consistently.",
    "EDIT2547": "[algorithms] Compactify and reformat source with no visual change",
    "EDIT2548": "[meta.logical] unclear wording",
    "EDIT2549": "[meta.logical] use math mode subscripts for Bi, B1, BN etc.",
    "EDIT2550": "[meta.logical] clarify short-circuiting property",
    "EDIT2551": "[iterator.requirements.general] \"counted range\" defines a term of art",
    "EDIT2552": "[re.grammar] Add missing closing parentheses.",
    "EDIT2553": "Missing template declaration in [array.tuple]",
    "EDIT2554": "[temp.constr.atomic]/2 Meaning of \"the same *expression*\" is unclear",
    "EDIT2555": "[atomics.types.operations]/20 Awkward \"E.g.\" at start of sentence",
    "EDIT2556": "Consider formatting ranges with math brackets",
    "EDIT2557": "Escape spaces following mid-sentence periods.",
    "EDIT2558": "[atomics.types.operations]/20 Replace \"E.g.\" at start of sentence with \"For example\".",
    "EDIT2559": "Incompatible example with CWG 1395",
    "EDIT2560": "shared_ptr do not own a deleter for non-array type",
    "EDIT2561": "struct/class mismatch for `char_traits`",
    "EDIT2562": "Fix spacing after full stops that LaTeX mistakenly thinks are mid-sentence.",
    "EDIT2563": "[variant.assign]  Move punctuation out of \\tcode.",
    "EDIT2564": "[alg.partitions] Add missing closing parenthesis.",
    "EDIT2565": "[iterator.synopsis] Add reference to [alg.req.sortable]",
    "EDIT2566": "[iterator.traits] Present concept requirements consistently",
    "EDIT2567": "[iterator.concept.readable]/2 parenthesized clarification seems like a note",
    "EDIT2568": "[iterator.concept.writable] Double if and one-item list",
    "EDIT2569": "[iterator.concepts.readable] Turn parenthesized explanation into a note.",
    "EDIT2570": "[iosfwd.syn] Change char_traits from 'class' to 'struct'.",
    "EDIT2571": "[temp.func.order] Adjust example to rules in [temp.deduct.partial].",
    "EDIT2572": "[template.mask.array.overview, iterator.concept.iterator] Use non-eng\u2026",
    "EDIT2573": "[basic.indet] Indeterminate values",
    "EDIT2574": "[iterator.concept.bidir] Add comma for clarity",
    "EDIT2575": "[indirectcallable.general] Fix reference",
    "EDIT2576": "[iterator.traits] Remove space between type and ref-qualifier",
    "EDIT2577": "[iterator.primitives] Various problems in its only paragraph",
    "EDIT2578": "[reverse.iter.cons] Indent consistently with the parent subclause",
    "EDIT2579": "[reverse.iter.nonmember] Replace data member access with accessor",
    "EDIT2580": "[iterators] Declaration duplication",
    "EDIT2581": "[expr.and][expr.or][expr.xor] Add grouping sentence to the binary and/or/xor operators.",
    "EDIT2582": "[move.iterators] Various (hopefully) editorial fixes",
    "EDIT2583": "[iterators] Remove duplicated declarations",
    "EDIT2584": "[dcl.typedef] \"redefine\"",
    "EDIT2585": "[counted.iter.cmp] Add missing colon to specification element",
    "EDIT2586": "[stream.iterators] Improvements, modernization and fixes",
    "EDIT2587": "[stream.iterators] Requirements mixed with description",
    "EDIT2588": "[diff.cpp17.library] add <ranges>",
    "EDIT2589": "[range.range] Requirement marked wrongly",
    "EDIT2590": "[ranges] Different uses of \"common range\"",
    "EDIT2591": "[concepts] Use \"model\" instead of \"satisfy\" for the semantic requirements",
    "EDIT2592": "[range.view] Add complexity requirement normatively",
    "EDIT2593": "[basic.lookup.classref]p1 Should allow alias-templates followed by '<'",
    "EDIT2594": "[range.utility, ranges.syn] Various editorial fixes",
    "EDIT2595": "[temp.mem.func] Remove inappropriate parentheses in 'Array<T>::operator[]()'.",
    "EDIT2596": "[range.adaptors, ranges.syn] Various editorial fixes",
    "EDIT2597": "Fixed title of [dcl.constexpr] section to include consteval",
    "EDIT2598": "[diff.dcl]/4 Capitalize sentence.",
    "EDIT2599": "[diff.dcl] Remove space before colon.",
    "EDIT2600": "[alg.min.max] Fix typo in returns element of ranges::minmax",
    "EDIT2601": "[basic.life] CWG 2012: Underspecification on lifetime of references",
    "EDIT2602": "Update expressions.tex",
    "EDIT2603": "[reverse.iterators] Use the public accessor function,",
    "EDIT2604": "[iterator.primitives] Rescue introductory sentence.",
    "EDIT2605": "[range.adaptors] Replace Base with const V for clarity",
    "EDIT2606": "[optional.assign] use injected class name consistently",
    "EDIT2607": "[over.ics.user,over.ics.rank] Reference binding is part of the second\u2026",
    "EDIT2608": "[expr.new] A new-expression might not invoke a constructor",
    "EDIT2609": "decide what to do with underscores in section labels",
    "EDIT2610": "[std] Replace underscores in stable labels with periods.",
    "EDIT2611": "[mismatch] LWG 3178: std::mismatch is missing an upper bound",
    "EDIT2612": "[iterators] Qualify declarator-id with sub-namespace.",
    "EDIT2613": "[mismatch] LWG3178 std::mismatch is missing an upper bound",
    "EDIT2614": "[iterator.container,range.prim] \"range\" vs. \"container and/or view\"",
    "EDIT2615": "[range.adaptors] Generators bundled together with the adaptors",
    "EDIT2616": "[basic.life] Adjust subclause heading",
    "EDIT2617": "[dcl.typedef] Use 'redeclare', not 'redefine'",
    "EDIT2618": "[special.mem.concepts] Unconventional description",
    "EDIT2619": "[range.factories] New subclause, split off from [range.adaptors]",
    "EDIT2620": "[range.prim,iterator.container] merge into preceding subclause",
    "EDIT2621": "[special.mem.concepts] Use 'models ... only if' phrasing for semantic\u2026",
    "EDIT2622": "[range.refinements] Rephrase heading to not use 'common range'",
    "EDIT2623": "DECAY_COPY cleanup",
    "EDIT2624": "[library] needs a structural overhaul",
    "EDIT2625": "[operators] offers nice shorthand that should be exploited everywhere",
    "EDIT2626": "[unreachable.sentinel] In \"Index of library names\", unreachable_sentinel should point to [iterators.general]",
    "EDIT2627": "[iterator.synopsis] Index fix: unreachable_sentinel is defined here.",
    "EDIT2628": "[range.cmp] Deconfuse subclause heading.",
    "EDIT2629": "[unord.req] Add missing \\tcode.",
    "EDIT2630": "[expr.prim.id.dtor] Comment in example reflects lexing misunderstanding",
    "EDIT2631": "[index] Index entry for \"deferencing\" says \"see also\" without any page number",
    "EDIT2632": "[iterator.requirements.general] past-the-end/dereferenceable/singular iterators are not defined",
    "EDIT2633": "[expr.prim.id.dtor] Fix comment in example.",
    "EDIT2634": "Fix some `operator<=>` declarations with the wrong number of parameters",
    "EDIT2635": "[unreachable.sentinel] open interval -> half-infinite interval",
    "EDIT2636": "[index] Replace 'see also' with 'see' absent page numbers.",
    "EDIT2637": "[unreachable.sentinel] 'open interval' -> 'unbounded interval'",
    "EDIT2638": "[basic.fundamental] rename 'range exponent' to 'width'",
    "EDIT2639": "[allocator.requirements] Example is misplaced",
    "EDIT2640": "Use \"models\" for concepts, and \"meets\" for non-concept requirements with semantics",
    "EDIT2641": "[allocator.requirements] relocate example to end of subclause",
    "EDIT2642": "CI meta-question",
    "EDIT2643": "[ranges.syn] Fix a typo: \"fowarding\"",
    "EDIT2644": "[alg.any_of] Add source code newline to prevent visual mangling betwe\u2026",
    "EDIT2645": "[expr.unary.op]/3: the value of a pointer should be \"pointer to\", not \"address of\"",
    "EDIT2646": "[depr.strstreambuf.virtuals] Hyphenate \"implementation-defined\"",
    "EDIT2647": "Clear up a note about condition variables",
    "EDIT2648": "we should have a descriptive element for \"a type models this concept only if\"",
    "EDIT2649": "[tuple.helper] remove duplicate paragraph",
    "EDIT2650": "[meta.const.eval] Fix typo in function name",
    "EDIT2651": "revert e58439b (fix to \"usable in constant expressions\") if not fixed at Kona",
    "EDIT2652": "[expr.sizeof]/2: Is 'When applied to a reference' needed when we have [expr.type]/1",
    "EDIT2653": "Remove [expr.sizeof]/3",
    "EDIT2654": "[expr.sizeof]/2: there are no expressions of reference type",
    "EDIT2655": "[basic.lval]/9 all prvalues can have cv-qualified types",
    "EDIT2656": "[algorithms] Qualify declarator-id with sub-namespace.",
    "EDIT2657": "[dcl.init.ref]/5 Prevent prvalue type adjustment",
    "EDIT2658": "Fixed text in [temp.mem.func]/1 example, which was not updated by CWG249",
    "EDIT2659": "The hyperlink [stmt.if] is wrong in [dcl.spec.auto]/3",
    "EDIT2660": "[algorithms.general] Summary table missing row for [algorithms.requirements]",
    "EDIT2661": "[concepts.general] Summary table missing row for [concepts.equality]",
    "EDIT2662": "[meta.rel] Add missing noexcept cross-refs for invokable traits",
    "EDIT2663": "[algorithms.general,concepts.general] Add missing entries for summary\u2026",
    "EDIT2664": "[intro.execution] Destruction of a temp. object bound to a reference is not a full-expression?",
    "EDIT2665": "Can we find a better name for \"promoted arithmetic type\"?",
    "EDIT2666": "[temp.spec]/2 dead wording",
    "EDIT2667": "Fixed wording on [temp.class.spec.mfunc]/1 sentence 3",
    "EDIT2668": "[dcl.attr.contract.cond] example fails to return",
    "EDIT2669": "[dcl.attr.contract.cond] reference parameters in postconditions",
    "EDIT2670": "\"Syntactic\" circularity between [expr.add]/4 and [expr.sub]/1?",
    "EDIT2671": "[expr.sizeof][expr.alignof][expr.unary.noexcept] What is a constant?",
    "EDIT2672": "Harmonize \", inclusive\" and \"(inclusive)\" spelling",
    "EDIT2673": "Add \"Otherwise\" to the start of [dcl.init]/17.6",
    "EDIT2674": "Table names should be present as stable names",
    "EDIT2675": "Why are the words \"that is not a cv-qualifier\" mentioned in [class.mem]/12? ",
    "EDIT2676": "[container.node] Add 3 template keywords for dependent name",
    "EDIT2677": "Merge [basic.lookup.argdep]/4.1 and /4.3",
    "EDIT2678": "Use \"denotes a type\" in utilities library clause",
    "EDIT2679": "Incosistency in tuple_size/tuple_element struct/class. ",
    "EDIT2680": "Typo in P1358R0 issue #2358 (Explicit capture of value)...",
    "EDIT2681": "[2019-02 CWG Motion 1] P1358R0 Core Language Working Group \"ready\" Issues (Kona 2019)",
    "EDIT2682": "[2019-02 CWG Motion 2] P1359R0 Core Language Working Group \"tentatively ready\" Issues (Kona 2019)",
    "EDIT2683": "[2019-02 CWG Motion 3] P1286R2 Contra CWG DR1778",
    "EDIT2684": "[2019-02 CWG Motion 4] P1091R3 Extending structured bindings to be more like variable declarations",
    "EDIT2685": "[2019-02 CWG Motion 5] P1381R1 Reference capture of structured bindings",
    "EDIT2686": "[2019-02 CWG Motion 6] P1041R4 Make char16_t/char32_t string literals be UTF-16/32",
    "EDIT2687": "[2019-02 CWG Motion 7] P1139R2 Address wording issues related to ISO 10646",
    "EDIT2688": "[2019-02 CWG Motion 8] P1323R2 Contract postconditions and return type deduction",
    "EDIT2689": "[2019-02 CWG Motion 9] P0960R3 Allow initializing aggregates from a parenthesized list of values",
    "EDIT2690": "[2019-02 CWG Motion 10] P1009R2 Array size deduction in new-expressions",
    "EDIT2691": "[2019-02 CWG Motion 11] P1103R3 Merging Modules",
    "EDIT2692": "[2019-02 CWG Motion 12] P1185R2 <=> != ==",
    "EDIT2693": "[2019-02 CWG Motion 15] P0912R5 Merge Coroutines TS into C++20 working draft",
    "EDIT2694": "[2019-02 LWG Motion 1] P1457R0 C++ Standard Library Issues (Kona 2019)",
    "EDIT2695": "[2019-02 LWG Motion 3] P0339R6 polymorphic_allocator<> as a vocabulary type",
    "EDIT2696": "[2019-02 LWG Motion 4] P0340R3 Making std::underlying_type SFINAE-friendly",
    "EDIT2697": "[2019-02 LWG Motion 6] P0738R2 I Stream, You Stream, We All Stream for istream_iterator",
    "EDIT2698": "[2019-02 LWG Motion 7] P1458R1 Mandating the Standard Library: Clause 16 - Language support library",
    "EDIT2699": "[2019-02 LWG Motion 8] P1459R1 Mandating the Standard Library: Clause 18 - Language support library",
    "EDIT2700": "[2019-02 LWG Motion 9] P1462R1 Mandating the Standard Library: Clause 20 - Strings library",
    "EDIT2701": "[2019-02 LWG Motion 10] P1463R1 Mandating the Standard Library: Clause 21 - Containers library",
    "EDIT2702": "[2019-02 LWG Motion 11] P1464R1 Mandating the Standard Library: Clause 22 - Iterators library",
    "EDIT2703": "[2019-02 LWG Motion 12] P1164R1 Make create_directory() Intuitive",
    "EDIT2704": "[2019-02 LWG Motion 13] P0811R3 Well-behaved interpolation for numbers and pointers",
    "EDIT2705": "[2019-02 LWG Motion 14] P1001R2 Target Vectorization Policies from Parallelism V2 TS to C++20",
    "EDIT2706": "[2019-02 LWG Motion 15] P1227R2 Signed ssize() functions, unsigned size() functions",
    "EDIT2707": "[2019-02 LWG Motion 16] P1252R2 Ranges Design Cleanup",
    "EDIT2708": "[2019-02 LWG Motion 17] P1024R3 Usability Enhancements for std::span",
    "EDIT2709": "[2019-02 LWG Motion 18] P0920R2 Precalculated hash values in lookup",
    "EDIT2710": "[2019-02 LWG Motion 19] P1357R1 Traits for [Un]bounded Arrays",
    "EDIT2711": "[2019-02 LWG Motion 2] P1457R0 C++ Standard Library Issues (Kona 2019)",
    "EDIT2712": "Index of library names should include \"comp\"",
    "EDIT2713": "P1357R1 Traits for [Un]bounded Arrays",
    "EDIT2714": "P0738R2 I Stream, You Stream, We All Stream for istream_iterator",
    "EDIT2715": "uses_allocator specializations missing from <queue> and <stack> synopses",
    "EDIT2716": "[range.iota, range.adaptors] View's synopses missing cross-references to iterator and sentinel members",
    "EDIT2717": "Typo? in range.iota_view example",
    "EDIT2718": "P0920R2 Precalculated hash values in lookup",
    "EDIT2719": "P1024R3 Usability Enhancements for std::span",
    "EDIT2720": "P1252R2 Ranges Design Cleanup",
    "EDIT2721": "P1103R3 Merging Modules",
    "EDIT2722": "P1227R2 Signed ssize() functions, unsigned size() functions",
    "EDIT2723": "P1001R2 Target Vectorization Policies from Parallelism V2 TS to C++20",
    "EDIT2724": "P0811R3 Well-behaved interpolation for numbers and pointers",
    "EDIT2725": "P1164R1 Make create_directory() Intuitive",
    "EDIT2726": "P0340R3 Making std::underlying_type SFINAE-friendly",
    "EDIT2727": "[rand.synopsis] unhelpfully incomplete",
    "EDIT2728": "P0339R6 polymorphic_allocator<> as a vocabulary type",
    "EDIT2729": "P1185R2 <=> != ==",
    "EDIT2730": "[specialized.algorithms] Rename voidify's parameter",
    "EDIT2731": "P1009R2 Array size deduction in new-expressions",
    "EDIT2732": "P1458R1 Mandating the Standard Library: Clause 16 - Language support \u2026",
    "EDIT2733": "P1459R1 Mandating the Standard Library: Clause 18 - Diagnostics library",
    "EDIT2734": "Remove requirement duplication from Cpp17TrivialClock",
    "EDIT2735": "P1462R1 Mandating the Standard Library: Clause 20 - Strings library",
    "EDIT2736": "Motions 2019 02 cwg 1",
    "EDIT2737": "Motions 2019 02 cwg 2",
    "EDIT2738": "P1286R2 Contra CWG DR1778",
    "EDIT2739": "Motions 2019 02 cwg 4 and 5",
    "EDIT2740": "P1041R4 Make char16_t/char32_t string literals be UTF-16/32",
    "EDIT2741": "P1139R2 Address wording issues related to ISO 10646",
    "EDIT2742": "P1323R2 Contract postconditions and return type deduction",
    "EDIT2743": "P0960r3 Allow initializing aggregates from a parenthesized list of va\u2026",
    "EDIT2744": "P1463R1 Mandating the Standard Library: Clause 21 - Containers library",
    "EDIT2745": "Motions 2019 02 lwg 2",
    "EDIT2746": "P1464R1 Mandating the Standard Library: Clause 22 - Iterators library",
    "EDIT2747": "P0912R5 Merge Coroutines TS into C++20 working draft",
    "EDIT2748": "[class.spaceship]/3 operation order is unclear",
    "EDIT2749": "Inconsistent complexities for average/worst",
    "EDIT2750": "[func.not_fn], [func.bind_front] fix phrasing of \\mandates and \\expects",
    "EDIT2751": "[conv.prom] dangling reference to b_min / b_max",
    "EDIT2752": "[lex.charset] p2 \\00NNNNNN should use placeholder",
    "EDIT2753": "[stmt.iter] paragraph after 2 is missing formatting and paragraph number",
    "EDIT2754": "[stmt.iter,stmt.select] Add formatting for grammar terms",
    "EDIT2755": "[conv.prom] b_min and b_max are no longer defined in [dcl.enum]",
    "EDIT2756": "[queue.syn,stack.syn] Add partial specialization of uses_allocator",
    "EDIT2757": "`T` in [expr.type]/4.3 is lacking code font",
    "EDIT2758": "[temp.deduct.conv]p5 missing code font for \"noexcept function\"",
    "EDIT2759": "P1091R3 Extending structured bindings to be more like variable declarations",
    "EDIT2760": "P1091R3 Extending structured bindings to be more like variable declarations",
    "EDIT2761": "P1381R1 Reference capture of structured bindings",
    "EDIT2762": "[expr.type] Fix missing formatting for 'T'.",
    "EDIT2763": "[temp.deduct.conv] Add missing formatting for 'noexcept'.",
    "EDIT2764": "[time.clock.req] Simplify requirements for Cpp17TrivialClock.",
    "EDIT2765": "[range.iota,range.adaptors] Add cross-references for private member t\u2026",
    "EDIT2766": "[dcl.init] Prepend 'Otherwise' to a bullet",
    "EDIT2767": "[dcl.attr.contract.cond] References cannot be modified.",
    "EDIT2768": "Lex.charset fixes",
    "EDIT2769": "add index entries for identifiers with special meaning",
    "EDIT2770": "P0912R5 Merge Coroutines TS",
    "EDIT2771": "[over.match.best] Add number for paragraph 2.",
    "EDIT2772": "Fix a bunch of faulty parallelism with \"either\".",
    "EDIT2773": "reorder subclauses of [expr.unary] to match grammar",
    "EDIT2774": "reconsider placeholder formatting in [expr.await]",
    "EDIT2775": "Reconsider use of 'prime' placeholder variables in code fragments",
    "EDIT2776": "[lib] Use '(inclusive)', not other punctuation",
    "EDIT2777": "[class.eq,class.spaceship] Clarify order of comparison.",
    "EDIT2778": "[std] Index all mentions of keywords in grammar productions.",
    "EDIT2779": "[basic.lookup.argdep] Reorder bullets to group semantics.",
    "EDIT2780": "Simplifying [class.rel] wording.",
    "EDIT2781": "Hanging paragraphs in [stmt.return] following the coroutines merge",
    "EDIT2782": "P0738R2 I Stream, You Stream, We All Stream for istream_iterator",
    "EDIT2783": "use italic teletype font for exposition-only identifiers in core wording",
    "EDIT2784": "[meta.type.synop] Align type_identity_t's \"=\" with following declarat\u2026",
    "EDIT2785": "prevent `template <` from sneaking into the library wording",
    "EDIT2786": "fix presentation of `tuple_element` specializations",
    "EDIT2787": "[lib] Remove space between 'template' and argument list.",
    "EDIT2788": "do not use teletype spaces in BNF",
    "EDIT2789": "[intro.execution] make function evaluation actually not interleave",
    "EDIT2790": "[range.split.outer] value_type to use conventional cross-reference",
    "EDIT2791": "Alignment of declarations in library synopses",
    "EDIT2792": "Switch to using constant-width italics for exposition-only names in the core wording",
    "EDIT2793": "Clarify grouping of \"either\".",
    "EDIT2794": "[range.prim.size] Missing \"respectively\"",
    "EDIT2795": "char_traits<char8_t> members not all constexpr",
    "EDIT2796": "Library-wide: Use \"meet\" for non-concept type requirements",
    "EDIT2797": "Library-wide: Use \"model\" instead of \"satisfy\" with library concept r\u2026",
    "EDIT2798": "[alg.random.sample] Remove redundant requirement",
    "EDIT2799": "table 34 falls off the bottom of the page",
    "EDIT2800": "Add coroutine to headers",
    "EDIT2801": "[cmp.categories] eq, ord, and ncmp should use kebab-case",
    "EDIT2802": "I find the first comment in the example in [basic.lookup.elab]/3 inaccurate",
    "EDIT2803": "[cmp.categories] Use kebab-case for \\expos enumerations",
    "EDIT2804": "[limits.syn,numeric.limits] declare partial specializations of numeri\u2026",
    "EDIT2805": "[stmt.stmt,basic.scope.block] Merge redeclaration provisions",
    "EDIT2806": "[span.overview] Iterator requirements should be appropriately relocated",
    "EDIT2807": "[iterator.operations] It should be stated clearly that `std::distance(first, last)` might invalidate all copies of `first` if it is not a ForwardIterator.",
    "EDIT2808": "[dcl.type.elab] Mix struct/class in example",
    "EDIT2809": "Fixed grammar of [temp.expl.spec]/18 sentence 2",
    "EDIT2810": "[coroutine.traits.primary] Hyphenate \"program-defined\"",
    "EDIT2811": "[coroutine.handle,coroutine.handle.export.import] \"static\" before \"constexpr\"",
    "EDIT2812": "[algorithms.requirements] Say below to account for clause move",
    "EDIT2813": "[iterator.operations] Clarify the observable side-effects of `distance`.",
    "EDIT2814": "[pointer.conversion] Reorder overloads of to_address",
    "EDIT2815": "[range.filter.iterator] Add bounds checking to operator--",
    "EDIT2816": "[iterator.traits] Redundant required expression in cpp17-input-iterator",
    "EDIT2817": "[iterator.traits] Remove redundant required expression in cpp17-input\u2026",
    "EDIT2818": "[istream.sentry] Remove unreferenced typedef-name traits_type",
    "EDIT2819": "change chi_squared_distribution's integer literal to floating literal",
    "EDIT2820": "\"Template template arguments\" contributing to ADL?",
    "EDIT2821": "[equal.range] Bad formatting",
    "EDIT2822": "[basic.lookup.elab] Clarify example to refer to injected-class-name",
    "EDIT2823": "[equal.range] Fix formatting of 'Returns' clause.",
    "EDIT2824": "add forward declaration of atomic class for atomic<shared_ptr<T>> (P0718R2)",
    "EDIT2825": "[range.counted] Missing description",
    "EDIT2826": "[alg.unique] Remove <> after ranges::equal_to",
    "EDIT2827": "[range.counted] Introduce \"Counted view\"",
    "EDIT2828": "[ranges.syn][range.dangling] contradictory specification for \"dangling\"",
    "EDIT2829": "[ranges.dangling] Fix namespace of ranges::dangling",
    "EDIT2830": "[fs.rec.dir.itr.members] change \\ensures to \\remarks for pop()",
    "EDIT2831": "[dcl.ambig.res] Ambiguity resolution for function and object declarations is ambiguous ",
    "EDIT2832": "[dcl.ambig.res]/1 Fixed ambiguity with resolving object and function declarations",
    "EDIT2833": "[char.traits.specializations.char8.t] Make all members constexpr.",
    "EDIT2834": "[std] Do not use teletype spaces in BNF",
    "EDIT2835": "Expand table links to include \"Table\", like \"Clause\" and \"Annex\"",
    "EDIT2836": "[time.cal.ym.nonmembers] Add missing \\pnum for Complexity element.",
    "EDIT2837": "[dcl.stc]/9 allows modification of any member provided any is mutable",
    "EDIT2838": "deduction-guide grammar fix for P0892",
    "EDIT2839": "[temp.deduct.guide] deduction-guide grammar fix",
    "EDIT2840": "[cstdio.syn] Rename parameter name of function \"rename\"",
    "EDIT2841": "[expos.only.func] Add library index entry for decay-copy",
    "EDIT2842": "[basic.life]/6 Remove erroneous comma in description of treatment of storage out of lifetime",
    "EDIT2843": "Add index entry for atomic union with padding",
    "EDIT2844": "The sentence highlighted below in [basic.start.static]/2 is indexed to {initialization!runtime}. Is that correct?",
    "EDIT2845": "[iterator.cust] Introduce expression-equivalent list as in [ranges]",
    "EDIT2846": "[dcl.init]/7.1 Use of \"initializer ()\"",
    "EDIT2847": "[over.match.ctor] Initialization by \"()\" does not match \"initializer\" grammer term",
    "EDIT2848": "[dcl.ref] Requirement to diagnose invalid binding of references",
    "EDIT2849": "s/deteminate/determinate/",
    "EDIT2850": "[dcl.stc,dcl.type.cv] Avoid redundancy when specifying 'mutable'.",
    "EDIT2851": "[macros] Adjust \\tref to enlarge active link text.",
    "EDIT2852": "[tables] Various cleanups.",
    "EDIT2853": "[namespace.def]/1 Remove redundant statement",
    "EDIT2854": "[dcl.ambig.res]/1 Fixed ambiguity with resolving object and function declarations",
    "EDIT2855": "[dcl.init.ref] References are bound to objects and functions, not expressions",
    "EDIT2856": "[dcl.init.ref] References are bound to objects and functions, not expressions",
    "EDIT2857": "Should we change all \"source character set\" to \"basic source character set\"?",
    "EDIT2858": "[allocator.adaptor.syn] talks about \"the memory resource\"",
    "EDIT2859": "[iterator.synopsis][insert.iterator] Some \"iterator_t\" should be replaced with \"ranges::iterator_t\"",
    "EDIT2860": "[iterators] Add \"ranges::\" for \"iterator_t\"",
    "EDIT2861": "[map,multimap] Add index entries for members of value_compare.",
    "EDIT2862": "[expr.alignof,expr.unary.noexcept] Reorder to after [expr.sizeof].",
    "EDIT2863": "[expr.call,expr.reinterpret.cast] Adjust cross-references for",
    "EDIT2864": "[views.span] Move description of iterators to [span.iterators].",
    "EDIT2865": "[string.view.template][string.view.iterators] Move requirements to a more appropriate place",
    "EDIT2866": "[string.view.iterators] *this is not invalidated",
    "EDIT2867": "[basic.start.static] Repair index entry for zero-initialization.",
    "EDIT2868": "[utilities,containers] Harmonize presentation of tuple_element.",
    "EDIT2869": "[lib] Reformat summary tables.",
    "EDIT2870": "simplify lambda-expression grammar",
    "EDIT2871": "[stmt.jump]/2 Wording does not apply to objects whose lifetime has ended",
    "EDIT2872": "[stmt.jump]/2 Fixed wording that does not apply to objects who's lifetime has ended",
    "EDIT2873": "[dcl.dcl,temp.spec] Move normative statements on restrictions for",
    "EDIT2874": "[expr.prim.lambda] Simplify grammar for lambda-expression.",
    "EDIT2875": "[optional.ctor] Remove extra dot.",
    "EDIT2876": "[expr.type]/1 Change \"designates\" to \"result of\"",
    "EDIT2877": "[dcl.dcl]/11 Storage from object definitions has proper alignment",
    "EDIT2878": "[dcl.dcl]/11 Storage from object definitions has proper alignment",
    "EDIT2879": "[basic.life] p5 Fixed destructor calls not ending lifetime of objects with trivial destructors",
    "EDIT2880": "[range.filter.sentinel] filter_view::sentinel's single-parameter constructor seems wrong",
    "EDIT2881": "[view.interface] Drop unused exposition-only items",
    "EDIT2882": "Reference Initialization: function lvalue covered by two cases",
    "EDIT2883": "[fs.path.query,fs.op.equivalent] Introduce else branch conventionally",
    "EDIT2884": "[range.filter.sentinel] Fix argument to ranges::end",
    "EDIT2885": "The term \"full-expression\" is not a grammar production",
    "EDIT2886": "[time.cal.ymwd.nonmembers] Typo in year_month_weekday subtraction/addition with years",
    "EDIT2887": "[concept.swappable] Strike array poison pill swap overload",
    "EDIT2888": "[concept.boolean] Rephrase first requirement",
    "EDIT2889": "[styles] Also allow 'listings' package v1.8b",
    "EDIT2890": "[concept.booolean] Reorder expression requirements consistently",
    "EDIT2891": "Remove four extraneous spaces from parameter lists ([rand.device] and [rand.util.seedseq])",
    "EDIT2892": "[dcl.init.aggr]/1 An aggregate can have private or protected data members",
    "EDIT2893": "[temp.inst] Specializations can be implicitly instantiated infinitely",
    "EDIT2894": "[range.counted] Misplaced [range.counted]",
    "EDIT2895": "[time.cal.ymwd.nonmembers] Fix typo in parameter names.",
    "EDIT2896": "[std] Show stable labels for tables.",
    "EDIT2897": "[module.reach, dcl.fct.def.coroutine] Fix index redirects.",
    "EDIT2898": "[ranges] Fix index entries for operator!=.",
    "EDIT2899": "[range.prim.size] Clarify by adding 'respectively'.",
    "EDIT2900": "[time.zone.info] Return is not specified for sys_info/local_info streaming operator",
    "EDIT2901": "[time.zone.info] Add missing 'Returns' items.",
    "EDIT2902": "[expr.sizeof,expr.alignof,expr.unary.noexcept] Clarify value category.",
    "EDIT2903": "[except.terminate] thread has move-assignment, not copy",
    "EDIT2904": "[allocator.adaptor.syn] Avoid confusing term 'memory resource'.",
    "EDIT2905": "[std] Consistently use 'immediately-declared constraint'.",
    "EDIT2906": "[basic.compound] Replace four refs with a single one to [dcl.meaning]",
    "EDIT2907": "[dcl.mptr] Add \\pnum to note",
    "EDIT2908": "[stmt.stmt,basic.scope.block] Remove normative redundancy.",
    "EDIT2909": "[dcl.type.simple]/2 erroneous statement about a type-specifier",
    "EDIT2910": "P0457R2 - links in TOC point to R1",
    "EDIT2911": "[except.uncaught] Clarify duration of uncaught exception.",
    "EDIT2912": "[over.call.object] Fix surrogate calls with regards to cv-qualifiers",
    "EDIT2913": "[dcl.fct.def.default] Add missing comma in p5",
    "EDIT2914": "[range.semi.wrap] Rename \"semiregular\" to \"semiregular-box\"",
    "EDIT2915": "[time.cal.ymwdlast.members] Move class-level sentence to previous section",
    "EDIT2916": "[module.interface] Use 'namespace-definition',",
    "EDIT2917": "[stmt.return.coroutine] Move one level up to avoid hanging paragraphs.",
    "EDIT2918": "[expr.unary.op] Modernize wording for obtaining a pointer.",
    "EDIT2919": "[expr.unary.op] does not handle non-lvalue qualified-ids",
    "EDIT2920": "[expr.add] Avoid x[i] syntax when defining pointer arithmetic.",
    "EDIT2921": "[unord.req] Consistently use 'Average case x, worst case y.'",
    "EDIT2922": "[expr.unary.op] Use bullets to clarify the address-of operator.",
    "EDIT2923": "[class.mfct.non-static] weird \\movedxref",
    "EDIT2924": "[conv.qual]/5 and footnote 67 are near-identical",
    "EDIT2925": "[algorithms.parallel.exec],[alg.set.operations],[alg.min.max],[alg.clibrary] remove empty parens",
    "EDIT2926": "[xrefdelta] Remove spurious entry for no-op rename.",
    "EDIT2927": "[time.cal.ymwdlast.members] Move statement on class properties",
    "EDIT2928": "[lex] Fix stray uses of 'source character set'",
    "EDIT2929": "[range.split.outer] Convert trailing cross-reference to prefix style.",
    "EDIT2930": "[func.bind] needs de-shalling",
    "EDIT2931": "[iterator.requirements.general] The definition of \"counted range\" isn't properly annotated",
    "EDIT2932": "Counted ranges abuse mathematical notation",
    "EDIT2933": "[move.sent.ops] Add missing description of move_sentinel::base",
    "EDIT2934": "[dcl.init] Explicitly define \"initializer expression\"",
    "EDIT2935": "[time.parse] Locale alternative specifiers for '%x'/'%X' are refering to producing instead of interpreting values",
    "EDIT2936": "[list.erasure][forward.list.erasure] Fix missing lambda braces",
    "EDIT2937": "[range.filter.sentinel] Correct typo in constructor Effects",
    "EDIT2938": "[dcl.type.auto.deduct]/2.3 superfluous?",
    "EDIT2939": "[temp.friend]/2: Last sentence redundant?",
    "EDIT2940": "[conv.qual]/1 Example became incorrect after CWG2051 resolution",
    "EDIT2941": "[expr.prim.lambda] Capture j so that it compiles",
    "EDIT2942": "[conv.qual] Fix example for cv-decomposition.",
    "EDIT2943": "[iterator.synopsis] Copy constraint for iterator_traits<T*> from [iterator.traits]/5",
    "EDIT2944": "[expr.prim.req]/1 Incorrect reference to [temp.constr.decl]?",
    "EDIT2945": "[res.on.functions] Inconsistent list item punctuation",
    "EDIT2946": "[res.on.functions] Properly capitalize full-sentence bullets.",
    "EDIT2947": "[expr.prim.req] Fix cross-reference for substituting into constraints.",
    "EDIT2948": "[time.parse] Fix description of %Ex and %EX parse flags.",
    "EDIT2949": "[time] Add missing \\tcode for a couple of \"Returns:\" clauses.",
    "EDIT2950": "[intro.object] Definition of \"most derived object\" does not match its use",
    "EDIT2951": "Typo fixes for sample code comments related to modules.",
    "EDIT2952": "[Concepts] Remove qualified-concept-name reference",
    "EDIT2953": "[basic.life]/5 was overlooked during CWG2256 resolution?",
    "EDIT2954": "[basic.life] Lifetime of class objects is treated uniformly",
    "EDIT2955": "[func.bind] Remove bogus 'shall's.",
    "EDIT2956": "[expr.reinterpret.cast] Properly capitalize full-sentence bullets.",
    "EDIT2957": "[temp.constr.constr] Add missing period at end of sentence.",
    "EDIT2958": "[dcl.asm] Rename grammar term 'asm-definition' to 'asm-declaration'",
    "EDIT2959": "An index of library concepts would be extremely useful",
    "EDIT2960": "result_type missing from index of library names",
    "EDIT2961": "[INDEX] Ensure index entry for all Cpp17Requirements",
    "EDIT2962": "[unique.ptr] Clarify nullptr case in destructor and reset()",
    "EDIT2963": "[alg.unique] p7.2.3 is very crowded",
    "EDIT2964": "[temp.constr.order]/1 Remove extraneous \"the\"",
    "EDIT2965": "[intro.execution] Is `i = i++ + 1` really well-formed?",
    "EDIT2966": "Specifying hidden friends",
    "EDIT2967": "[class.temporary]/2 Replace `A::operator=(const A&)`by `X::operator=(const X&)`",
    "EDIT2968": "[basic.lookup.argdep]/5 Missing export in `apply(T t, U u)` ?",
    "EDIT2969": "Use of bitmasks in [stringbuf]",
    "EDIT2970": "Indexing of ios_base members",
    "EDIT2971": "[complex.literals] Remove bogus index entry",
    "EDIT2972": "Which library features appear in the main index is inconsistent",
    "EDIT2973": "[basic.lookup.argdep]/5 Added export to `apply(T t, U u)`",
    "EDIT2974": "\"member class\" <- \"nested class\"",
    "EDIT2975": "Avoid use of \"comprise\"",
    "EDIT2976": "cross-references for \"explicit type conversion\"",
    "EDIT2977": "[expr.ass] Excise mention of class types",
    "EDIT2978": "[dcl.attr.*] and Recommended Practice",
    "EDIT2979": "Solve \"CWG 2389. Agreement of deduced and explicitly-specified variable types\" editorially",
    "EDIT2980": "[2019-07 CWG Motion 1] P1510R0 Core Language Working Group \"tentatively ready\" Issues",
    "EDIT2981": "[2019-07 CWG Motion 2] P1161R3 Deprecate uses of the comma operator in subscripting expressions",
    "EDIT2982": "[2019-07 CWG Motion 3] P1331R2 Permitting trivial default initialization in constexpr contexts",
    "EDIT2983": "[2019-07 CWG Motion 4] P0735R1 Interaction of memory_order_consume with release sequences",
    "EDIT2984": "[2019-07 CWG Motion 5] P0848R3 Conditionally Trivial Special Member Functions",
    "EDIT2985": "[2019-07 CWG Motion 6] P1186R3 When do you actually use <=>?",
    "EDIT2986": "[2019-07 CWG Motion 7] P1301R4 [[nodiscard(\"should have a reason\")]]",
    "EDIT2987": "[2019-07 CWG Motion 8] P1099R5 Using Enum",
    "EDIT2988": "[2019-07 CWG Motion 9] P1630R1 Spaceship needs a tune-up",
    "EDIT2989": "[2019-07 CWG Motion 10] P1616R1 Using unconstrained template template parameters with constrained templates",
    "EDIT2990": "[2019-07 CWG Motion 11] P1816R0 Wording for class template argument deduction for aggregates",
    "EDIT2991": "[2019-07 CWG Motion 12] P1668R1 Enabling constexpr Intrinsics By Permitting Unevaluated inline-assembly in constexpr Functions",
    "EDIT2992": "[2019-07 CWG Motion 13] P1766R1 Mitigating minor modules maladies",
    "EDIT2993": "[2019-07 CWG Motion 14] P1811R0 Relaxing redefinition restrictions for re-exportation robustness",
    "EDIT2994": "Delete irrelevant copy-paste from previous section",
    "EDIT2995": "[2019-07 CWG Motion 15] P0388R4 Permit conversions to arrays of unknown bound",
    "EDIT2996": "[2019-07 CWG Motion 16] P1823R0 Remove Contracts from C++20",
    "EDIT2997": "[2019-07 CWG Motion 17] P1143R2 Adding the constinit keyword",
    "EDIT2998": "[2019-07 CWG Motion 18 P1452R2 On the non-uniform semantics of return-type-requirements",
    "EDIT2999": "[2019-07 CWG Motion 19] P1152R4 Deprecating volatile",
    "EDIT3000": "[2019-07 CWG Motion 20] P1771R1 ([[nodiscard]] for constructors",
    "EDIT3001": "[2019-07 CWG Motion 21] P1814R0 Wording for Class Template Argument Deduction for Alias Template",
    "EDIT3002": "[2019-07 CWG Motion 23] P1825R0 Merged wording for P0527R1 and P1155R3",
    "EDIT3003": "[2019-07 CWG Motion 24] P1703R1 Recognizing Header Unit Imports Requires Full Preprocessing",
    "EDIT3004": "[2019-07 CWG Motion 25] P0784R7 More constexpr containers",
    "EDIT3005": "[2019-07 LWG Motion 1] P1724R0 C++ Standard Library Issues to be moved in Cologne",
    "EDIT3006": "[2019-07 LWG Motion 2]  P1355R2 Exposing a narrow contract for ceil2",
    "EDIT3007": "[2019-07 LWG Motion 3] P0553R4 Bit operations",
    "EDIT3008": "[2019-07 LWG Motion 4] P1424R1 'constexpr' feature macro concerns",
    "EDIT3009": "[2019-07 LWG Motion 5] P0645R10 Text Formatting",
    "EDIT3010": "[2019-07 LWG Motion 6] P1361R2 Integration of chrono with text formatting",
    "EDIT3011": "[2019-07 LWG Motion 7] P1652R1 Printf corner cases in std::format",
    "EDIT3012": "[2019-07 LWG Motion 8] P0631R8 Math Constants",
    "EDIT3013": "[2019-07 LWG Motion 9] P1135R6 The C++20 Synchronization Library",
    "EDIT3014": "[2019-07 LWG Motion 10] P1466R3 Miscellaneous minor fixes for chrono",
    "EDIT3015": "[2019-07 LWG Motion 11] P1754R1 Rename concepts to standard_case for C++20",
    "EDIT3016": "[2019-07 LWG Motion 12] P1614R2 The Mothership has Landed",
    "EDIT3017": "[2019-07 LWG Motion 13] P0325R4 to_array from LFTS with updates",
    "EDIT3018": "[2019-07 LWG Motion 14] P0408R7 Efficient Access to basic_stringbuf \u2019s Buffer",
    "EDIT3019": "[2019-07 LWG Motion 15] P1423R3 char8_t backward compatibility remediation",
    "EDIT3020": "[2019-07 LWG Motion 16] P1502R1 Standard library header units for C++20",
    "EDIT3021": "[2019-07 LWG Motion 17] P1612R1 Relocate Endian\u2019s Specification",
    "EDIT3022": "[2019-07 LWG Motion 18] P1661R1 Remove dedicated precalculated hash lookup interface",
    "EDIT3023": "[2019-07 LWG Motion 19] P1650R0 Output std::chrono::days with 'd' suffix",
    "EDIT3024": "[2019-07 LWG Motion 20] P1651R0 bind_front should not unwrap reference_wrapper",
    "EDIT3025": "[2019-07 LWG Motion 21] P1065R2 Constexpr INVOKE",
    "EDIT3026": "[2019-07 LWG Motion 22] P1207R4 Movability of Single-pass Iterators",
    "EDIT3027": "[2019-07 LWG Motion 23] P1035R7 Input Range Adaptors",
    "EDIT3028": "[2019-07 LWG Motion 24] P1638R1 basic_istream_view::iterator should not be copyable",
    "EDIT3029": "[2019-07 LWG Motion 25] P1522R1 Iterator Difference Type and Integer Overflow",
    "EDIT3030": "[2019-07 LWG Motion 26] P1004R2 Making std::vector constexpr",
    "EDIT3031": "[2019-07 LWG Motion 27] P0980R1 Making std::string constexpr",
    "EDIT3032": "[2019-07 LWG Motion 28] P0660R10 Stop Token and Joining Thread, Rev 10",
    "EDIT3033": "[2019-07 LWG Motion 29] P1474R1 Helpful pointers for ContiguousIterator",
    "EDIT3034": "[2019-07 LWG Motion 30] P1523R1 Views and Size Types",
    "EDIT3035": "[2019-07 LWG Motion 31] P0466R5 Layout-compatibility and Pointer-interconvertibility Traits",
    "EDIT3036": "[2019-07 LWG Motion 32] P1208R6 Adopt source_location for C++20",
    "EDIT3037": "P1208R6 Adopt source_location for C++20",
    "EDIT3038": "P1355R2 Exposing a narrow contract for ceil2",
    "EDIT3039": "P0553R4 Bit operations",
    "EDIT3040": "P1161R3 Deprecate uses of the comma operator in subscripting expressions",
    "EDIT3041": "P1331R2 Permitting trivial default initialization in constexpr contexts",
    "EDIT3042": "P0735R1 Interaction of memory_order_consume with release sequences",
    "EDIT3043": "P0848R3 Conditionally Trivial Special Member Functions",
    "EDIT3044": " P1186R3 When do you actually use <=>?",
    "EDIT3045": "P0631R8 Math constants",
    "EDIT3046": " P1301R4 [[nodiscard(\"should have a reason\")]]",
    "EDIT3047": " P1099R5 Using enum",
    "EDIT3048": "P1630R1 Spaceship needs a tune-up",
    "EDIT3049": "P1207R4 Movability of Single-pass Iterators",
    "EDIT3050": "[is.sorted] Add missing \"return\" and semi-colon",
    "EDIT3051": "Variable templates for type traits not in index of library names",
    "EDIT3052": "P1651R0 bind_front should not unwrap reference_wrapper",
    "EDIT3053": "P1650R0 Output std::chrono::days with 'd' suffix",
    "EDIT3054": "Example LaTeX on style wiki does not demonstrate good semantic line breaking",
    "EDIT3055": "P1502R1 Standard library header units for C++20",
    "EDIT3056": "P1523R1 Views and Size Types",
    "EDIT3057": "P1474R1 Helpful pointers for ContiguousIterator",
    "EDIT3058": "P0325R4 to_array from LFTS with updates",
    "EDIT3059": "P1423R3 char8_t backward compatibility remediation",
    "EDIT3060": "P1612R1 Relocate endian\u2019s specification",
    "EDIT3061": "P1661R1 Remove dedicated precalculated hash lookup interface",
    "EDIT3062": "P1771R1 [[nodiscard]] for constructors",
    "EDIT3063": "P1152R4 Deprecating volatile",
    "EDIT3064": "Use of \"cv\" and \"void types\" in type traits tables",
    "EDIT3065": "P0466R5 Layout-compatibility and Pointer-interconvertibility Traits",
    "EDIT3066": "P1452R2 On the non-uniform semantics of return-type-requirements",
    "EDIT3067": "[coroutine.handle.resumption] \"an instance of std::thread\" is not an execution agent",
    "EDIT3068": "P1522R1 Iterator difference type and integer overflow",
    "EDIT3069": "Motions 2019 07 lwg 1",
    "EDIT3070": "Motions 2019 07 cwg 1",
    "EDIT3071": "P1065R2 Constexpr INVOKE",
    "EDIT3072": "P0660R10 Stop Token and Joining Thread",
    "EDIT3073": "[alg.find.end] Separate Returns: items with \"or\" for consistency",
    "EDIT3074": "P1143R2 Adding the constinit keyword",
    "EDIT3075": "P1814R0 Class template argument deduction for alias template",
    "EDIT3076": "P1825R0 Merged wording for P0527R1 and P1155R3",
    "EDIT3077": "P0980R1 Making std::string constexpr",
    "EDIT3078": "P1004R2 Making std::vector constexpr",
    "EDIT3079": "\"terminate is called\" inconsistency",
    "EDIT3080": "[tuple] Use \"objects\" instead of \"variables\"",
    "EDIT3081": "P1703R1 Recognizing header unit imports requires full preprocessing",
    "EDIT3082": "P0784R7 More constexpr containers",
    "EDIT3083": "P1616R1 Using unconstrained template template parameters with constra\u2026",
    "EDIT3084": "P1668R1 Enabling constexpr intrinsics by permitting unevaluated inlin\u2026",
    "EDIT3085": "P1816R0 Class template argument deduction for aggregates",
    "EDIT3086": "P1766R1 Mitigating minor modules maladies",
    "EDIT3087": "P1811R0 Relaxing redefinition restrictions for re-exportation robustness",
    "EDIT3088": "[conv.qual] Consider renaming cv-combined type etc.",
    "EDIT3089": "[temp.deduct] Fix Ambiguous \"this\" in paragraph 3",
    "EDIT3090": "P0388R4 Permit conversions to arrays of unknown bound",
    "EDIT3091": "P1823R0 Remove contracts from C++20",
    "EDIT3092": "P1466R3 Miscellaneous minor fixes for chrono",
    "EDIT3093": "P1135R6 The C++20 synchronization library",
    "EDIT3094": "[temp.param]/6 example code uses `X` without defining it",
    "EDIT3095": "[temp.deduct] editorial changes to clarify substitution",
    "EDIT3096": "[lib] Improve macros for library index entries",
    "EDIT3097": "kebab-case all the exposition only ranges types",
    "EDIT3098": "P1614R2 Adding <=> to the Library",
    "EDIT3099": "P1754R1 Rename concepts to standard_case for C++20",
    "EDIT3100": "fix [locale.numpunct] to use the same presentation for its grammar as the rest of the standard",
    "EDIT3101": "fix comment in [tuple.elem]/7 example",
    "EDIT3102": "[ranges] Switch to using \\indexlibrarymember throughout",
    "EDIT3103": "[bit.syn] Replace template<typename T> with template<class T>",
    "EDIT3104": "[range.take.while.adaptor] for \"some\" subexpressions?",
    "EDIT3105": "[ranges] Fix examples that want to be inside a function body",
    "EDIT3106": "P1035R7 Input range adaptors",
    "EDIT3107": "P1638R1 basic_istream_view::iterator should not be copyable",
    "EDIT3108": "[char.traits.specializations.char8.t] Incosistent formatting with sibling specializations",
    "EDIT3109": "P0408R7 Efficient Access to basic_stringbuf \u2019s Buffer",
    "EDIT3110": "[lib] LWG 3239: inline definition in the header / class synopsis",
    "EDIT3111": "[allocator.uses.construction] Problems about the unqualified names",
    "EDIT3112": "What are \"Boolean contexts\"?",
    "EDIT3113": "[time.clock,bit.cast] Replace template<typename...> with template<cla\u2026",
    "EDIT3114": "injected-class-name is \\grammarterm'ed in [diff.cpp17.class]",
    "EDIT3115": "2019-07 LWG Motions 5, 6, and 7",
    "EDIT3116": "[diff.cpp17.class] 'injected-class-name' is not a grammar non-terminal.",
    "EDIT3117": "[class.copy.elision] Is the first example contradictory?",
    "EDIT3118": "Delete outdated git branches on the \"main\" fork",
    "EDIT3119": "[diff.cpp17.class] Add example where P0527R1 silently changes semantics.",
    "EDIT3120": "review [iterator.concepts] for proper use of \\itemdescr",
    "EDIT3121": "P1424R1 'constexpr' feature macro concerns",
    "EDIT3122": "Update [diff.cpp17.library] to match new headers since C++17",
    "EDIT3123": "Add examples to [depr.volatile]",
    "EDIT3124": "[expr.call]/9 The result of a function call may not be the same as the result of the operand of its return statement",
    "EDIT3125": "[atomics.types.generic] Canonicalize order of member functions",
    "EDIT3126": "Inconsistencies in comments for ill-formed/undefined behavior examples",
    "EDIT3127": "Indentation used in Latex for \\items",
    "EDIT3128": "Inconsistent Latex coding style used in clauses of \\itemdescrs",
    "EDIT3129": "[diff.iso] Inconsistent Latex coding style used in clauses",
    "EDIT3130": "consistently use hyphens instead of underscores as word separators in placeholders",
    "EDIT3131": "In Latex sources, do columns start counting at 0 or 1?",
    "EDIT3132": "[atomics.wait] Add an index for \"eligible to be unblocked\" under \"atomic\"",
    "EDIT3133": "Problems with the wording for P1135R6 added in #3093",
    "EDIT3134": "[ranges] Merge range adaptor specs into overview paragraphs",
    "EDIT3135": "\\placeholder or \\placeholdernc?",
    "EDIT3136": "fix use of \"for some\" throughout [ranges]",
    "EDIT3137": "[meta.trans.other] Use hyphens, not underscores, for meta-functions.",
    "EDIT3138": "[lib] Harmonize italics correction after \\placeholder",
    "EDIT3139": "[std] Use of \\placeholder for atomic operations meta-variables",
    "EDIT3140": "[support.srcloc] Canonicalize presentation",
    "EDIT3141": "[range.iota.view] Add missing @",
    "EDIT3142": "[time.clock.utc.nonmembers] fix \\end{itemdescr}",
    "EDIT3143": "[cmp.alg] Use regular apostrophes instead of fancy Unicode quotation marks.",
    "EDIT3144": "[diff.cpp17.library] Add new headers since C++17.",
    "EDIT3145": "[char.traits.specializations.char8.t] Align member typedefs.",
    "EDIT3146": "Library-wide: don't use \"for some\" to mean \"for an arbitrary\"",
    "EDIT3147": "missing synopsis for <version> header",
    "EDIT3148": "[conv.qual,expr.static.cast] Harmonize notes on cv-qualified function\u2026",
    "EDIT3149": "P1754R1 Rename concepts to standard_case for C++20",
    "EDIT3150": "[intro.multithread,util.smartptr,atomics] Group index entries for 'at\u2026",
    "EDIT3151": "[std] Harmonize cross-references for explicit casts.",
    "EDIT3152": "[expr.ass] Remove mention of class types.",
    "EDIT3153": "Lost changes to P1754R1 (LWG Motion 11)",
    "EDIT3154": "[func.wrap.func,rand] Index 'result_type'.",
    "EDIT3155": "Confusing wording in CWG2300 regarding definitions and token sequences",
    "EDIT3156": "What is \"the initialization full-expression\" ??",
    "EDIT3157": "[thread.jthread.class] suggests the thread joins itself",
    "EDIT3158": "Several subclauses under [tuple.tuple] don't belong there",
    "EDIT3159": "[index] Add index of concept names.",
    "EDIT3160": "[tuple] Make descriptions of non-members siblings of [tuple.tuple].",
    "EDIT3161": "[tuple.elem] Canonicalize comments in example.",
    "EDIT3162": "[thread.jthread.class] Rephrase introductory sentence.",
    "EDIT3163": "[version.syn] Add synopsis for <version> header.",
    "EDIT3164": "[ranges] Harmonize index entries.",
    "EDIT3165": "consider renaming \"floating literals\" to \"floating-point literals\"",
    "EDIT3166": "[meta] Harmonize ordering in descriptions.",
    "EDIT3167": "[std] Hyphenate floating-point and avoid 'floating'.",
    "EDIT3168": "[std] Rename 'floating literal' to 'floating-point literal'.",
    "EDIT3169": "move [latch.syn], [thread.latch.class] under [thread.latch]",
    "EDIT3170": "[support.srcloc] It's underspecified whether copy/move functions of source_location are constexpr or not",
    "EDIT3171": "Editing committee editing",
    "EDIT3172": "reorder members of atomic and atomic_ref to a more meaningful and conventional order",
    "EDIT3173": "[ostream] non-member functions are listed in the wrong place",
    "EDIT3174": "[locale.numpunct,locale.moneypunct] Canonicalize local grammar presen\u2026",
    "EDIT3175": "Use correct punctuation to terminate non-final list items.",
    "EDIT3176": "[over.match.funcs, ...?] Consider shunning single-item lists",
    "EDIT3177": "Add/fix periods at end of sentences.",
    "EDIT3178": "[expr.new] does not specify pointer value in case of an empty array allocation",
    "EDIT3179": "[format.context] Use \\indextext, not \\index.",
    "EDIT3180": "Change Expects to Effects for atomic_ref::notify_{one,all}",
    "EDIT3181": "[memory.syn] ExecutionPolicy overloads of destroy/destroy_n shoudn't be constexpr",
    "EDIT3182": "Correct indentation for operator<<(basic_ostream<char, traits>&, const char32_t*) = delete.",
    "EDIT3183": "[thread.jthread.class] fix typos",
    "EDIT3184": "remove incorrect note in 13.2 [temp.names] paragraph 6",
    "EDIT3185": "[basic.stc.dynamic.safety] \"dynamic object\" used but not defined",
    "EDIT3186": "[everywhere] Use consistent margins for codeblocks",
    "EDIT3187": "[std] Use consistent margins for codeblocks.",
    "EDIT3188": "[temp.names] Remove misleading note.",
    "EDIT3189": "[diff.library] Consistency for wide char types",
    "EDIT3190": "[lex.key],[diff.header.iso646.h] Consistent tokens order",
    "EDIT3191": "[intro.refs] ISO/IEC 2382 missing date",
    "EDIT3192": "[intro.compliance] Fix reference in footnote",
    "EDIT3193": "[re.grammar] Improve grammar typesetting.",
    "EDIT3194": "[using.headers]/1 Not declaration, but directive?",
    "EDIT3195": "[basic.def] missing template declaration in list of non-definitions",
    "EDIT3196": "[lex.pptoken] import-keyword missing from list of categories of preprocessing token",
    "EDIT3197": "Non grammatical term initializer is used like a language construct but not defined",
    "EDIT3198": "[re.regex] assign editorial cleanup.",
    "EDIT3199": "[temp.param] Remove unused class template from example.",
    "EDIT3200": "[basic.def] Move rule on template definition here",
    "EDIT3201": "Import directive is deleted at the end of translation phase 4",
    "EDIT3202": "[allocator.requirements] inconsistent use of periods in tables",
    "EDIT3203": "[dcl.array] The first element has the same address as the array",
    "EDIT3204": "Gather destructor behavior",
    "EDIT3205": "Improve cv-combination note",
    "EDIT3206": "[range.range] replace hyphens with dashes",
    "EDIT3207": "[containers] \"throws an exception\"",
    "EDIT3208": "[deque.modifiers][vector.modifiers] unclear \"assignment operator\"",
    "EDIT3209": "[iterators] s/a == b/bool(a == b)/ and s/++a == ++b/bool(++a == ++b)/",
    "EDIT3210": "[span.tuple] simplify definition of get(span<T, I>)",
    "EDIT3211": "[span.syn] Fix inconsistent class key in tuple_size/tuple_element",
    "EDIT3212": "[lex.pptoken] Mention import keywords in the category list.",
    "EDIT3213": "[class.dtor] Group declaration properties vs. behavior.",
    "EDIT3214": "[thread.latch] Subordinate [latch.syn] and [thread.latch.class]",
    "EDIT3215": "\"Observable behavior\" is not defined properly",
    "EDIT3216": "Use consistent wording to indicate ADL-only lookup.",
    "EDIT3217": "[dcl.init.ref] Constructors not mentioned when user-defined conversions are used",
    "EDIT3218": "[class.cdtor] Final overrider used incorrectly",
    "EDIT3219": "[std] Move \\pnum and library element markers to a line of their own.",
    "EDIT3220": "[class.spaceship] equal to equivalent",
    "EDIT3221": "[diff] Move markers to lines of their own.",
    "EDIT3222": "[basic.life] Lifetime of union member",
    "EDIT3223": "[concepts.arithmetic] fix notes that use undefined terms",
    "EDIT3224": "[over.match.funcs] Remove bullet for single-item bulleted list.",
    "EDIT3225": "[basic.stc.dynamic.safety] Avoid undefined term 'dynamic object'.",
    "EDIT3226": "[temp.param] Define X in the example.",
    "EDIT3227": "[dcl.spec.auto] Add example to show variable redeclaration with 'auto'.",
    "EDIT3228": "[basic.stc.dynamic.safety] Fix ambiguous antecedent for 'it'.",
    "EDIT3229": "Replace \"shall not throw\" with \"does not throw\" when it describes library behavior",
    "EDIT3230": "Several editorial fixes in [re.regex].",
    "EDIT3231": "[range.elements.overview] range adaptor objects `keys` and `values` are unspecified",
    "EDIT3232": "[ranges] Range adaptor/factory objects not indexed",
    "EDIT3233": "[lib] Use more abstract library indexing macros",
    "EDIT3234": "[class.default.ctor] Implicit definitions of special functions",
    "EDIT3235": "[over.match.viable] footnote is incorrect",
    "EDIT3236": "[ostream.iterator] Wrong type name in default constructor of ostream_iterator",
    "EDIT3237": "[basic.def.odr] Why is \"external linkage\" only mentioned for inline functions & variables?",
    "EDIT3238": "[locale] Example calls time_put::put with ios_base::iostate& but there is no such overload",
    "EDIT3239": "[std] Improve indexing of standard library headers.",
    "EDIT3240": "[ostream.iterator] Correct typo",
    "EDIT3241": "[over.match.viable] Properly handle non-trailing default arguments.",
    "EDIT3242": "[locale] Fix example.",
    "EDIT3243": "[class.temporary] Fix typo in example.",
    "EDIT3244": "[expr.prim.id] Fix immediate function id-expression requirement",
    "EDIT3245": "Avoid confusion between lookup and overall overload resolution",
    "EDIT3246": "[index] Create first-letter subheadings for the general index.",
    "EDIT3247": "Change type-id to defining-type-id [temp.alias] p4",
    "EDIT3248": "[temp.spec] Make \"specialization\" a proper definition & adjust definition.",
    "EDIT3249": "[class.dtor] Remove incorrect note about trivial vs. constexpr.",
    "EDIT3250": "[std] Add \"Preamble\" sections to top-level core clauses",
    "EDIT3251": "[std] Introduce 'Preamble' sections to avoid hanging paragraphs.",
    "EDIT3252": "[macros,range.counted] Introduce and use \\libconceptx",
    "EDIT3253": "[everywhere] Remove inappropriate paragraph breaks.",
    "EDIT3254": "[class.copy.elision] Fix the contradiction introduced by CWG 2278",
    "EDIT3255": "[lib] Parameter names in synopses",
    "EDIT3256": "[travis] Expand automatic LaTeX source checking for \\pnum etc.",
    "EDIT3257": "Mis-application of a bit of p1463r1",
    "EDIT3258": "[list.ops] Fix misapplication of P1463R1, \"!=\" should be \"==\".",
    "EDIT3259": "[lib] Remove parameter names from deleted special member functions.",
    "EDIT3260": "[expr.typeid] Add a note covering abominable function types as type-id",
    "EDIT3261": "[alg.search] search_n. Use consistent wording with search",
    "EDIT3262": "[basic.lval] Non-static member function designator is a prvalue",
    "EDIT3263": "[expr.typeid] Add note highlighting prohibition of bad function types.",
    "EDIT3264": "[atomics] Reorder members of atomic, atomic_ref, atomic_flag",
    "EDIT3265": "[expr.const] Excise 'initialization full-expression'",
    "EDIT3266": "[atomics.ref.ops] Rename stable label from .operations",
    "EDIT3267": "[basic.def.odr] Replace misleading 'for which' with 'where'.",
    "EDIT3268": "[support.srcloc] Canonicalize presentation.",
    "EDIT3269": "[concept.boolean] Avoid undefined 'Boolean context'.",
    "EDIT3270": "[std] Align all comments to multiples of four",
    "EDIT3271": "Upper-case vs Lower-case for expressions",
    "EDIT3272": "[lib] Use macro \\notdef for undefined entities.",
    "EDIT3273": "[travis] improve messages for \"overfull \\hbox\" and \"Reference ... und\u2026",
    "EDIT3274": "[utilities] Index _t typedefs and _v variable templates.",
    "EDIT3275": "[stmt.jump] Fix markup typo in grammar, causing bad index entries.",
    "EDIT3276": "[span.iterators] Fix typo in paragraph 5",
    "EDIT3277": "[class.mem] Avoid 'shall have been defined'",
    "EDIT3278": "[rand.predef] use digit separators for long literals",
    "EDIT3279": "[rand.predef] Add digit separators to large numbers.",
    "EDIT3280": "[ranges] Add index entries.",
    "EDIT3281": "[dcl.fct] parameter-type-list should be non-hyphenated, and inconsistent use",
    "EDIT3282": "[intro.defs] Hyphenate parameter-type-list.",
    "EDIT3283": "[expr.const] drop unused declaration from integral constant expression example",
    "EDIT3284": "missing definition for \"comparison operator\"",
    "EDIT3285": "[std] Consistently use 'comparison function'",
    "EDIT3286": "[lib] Do not use macro \\libconcept in headings.",
    "EDIT3287": "Should [basic.lval] p9 note refer to [expr.type] not [expr.prop] ?",
    "EDIT3288": "[basic.lval] Adjust cross-reference in the note.",
    "EDIT3289": "[basic.def.odr] Variable templates are not excepted from ODR",
    "EDIT3290": "Possible contradiction between [basic.link]/9 and [base.scope.declarative]/4",
    "EDIT3291": "No indefinite articles before grammatical productions",
    "EDIT3292": "[alg.min.max] Correct errors in paragraph 22",
    "EDIT3293": "[set.symmetric.difference] Strike duplicated sentence from para 2",
    "EDIT3294": "[readable.traits] Add template argument list to constrained specialization",
    "EDIT3295": "[module.context]/7",
    "EDIT3296": "Update cross-references to refer to [*.pre]",
    "EDIT3297": "fix residual suggestions that overload resolution might not always happen",
    "EDIT3298": "[duration.cast, time.point.cast] Better subclause names",
    "EDIT3299": "[range.subrange.access] fix typo",
    "EDIT3300": "make-unsigned-like and make-unsigned-like-t are too similar",
    "EDIT3301": "[iterator.concept.winc] fix \"extended integral type\"",
    "EDIT3302": "[time.duration.cast,time.point.cast] Rename subclause to 'Conversions'.",
    "EDIT3303": "[std] Fix cross-references pointing to entire clauses",
    "EDIT3304": "[time.cal.ymd.overview] Typo fix: comma at end of sentence.",
    "EDIT3305": "[time.zone.db.tzdb] Add missing '\\pnum'.",
    "EDIT3306": "\"ios_base::failure\" vs. \"ios::failure\" vs. \"basic_ios::failure\"",
    "EDIT3307": "[std] Remove 'shall' from notes.",
    "EDIT3308": "[numerics,input.output] Consistently use ios_base::failure.",
    "EDIT3309": "[support.srcloc.class] Highlight unspecified properties",
    "EDIT3310": "[basic.fundamental]p4 misquotes C",
    "EDIT3311": "Cleanup make-unsigned-like",
    "EDIT3312": "[basic.scope.class] Reinstate a qualification that was lost in 0e26279b88c3b8b0a09babdeec8418d383f07419.",
    "EDIT3313": "Upload generated PDFs to GitHub releases from Travis",
    "EDIT3314": " [stmt.dcl] Vacuous initialization is defined in [basic.life]",
    "EDIT3315": "[basic.stc.dynamic.deallocation] Use of incorrect grammar",
    "EDIT3316": "[class.access] Allocation order of data members is described in [expr.rel]",
    "EDIT3317": "[alg.replace]p8 Ambiguous assignment",
    "EDIT3318": "Avoid tracking PDF result files in the main github draft repository",
    "EDIT3319": "assymetry in basic.lval.11 and intro intro.object.3",
    "EDIT3320": "[multimap.modifiers]/1 says Mandates instead of Constraints",
    "EDIT3321": "The standard and the DRY principle: header descriptions",
    "EDIT3322": "[multimap.modifiers] para 1 Mandates should be Constraints",
    "EDIT3323": "[xrefdelta] Fix typo for 'fmtflags'.",
    "EDIT3324": "[depr.impldec] Fix cross-reference for 'deleted function'.",
    "EDIT3325": "[diff.cpp17.lex] Add cross-references for 'requires' keyword.",
    "EDIT3326": "[thread.jthread.static] Repeat '[[nodiscard]]' from synopsis.",
    "EDIT3327": "[syncstream] Add default template parameters for basic_syncbuf and basic_osyncstream",
    "EDIT3328": "[time.syn] Unclear namespace prefix for literal operators",
    "EDIT3329": "[time.cal.month.members] Remove nested-name-specifier from declarations.",
    "EDIT3330": "[cmp.alg] Fix typo for 'ISO/IEC/IEEE 60559'.",
    "EDIT3331": "[module.reach] Clearly separate translation units in example.",
    "EDIT3332": "\"ios::failbit\" and \"ios::badbit\"(analogous to #3306)",
    "EDIT3333": "Weird sentence in [ostream]",
    "EDIT3334": "Fix declarations of literal operators for day and year",
    "EDIT3335": "[atomics.ref.int,atomics.types.int] Clarify notes on atomic/_ref<bool\u2026",
    "EDIT3336": "[iterator.requirements.general] Define 'reachable from' to avoid conf\u2026",
    "EDIT3337": "[iterators] Improve indexing of defined terms.",
    "EDIT3338": "[temp.param] Strike redundant normative sentence.",
    "EDIT3339": "[expr.prim.id.unqual] Excise redundant special case for the type",
    "EDIT3340": "[temp.constr.decl] Missing case when constraints are associated with \u2026",
    "EDIT3341": "[expr.type] Fix typo when using 'reference-related'.",
    "EDIT3342": "[basic.lookup.argdep] Add missing namespace qualification in example.",
    "EDIT3343": "[intro.structure] 'Note n to entry' is also a note.",
    "EDIT3344": "[defns.block.stmt] Add definition of block as a compound statement.",
    "EDIT3345": "[namespace.future,diff.cpp14.library] Properly refer to grammar 'digit'",
    "EDIT3346": "[dcl.inline] Function parameters shouldn't be inline",
    "EDIT3347": "[basic.def.odr] Wording could be simplified to \"partial specialization\"",
    "EDIT3348": "[istream.sentry] [ostream.sentry] Modernize and clean up.",
    "EDIT3349": "[lib] Review organization of standard library clauses",
    "EDIT3350": "[algorithms.parallel.defns] Rename to 'Preamble'",
    "EDIT3351": "[module.global,cpp.glob.frag] Rename labels to ...global.frag.",
    "EDIT3352": "[std] Replace \\rSec with plain \\Sec",
    "EDIT3353": "[dcl.list.init] Make spacing around & declarator operator locally con\u2026",
    "EDIT3354": "[lib] Refer to subclause being introduced rather than \"this subclause\"",
    "EDIT3355": "[range.filter.overview] Avoid double-negative",
    "EDIT3356": "[intro.compliance] The standard library also offers header units.",
    "EDIT3357": "[range.join.iterator] starts with a spurious paragraph number",
    "EDIT3358": "[range.join.iterator] Remove spurious paragraph number",
    "EDIT3359": "[range.join.iterator] Clarify if ... otherwise ladder.",
    "EDIT3360": "[basic.types]/2 replace macro constant with constexpr variable",
    "EDIT3361": "[class.copy.assign] Remove semicolon in 'of the form' phrase.",
    "EDIT3362": "[any.cons]p5 Strike otherwise to form a valid term",
    "EDIT3363": "[thread.jthread.class] Namespace not closed",
    "EDIT3364": "Provide a summary reference to where the 'Normative references' were mentioned inside the specification",
    "EDIT3365": "Make usage of memory_order enumeration values consistent",
    "EDIT3366": "Small improvements",
    "EDIT3367": "Make sure that the text can be searched regardless of hyphenation",
    "EDIT3368": "[util.smartpr.atomic] Move std::atomic<std::shared_ptr<T>> to [atomics]",
    "EDIT3369": "[iterator.concept.writable] Correct repeated word",
    "EDIT3370": "[std] Switch grammar to  \\sffamily \\itshape",
    "EDIT3371": "[class.copy.ctor] p10.1 CWG 2197: specify the argument used for overload resolution of subobject constructors",
    "EDIT3372": "[over.match.list] Acknowledge entry from 12.4.3.1.5 and fix presentation",
    "EDIT3373": "CWG 1924: Definition of \u201cliteral\u201d and kinds of literals ",
    "EDIT3374": "[feature] Add an option to browse the documentation as HTML pages on a local server",
    "EDIT3375": "[expr.const] p5 integrate construct_at/destroy_at wording into bullet 2 in p4",
    "EDIT3376": "[stmt] coroutines: \"contain\" is underspecified",
    "EDIT3377": "day's operator- : add missing close bracket",
    "EDIT3378": "[temp.pre] Move concept-definition grammar to [temp.concept]",
    "EDIT3379": "[stmt.return]/2 example doesn't have an explanation",
    "EDIT3380": "different words for specifying evaluation order and sequence before",
    "EDIT3381": "Simplify incoming initialization sequencing",
    "EDIT3382": "[specialized.destroy] add whitespace around binary operator",
    "EDIT3383": "Wrong xref in [conv.rank]",
    "EDIT3384": "[conv.rank] Fix cross reference to expr.arith.conv",
    "EDIT3385": "Double negative in [dcl.decl]/4",
    "EDIT3386": "awkward to specify whether two template-ids are the same",
    "EDIT3387": "Rename \"Expects:\"/\"Ensures:\" to \"Preconditions:\"/\"Postconditions:\"",
    "EDIT3388": "Restructure [utilities]",
    "EDIT3389": "[macros, structure.specifications] Rename \"Expects:\"/\"Ensures:\" to \"Preconditions:\"/\"Postconditions:\"",
    "EDIT3390": "[basic.lookup.argdep] Inline the definition of 'interface'.",
    "EDIT3391": "[util.smartpr.atomic] Moves subclause from \"Utilities\" to \"Atomics\".",
    "EDIT3392": "'voidify' is not indexed",
    "EDIT3393": "Fix GB079 10.01 Add example for private-module-fragment",
    "EDIT3394": "[2019-11 CWG Motion 1] P1969R0 Core Language Working Group \"ready\" Issues for the November, 2019 (Belfast) meeting",
    "EDIT3395": "[2019-11 CWG Motion 2] P1968R0 Core Language Working Group \"tentatively ready\" Issues for the November, 2019 (Belfast) meeting",
    "EDIT3396": "[2019-11 CWG Motion 3]  P1971R0 Core Language Changes for NB Comments at the November, 2019 (Belfast) meeting",
    "EDIT3397": "[2019-11 CWG Motion 4] P1972R0 US105 Check satisfaction of constraints for non-templates when forming pointer to function",
    "EDIT3398": "[2019-11 CWG Motion 5] P1975R0 Fixing the wording of parenthesized aggregate-initialization",
    "EDIT3399": "[2019-11 CWG Motion 6] P1874R1 Dynamic Initialization Order of Non-Local Variables in Modules",
    "EDIT3400": "[2019-11 CWG Motion 7]  P1946R0 Allow defaulting comparisons by value",
    "EDIT3401": "[2019-11 CWG Motion 8] P1907R1 Inconsistencies with non-type template parameters",
    "EDIT3402": "[2019-11 CWG Motion 9]  P1979R0 Resolution to US086",
    "EDIT3403": "[2019-11 CWG Motion 10] P1980R0 Drafting for CA096: Declaration matching for non-dependent requires-clauses",
    "EDIT3404": "[2019-11 LWG Motion 1] P1917R0 C++ Standard Library Issues to be moved in Belfast",
    "EDIT3405": "[2019-11 LWG Motion 2] P1855R0 Make <compare> freestanding",
    "EDIT3406": "[2019-11 LWG Motion 3]  P1690R1 Refinement Proposal for P0919 Heterogeneous lookup for unordered containers",
    "EDIT3407": "[2019-11 LWG Motion 4]  P1872R0 span should have size_type, not index_type",
    "EDIT3408": "[2019-11 LWG Motion 5]  P1965R0 Blanket Wording for Specifying \u201cHidden Friends\u201d",
    "EDIT3409": "[2019-11 LWG Motion 6] P1716R3 ranges compare algorithm are over-constrained",
    "EDIT3410": "[2019-11 LWG Motion 7] P1869R1 Rename condition_variable_any interruptible wait methods",
    "EDIT3411": "[2019-11 LWG Motion 8]  P1961R0 Harmonizing the definitions of total order for pointers",
    "EDIT3412": "[2019-11 LWG Motion 9]  P1878R1 Constraining Readable Types",
    "EDIT3413": "[2019-11 LWG Motion 10] P1871R1 Concept traits should be named after concepts",
    "EDIT3414": "[2019-11 LWG Motion 11] P1456R1 Move-only views",
    "EDIT3415": "[2019-11 LWG Motion 12] P1391R4 Range constructor for std::string_view",
    "EDIT3416": "[2019-11 LWG Motion 13]  P1394R4 Range constructor for std::span",
    "EDIT3417": "[2019-11 LWG Motion 15] P1862R1 Ranges adaptors for non-copyable iterators",
    "EDIT3418": "[2019-11 LWG Motion 16]  P1870R1 forwarding-range<T> is too subtle",
    "EDIT3419": "[2019-11 LWG Motion 17]  P1865R1 Add max() to latch and barrier",
    "EDIT3420": "[2019-11 LWG Motion 18] P1960R0 NB Comment Changes Reviewed by SG1",
    "EDIT3421": "[2019-11 LWG Motion 19] P1902R1 Missing feature-test macros 2017-2019",
    "EDIT3422": "[2019-11 LWG Motion 20] P0883R2 Fixing Atomic Initialization",
    "EDIT3423": "[2019-11 LWG Motion 21] P1959R0 Remove std::weak_equality and std::strong_equality",
    "EDIT3424": "[2019-11 LWG Motion 22] 1892R1 Extended locale-specific presentation specifiers for std::format",
    "EDIT3425": "[2019-11 LWG Motion 23] P1645R1 constexpr for <numeric> algorithms",
    "EDIT3426": "[2019-11 LWG Motoin 24]  P1718R2 Mandating the Standard Library: Clause 25 - Algorithms library",
    "EDIT3427": "[2019-11 LWG Motion 25]  P1719R2 Mandating the Standard Library: Clause 26 - Numerics library",
    "EDIT3428": "[2019-11 LWG Motion 26] P1686R2 Mandating the Standard Library: Clause 27 - Time library",
    "EDIT3429": "[2019-11 LWG Motion 27] P1720R2 Mandating the Standard Library: Clause 28 - Localization library",
    "EDIT3430": "[2019-11 LWG Motion 28] P1721R2 Mandating the Standard Library: Clause 29 - Input/Output library",
    "EDIT3431": "[2019-11 LWG Motion 29]  P1722R2 Mandating the Standard Library: Clause 30 - Regular Expression library",
    "EDIT3432": "[2019-11 LWG Motion 30]  P1723R2 Mandating the Standard Library: Clause 31 - Atomics library",
    "EDIT3433": "[2019-11 LWG Motion 31]  P1622R3 Mandating the Standard Library: Clause 32 - Thread support library",
    "EDIT3434": "[structure.specifications] Rename remaining \"Expects\"/\"Ensures\" to \"Preconditions\"/\"Postconditions\"",
    "EDIT3435": "[expr.sizeof] Replace inappropriate \\term{n} with $n$.",
    "EDIT3436": "P1972R0 US105 Check satisfaction of constraints for non-templates whe\u2026",
    "EDIT3437": "P1975R0 Fixing the wording of parenthesized aggregate-initialization",
    "EDIT3438": "P1874R1 Dynamic Initialization Order of Non-Local Variables in Modules",
    "EDIT3439": "P1946R0 Allow defaulting comparisons by value",
    "EDIT3440": "Injected-class-names: members or not?",
    "EDIT3441": " P1907R1 Inconsistencies with non-type template parameters",
    "EDIT3442": "P1979R0 Resolution to US086",
    "EDIT3443": "P1980R0 CA096: Declaration matching for non-dependent requires-clauses",
    "EDIT3444": "P1855R0 Make <compare> freestanding",
    "EDIT3445": "P1690R1 Refinement Proposal for P0919 Heterogeneous lookup for unordered containers",
    "EDIT3446": "P1872R0 span should have size_type, not index_type",
    "EDIT3447": "P1965R0 Blanket Wording for Specifying \"Hidden Friends\"",
    "EDIT3448": "P1869R1 Rename condition_variable_any interruptible wait methods",
    "EDIT3449": "P1961R0 Harmonizing the definitions of total order for pointers",
    "EDIT3450": "P1716R3 ranges compare algorithm are over-constrained",
    "EDIT3451": "P1878R1 Constraining Readable Types",
    "EDIT3452": "P1871R1 Concept traits should be named after concepts",
    "EDIT3453": "P1456R1 Move-only views",
    "EDIT3454": "P1391R4 Range constructor for std::string_view",
    "EDIT3455": "[basic.life] Use idiomatic wording.",
    "EDIT3456": "P1394R4 Range constructor for std::span",
    "EDIT3457": "[ranges] Parameter of range refinement should be named R",
    "EDIT3458": "P1718R2 Mandating the Standard Library: Clause 25 - Algorithms library",
    "EDIT3459": "P1862R1 Ranges adaptors for non-copyable iterators",
    "EDIT3460": "P1862R1 Ranges adaptors for non-copyable iterators",
    "EDIT3461": "[format.arg] Declaration mismatch",
    "EDIT3462": "[basic.def.odr] Sentence has two full stops (incorrect list item punctuation)",
    "EDIT3463": "P1719R2 Mandating the Standard Library: Clause 26 - Numerics library",
    "EDIT3464": "[basic.def.odr] Properly continue long-winded bulleted sentence.",
    "EDIT3465": "[format.arg] Fix parameter type for basic_format_arg constructor.",
    "EDIT3466": "P1720R2 Mandating the Standard Library: Clause 28 - Localization library",
    "EDIT3467": "P1721R2 Mandating the Standard Library: Clause 29 - Input/output library",
    "EDIT3468": "istream_view is a range factory, not a range adaptor",
    "EDIT3469": "[range.istream] Relocate under [range.factories]",
    "EDIT3470": "[defns.access] Clarify definition of \"access\".",
    "EDIT3471": "P1722R2 Mandating the Standard Library: Clause 30 - Regular Expression library",
    "EDIT3472": "Motions 2019 11 lwg 1: P1917R0 C++ Standard Library Issues to be moved in Belfast",
    "EDIT3473": "P1645R1 constexpr for <numeric> algorithms",
    "EDIT3474": "P1892R1 Extended locale-specific presentation specifiers for std::format",
    "EDIT3475": "P1959R0 Remove std::weak_equality and std::strong_equality",
    "EDIT3476": "LWG Motion 19: P1902R1 Missing feature-test macros 2017-2019",
    "EDIT3477": "LWG Motion 18: P1960R0 NB Comment Changes Reviewed by SG1",
    "EDIT3478": "LWG Motion 17: P1865R1 Add max() to latch and barrier",
    "EDIT3479": "[concept.regularinvocable] Adding examples for regular_invocable would be helpful",
    "EDIT3480": "Motions 2019 11 cwg 1: P1969R0 Core Language Working Group \"ready\" Issues",
    "EDIT3481": "Motions 2019 11 cwg 3: P1971R0 Core Language Changes for NB Comments",
    "EDIT3482": "[depr.relops] Move index entry here from [utility.syn]",
    "EDIT3483": "[concept.regularinvocable] move iref to a better place",
    "EDIT3484": "[concept.defaultconstructible] Rename default_constructible to default_initializable",
    "EDIT3485": "Motions 2019 11 cwg 2: P1968R0 Core Language Working Group \"tentatively ready\" Issues",
    "EDIT3486": "Motions 2019 11 lwg 16: P1870R1 forwarding-range<T> is too subtle",
    "EDIT3487": "Motions 2019 11 lwg 20: P0883R2 Fixing Atomic Initialization",
    "EDIT3488": "P1686R2 Mandating the Standard Library: Clause 27 - Time library",
    "EDIT3489": "P1723R2 Mandating the Standard Library: Clause 31 - Atomics library",
    "EDIT3490": "Strike mentions of undefined term \"automatic object\"",
    "EDIT3491": "P1622R3 Mandating the Standard Library: Clause 32 - Thread support library",
    "EDIT3492": "[dcl.init.list] Missing cv before T",
    "EDIT3493": "[time.cal.wdidx.nonmembers] Remove extra \"",
    "EDIT3494": "[lib] Use \\exposconcept and \\libconcept where applicable",
    "EDIT3495": "Prefix names of std lib concepts with \"std::\" in the core clauses",
    "EDIT3496": "[std] Mark all concepts with \\libconcept or \\exposconcept",
    "EDIT3497": "[conv.array] should be updated to use new array element terminology",
    "EDIT3498": "consider moving [temp.deduct.guide] under [temp.class]",
    "EDIT3499": "consistently use either \"valid\" or \"well-formed\" in library constraints",
    "EDIT3500": "[temp.deduct.guide] Move into [temp.class].",
    "EDIT3501": "[module.private.frag] Fix indentation in example",
    "EDIT3502": "clarify meaning of \"has an interface dependency [...] prior to X\"",
    "EDIT3503": "[temp.concept] Move grammar non-terminal concept-definition here.",
    "EDIT3504": "[any.cons,any.assign] Remove redundant postcondition for moves.",
    "EDIT3505": "[dcl.fct.def.coroutine] Use 'encloses' instead of imprecise 'contains'.",
    "EDIT3506": "Remove all \"Constructs a Foo by\" from Effects: clauses",
    "EDIT3507": "[lib] Remove 'Constructs an object of type ...' phrases",
    "EDIT3508": "[lib] Replace 'this subclause' with numbered subclause references.",
    "EDIT3509": "[temp.local] Change \"template-parameter\" to \"name of a template parameter\"",
    "EDIT3510": "need an equivalent of [fs.req.namespace] for chrono",
    "EDIT3511": "[complex.ops] Remove empty paragraph.",
    "EDIT3512": "[dcl.decl] Avoid double negative.",
    "EDIT3513": "[over.match.list] Acknowledge [over.ics.list] and clarify text.",
    "EDIT3514": "[ranges.syn, range.adaptors] Name view template parameter V for consistency",
    "EDIT3515": "don't use \"is called\" to introduce a definition",
    "EDIT3516": "move type-constraint grammar production into temp.param",
    "EDIT3517": "[container.requirements.general]/Table 71 LWG 3352: Remove the requirement for strong_equality",
    "EDIT3518": "[temp.param] Move grammar non-terminal 'type-constraint' here",
    "EDIT3519": "[class.member.lookup] lookups names in base class *subobjects*",
    "EDIT3520": "[language.support] Stable label not right-aligned",
    "EDIT3521": "[cstdint.syn.2] is not in line with intention",
    "EDIT3522": "[std] Multiple notes and examples within the same subclause shall be numbered",
    "EDIT3523": "Missing index entries for definitions of the terms \"satisfies\" and \"models\"",
    "EDIT3524": "[class.derived, class.member.lookup] Missing explicit reference to figure",
    "EDIT3525": "[std] There shall be no .1 subclause without a .2 sibling",
    "EDIT3526": "[class.derived,class.member.lookup] Reference figures in running text.",
    "EDIT3527": "[temp.constr.contr] Add index entry for 'satisfy'.",
    "EDIT3528": "[library.headers],[cstdint.syn.2], [cstdint.syn.2] is not in line with intention. Also fixes #3521",
    "EDIT3529": "Freestanding note in [basic.start.main.1] has no normative backing",
    "EDIT3530": "Inconsistent terminology and spelling regarding start, startup, and start-up",
    "EDIT3531": "[expr.comma] Remove \"temporary expression\"",
    "EDIT3532": "qualifies indirectly-readable-impl's use of iter_move",
    "EDIT3533": "[time.syn] Move `treat_as_floating_point_v` to be right after `treat_as_floating_point` in the `<chrono>` synopsis.",
    "EDIT3534": "[span.cons] thinks that to_address() can throw, but it can't",
    "EDIT3535": "[over.match.funcs] Correct comment in example.",
    "EDIT3536": "[functional.syn] Move is_bind_expression_v & is_placeholder_v to be right after is_bind_expression & is_placeholder in the <functional> synopsis",
    "EDIT3537": "[ptr.launder] Use consistent style for ptr-operators in text",
    "EDIT3538": "[dcl.decl] Change \"templated function\" to instead use \"templated entity\"",
    "EDIT3539": "[std] Harmonize index entries for list items",
    "EDIT3540": "Missing paragraph number for Preconditions element [span.cons] p7/8",
    "EDIT3541": "[cmp.categories.pre] nonequal and nonequivalent are non-used",
    "EDIT3542": "[cmp.categories.pre] Remove unused enumerators",
    "EDIT3543": "[namespace.udecl]/14 clarify wording for comparisons between templates and non-templates",
    "EDIT3544": "Examples in [cpp.scope]p3 onwards are misplaced",
    "EDIT3545": "[cpp.replace] Distribute examples from [cpp.scope]",
    "EDIT3546": "[span.cons] to_address cannot throw",
    "EDIT3547": "Inconsistent indexing of Cpp17 requirements",
    "EDIT3548": "[lib] Put \\constraints on a line of its own.",
    "EDIT3549": "[alg.partitions] Add missing \\pnum.",
    "EDIT3550": "[thread.condvarany.intwait] missing wait_for() change from P1869R1",
    "EDIT3551": "[string.view.synop,span.syn,span.cons] (enable_)?safe_range are defin\u2026",
    "EDIT3552": "[string.view.synop][span.syn] Declaration for primary template and namespace of enable_safe_range",
    "EDIT3553": "[basic.atomics] Use math mode for memory model placeholders.",
    "EDIT3554": "[std] Use $E$ as expression placeholder.",
    "EDIT3555": "[lib] Consistently use ios_base::failbit and ios_base::badbit.",
    "EDIT3556": "[ranges] Integrate adaptor subclauses into overviews.",
    "EDIT3557": "[std] Harmonize comments indicating errors.",
    "EDIT3558": "[std] Punctuation after \"OK\" example comments",
    "EDIT3559": "[ranges] Mark exposition-only names as kebab-case.",
    "EDIT3560": "[range.istream] s/object_/value_/",
    "EDIT3561": "[range.adaptors] Base vs base-t",
    "EDIT3562": "[ranges] Missed kebab-case markings for exposition-only names.",
    "EDIT3563": "[range.refinements] Simplify viewable_range",
    "EDIT3564": "[range.range] LWG 3361: Misleading description of safe_range",
    "EDIT3565": "[range.prim.size] rewords p1.3 to make it easier to parse",
    "EDIT3566": "[stmt.cont] formatting broken",
    "EDIT3567": "[stmt.cont] Fix formatting.",
    "EDIT3568": "[ranges] Indented \\end{codeblock} causes trailing empty line",
    "EDIT3569": "[defns.signature] functions never have trailing requires-clauses",
    "EDIT3570": "[ranges] Do not indent codeblocks",
    "EDIT3571": "[temp.inst] Define the process of instantiation",
    "EDIT3572": "[ranges] Do not indent \\begin/end{codeblock}.",
    "EDIT3573": "[class.static.data] Confusingly contains \"contains\"",
    "EDIT3574": "Replace #include by import-declaration",
    "EDIT3575": "Connect pp-import to the preprocessor grammar",
    "EDIT3576": "[meta.rel] Wording for is_\u00adnothrow_\u00adconvertible might not cleary enough to indicate the destruction",
    "EDIT3577": "[view.interface] Inconsistencies in the draft",
    "EDIT3578": "[basic.scope.pdecl]/1 Example is outdated",
    "EDIT3579": "[dcl.fct]/7 [class.this]/3 cv-qualified function types",
    "EDIT3580": "[basic.scope.pdecl] Fix example of self-referential initialization.",
    "EDIT3581": "[class.this] Member functions are not cv-qualified. ",
    "EDIT3582": "[class.static.data] Cleanup description for local/unnamed classes.",
    "EDIT3583": "[thread.condvarany.intwait] Fix invocation of wait_until.",
    "EDIT3584": "[index] Harmonize indexing for Cpp17 concepts.",
    "EDIT3585": "[temp.type,temp.over.link] Define and use 'same template-id'.",
    "EDIT3586": "[expr.compound] Use sequencing on expressions",
    "EDIT3587": "[expr.call] Clarify result of function call vs. return operand.",
    "EDIT3588": "[std] Consistently use 'overload set'.",
    "EDIT3589": "[stringbuf] Use phrases from [bitmask.types].",
    "EDIT3590": "[expr.rel] Simplify pointer comparison wording",
    "EDIT3591": "[over.built] Avoid confusing term 'promoted arithmetic type'.",
    "EDIT3592": "Allow 'listings' package v1.8c",
    "EDIT3593": "[iterator.requirements.general] Consistently index iterator terms.",
    "EDIT3594": "[range.sized] Fix and improve wording",
    "EDIT3595": "[iterator.concept.sizedsentinel] Improve wording",
    "EDIT3596": "[range.subrange] Unaligned comments",
    "EDIT3597": "[range.prim.size] When is ranges::size ill-formed?",
    "EDIT3598": "[range.common.view] Declare size() last like in the other views",
    "EDIT3599": "Windows instructions",
    "EDIT3600": "Basic getting started for Windows",
    "EDIT3601": "Treatment varies, not vary",
    "EDIT3602": "[range.subrange] Align comments.",
    "EDIT3603": "[iterator.requirements.general,range.counted] Rework notation for cou\u2026",
    "EDIT3604": "[range.take.while] Add missing template parameter and xref",
    "EDIT3605": "[range.istream, range.take.while.sentinel] Initialize member pointer \u2026",
    "EDIT3606": "[rand.dist.bern.negbin] negative_binomial_distribution has unclear specification for p == 1",
    "EDIT3607": "[expr.ref]/(6.3.2) function type spelling doesn't match [dcl.fct]/1",
    "EDIT3608": "[over.oper] falsely claims operator= can be overloaded for enumerations",
    "EDIT3609": "[range.elements.iterator] Add missing \\expos",
    "EDIT3610": "[range.join.iterator] Rename ref-is-glvalue to account for rvalues",
    "EDIT3611": "[locale.codecvt] Unicode is not a character encoding",
    "EDIT3612": "consider reordering Postconditions: library element after Throws:",
    "EDIT3613": "[ptr.launder] Note and Example became incorrect after RU007/US042 NB comments resolution",
    "EDIT3614": "[expr.add]/6 unfortunate example in Note",
    "EDIT3615": "[format.arg]/5 \"otherwise\" all at the end",
    "EDIT3616": "[thread.sema] PascalCase for template parameters",
    "EDIT3617": "[thread.lock.unique.locking]/19",
    "EDIT3618": "[expr.prim.lambda.closure]/3 Fix note: a generic lambda has a function call operator template, not a function call operator.",
    "EDIT3619": "[thread.lock.unique.locking] Fix typo in try_lock_for.",
    "EDIT3620": "[format.arg] Move 'otherwise' to the start of the bullets.",
    "EDIT3621": "[locale.codecvt] Do not claim that 'Unicode' is a character encoding.",
    "EDIT3622": "[over.oper] Clarify that operator= cannot be overloaded for enumerati\u2026",
    "EDIT3623": "[ptr.launder] Fix note and example for std::launder.",
    "EDIT3624": "[dcl.fct,expr.ref] Fix description of class member access expressions",
    "EDIT3625": "[over.oper] Clarify handling of individual operators.",
    "EDIT3626": "[cmath.syn] Turn a consequence into a note.",
    "EDIT3627": "[dcl.constexpr]/8.1 should be clearer that declaring a function constexpr can affect its return value if it invokes is_constant_evaluated",
    "EDIT3628": "[dcl.attr] Introduce 'Recommended practice' paragraphs.",
    "EDIT3629": "[func.wrap.badcall] Add missing itemdecl for what()",
    "EDIT3630": "[basic.lookup] Grammar",
    "EDIT3631": "[std] Enforce comment alignment in 'codeblocktu' environments.",
    "EDIT3632": "[span.overview] typo: \"tmeplate\"",
    "EDIT3633": "[span.overview] Correct typo",
    "EDIT3634": "[basic.compound] [expr.add] How to get a pointer past the end?",
    "EDIT3635": "[temp.dep.type] Simplify the meaning of \"template argument list of the primary template\"",
    "EDIT3636": "replace \"character literal\" with references to grammar term character-literal",
    "EDIT3637": "Eliminate redundant use of typename throughout library",
    "EDIT3638": "[except.spec]p12 Example refers to undefined symbol Y",
    "EDIT3639": "[except.spec] Avoid reference to undeclared identifier in example.",
    "EDIT3640": "[basic.fundamental] Clarify that in C, padding bits may cause traps.",
    "EDIT3641": "[dcl.constexpr] Add a note explaining the result of a constexpr funct\u2026",
    "EDIT3642": "Consistency for template parameter names in standard library",
    "EDIT3643": "Fix example in [temp.constr.op]/p4",
    "EDIT3644": "[optional.optional, optional.ctor] Fix constexpr/explicit position",
    "EDIT3645": "[lex.operators] Add `co_await` to the list",
    "EDIT3646": "[expr.prim.req.nested] Add missing semicolon to example",
    "EDIT3647": "[class] Returns for constructors and destructors should not have operands",
    "EDIT3648": "Use \"requirement\" in grammar font in expr.prim.req",
    "EDIT3649": "Sub-bullets for value-initialization.",
    "EDIT3650": "[lex.icon,lex.fcon] Rework description to avoid redundancies.",
    "EDIT3651": "[temp.constr.normal] Extraneous parentheses on concept use",
    "EDIT3652": "[temp.constr.normal] Confusing identifier used in explanation",
    "EDIT3653": "[class.mem] Explicit specializations within classes",
    "EDIT3654": "[class.conv.fct] Add \\tcode to void",
    "EDIT3655": "[extern.types] strike footnote listing C stdlib types",
    "EDIT3656": "[range.join.sentinel], [range.split.view] fix typos",
    "EDIT3657": "Cross reference to temp.over.link is misleading for abbreviated function template wording",
    "EDIT3658": "[gram] type-name is not formally defined",
    "EDIT3659": "[class.ctor/dtor] consteval, constructors, and destructors",
    "EDIT3660": "Consistent cv-qualification notation",
    "EDIT3661": "[range.istream.iterator] Fix typo",
    "EDIT3662": "[diff.cpp17.iterators] Added compatibility note on iterator_traits",
    "EDIT3663": "[class.mfct]p2's list of keywords that make a function inline forgets consteval",
    "EDIT3664": "consider moving description of Requires: element and [res.on.required]p1 to Annex D",
    "EDIT3665": "[contents]/1 suggests that declval is defined",
    "EDIT3666": "take_while_view::sentinel declaration is missing the Pred parameter",
    "EDIT3667": "[class.access.base] Add missing formatting to an access specifier",
    "EDIT3668": "Produce foreword with list of changes for C++20",
    "EDIT3669": "[basic.pre] Improve consistency in list",
    "EDIT3670": "[cmp, comparisons] Move description of compare_three_way.",
    "EDIT3671": "Fix definition of has-tuple-element",
    "EDIT3672": "[class.access] Eliminate the friend case for protected member access from derived class",
    "EDIT3673": "\"ill-formed with no diagnostic required\" is odd",
    "EDIT3674": "[over.oper]p3 should be a note",
    "EDIT3675": "[conv.rank] Change \"size\" to \"width\" in conversion rank relation",
    "EDIT3676": "p0593r6's `#include` is missing a filename",
    "EDIT3677": "Check element order programmatically and presubmit",
    "EDIT3678": "[stmt.return.coroutine] Use notion of \"enclosing\" for \"return\"",
    "EDIT3679": "inconsistent indenting for multi-lined requires clauses",
    "EDIT3680": "Inconsistent use of \\defexposconcept v. \\exposconcept v. \\placeholder for \\expos concepts",
    "EDIT3681": "Content of the Forward would be helpful for the DIS",
    "EDIT3682": "[functional.syn] Correct text in cross-reference comment",
    "EDIT3683": "Consider moving \"in addition ... included\" content into synopses, deleting prose text",
    "EDIT3684": "Consider updating \"Specification-Style-Guidelines\"",
    "EDIT3685": "[2020-02 CWG Poll 1] P2103R0 (Core Language Changes for NB Comments at the February, 2020 (Prague) meeting",
    "EDIT3686": "[2020-02 CWG Poll 2] P1779R3 ABI isolation for member functions",
    "EDIT3687": "[2020-02 CWG Poll 3] P1857R3 Modules Dependency Discovery",
    "EDIT3688": "[2020-02 CWG Poll 4] P0593R6 Implicit creation of objects for low-level object manipulation",
    "EDIT3689": "[2020-02 CWG Poll 5] P1957R2 Converting from T* to bool should be considered narrowing (re: US 212)",
    "EDIT3690": "[2020-02 CWG Poll 6] P2104R0 Disallow changing concept values",
    "EDIT3691": "[2020-02 CWG Poll 7] P2107R0 Core Issue 2436: US064 Copy semantics of coroutine parameters",
    "EDIT3692": "[2020-02 CWG Poll 8] P2092R0 Disambiguating Nested-Requirements",
    "EDIT3693": "[2020-02 CWG Poll 9]  P2108R0 Core Language Working Group \"ready\" Issues for the February, 2020 (Prague) meeting",
    "EDIT3694": "[2020-02 CWG Poll 10] P2109R0 US084: Disallow \"export import foo\" outside of module interface",
    "EDIT3695": "[2020-02 CWG Poll 11] P2082R1 Fixing CTAD for aggregates",
    "EDIT3696": "[2020-02 CWG Poll 12] P2113R0 Proposed resolution for 2019 comment CA 112",
    "EDIT3697": "[2020-02 CWG Poll 13] P2115R0 US069: Merging of multiple definitions for unnamed unscoped enumerations",
    "EDIT3698": "[2020-02 CWG Poll 14] P1815R2 Translation-unit-local entities",
    "EDIT3699": "[2020-02 CWG Poll 15] P2095R0 Resolve lambda init-capture pack grammar (CWG2378)",
    "EDIT3700": "[2020-02 CWG Poll 16] P2002R1 Defaulted comparison specification cleanups",
    "EDIT3701": "[2020-02 CWG Poll 17] P2085R0 Consistent defaulted comparisons",
    "EDIT3702": "[2020-02 CWG Poll 18] P1908R1 Reserving Attribute Namespaces for Future Use",
    "EDIT3703": "[2020-02 CWG Poll 19] P1937R2 Fixing inconsistencies between constexpr and consteval functions",
    "EDIT3704": "[2020-02 LWG Poll 2] P2051R0 C++ Standard Library Issues to be moved in Prague",
    "EDIT3705": "[2020-02 LWG Poll 3] P2117R0 C++ Standard Library Issues Resolved Directly In Prague",
    "EDIT3706": "[2020-02 LWG Poll 4] P2045R1 Missing Mandates for the standard library",
    "EDIT3707": "[2020-02 LWG Poll 5] P1460R1 Mandating the Standard Library: Clause 20 - Utilities library",
    "EDIT3708": "[2020-02 LWG Poll 6] P1963R0 Fixing US 313",
    "EDIT3709": "[2020-02 LWG Poll 7] P1983R0 Wording for GB301, US296, US292, US291, and US283",
    "EDIT3710": "[2020-02 LWG Poll 8] P1981R0 Rename leap to leap_second",
    "EDIT3711": "[2020-02 LWG Poll 9] P1982R0 Rename link to time_zone_link",
    "EDIT3712": "[2020-02 LWG Poll 10] P2101R0 'Models' subsumes 'satisfies' (Wording for US298 and US300)",
    "EDIT3713": "[2020-02 LWG Poll 11] P1115R3 Improving the Return Value of Erase-Like Algorithms II: Free erase/erase if",
    "EDIT3714": "[2020-02 LWG Poll 12] P2102R0 Make 'implicit expression variations' more explicit (Wording for US185)",
    "EDIT3715": "[2020-02 LWG Poll 13] P1994R1 elements_view needs its own sentinel",
    "EDIT3716": "[2020-02 LWG Poll 14] P1868R2 width: clarifying units of width and precision in std::format",
    "EDIT3717": "[2020-02 LWG Poll 15] P1956R1 On the names of low-level bit manipulation functions",
    "EDIT3718": "[2020-02 LWG Poll 16] P1976R2 Fixed-size span construction from dynamic range",
    "EDIT3719": "[2020-02 LWG Poll 17] P1964R2 Wording for boolean-testable",
    "EDIT3720": "[2020-02 LWG Poll 18] P2091R0 Issues with range access CPOs",
    "EDIT3721": "[2020-02 LWG Poll 19] P0586R2 Safe integral comparisons",
    "EDIT3722": "[2020-02 LWG Poll 20] P1831R1 (Deprecating volatile: library",
    "EDIT3723": "[2020-02 LWG Poll 21] P1973R1 Rename \"_default_init\" Functions, Rev1",
    "EDIT3724": "[2020-02 LWG Poll 22] P1243R4 Rangify New Algorithms",
    "EDIT3725": "[2020-02 LWG Poll 23] P2106R0 Alternative wording for GB315 and GB316",
    "EDIT3726": "[2020-02 LWG Poll 24] P1739R4 Avoid template bloat for safe_ranges in combination with \"subrange-y\" view adaptors",
    "EDIT3727": "[2020-02 LWG Poll 25] P2116R0 Remove tuple-like protocol support from fixed-extent span",
    "EDIT3728": "[2020-02 LWG Poll 26] P1970R2 Consistency for size() functions: Add ranges::ssize",
    "EDIT3729": "P1957R2 Converting from T* to bool should be considered narrowing",
    "EDIT3730": "[atomic] Minor corrections to atomic index",
    "EDIT3731": "Library index is missing many enumerators",
    "EDIT3732": "P2104R0 Disallow changing concept values",
    "EDIT3733": "P2092R0 Disambiguating nested requirements",
    "EDIT3734": "P2109R0 Disallow \"export import foo\" outside of module interface",
    "EDIT3735": "[dcl.meaning] General wording cleanup",
    "EDIT3736": "[basic.type.qualifier] Remove redundant wording",
    "EDIT3737": "P2082R1 Fixing CTAD for aggregates",
    "EDIT3738": "P2113R0 Proposed resolution for 2019 comment CA 112",
    "EDIT3739": "P2115R0 US069: Merging of multiple definitions for unnamed unscoped e\u2026",
    "EDIT3740": "P1815R2 Translation-unit-local entities",
    "EDIT3741": "P1908R1 Reserving attribute namespaces for future use",
    "EDIT3742": "bad example in P0593R6 [diff.cpp17]",
    "EDIT3743": "[basic.life]p5 is missing a case where the program can explicitly end the lifetime of an object after P0593R6",
    "EDIT3744": "[swappable.requirements] Add missing \\pnum to example",
    "EDIT3745": "P2107R0 Core Issue 2436: US064 Copy semantics of coroutine parameters",
    "EDIT3746": "CWG Poll 9: P2108R0 Core Language Working Group \"ready\" Issues for the February, 2020 (Prague) meeting",
    "EDIT3747": "P2095R0 Resolve lambda init-capture pack grammar (CWG2378)",
    "EDIT3748": "P2051R0 C++ Standard Library Issues to be moved in Prague",
    "EDIT3749": "LWG Poll 3: P2117R0 C++ Standard Library Issues Resolved Directly In Prague",
    "EDIT3750": "Fix #3666, plus some drive-by edits",
    "EDIT3751": "P2116R0 Remove tuple-like protocol support from fixed-extent span",
    "EDIT3752": "P2091R0 Issues with range access CPOs",
    "EDIT3753": "P1868R2 width: clarifying units of width and precision in std::format",
    "EDIT3754": "P1994R1 elements_view needs its own sentinel",
    "EDIT3755": "LWG Poll 10: P2101R0 'Models' subsumes 'satisfies' (Wording for US298 and US300)",
    "EDIT3756": "LWG Poll 7: P1983R0 Wording for GB301, US296, US292, US291, and US283",
    "EDIT3757": "CWG Poll 19: P1937R2 Fixing inconsistencies between constexpr and consteval functions",
    "EDIT3758": "CWG Poll 2: P1779R3 ABI isolation for member functions",
    "EDIT3759": "Add article to bullet start...",
    "EDIT3760": "LWG Poll 8: P1981R0 Rename leap to leap_second",
    "EDIT3761": "LWG Poll 9: P1982R0 Rename link to time_zone_link",
    "EDIT3762": "Cleanup for [2020-02 LWG Poll 6] P1963R0 Fixing US 313",
    "EDIT3763": "LWG Poll 6: P1963R0 Fixing US 313",
    "EDIT3764": "CWG Poll 3: P1857R3 Modules Dependency Discovery",
    "EDIT3765": "CWG Poll 4: P0593R6 Implicit creation of objects for low-level object manipulation",
    "EDIT3766": "Fixes for 2020-02 CWG Poll 4 (P0593R6)",
    "EDIT3767": "CWG Poll 16: P2002R1 Defaulted comparison specification cleanups",
    "EDIT3768": "CWG Poll 17: P2085R0 Consistent defaulted comparisons",
    "EDIT3769": "LWG Poll 12: P2102R0 Make 'implicit expression variations' more explicit",
    "EDIT3770": "LWG Poll 21: P1973R1 Rename \"_default_init\" Functions, Rev1",
    "EDIT3771": "LWG Poll 26: P1970R2 Consistency for size() functions: Add ranges::ssize",
    "EDIT3772": "LWG Poll 16: P1976R2 Fixed-size span construction from dynamic range",
    "EDIT3773": "[atomic] Apply conventional order to members of atomic smart pointers",
    "EDIT3774": "LWG Poll 23: P2106R0 Alternative wording for GB315 and GB316",
    "EDIT3775": "Simplify build process for the standard draft",
    "EDIT3776": "LWG Poll 20: P1831R1 Deprecating volatile: library",
    "EDIT3777": "LWG Poll 24: P1739R4 Avoid template bloat for safe_ranges in combination with \"sub\u2026",
    "EDIT3778": "[span.overview] Deduction guide's End can also be the size_type",
    "EDIT3779": "LWG Poll 19: P0586R2 Safe integral comparisons",
    "EDIT3780": "LWG Poll 15: P1956R1 On the names of low-level bit manipulation functions",
    "EDIT3781": "LWG Poll 4: P2045R1 Missing Mandates for the standard library",
    "EDIT3782": "CWG Poll 1: P2103R0 (Core Language Changes for NB Comments at the February, 2020 (Prague) meeting",
    "EDIT3783": "LWG Poll 22: P1243R4 Rangify New Algorithms",
    "EDIT3784": "[ostream] Fix poor grammar to be consistent with [istream]",
    "EDIT3785": "[alg.clamp] Reword for clarity",
    "EDIT3786": "LWG Poll 17: P1964R2 Wording for boolean-testable",
    "EDIT3787": "LWG Poll 11: P1115R3 Improving the Return Value of Erase-Like Algorithms II: Free \u2026",
    "EDIT3788": "LWG Poll 5: P1460R1 Mandating the Standard Library: Clause 20 - Utilities library",
    "EDIT3789": "[concept.swappable,iterator.cust] Fix phrasing 'with no diagnostic required'",
    "EDIT3790": "[check] Flag non-ASCII characters in source",
    "EDIT3791": "[dcl.array] Potentially ambiguous specification of array contents",
    "EDIT3792": "[expr.const]p14 example incorrect after P1937R2",
    "EDIT3793": "[range.prim.cdata] Properly ranges::-qualify cdata",
    "EDIT3794": "Replace non-code \"C++\" with \"\\Cpp{}\"",
    "EDIT3795": "Fixes for 2020-02 LWG Poll 5",
    "EDIT3796": "Fixes for 2020-02 CWG Poll 1",
    "EDIT3797": "[atomics.nonmembers,diff.cpp17.dcl.dcl,library,version.syn] Replace non-code \"C++\" with \"\\Cpp{}\"",
    "EDIT3798": "Calls to swap in the library don't properly describe context",
    "EDIT3799": "Cross-reference fixes",
    "EDIT3800": "Add missing @s",
    "EDIT3801": "Fixes for 2020-02 CWG Poll 3",
    "EDIT3802": "[range.access.begin] P2091R0's change to para 1 is ambiguous",
    "EDIT3803": "Replace `SIZE_MAX` with `numeric_limits` in [allocator.members]",
    "EDIT3804": "redundant wording after P2109R0",
    "EDIT3805": "[allocator.members] Replace SIZE_MAX with numeric_limits<size_t>::max()",
    "EDIT3806": "Fix for US 115 to avoid use of nouns with missing articles",
    "EDIT3807": "Restructure CA 107 functionally equivalent IFNDR note",
    "EDIT3808": "[any.synop,any.class,any.nonmembers] Format pack conventionally",
    "EDIT3809": "[lib] Format true/false in code font conventionally",
    "EDIT3810": "fix several bugs in the LWG3262 wording",
    "EDIT3811": "[expr.call] Incorrect reference to \"this parameter\"",
    "EDIT3812": "Possibly outdated \"Getting Started on Debian-based Systems\"",
    "EDIT3813": "Update Getting Started on Debian-based Systems",
    "EDIT3814": "[utility.syn] Index in-place construction types",
    "EDIT3815": "[class.friend] Add cross-reference for the namespace of the friend",
    "EDIT3816": "Remove [atomcis.types.operations]p1",
    "EDIT3817": "decide whether to bump feature test macro version for P1973R1",
    "EDIT3818": "[class.copy.elision] Specification of when implicit move occurs is potentially confusing",
    "EDIT3819": "[expr.sizeof] Incorrect use of \\term",
    "EDIT3820": "[rand.util.canonical] Convert normative duplication into a note.",
    "EDIT3821": "[time.format] Add/fix region-index entry for \"format\"",
    "EDIT3822": "[temp.explicit] Add missing comma",
    "EDIT3823": "[conv.ptr] Fix unclear specification of derived-to-base conversions for null pointers",
    "EDIT3824": "Consistent null pointer value usage",
    "EDIT3825": "[front.insert.iterator] Correct mis-incorporation of P0896R4",
    "EDIT3826": "[expr.ref] clarify access of non-static data members",
    "EDIT3827": "[basic], [expr] Fix incorrect cross-references to [conv.ptr] for null pointer values",
    "EDIT3828": "Use consistent terminology when referring to what a pointer to member points to",
    "EDIT3829": "[iterator.concept.winc,range.iota.view] is-integer-like is not a concept",
    "EDIT3830": "[algorithms] Rename concept 'writable' to 'indirectly_writable'.",
    "EDIT3831": "In the index, properly sort terms starting with two underscores",
    "EDIT3832": "[atomics] Consistent use of enum class memory_order",
    "EDIT3833": "[memory.syn] Index the pointer_safety enum class",
    "EDIT3834": "[concept.constructible] is-default-initializable is not a concept",
    "EDIT3835": "The iterator \"old\" concepts (Cpp17Requirements) are not indexed",
    "EDIT3836": "Fix incorrect references to past the end pointers",
    "EDIT3837": "Remove definition in note",
    "EDIT3838": "[algorithms.general] Add [specialized.algorithms] to summary table.",
    "EDIT3839": "[module.interface] Remove redundant bullet for exported declaration.",
    "EDIT3840": "[module.interface] Fix typo.",
    "EDIT3841": "[over.oper] Make statement about non-overloadable operators a note.",
    "EDIT3842": "[class] [over] Redundant specification of ignoring move special members",
    "EDIT3843": "[class.mfct] consteval member functions are also inline.",
    "EDIT3844": "[lex.ccon,lex.string] Remove redundant repetition of the grammar.",
    "EDIT3845": "[support.dynamic] Improve cross-referencing for dynamic memory subcla\u2026",
    "EDIT3846": "[time.zone.zonedtime.overview] Fix typo",
    "EDIT3847": "Scope of [range.split.outer] p1 is unclear",
    "EDIT3848": "[range.split] confuses current and current_",
    "EDIT3849": "[range.split.outer], [range.split.inner] Fix misuses of current_",
    "EDIT3850": "[expr.rel] Unclear how function pointers are compared",
    "EDIT3851": "[range.split.outer,range.split.inner] \"current\" placeholder vs. current_ exposition-only member",
    "EDIT3852": "[span.deduct] Rename template parameter 'End' to 'EndOrSize'",
    "EDIT3853": "[contents] Some standard library functions are not defined.",
    "EDIT3854": "[res.on.requires] Move description of 'Requires' element to Annex D",
    "EDIT3855": "[depr.conversions] Rename snake_case template parameters to CamelCase.",
    "EDIT3856": "[range.access] Introduce 'reified object' to simplify the descriptions.",
    "EDIT3857": "[range.take.while.sentinel,range.elements.iterator] Rename exposition\u2026",
    "EDIT3858": "[support] Renamed from [language.support].",
    "EDIT3859": "[basic,support] Correctly use 'startup' and 'start of program'",
    "EDIT3860": "[expr.prim.req,temp.concept] Add std:: qualification for library conc\u2026",
    "EDIT3861": "[module.unit] module-declarations no longer contain \\tcode{export}",
    "EDIT3862": "[support.types.byteops]/6",
    "EDIT3863": "[support.types.byteops] Fix misapplication of LWG2950",
    "EDIT3864": "[depr.atomics] Use enum class memory_order",
    "EDIT3865": "[support.types.byteops] remove redundant static_cast to unsigned char",
    "EDIT3866": "[fs.path.modifiers] Remove \\tcode around cross reference",
    "EDIT3867": "[alg.replace] Clarify which value gets assigned depending on E.",
    "EDIT3868": "[allocator.requirements] Fix punctuation in tables.",
    "EDIT3869": "[alg.clamp] Reword for clarity",
    "EDIT3870": "[ranges] has many concepts used without \\libconcept",
    "EDIT3871": "[over.best.ics] Remove redundant sub-bullet",
    "EDIT3872": "[temp.explicit] Fix unclear reference to elaborated-type-specifier",
    "EDIT3873": "[index] Use LaTeX package 'imakeidx' to allow for more indices.",
    "EDIT3874": "[filesystems] Fix \"Filesystem library edits/issues\"",
    "EDIT3875": "Inconsistency between the Note in [cpp.pre]/1 and the last sentence in [cpp.replace]/12 ",
    "EDIT3876": "[index] Add index of exposition-only library names.",
    "EDIT3877": "[dcl.dcl] Improve note regarding nodeclspec-function-declarations",
    "EDIT3878": "clarify whether [over.built] and surrogate candidates are functions",
    "EDIT3879": "Disable \\requires",
    "EDIT3880": "\\defnc and \\defna",
    "EDIT3881": "Nicer diff support",
    "EDIT3882": "[temp.names] Do not use \"template-name\" for \"name referring to template\"",
    "EDIT3883": "Motion corrections",
    "EDIT3884": "Two index entries for \"NTBS\" don't use \\ntbs",
    "EDIT3885": "[basic.namespace] Definition in note should be grammar term",
    "EDIT3886": "Non-normative cleanup",
    "EDIT3887": "Normative cleanup",
    "EDIT3888": "[version.syn] Fix mis-ordering",
    "EDIT3889": "[stmt.block] Informal tone used to describe blocks which is inconsistent with other wording",
    "EDIT3890": "[basic.types] Change redundant normative wording into note",
    "EDIT3891": "[dcl.init] Remove redundant specification of when value-initialization occurs",
    "EDIT3892": "Unclear time zone placeholders",
    "EDIT3893": "[lex.ccon] grammar falls off bottom of page",
    "EDIT3894": "[dcl.init, dcl.stc] Move specification as to where extern is allowed into [dcl.stc]",
    "EDIT3895": "Add Foreword",
    "EDIT3896": "ADL for cv T or T&",
    "EDIT3897": "More review changes",
    "EDIT3898": "[over.match.class.deduct] Wording does not seem to match intention",
    "EDIT3899": "[expr.sub] Really deprecate comma in braces",
    "EDIT3900": "[temp.deduct.call] Clear up wording regarding function parameter packs appearing in non-deduced contexts",
    "EDIT3901": "[dcl.stc] Define mutable subobject and make use of keyword consistent",
    "EDIT3902": "[alg.clamp] Add missing calls to invoke",
    "EDIT3903": "Library clauses misuse \"an instance of\"",
    "EDIT3904": "More cv-qualification fixes",
    "EDIT3905": "[iterator.synopsis] Cleanups",
    "EDIT3906": "Strike surviving mentions of \"storage class\" (outside of stable names and grammar)",
    "EDIT3907": "[class.union.anon] Turn redundant wording into a note",
    "EDIT3908": "Correctly annotate keywords",
    "EDIT3909": "Clean up of discarded-value expressions",
    "EDIT3910": "Simplify reachability definition",
    "EDIT3911": "[std] Use \\libmember and \\libglobal everywhere",
    "EDIT3912": "[res.on.requirements] Not sufficiently clear on transitiveness and disjunctions",
    "EDIT3913": "[iter.concepts.general] example could be simplified slightly",
    "EDIT3914": "__STDC_\u00adHOSTED__ deals with freestanding, but does not mention it",
    "EDIT3915": "One more review fix",
    "EDIT3916": "[over.match.class.deduct] Fix self-referential cross-references",
    "EDIT3917": "[temp.param] Remove definitions in footnote and fix wording referring to non-type template parameters",
    "EDIT3918": "[class.temporary, expr, dcl.ref] Fix incorrect cross-refs to [dcl.type.decltype]",
    "EDIT3919": "[expr.const] Change \"dynamic cast\" to \"dynamic_cast\" and move throw-expression to its own item",
    "EDIT3920": "[except.handle] Simplify void pointer cv-qualification",
    "EDIT3921": "[expr.throw] Make wording for throw-expressions more consistent with [expr]",
    "EDIT3922": "[temp.class.spec.match] Strengthen wording for matching partial specializations",
    "EDIT3923": "One more word, again",
    "EDIT3924": "[dcl.fct.spec] Remove \"class\" from \"non-static class member function\" and cleanup sentence",
    "EDIT3925": "[dcl.fct.def] Fix incorrect cross-ref referring to \"this\"",
    "EDIT3926": "[dcl.fct] Fix incorrectly pluralized grammar terms",
    "EDIT3927": "[class.virtual] Fix example with constrained non-templated function",
    "EDIT3928": "[temp.class.spec] Remove unused hyphenation point",
    "EDIT3929": "[core] Use \\keyword to introduce 'template'.",
    "EDIT3930": "[class.this] has no novel normative wording",
    "EDIT3931": "[dcl.init]/14 should probably consider parenthesized initializer for arrays",
    "EDIT3932": "[class.mem] Deduction guides do not declare new members",
    "EDIT3933": "[dcl.spec.auto] Denoise wording for when placeholders can deduce from an initializer",
    "EDIT3934": "[basic.lval] Dynamic type is not a property of objects",
    "EDIT3935": "[temp.over] Fix example",
    "EDIT3936": "[dcl.fct.def.general] Non-templated functions cannot have a requires-clause",
    "EDIT3937": "[expr.static.cast] Remove unused cv-qualifier notation",
    "EDIT3938": "[expr.reinterpret.cast] Strike definition in footnote",
    "EDIT3939": "[expr.comma] Remove mid-sentence example",
    "EDIT3940": "[basic.type.qualifier] Incomplete and complete object types are just object types",
    "EDIT3941": "[string.conversions] Replaced comparisons of a pointer against 0 with comparision against nullptr",
    "EDIT3942": "[depr.strstream] Fix typography for NTBS in index.",
    "EDIT3943": "[basic.lval] Amend note",
    "EDIT3944": "[std] Remove cross-references to the very same subclause",
    "EDIT3945": "[expr.unary.op] Fix usage of \"result\"",
    "EDIT3946": "[algorithms.results] Chapter defines class templates not in header <algorithm> synopsis chapter",
    "EDIT3947": "[depr.atomics] Possible header name typo: <atomics> vs <atomic>",
    "EDIT3948": "[depr.atomics] Fix <atomic> header name.",
    "EDIT3949": "[std] Improve index for 'freestanding/hosted implementation'.",
    "EDIT3950": "[iterator.concepts.general] Remove synthesizeable operator!= in example.",
    "EDIT3951": "[basic.lval] Xvalue don't always denote entities whose resources can be reused",
    "EDIT3952": "[dcl.fct.def.delete] Make terms cover semantic deletedness",
    "EDIT3953": "Non-defining object declarations can have type cv void",
    "EDIT3954": "[format.syn] Added missing reference to [format.context] in file synopsis",
    "EDIT3955": "[expr] Clarify performing / applying standard conversions.",
    "EDIT3956": "[expr.spaceship]: Wording should be clearer that function pointers don't do <=>",
    "EDIT3957": "Dissolve [over.oper]",
    "EDIT3958": "[expr.spaceship] Clarify treatment of pointers.",
    "EDIT3959": "[expr.throw#2] incorrectly dropping cv-qualifiers",
    "EDIT3960": "[class.abstract] Clean up redundant wording",
    "EDIT3961": "[temp.local] Remove space between angle brackets in example",
    "EDIT3962": "[class.dtor] Remove incorrect uses of virtual as a keyword",
    "EDIT3963": "[conv.integral, conv.double] Fix promotion conversions",
    "EDIT3964": "[dcl.name] Change informative style normative wording into note",
    "EDIT3965": "[class.static.mfct] Strike redundant normative wording",
    "EDIT3966": "[class.dtor] Change redundant wording into note",
    "EDIT3967": "[tab:container.node.compat] is missing some compatibility cases LWG 3438",
    "EDIT3968": "Cross-reference [class.mem]/14 from [class.virtual]/5 and [class.virtual]/4",
    "EDIT3969": "[meta.trans.other] \"C++ object type\" is overprecise",
    "EDIT3970": "[dcl.init.ref] Remove \"type\" from \"reference to type T\"",
    "EDIT3971": "[over.ics.user] Small grammatical nit-picks",
    "EDIT3972": "[over.ics.ref] Remove erroneous capitalization of Conversion",
    "EDIT3973": "[basic.def.odr] Change \"is required\" to \"shall\"",
    "EDIT3974": "[basic.fundamental] Provide more information about which types are integral",
    "EDIT3975": "[namespace.qual] Add missing annotation to X",
    "EDIT3976": "[dcl.enum] Turn redundant and informal wording into a note",
    "EDIT3977": "[basic, class, expr] Replace enumerated type with enumeration type",
    "EDIT3978": "[over.best.ics] Disambiguating ambiguous conversion sequences (again)",
    "EDIT3979": "Allow 'listings' package v1.8d",
    "EDIT3980": "[concepts.equality] Spurious \"this document\" wording",
    "EDIT3981": "Typo in the synopsis of elements_view::iterator",
    "EDIT3982": "[vector.capacity]p17/18 has two paragraph numbers",
    "EDIT3983": "[vector.capacity] Remove duplicate \\pnum",
    "EDIT3984": "[concepts.equality] Replace spurious 'this document'",
    "EDIT3985": "[module.context] Instantiation context is inconsistently defined",
    "EDIT3986": "[temp.mem] Change \"virtual\" to \"declared virtual\"",
    "EDIT3987": "Cleanup of [class.virtual]",
    "EDIT3988": "[thread.syn] Should <thread> include <initializer_list>?",
    "EDIT3989": "Imprecise definition of unqualified name lookup for global and namespace scope.",
    "EDIT3990": "Reference the normative text for data member order",
    "EDIT3991": "[thread.syn] Don't mandate including <initializer_list> when including <thread>",
    "EDIT3992": "modify customization point to customization point object #1",
    "EDIT3993": "Fixing customization point references #2",
    "EDIT3994": "fixing customization point references #3",
    "EDIT3995": "renaming [common.iter.cust]",
    "EDIT3996": "Inconsistent wording for mutex types",
    "EDIT3997": "Why do deduction guides for take_view and drop_view have different constraints? LWG 3447",
    "EDIT3998": "[class.copy.elision] Move specification of altered overload resolution",
    "EDIT3999": "[module.import] Clarify that only header imports make macros visible.",
    "EDIT4000": "[atomics.types.operations] note typo",
    "EDIT4001": "[atomics.types.operations] Fix note typo",
    "EDIT4002": "[class.temporary] space-separate trivially copyable",
    "EDIT4003": "[concept.swappable] Missing an index entry for ranges::swap",
    "EDIT4004": "[class] Incorrect cross-references",
    "EDIT4005": "[std] Harmonize phrasing 'terminate is invoked'",
    "EDIT4006": "www.open-std.org not reachable over a secure connection (TLS)",
    "EDIT4007": "[class.derived] Clean up cross-references.",
    "EDIT4008": "Fix index entries for CPOs",
    "EDIT4009": "[range.single.view] Add missing requires-clause to spec",
    "EDIT4010": "C++20 [range.single.view] Add missing requires-clause to \\itemdecl",
    "EDIT4011": "C++20 [thread.syn] Do not mandate including <initializer_list> when including <thread>",
    "EDIT4012": "C++20 [vector.capacity] Remove duplicate \\pnum",
    "EDIT4013": "[thread.mutex.requirements] Harmonize wording for try_lock.",
    "EDIT4014": "Partial ordering rules for packs in [temp.deduct.type]",
    "EDIT4015": "I have a question. Is this true?",
    "EDIT4016": "[res.on.expects] is still titled \"Expects paragraph\"",
    "EDIT4017": "[iterator.concept.forward] Undo spurious list item capitalization.",
    "EDIT4018": "[res.on.expects] Replace obsolete term 'expects' in the title.",
    "EDIT4019": "[class.default.ctor]/4 /5 Constructors do not create objects",
    "EDIT4020": "[algorithms.general] Add [algorithms.results] to summary table",
    "EDIT4021": "The first sentence in [lex.ext]/1, is it really necessary?",
    "EDIT4022": "Footnote numbers are unbearably unstable",
    "EDIT4023": "[unique.ptr.runtime.asgn] Fix a missing space",
    "EDIT4024": "[lex.name] Don't talk about upper/lower case letters",
    "EDIT4025": "[temp.deduct] What is \"immediate context\"? CWG 1844",
    "EDIT4026": "[class.default.ctor] Fix sloppy wording.",
    "EDIT4027": "[iterator.concept.winc] Format I in code font",
    "EDIT4028": "[default.sentinels, unreachable.sentinels] Inconsistent grammatical numbering and hanging paragraph",
    "EDIT4029": "[ranges.general] Capitalize the word clause",
    "EDIT4030": "[iterator.synopsis] Fix indexing targets for singular sentinels.",
    "EDIT4031": "[predef.iterators] Singularize heading of singular sentinels.",
    "EDIT4032": "[module.reach] Clarify that only TUs with an interface dependency may be incidentally reachable",
    "EDIT4033": "[class.access.base] talks about \"occurs in a member or friend\" but means \"direct member or friend\"",
    "EDIT4034": "[diff.cpp03.temp]/1 outdated",
    "EDIT4035": "[func.wrap.func] Remove declarations already in [functional.syn]",
    "EDIT4036": "[refwrap] Add blank line between class definition and deduction guide",
    "EDIT4037": "[util.smartptr.weak] Remove declarations already in [memory.syn]",
    "EDIT4038": "[string.view.template] Wrap synopsis in its namespace",
    "EDIT4039": "[string.view.template] Deduction guide specified far from constructors",
    "EDIT4040": "[stopcallback] Fix indentation",
    "EDIT4041": "[lib] Non-member swap inconsistently specified in class synopsis",
    "EDIT4042": "[structure.specifications] Integrate [res.on.expects].",
    "EDIT4043": "[container.requirements.general] Don't use 'f()' to refer to non-nullary function.",
    "EDIT4044": "[class.access] Sentence has three full stops (bad list item punctuation)",
    "EDIT4045": "[structure.specifications] Integrate [res.on.expects].",
    "EDIT4046": "Excessive paragraph indentation throughout [concepts.lang]",
    "EDIT4047": "[dcl.init]/11 and [dcl.init]/(17.4) say the same thing?",
    "EDIT4048": " Example in [over.literal]/8 misses the word error in one of its declarations",
    "EDIT4049": "[conv.rank] Excise \"shall\" phrasing",
    "EDIT4050": "[special.mem.concepts] Append -for to no-throw-sentinel",
    "EDIT4051": "[container.requirements] Improve index entries for contiguous and reversible containers.",
    "EDIT4052": "[intro.execution] A full-expression is: an invocation of a destructor generated at the end of the lifetime",
    "EDIT4053": "[specialized.algorithms] for loop bodies incosistently a compound-statement",
    "EDIT4054": "[iterator.concepts] Requirements out of \"model\"",
    "EDIT4055": "[expr.const] Remove xref repeated above but not below",
    "EDIT4056": "[expr.const] Add missing paragraph break",
    "EDIT4057": "[basic.fundamental] Use canonical types in Table 12",
    "EDIT4058": "[class.derived] Remove second definition of base class subobject",
    "EDIT4059": "[stmt.block] Rephrase introductory sentence.",
    "EDIT4060": "[iterator.cpp17] Index old-style iterator requirements.",
    "EDIT4061": "[dcl.array] Clarify that arrays do not have extra padding.",
    "EDIT4062": "[span.iterators] Specify aliases, like [string.view.iterators] does",
    "EDIT4063": "The wording about instantiation of a pack expansion in [temp.variadic]",
    "EDIT4064": "[special] Remove index entry for 'X(X&)'.",
    "EDIT4065": "[expr.new] Use repeated \\indextext for index redirects with multiple targets.",
    "EDIT4066": "Is it an unclear wording about deducing template arguments for function parameter pack",
    "EDIT4067": "[lib] Canonicalize order of library descriptive elements.",
    "EDIT4068": "[basic.lval] bit-fields are objects",
    "EDIT4069": "[expr.prim.lambda] Move operator() return type description",
    "EDIT4070": "[stmt.pre, re.grammar, gram] Use a separate bnf environment for each nonterminal.",
    "EDIT4071": "[alg.is.permutation] Rephrase to simplify",
    "EDIT4072": "What is \"it\" in the definition of \"usable in constant expressions\"",
    "EDIT4073": "[allocator.members] Remove stray whitespace.",
    "EDIT4074": "[re.grammar] Don't use monospace for ordinary text.",
    "EDIT4075": "[dcl.constexpr] Excise 'initialization full-expression'",
    "EDIT4076": "[tab:cpp17.moveassignable] Remove superfluous space.",
    "EDIT4077": "[expr.const] \"as described above\"... where?",
    "EDIT4078": "[expr.const] Add cross-reference for 'constant initialization'.",
    "EDIT4079": "[alg.copy] Typeset variable consistently.",
    "EDIT4080": "[expr.reinterpret.cast] Fix a note",
    "EDIT4081": "The wording \"pack\" in [temp.variadic]#6 is not clear",
    "EDIT4082": "The standard does not specify when to supply default arguments as template arguments",
    "EDIT4083": "[fs.class.path] Ensure interword spacing inside sentence.",
    "EDIT4084": "[istream.syn][ostream.syn] update synopses according to LWG1203",
    "EDIT4085": "These appear to be distinct definitions for the term `explicit type conversion`, as highlighted below.",
    "EDIT4086": "[algorithms] Inconsistency for parameter `x` vs parameter named `x`",
    "EDIT4087": "[dcl.init] Remove redundant paragraph about initialization with () initializer",
    "EDIT4088": "[dcl.type.auto.deduct] Incorrect description of deduction for a variable with copy-initialization?",
    "EDIT4089": "Add additional example to CWG2303 example to clarify meaning.",
    "EDIT4090": "Two trivial punctuation fixes",
    "EDIT4091": "[lex.ext] Simplify use of \\placeholder.",
    "EDIT4092": "[fs.class.path, fs.path.nonmember] Fix inline whitespace",
    "EDIT4093": "[conv.qual]  Fix example for cv-decomposition",
    "EDIT4094": "[lex.ccon] Remove redundant nested \\tcode.",
    "EDIT4095": "[mask.array.assign] Replace \"it\" with its antecedent",
    "EDIT4096": "[mask.array.comp.assign] Clarify \"mask object\"",
    "EDIT4097": "[libraryindex] Harmonize index entries for operator--",
    "EDIT4098": "[std] Remove unnecessary bracketing in \\tcode and retire \\dcr",
    "EDIT4099": "check.sh: escape backslash in awk program to silence warning",
    "EDIT4100": "[memory.syn,specialized.algorithms] Append \"-for\" to exposition-only concept \"no-throw-sentinel\"",
    "EDIT4101": "[special.mem.concepts] Remove hyphen in _no-throw_ for consistency with the type traits",
    "EDIT4102": "[std] Add missing \\pnums.",
    "EDIT4103": "[ranges.syn] Properly capitalize \"Clause\"",
    "EDIT4104": "[lib] Fix uses of \"clause\"",
    "EDIT4105": "[lib] Fix \"The expression in...is equivalent to\"",
    "EDIT4106": "cplus",
    "EDIT4107": "[stmt.return] Fix the operand's conversions description",
    "EDIT4108": "[lib] Fix typos in \"The expression in...is equivalent to\"",
    "EDIT4109": "`<` characters are also allowed in q-char-sequence's",
    "EDIT4110": "[std] Fix dangling index redirects.",
    "EDIT4111": "[range.prim.empty] Fix expression specification",
    "EDIT4112": "[stmt.return] Improve CWG2426 wording",
    "EDIT4113": "[expr.call] [dcl.fct] Move return type requiremens",
    "EDIT4114": "[thread.condvarany.intwait] contains reference to nonexistent \"cv\" variable",
    "EDIT4115": "[thread.condvarany.intwait] remove reference to nonexistent \"cv\" variable",
    "EDIT4116": "Put rSec before indextext",
    "EDIT4117": "[numeric.limits] use \"primary template\"",
    "EDIT4118": "Improve / extend sample in [basic.life#8]",
    "EDIT4119": "[conv.qual] Bad list punctuation",
    "EDIT4120": "[depr.conversions.string] Use proper \"Returns:\" markup.",
    "EDIT4121": "[dcl.fct] Description of abbreviated function templates should not use \"equivalent\"",
    "EDIT4122": "[fs.race.behavior] Fix referred subclause",
    "EDIT4123": "[std] 'subclause \\\\ref' cleanups",
    "EDIT4124": "Index __func__",
    "EDIT4125": "[string.syn] Index basic_string typedefs.",
    "EDIT4126": "In [dcl.fct.default]/10 the term \"virtual function call\" is defined in [expr.call]/3, not in [class.virtual].",
    "EDIT4127": "[range.utility.helpers] Move template argument out of \\libconcept.",
    "EDIT4128": "[ranges.syn] Remove bogus ; after requires-clause",
    "EDIT4129": "[format.syn] Avoid forward references",
    "EDIT4130": "[std] Fix dangling \\grammarterms.",
    "EDIT4131": "[expr.unary.op]/8",
    "EDIT4132": "[ranges.syn] Fix declaration of transform_view",
    "EDIT4133": "[coroutine.noop.coroutine] Use code font for noop_coroutine index entry.",
    "EDIT4134": "drop_view: begin() Returns: element doesn't use italics for exposition-only data members",
    "EDIT4135": "[range.drop.view] Fix italics for exposition-only members.",
    "EDIT4136": "[span.syn] Add index entry for dynamic_extent.",
    "EDIT4137": "[tab:atomic.types.pointer.comp] Fix column captions.",
    "EDIT4138": "[re, over.match.viable] Remove bad space before full stop.",
    "EDIT4139": "[class.virtual] index semantics of final and override",
    "EDIT4140": "[atomics.types.operations] Fix typo in exposition-only code",
    "EDIT4141": "[util.smartptr.shared.cast] Add hyphen for 'well-formed'.",
    "EDIT4142": "[expr.post] Only keyword template is optional",
    "EDIT4143": "[defns.undefined] Move cross-reference to [expr.const]",
    "EDIT4144": "Inconsistent description of C++ extensions to header <cstddef>",
    "EDIT4145": "[diff.mods.to.declarations] Also mention 'byte' and 'to_integer.",
    "EDIT4146": "[iterator.concept.random.access] Fix typo",
    "EDIT4147": "[numeric.ops.gcd,numeric.ops.lcm] Say \"other than cv bool\" as done elsewhere",
    "EDIT4148": "[variant.helper] Use 'struct' for variant_size and variant_alternative",
    "EDIT4149": "[mem.res.syn] Add default template argument for polymorphic_allocator",
    "EDIT4150": "[mem.poly.allocator.mem] Fix syntax for variadic template declaration",
    "EDIT4151": "[except.uncaught] Remove parentheses when not invoking a function",
    "EDIT4152": "[expr.prim.lambda.capture] Use the term \"local entity\".",
    "EDIT4153": "[basic.life] \"Otherwise, such a pointer/glvalue refers to allocated storage\" is unclear",
    "EDIT4154": "[macros] Fix PDF links to clauses and annexes",
    "EDIT4155": "[expr.ref] and postfix-expression.template id-expression",
    "EDIT4156": "[range.elements.iterator]: Missing friend specifier for operator- prototype declarations",
    "EDIT4157": "[std] Remove superfluous final \\rowsep or \\hline in tables.",
    "EDIT4158": "[range.elements.iterator] Add missing 'friend' for operator-.",
    "EDIT4159": "[conv.qual] Fix punctuation in bulleted list.",
    "EDIT4160": "[expr.const] Disambiguate 'it' by introducing the name V.",
    "EDIT4161": "[specialized.algorithms] Fold away unnecessary compound-statements.",
    "EDIT4162": "[over.literal] Mark use of a reserved identifier with 'error'.",
    "EDIT4163": "[intro.object] Say \"member subobject\" instead of \"data member\"",
    "EDIT4164": "[meta.type.synop] Fix bad indentation.",
    "EDIT4165": "[std] Use \\defnadj to improve/add many index entries.",
    "EDIT4166": "[foreword] Adjust Foreword per ISO/CS requirements.",
    "EDIT4167": "[basic.life]/8.5 breaks subobject replacement depending on interpretation",
    "EDIT4168": "Various small edits for CS016",
    "EDIT4169": "Fix hanging paragraphs for C++20",
    "EDIT4170": "[check] Detect hanging paragraphs.",
    "EDIT4171": "Adjust Foreword based on comments from ISO/CS",
    "EDIT4172": "Fix all hanging paragraphs by adding \"General\" sections.",
    "EDIT4173": "Overfull \\hbox; bugfix for check script",
    "EDIT4174": "Replace \"this subclause\" with an explicit reference in all formerly-hanging paragraphs",
    "EDIT4175": "[intro.ack] Dissolve subclause.",
    "EDIT4176": "[fs.norm.ref] Dissolve and follow #4175 suit",
    "EDIT4177": "[check] Consider only text with \\pnum as a hanging paragraph.",
    "EDIT4178": "Fix solitary subclauses",
    "EDIT4179": "[check] Detect subclauses without siblings.",
    "EDIT4180": "[definitions] Integrate into [intro.defs]",
    "EDIT4181": "Cs016 7",
    "EDIT4182": "[intro.refs] Fix clause reference to ISO/IEC 9899.",
    "EDIT4183": "[intro.refs] Update from ISO/IEC 10646-1:1993 to ISO/IEC 10646:2003.",
    "EDIT4184": "[time.cal.year.nonmembers] Avoid narrowing conversion",
    "EDIT4185": "[format.arg,filebuf.members] Invalid uses of NTCTS",
    "EDIT4186": "Fix solitary subclauses",
    "EDIT4187": "[intro.defs] Refer to undated ISO/IEC 2382 for the terminology.",
    "EDIT4188": "[intro.refs,time.format] Fix normative references.",
    "EDIT4189": "[intro.compliance.general] Properly reference normative clauses",
    "EDIT4190": "[everywhere] Follow ISO rules for the presentation of notes and examples",
    "EDIT4191": "[intro.defs] Remove cross-references to main part",
    "EDIT4192": "[ranges.syn] Update iota_view constraints",
    "EDIT4193": "[vector.cons] is called \"Constructors, copy, and assignment\" but only has constructors",
    "EDIT4194": "Fix modal verbs",
    "EDIT4195": "Formally the term `member class template` is not defined in the standard",
    "EDIT4196": "Inconsistent spelling of \"whitespace\"",
    "EDIT4197": "[class.mem.general]/12 contains a false statement",
    "EDIT4198": "[everywhere] Stop talking about C++ International Standards.",
    "EDIT4199": "The wordings of the paragraph [temp.dep.type#1] miss some examples",
    "EDIT4200": "[dcl.fct.def.coroutine] p11 Missing \"noexcept\" on final_suspend in example",
    "EDIT4201": "[dcl.fct.def.coroutine] Add missing 'noexcept' for final_suspend.",
    "EDIT4202": "Many implementation defined typedefs are not indexed",
    "EDIT4203": "[everywhere] Reduce width of space after Note: and Example:.",
    "EDIT4204": "[c++20] The last item in [cpp.predefined] looks very silly",
    "EDIT4205": "[c++20] Increase value of __cplusplus macro",
    "EDIT4206": "[cpp.predefined] Shuffle items to avoid an unfortunate page break.",
    "EDIT4207": "[xref] Fix C++20-based reference of cross-references again.",
    "EDIT4208": "[std] Fix PDF title and subject.",
    "EDIT4209": "[conv.rank] Avoid hinting that 'bool' be a standard integer type.",
    "EDIT4210": "Statement in the Note in [class.union.anon]/1 should have normative status",
    "EDIT4211": "[everywhere] Consistently use 'whitespace'.",
    "EDIT4212": "[class.union.anon] Remove duplicate normative wording.",
    "EDIT4213": "[vector.cons] Fix subclause heading.",
    "EDIT4214": "[fs.norm.ref] Dissolve subclause.",
    "EDIT4215": "[expr.unary.op] Use 'negative', not 'negation'.",
    "EDIT4216": "[expr.prim.paren] Replace \"value\" with \"result\"",
    "EDIT4217": "[class.prop]/(3.7) is in contradiction with [class.prop]/(3.7.3)",
    "EDIT4218": "footnote environment",
    "EDIT4219": "Process: final page-by-page review",
    "EDIT4220": "Pull a bunch of changes from master onto the C++20 branch",
    "EDIT4221": "[forwardlist.ops] bogus specification of forward_list::unique",
    "EDIT4222": "Fix modal verb \"must\"",
    "EDIT4223": "[temp.constr.order] Remove example markers from footnote.",
    "EDIT4224": "[std] Fix the remainder of 'may' and 'shall' in footnotes.",
    "EDIT4225": "Further cherry-picks for the c++20 branch",
    "EDIT4226": "It seems to an editorial issue for the comment in an operator over example",
    "EDIT4227": "Yet more cherry-picks for c++20",
    "EDIT4228": "Process: page-by-page review tracking",
    "EDIT4229": "The wording in paragraph [temp.variadic#8] may make a bit misleading",
    "EDIT4230": "[iostream.objects.overview] Delete duplicate paragraph.",
    "EDIT4231": "Page breaks (jmaurer)",
    "EDIT4232": "[futures.async] Avoid note within a sentence.",
    "EDIT4233": "Page breaks (tkoeppe)",
    "EDIT4234": "[lex.charset] Replace \"is required\" wording in footnote with simple statement.",
    "EDIT4235": "[class.init] Replace abominable temporary expression wording",
    "EDIT4236": "[class.mem.general] Awkward punctuation around note in list item",
    "EDIT4237": "[macros] Avoid page break between example and codeblock introducers",
    "EDIT4238": "[basic.fundamental] Delete stray space.",
    "EDIT4239": "[foreword] Exclude mentions of library headers from the index.",
    "EDIT4240": "[input.output] Reformat declarations according to newest conventions",
    "EDIT4241": "Add new note* and example* environments to suppress paragraph break.",
    "EDIT4242": "[grammar] Prefer putting a section heading on a new page.",
    "EDIT4243": "[range.reverse.overview] Use \\cv{} instead of \"cv-qualified\"",
    "EDIT4244": "[futures.async] Avoid note within a sentence.",
    "EDIT4245": "[intro.compliance.general, implimits] Cite Annex B normatively.",
    "EDIT4246": "[fig:iostreams.streampos] Reconsider use of informal term \"xfered\"",
    "EDIT4247": "[range.dangling]p1 is overly long and complex.",
    "EDIT4248": "[class.mem.general] Move note to the end of the list item.",
    "EDIT4249": "[std] Introduce tailnote environment to avoid empty lines in tables.",
    "EDIT4250": "Class types are not cv-qualified",
    "EDIT4251": "[std] Use tailnote and tailexample to avoid empty space in tables.",
    "EDIT4252": "Page breaks (burblebee)",
    "EDIT4253": "[special.mem.concepts] Adjust presentation to use ranges::blah",
    "EDIT4254": "[macros] Avoid excess vertical space for Annex C macros.",
    "EDIT4255": "[ranges] Index \"split_view::{outer,inner}-iterator\" correctly.",
    "EDIT4256": "use nested namespace definitions in the library where applicable",
    "EDIT4257": "[time.clock.utc.overview] example can probably be line-wrapped better",
    "EDIT4258": "[floatfield.manip]/8 has not stood the test of time",
    "EDIT4259": "[iomanip.syn] invents unnecessary placeholders",
    "EDIT4260": "[tab:filebuf.open.modes] is weirdly split in two",
    "EDIT4261": "[time.clock.utc.overview] Move explicit line break in example.",
    "EDIT4262": "Improved docs",
    "EDIT4263": "[move.iter.elem] Add missing 'return'",
    "EDIT4264": "CPOs inhibit guaranteed copy elision of arguments, are unimplementable as specified",
    "EDIT4265": "[structure.elements] describes a standard from an alternate universe",
    "EDIT4266": "consider moving [declval]p4 inside the itemdescr",
    "EDIT4267": "normative \"Note A\", \"Note B\", ...",
    "EDIT4268": "[tab:container.assoc.req] missing an \"Effects:\"",
    "EDIT4269": "[tab:container.hash.req] missing capitalization in description of node_type",
    "EDIT4270": "[range.access] Should we move [range.access] to [iterators]?",
    "EDIT4271": "[tab:container.hash.req] Capitalize start of sentence.",
    "EDIT4272": "[tab:container.assoc.req] Add missing 'Effects'",
    "EDIT4273": "[tab:filebuf.open.modes] Consistently order table rows.",
    "EDIT4274": "[dcl.init.ref] instructs performing direct initialization after applying a user-defined conversion",
    "EDIT4275": "C++20 tweaks",
    "EDIT4276": "[dcl.fct.def.coroutine] Replace \"variable\" with \"object\"",
    "EDIT4277": "[iomanip.syn] Use 'unspecified' instead of type meta-variables.",
    "EDIT4278": "[intro.races] Duplicate index entry for 'visible side effect(s)'",
    "EDIT4279": "[intro.races] Harmonize index entry for \"visible side effect(s)\".",
    "EDIT4280": "[expr.prim.id.unqual] Restore \"Otherwise\"",
    "EDIT4281": "[locale.codecvt.virtuals]p2+ is missing a paragraph number",
    "EDIT4282": "[facet.num.get.virtuals]p3 needs rework",
    "EDIT4283": "merge [re.def] into Clause 3",
    "EDIT4284": "[locale.codecvt.virtuals] Add missing pnum",
    "EDIT4285": "[stmt.ranged] Inconsistent placeholder formatting ",
    "EDIT4286": "[class.dtor] Fix wording about object's lifetime",
    "EDIT4287": "[dcl.fct] Clarify which declarations we're talking about in example.",
    "EDIT4288": "[intro.defs] Integrate [re.def].",
    "EDIT4289": "[stmt.ranged] Align font for begin-expr and end-expr.",
    "EDIT4290": "[declval] Indent example and fix phrasing in example",
    "EDIT4291": "[macros] Harmonize paragraph vertical spacing",
    "EDIT4292": "[rand.eng.mers] should use math font for (1u<<w)-1u",
    "EDIT4293": "[layout] Make \"small\" line spacing equal to normal spacing.",
    "EDIT4294": "[rand.eng.sub] drop no-op modulo operation",
    "EDIT4295": "[rand.eng], [rand.adapt] Use maths to describe relations between constants",
    "EDIT4296": "Fix missing `ranges::` qualifier in example",
    "EDIT4297": "Paragraphs 2 and 6 of [basic.type.qualifier] appear to be in contradiction (emphases are mine)",
    "EDIT4298": "[input.output.general] Delete note containing [fig:iostreams.streampos].",
    "EDIT4299": "Replace [fig:iostreams.streampos] with words",
    "EDIT4300": "[ostream.manip] Introduce SYNCBUF to detect basic_syncbuf",
    "EDIT4301": "[thread.stoptoken.intro] Fix typo",
    "EDIT4302": "Inconsistent section naming for forward_list",
    "EDIT4303": "[ranges] Add missing \"is true\"s to \\expects",
    "EDIT4304": "year_month_weekday ctor : fix object name",
    "EDIT4305": "deleting a pointer when the static type and dynamic types are similar is potentially UB",
    "EDIT4306": "[stringbuf.assign] Fix typo.",
    "EDIT4307": "[conv.rank] Avoid 'shall' for plain descriptions.",
    "EDIT4308": "[class.access.base] Clarify 'direct member' for access checks.",
    "EDIT4309": "[stmt.return] Remove unhelpful example.",
    "EDIT4310": "Remove library names from general index",
    "EDIT4311": "[ptr.launder] Fix font for object meta-variable 'X'.",
    "EDIT4312": "[except.spec] Excise undefined term 'instantiation directive'.",
    "EDIT4313": "Fix list item punctuation",
    "EDIT4314": "[expr] Use 'qualification-combined' and 'decomposition'.",
    "EDIT4315": "[dcl.type.auto.deduct] Clarify initializer for placeholder type deduction.",
    "EDIT4316": "[diff.cpp03.temp] 'export' was resurrected for modules.",
    "EDIT4317": "[cpp.subst]/4 Isn't the macro execution example wrong?",
    "EDIT4318": " [time.clock.gps.members]/2 return type typo",
    "EDIT4319": "could and might",
    "EDIT4320": "P1048R1 A proposal for a type trait to detect scoped enumerations",
    "EDIT4321": "P2227R0 Update normative reference to POSIX",
    "EDIT4322": "[2020-11 CWG Motion 1] P2238R0 Core Language Working Group \"tentatively ready\" Issues for the November, 2020 virtual meeting",
    "EDIT4323": "[2020-11 CWG Motion 2] P0330R8 Literal Suffix for (signed) size_t",
    "EDIT4324": "[2020-11 CWG Motion 3] P2096R2 Generalized wording for partial specializations",
    "EDIT4325": "[2020-11 CWG Motion 4] P2029R4 Proposed resolution for core issues 411, 1656, and 2333; numeric and universal character escapes in character and string literals",
    "EDIT4326": "[2020-11 CWG Motion 5] P1787R6 Declarations and where to find them",
    "EDIT4327": "[2020-11 LWG Motion 3] P2236R0 C++ Standard Library Issues to be moved in Virtual Plenary, Nov. 2020",
    "EDIT4328": "[2020-11 LWG Motion 4] P1679R3 string contains function",
    "EDIT4329": "[2020-11 LWG Motion 5] P0881R7 A Proposal to add stacktrace library",
    "EDIT4330": "[2020-11 LWG Motion 6] P2227R0 Update normative reference to POSIX",
    "EDIT4331": "[2020-11 LWG Motion 7] P1048R1 A proposal for a type trait to detect scoped enumerations",
    "EDIT4332": "[2020-11 LWG Motion 8] P0943R6 Support C atomics in C++",
    "EDIT4333": "[syncstream.syncbuf.cons] Remove bogus rdbuf() calls",
    "EDIT4334": "[utilities] Replace 'could' and 'might'",
    "EDIT4335": "[stringbuf.cons] Insert space after comma",
    "EDIT4336": "[time] Replace 'could' and 'might'",
    "EDIT4337": "[strings] Replace 'could' and 'might'",
    "EDIT4338": "Consistent (and conventional) spelling of `struct tm`",
    "EDIT4339": "[containers] Replace 'could' and 'might'",
    "EDIT4340": "[std] might and could: re-review for complicated cases",
    "EDIT4341": "[iterators] Replace 'could' and 'might'",
    "EDIT4342": "[ranges] Replace 'could' and 'might'",
    "EDIT4343": "[algorithms] Replace 'could' and 'might'",
    "EDIT4344": "[numerics] Replace 'could' and 'might'",
    "EDIT4345": "[localization] Replace 'could' and 'might'",
    "EDIT4346": "[input.output] Replace 'could' and 'might'",
    "EDIT4347": "[re] Replace 'could' and 'might'",
    "EDIT4348": "[atomics] Replace 'could' and 'might'",
    "EDIT4349": "[thread] Replace 'could' and 'might'",
    "EDIT4350": "[diff] Replace 'could' and 'might'",
    "EDIT4351": "[depr] Replace 'could' and 'might'",
    "EDIT4352": "[diagnostics] Replace 'could' and 'might'",
    "EDIT4353": "[concepts] Replace 'could' and 'might'",
    "EDIT4354": "[support] Replace 'could' and 'might'",
    "EDIT4355": "[library] Replace 'could' and 'might'",
    "EDIT4356": "Might be a wrong of the interpretation of the example in [basic.start.dynamic#5]",
    "EDIT4357": "[cpp] Replace 'could' and 'might'",
    "EDIT4358": "[except] Replace 'could' and 'might'",
    "EDIT4359": "[temp] Replace 'could' and 'might'",
    "EDIT4360": "[over] Replace 'could' and 'might'",
    "EDIT4361": "[class] Replace 'could' and 'might'",
    "EDIT4362": "[dcl.dcl] Replace 'could' and 'might'",
    "EDIT4363": "[stmt.stmt] Replace 'could' and 'might'",
    "EDIT4364": "[expr] Replace 'could' and 'might'",
    "EDIT4365": "[basic] Replace 'could' and 'might'",
    "EDIT4366": "[lex] Replace 'could' and 'might'",
    "EDIT4367": "CWG Poll 2: P0330R8 Literal Suffix for (signed) size_t",
    "EDIT4368": "CWG Poll 3: P2096R2 Generalized wording for partial specializations",
    "EDIT4369": "Consider using less excessively large source files",
    "EDIT4370": "[res.on.data.races] Replace 'could'.",
    "EDIT4371": "CWG Poll 4: P2029R4 Numeric and universal character escapes in character and string literals",
    "EDIT4372": "LWG Poll 8: P0943R6 Support C atomics in C++",
    "EDIT4373": "LWG Poll 4: P1679R3 string contains function",
    "EDIT4374": "[thread.sharedtimedmutex.requirements.general] Fix typo",
    "EDIT4375": "LWG Poll 5: P0881R7 A Proposal to add stacktrace library",
    "EDIT4376": "CWG Poll 1: P2238R0 Core Language Working Group \"tentatively ready\" Issues",
    "EDIT4377": "[res.on.arguments.1.3] Can std library APIs that take arguments by rvalue reference move from them?",
    "EDIT4378": "[atomics.syn] macros in namespace std",
    "EDIT4379": "CWG Poll 5: P1787R6 Declarations and where to find them",
    "EDIT4380": "LWG Poll 3: P2236R0 Standard Library Ready and Tentatively Ready issues",
    "EDIT4381": "\\exposid (and similar macros) cause misalignment of columns in code blocks",
    "EDIT4382": "[iterators.common] fix typo and add \"is true\" to Preconditions: clauses",
    "EDIT4383": "Always use \\libconcept, even in synopsis and itemdecls",
    "EDIT4384": "Replace \"could\" and \"might\", Clauses 1-15.",
    "EDIT4385": "[over.call.func, gram.key] Make colon in bnf non-italic.",
    "EDIT4386": "Replace \"could\" and \"might\", Clauses 16-32.",
    "EDIT4387": "[dcl.array] p.7 may be outdated",
    "EDIT4388": "[class.copy.assign]p8 needs rewording",
    "EDIT4389": "Replacing \"might\" with \"can\" obscures the distinction of possiblity and risk",
    "EDIT4390": "Replace \"could\" and \"might\" in Annexes.",
    "EDIT4391": "atomic wait/notify_one/notify_all : add volatile constraints",
    "EDIT4392": "[macros] Add \"\\exposidnc\", like \\exposid without italic correction",
    "EDIT4393": "Rewordings to avoid \"might\" and \"could\"",
    "EDIT4394": "P2029R4 (\"character escapes\") seemingly attempts to introduce new terms",
    "EDIT4395": "Rebase Motion 5",
    "EDIT4396": "[temp.over.link] Remove (apparent) copy/paste extra lines from example code",
    "EDIT4397": "[expr.type.conv] Remove unnecessary indirection of \"specified type\" when the resulting type will always be unqualified void",
    "EDIT4398": "Rebased version of CWG Poll 5: P1787R6 Declarations and where to find them",
    "EDIT4399": "Address partial specialization merge conflicts",
    "EDIT4400": "Footnote marks should appear after punctuation",
    "EDIT4401": "Replace \"typedef name\" with <grammar>typedef-name</>",
    "EDIT4402": "[std] Move punctuation to before the footnote marker.",
    "EDIT4403": "Assorted review comments from CWG-5",
    "EDIT4404": "[cpp.import] Use \"header unit\" where appropriate",
    "EDIT4405": "Use \\keyword pervasively",
    "EDIT4406": "[cpp.import] Clarify header units as the source of macro definitions.",
    "EDIT4407": "[iterator.requirements.general] Fix indexing around 'valid range'.",
    "EDIT4408": "Fix up the wording of one note, and add a second note, on implicit move.",
    "EDIT4409": "[class.mem.general]/12 seems to conflict with [class.nest]/3",
    "EDIT4410": "[atomics.syn] Move macro definitions to the global namespace.",
    "EDIT4411": "[func.wrap.func] Remove declarations already in [functional.syn]",
    "EDIT4412": "Hello",
    "EDIT4413": "[dcl.constexpr] Definition of \"identifier label\" was removed but is still used",
    "EDIT4414": "[std, cover-wd] Update editor",
    "EDIT4415": "[dcl.constexpr] Remove use of 'identifier label'.",
    "EDIT4416": "[class.mem.general] Allow non-defining declarations of nested classes.",
    "EDIT4417": "[std] Use grammar typedef-name instead of 'typedef name'.",
    "EDIT4418": "[class.copy.assign] Fix phrasing in note",
    "EDIT4419": "[dcl.array] Arrays of unknown bound are allowed in function parameters.",
    "EDIT4420": "Confusing wording in note on [basic.start.dynamic]/1",
    "EDIT4421": "[stacktrace.entry.overview] Italicize 'implementation-defined' in code block",
    "EDIT4422": "[basic.lookup.qual.general] Add \\tcode around N::B<0>",
    "EDIT4423": "[range.split.view] Make require-constant a function",
    "EDIT4424": "[range.drop.while.view] Add missing \\exposid{}s",
    "EDIT4425": "[time.zone.leap.nonmembers] Fix requires-clause indentation",
    "EDIT4426": "[range.iota.iterator,range.iota.sentinel] Complete iota_view's requires-clause",
    "EDIT4427": "[iterator.synopsis] Fix indentation",
    "EDIT4428": "[time.duration.comparisons] Fix requires-clause indentation",
    "EDIT4429": "[specialized.algorithms] requires-clause not aligned with return type",
    "EDIT4430": "[specialized.algorithms] Align requires-clause with return type",
    "EDIT4431": "[range.range] Redudant paragraph about expression variations",
    "EDIT4432": "[concepts.equality] Mark notes and examples as such",
    "EDIT4433": "Missing defining entry for <stacktrace> in header index",
    "EDIT4434": "[stacktrace.syn] Add header index entry for <stacktrace>.",
    "EDIT4435": "[library.general] Update for top-level Clause [time]",
    "EDIT4436": "[localization] Reformat LaTeX source code.",
    "EDIT4437": "[unord.hash] Redundant wording",
    "EDIT4438": "[unord.hash] Remove redundant wording",
    "EDIT4439": "[temp.explicit] Remove extraneous x",
    "EDIT4440": "[system.error.syn] Specify the what: templates",
    "EDIT4441": "[library.general] Adjust order according to recent clause reorganizations.",
    "EDIT4442": "[concepts.equality] Turn 'e.g.' into a proper example.",
    "EDIT4443": "The candidate conversion functions of directly binding reference",
    "EDIT4444": "[range.dangling] Split up overly long sentence.",
    "EDIT4445": "[over.built] Correct note re: \"hiding\" to match over.match.oper/3",
    "EDIT4446": "[floatfield.manip] Rephrase note about ios_base::hex",
    "EDIT4447": "[index] Add missing implementation-defined types",
    "EDIT4448": "[lib] Ensure non-member swap is declared in the header synopsis only",
    "EDIT4449": "[lib] Use 'specialization' instead of 'instance'",
    "EDIT4450": "[range.split.outer] Clarify scope of exposition-only 'current'",
    "EDIT4451": "[basic.stc.dynamic] Rework presentation",
    "EDIT4452": "[thread.condition.general] Fix style of quotation marks",
    "EDIT4453": "Remove some \\textit",
    "EDIT4454": "[container.requirements] Improve indexing of members described in requirements",
    "EDIT4455": "fix: small typo errors",
    "EDIT4456": "[ranges] Improve concept index",
    "EDIT4457": "[expr.prim.req.type] Clarify example comment re: validity of name only",
    "EDIT4458": "[specialized.algorithms] Qualify declarator-id with sub-namespace.",
    "EDIT4459": "[fs.op.funcs] Qualify declarator-id with sub-namespace.",
    "EDIT4460": "[re.req] Dismantle requirements table.",
    "EDIT4461": "[over.match.conv]: added missing \"can\"",
    "EDIT4462": "[dcl.pre] Reorder paragraphs",
    "EDIT4463": "Add examples to [basic.lookup.unqual]/5",
    "EDIT4464": "[basic.lookup.unqual] Add examples for conversion-function-ids",
    "EDIT4465": "[forwardlist.ops,list.ops] Fix specification of 'unique'",
    "EDIT4466": "What are the immediate subexpressions of a braced-init-list",
    "EDIT4467": "[defns.well.formed] Current definition of \"well-formed\" might be imprecise",
    "EDIT4468": "[stmt.pre] Different definitions for the substatements of selection-statement and iteration-statement",
    "EDIT4469": "[stacktrace.basic.overview] Add missing \"namespace std {\"",
    "EDIT4470": "[iterator.concept.winc] Improve paragraph's indexing and grammar",
    "EDIT4471": "[time.traits] Fix indentation",
    "EDIT4472": "[iterator.concept.winc] `I` used to represent both an integer-class and weakly_incrementable type",
    "EDIT4473": "[stacktrace.basic.cmp] Update 'lexicographical_\u00adcompare_\u00ad3way'",
    "EDIT4474": "[stacktrace.basic.cmp] Update 'lexicographical_compare_3way'",
    "EDIT4475": "[stacktrace.basic.cmp] fix <=> function name",
    "EDIT4476": "[time.duration.cons] sentence in p3 is not clear  LWG 3090",
    "EDIT4477": "[lib] Index all uses of public concepts",
    "EDIT4478": "[dcl.init.general] p5 wording does not seem to match the intent",
    "EDIT4479": "[temp.expl.spec] Should \"declared before\" be replaced by \"reachable\"?",
    "EDIT4480": "[format.arg] Fix return type of visit_format_arg",
    "EDIT4481": "[stacktrace.entry.query] Fix description of `source_line`",
    "EDIT4482": "[dcl.init.general] Fix misapplied term 'block variable'",
    "EDIT4483": "[lib] Use 'tm', not 'struct tm'",
    "EDIT4484": "[defns.well.formed] Fix definition of 'well-formed'",
    "EDIT4485": "[stmt.pre] Excise undefined term 'contained'",
    "EDIT4486": "[basic.start.dynamic] Clarify note about templated variables",
    "EDIT4487": "[iterator.concept.winc] Move concept definition near its description",
    "EDIT4488": "[func.bind.front] Delimit introduced names more conventionally",
    "EDIT4489": "[temp.expl.spec] Use 'reachable from', not 'declared before'",
    "EDIT4490": "[intro.object]/1 Turn non-normative wording into a Note; remove incorrect wording.",
    "EDIT4491": "[structure.specifications] Should we add an element for semantic requirements of concepts?",
    "EDIT4492": "[cmp.alg] Notes for ill-formed cases are inconsistent with those in [range.access]",
    "EDIT4493": "[conv.lval] doesn't specify the result for objects that are not accessed?",
    "EDIT4494": "[cmp.alg] Clarify ill-formed CPO invocations are SFINAE-friendly",
    "EDIT4495": "[conv.lval] Determine the value of a constant without accessing an object",
    "EDIT4496": "Update Getting Started on Arch Linux",
    "EDIT4497": "[class.base.init] \"Unfortunately\" in standardese text",
    "EDIT4498": "[basic.def.odr] What does `D` refer to in p14?",
    "EDIT4499": "[container.requirements] Use bulleted lists to introduce identifiers",
    "EDIT4500": "[Editorial] Add whitespace.",
    "EDIT4501": "[vector.bool] Remove an extra close-paren.",
    "EDIT4502": "[stdatomic.h.syn] Add semicolons in using statements.",
    "EDIT4503": "[range.iota.iterator,range.iota.sentinel] Fix markup around \\libconcept",
    "EDIT4504": "[2021-02 CWG Motion 2] P2313R0 Core Language Working Group \"tentatively ready\" Issues",
    "EDIT4505": "[2021-02 CWG Motion 3] P1102R2 Down with ()!",
    "EDIT4506": "[2021-02 LWG Motion 1] P2315R0 C++ Standard Library Issues to be moved in Virtual Plenary",
    "EDIT4507": "[2021-02 LWG Motion 2] P2259R1 Repairing input range adaptors and counted_iterator",
    "EDIT4508": "[2021-02 LWG Motion 3] P2212R2 Relax Requirements for time_point::clock",
    "EDIT4509": "[2021-02 LWG Motion 4] P2162R2 Inheriting from std::variant",
    "EDIT4510": "[2021-02 LWG Motion 5] P2160R1 Locks lock lockables",
    "EDIT4511": "[2021-02 LWG Motion 6] P2017R1 Conditionally borrowed ranges",
    "EDIT4512": "[2021-02 LWG Motion 7] P1682R2 std::to_underlying for enumeration",
    "EDIT4513": "P1102R2 Down with ()!",
    "EDIT4514": "P2212R2 Relax Requirements for time_point::clock",
    "EDIT4515": "P2162R2 Inheriting from std::variant",
    "EDIT4516": "P2017R1 Conditionally borrowed ranges",
    "EDIT4517": "[lex.ccon] What is the single code unit for an ordinary character literal or wide character literal?",
    "EDIT4518": "P2259R1 Repairing input range adaptors and counted_iterator",
    "EDIT4519": "[ranges.syn] Don't constrain specializations of enable_borrowed_range",
    "EDIT4520": "LWG Poll 5: P2160R1 Locks lock lockables",
    "EDIT4521": "[dcl.fct] Overbroad grammar for parameter-declaration",
    "EDIT4522": "CWG Poll 2: CWG2470 Multiple array objects providing storage for one object",
    "EDIT4523": "LWG Poll 1: P2315R0 LWG Tentatively Ready issues",
    "EDIT4524": "[range.drop.view] Fix tabs inserted as part of LWG3482",
    "EDIT4525": "[intro.execution] Is it possible to clarify the second bullet for immediate subexpressions",
    "EDIT4526": "P1682R2 std::to_underlying for enumerations",
    "EDIT4527": "[class.cdtor] Only objects of scalar type can be accessed",
    "EDIT4528": "[variant.visit]p3 What is mi? What is Variantsi?",
    "EDIT4529": "ci: more visibility of errors output by tools/check.sh",
    "EDIT4530": "Make checker script more helpful",
    "EDIT4531": "ci: split make and check steps",
    "EDIT4532": "docs: update Debian instructions",
    "EDIT4533": "[check] Split github action into two stages (source, output)",
    "EDIT4534": "[utilities] `\\tcode`s true in `optional` constructor",
    "EDIT4535": "[concepts] rotates [concept.swappable] to the end of [concepts.lang]",
    "EDIT4536": "[class.copy.assign]/7 and \"corresponding\"  assignment operator in a union-like class",
    "EDIT4537": "[thread] \u201csingle total order\u201d and \u201ctotal order\u201d",
    "EDIT4538": "[check] Terminate sed commands with semicolons",
    "EDIT4539": "[time.syn] add constexpr to leap_second comparisons",
    "EDIT4540": "[module.interface] Example does not seem to match normative wording",
    "EDIT4541": "[dcl.struct.bind] Fix indexing font and use conventional indexing markup",
    "EDIT4542": "[temp.variadic] description of the instantiation of fold-expressions",
    "EDIT4543": "[temp.variadic] Rearrange description of pack expansion",
    "EDIT4544": "[common.iter.nav] Bad concept index entry",
    "EDIT4545": "[range.split.inner] Clarify paragraph 1",
    "EDIT4546": "Description for two non-static member declarations to determine whether they correspond",
    "EDIT4547": "The structure of the rule of producing a transformed template when partial ordering",
    "EDIT4548": "[except.ctor] stack unwinding vs. automatic storage duration",
    "EDIT4549": "[lex.string] Replace string-literal with a string literal object in a note",
    "EDIT4550": "[except.ctor] Remove false claim about automatic objects",
    "EDIT4551": "[class.temporary]/3 A deleted destructor is meaninglessly allowed",
    "EDIT4552": "Clarify the terminology of the non-local variable",
    "EDIT4553": "Example in [allocator.requirements.general] incorrectly uses launder?",
    "EDIT4554": "[alg.is.permutation]/6",
    "EDIT4555": "Template parameter pack that does not participate in template argument deduction",
    "EDIT4556": "[namespace.def.general] p6 Clarify \"enclosing\" and inserted using-directive",
    "EDIT4557": "Spell \"whitespace\" consistently",
    "EDIT4558": "List initliazation of an enumeration with fixed underlying type from a single element v",
    "EDIT4559": "[format.context] p4 is non-normative encouragement",
    "EDIT4560": "[format.context] Rephrase recommended practice",
    "EDIT4561": "Several issues about section [except.spec] ",
    "EDIT4562": "[namespace.def.general] Clarify inline namespaces",
    "EDIT4563": "[except.spec] Clarify potentially-throwing functions",
    "EDIT4564": "[time.clock.cast.sys] and [time.clock.cast.utc] reuse \"Duration\" confusingly",
    "EDIT4565": "[time.clock.cast.sys],[time.clock.cast.utc] Use Duration2 for clarity.",
    "EDIT4566": "[expr.type.conv] doesn't define T() for T \u2260 void",
    "EDIT4567": "The non-normative wording \"local variable\" should not survive in [basic.stc.static]",
    "EDIT4568": "Description for bullet 5.1 in section [expr.await]",
    "EDIT4569": "Is a coroutine considered suspend after evaluating the await-suspend expression for the final suspend point",
    "EDIT4570": "replace all keywords by static",
    "EDIT4571": "[dcl.init.aggr] Inconsistent meaning of initializer list",
    "EDIT4572": "[ranges.syn] Forward declarations of tuple_size and tuple_element are not shown in the synopsis",
    "EDIT4573": "[ranges.syn] Add primary templates for tuple-like protocol",
    "EDIT4574": "[dcl.init.aggr] An initializer list is brace-enclosed",
    "EDIT4575": "[basic.stc.static] Rephrase the definition of 'static storage duration'",
    "EDIT4576": "[iterator.cust.swap] Should iter_move be qualified with ranges::?",
    "EDIT4577": "[syserr] Should `make_error_code` and `make_error_condition` be found by ADL?",
    "EDIT4578": "missing to_underlying in index",
    "EDIT4579": "P2351: add [[nodiscard]] to cast-like library wrappers [WIP]",
    "EDIT4580": "[basic.types.general] Do not mention pointers",
    "EDIT4581": "[expr.unary.general] Misaligned grammar productions",
    "EDIT4582": "Clarify that  direct-initialized, copy-initialized from E",
    "EDIT4583": "[expr.unary.general] Fix misaligned grammar.",
    "EDIT4584": "The initializer or initializer expression in whole [dcl.init]",
    "EDIT4585": "When does the lookup perform for a name used in default member initialization in a class template CWG1396",
    "EDIT4586": "Error: misaligned address",
    "EDIT4587": "[ranges] Some range adaptors are missing from the libraryindex",
    "EDIT4588": "[ranges] Improve library index for views",
    "EDIT4589": "[expr.await] Clarify rethrowing exceptions from await-suspend",
    "EDIT4590": "The range of the application of [namespace.udecl#11]",
    "EDIT4591": "Index item 'program execution' range from page 10 to 80",
    "EDIT4592": "Nested-name-specifier is not mentioned for member definition outside its target scope",
    "EDIT4593": "[ranges] follow-up to P2367: replace brace-init with paren-init",
    "EDIT4594": "[bitset] Injected class name not used for bitset",
    "EDIT4595": "[check] Fixes to scripts to run on OSX",
    "EDIT4596": "Fixes for bitset function declarations",
    "EDIT4597": "[index] Fix entry for 'program execution'",
    "EDIT4598": "[forward.list] Rename stable label from [forwardlist]",
    "EDIT4599": "[README] Update reqs for macOS BasicTeX installs",
    "EDIT4600": "[temp.type] What are \"identical\" values?",
    "EDIT4601": "[meta.type.synop] (and other) Repetitive 'inline constexpr'?",
    "EDIT4602": "[tuple.elem] Replace \"member variables\" with \"data members\"",
    "EDIT4603": "[range.elements.sentinel] Correct return type of operator-",
    "EDIT4604": "The wording in [dcl.fct.def.general]/2 doesn't seem to be right.",
    "EDIT4605": "[expr.static.cast] static_cast of pointer to derived class only handles base class subobjects",
    "EDIT4606": "[range.utility.helpers] not-same-as is confusingly named",
    "EDIT4607": "[vector.bool] reference has multiple assignment operators",
    "EDIT4608": "[vector.bool] Remove top level const from signature",
    "EDIT4609": "[temp.over.link] Add missing \\grammarterm marker",
    "EDIT4610": "[list.ops] Fix name of parameter in list::unique effects",
    "EDIT4611": "[dcl.meaning.general] Improve clarity of presentation",
    "EDIT4612": "[intro.execution] Sequencing of evaluations inside called functions CWG2466",
    "EDIT4613": "Simplify notion of \"valid duration\" in [time.clock.cast.sys, time.clock.cast.utc]",
    "EDIT4614": "[misc] Add index of Working Drafts",
    "EDIT4615": "[expr.prim.lambda] Replace 'unnamed' with 'unique name'",
    "EDIT4616": "[range.elements.overview] Correct example",
    "EDIT4617": "[expr.rel] Clarify function pointer comparisons",
    "EDIT4618": "[cpp.import]/3 What if pp-import is produce by `#include` within private module fragment?",
    "EDIT4619": "[expr.prim.lambda.capture] Which entity does the id-expression captured by reference refer to after evaluating the lambda-expression?",
    "EDIT4620": "Check for misordered library elements",
    "EDIT4621": "[expr] Add cross-references for 'local entity'.",
    "EDIT4622": "[spanbuf.members] \"span\" getter and setter should be noexcept P0448",
    "EDIT4623": "[ranges] Rename 'not-same-as' to 'different-from'.",
    "EDIT4624": "[class.pre] Fix incorrect comment in example",
    "EDIT4625": "[lib] Drop 'inline' from 'inline constexpr' variable templates.",
    "EDIT4626": "A corner case for an explicit type conversion whose type-specifier is void and the initializer is non-empty braced-init-list",
    "EDIT4627": "[class.access.base] Are friends defined in-class \"in\" the class for purposes of access control? CWG1699",
    "EDIT4628": "[range.prim.data] Use ranges::begin(t) not ranges::begin(E)",
    "EDIT4629": "\"single search\" is confusingly ambiguous",
    "EDIT4630": "Imprecise cross-references for \"trivially copyable type\"",
    "EDIT4631": "[2021-06 CWG Motion 1] P2386R0 Core Language Working Group \"ready\" Issues for the June, 2021 meeting",
    "EDIT4632": "[2021-06 CWG Motion 2] P1938R3 if consteval",
    "EDIT4633": "[2021-06 CWG Motion 3] P2186R2 Removing Garbage Collection Support",
    "EDIT4634": "[2021-06 CWG Motion 4] P1949R7 C++ Identifier Syntax using Unicode Standard Annex 31",
    "EDIT4635": "[2021-06 CWG Motion 5] P2156R1 Allow Duplicate Attributes",
    "EDIT4636": "[2021-06 CWG Motion 6] P1401R5 Narrowing contextual conversions to bool",
    "EDIT4637": "[2021-06 CWG Motion 7] P2223R2 Trimming whitespaces before line splicing",
    "EDIT4638": "[2021-06 CWG Motion 8] P1847R4 Make declaration order layout mandated",
    "EDIT4639": "[2021-06 CWG Motion 9] P2201R1 Mixed string literal concatenation",
    "EDIT4640": "[2021-06 LWG Motion 3] P2385R0 C++ Standard Library Issues to be moved in Virtual Plenary, June 2021",
    "EDIT4641": "[2021-06 LWG Motion 4] P1132R7 out_ptr",
    "EDIT4642": "[2021-06 LWG Motion 5] P1328R1 Making std::type_info::operator== constexpr",
    "EDIT4643": "[2021-06 LWG Motion 6] P0448R4 A strstream replacement using span as buffer",
    "EDIT4644": "[2021-06 LWG Motion 7] P1425R4 Iterators pair constructors for stack and queue",
    "EDIT4645": "[2021-06 LWG Motion 8] P1518R2 Stop overconstraining allocators in container deduction guides",
    "EDIT4646": "[2021-06 LWG Motion 9] P0401R6 Providing size feedback in the Allocator interface",
    "EDIT4647": "[2021-06 LWG Motion 10] P1659R3 starts_with and ends_with",
    "EDIT4648": "[2021-06 LWG Motion 11] P1951R1 Default Arguments for pair's Forwarding Constructor",
    "EDIT4649": "[2021-06 LWG Motion 12] P1989R2 Range constructor for std::string_view 2: Constrain Harder",
    "EDIT4650": "[2021-06 LWG Motion 13] P2136R3 invoke_r",
    "EDIT4651": "[2021-06 LWG Motion 14] P2166R1 A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr",
    "EDIT4652": "[2021-06 LWG Motion 15] P2231R1 Missing constexpr in std::optional and std::variant",
    "EDIT4653": "[2021-06 LWG Motion 16] P2216R3 std::format improvements",
    "EDIT4654": "[2021-06 LWG Motion 17] P2281R1 Clarifying range adaptor objects",
    "EDIT4655": "[2021-06 LWG Motion 18] P2328R1 join_view should join all views of ranges",
    "EDIT4656": "[2021-06 LWG Motion 19] P2325R3 Views should not be required to be default constructible",
    "EDIT4657": "[2021-06 LWG Motion 20] P2210R2 Superior String Splitting",
    "EDIT4658": "[2021-06 LWG Motion 21] P2367R0 Remove misuses of list-initialization from Clause 24",
    "EDIT4659": "[ranges] Use views::meow in examples instead of meow_view",
    "EDIT4660": "P1938R3 if consteval",
    "EDIT4661": "P2186R2 Removing Garbage Collection Support",
    "EDIT4662": "Is a null pointer value of a pointer type be called a pointer?",
    "EDIT4663": "P1949R7 C++ Identifier Syntax using Unicode Standard Annex 31",
    "EDIT4664": "P2156R1 Allow Duplicate Attributes",
    "EDIT4665": "P1401R5 Narrowing contextual conversions to bool",
    "EDIT4666": "P2223R2 Trimming whitespaces before line splicing",
    "EDIT4667": "P1847R4 Make declaration order layout mandated",
    "EDIT4668": "P2201R1 Mixed string literal concatenation",
    "EDIT4669": "P1328R1 Making std::type_info::operator== constexpr",
    "EDIT4670": "P1425R4 Iterators pair constructors for stack and queue",
    "EDIT4671": "The reference of a conversion function(template) with a deduced return type",
    "EDIT4672": "P1518R2 Stop overconstraining allocators in container deduction guides",
    "EDIT4673": "P0401R6 Providing size feedback in the Allocator interface",
    "EDIT4674": "P1659R3 starts_with and ends_with",
    "EDIT4675": "P1951R1 Default Arguments for pair's Forwarding Constructor",
    "EDIT4676": "P1989R2 Range constructor for std::string_view 2: Constrain Harder",
    "EDIT4677": "P2136R3 invoke_r",
    "EDIT4678": "P2166R1 A Proposal to Prohibit std::basic_string and std::basic_strin\u2026",
    "EDIT4679": "P2231R1 Missing constexpr in std::optional and std::variant",
    "EDIT4680": "P2216R3 std::format improvements",
    "EDIT4681": "P2281R1 Clarifying range adaptor objects",
    "EDIT4682": "P2328R1 join_view should join all views of ranges",
    "EDIT4683": "P2325R3 Views should not be required to be default constructible",
    "EDIT4684": "P2210R2 Superior String Splitting",
    "EDIT4685": "P2367R0 Remove misuses of list-initialization from Clause 24",
    "EDIT4686": "P1132R7 out_ptr - a scalable output pointer abstraction",
    "EDIT4687": "P0448R4 A strstream replacement using span<charT> as buffer",
    "EDIT4688": "Bogus note in [fs.path.native.obs]",
    "EDIT4689": "[basic.fundamental] Redirect some index entries.",
    "EDIT4690": "Replace post-increment and post-decrement boilerplate for iterators",
    "EDIT4691": "[conv.general] Fix index redirect for contextual conversion to bool.",
    "EDIT4692": "Replace boilerplate for deciding iterator_category of a view adaptor's iterator",
    "EDIT4693": "P2386R0 Core Language Working Group \"ready\" Issues for the June, 2021 meeting",
    "EDIT4694": "[fs.path.native.obs] Remove bogus note.",
    "EDIT4695": "P2385R0 C++ Standard Library Issues to be moved in Virtual Plenary, June 2021",
    "EDIT4696": "Clarify definition of \"variable\"",
    "EDIT4697": "Now U(*)[N] is convertible to cv U(*)[], can [util.smartptr.shared.general] be simplified?",
    "EDIT4698": "[format] Use \\exposid, not \\placeholder, for format-arg-store",
    "EDIT4699": "[class.virtual] Corresponding declaration vs. overriding a virtual function",
    "EDIT4700": "Consider spanstream assignment operations",
    "EDIT4701": "[out.ptr.t][inout.ptr.t] The notes for `operator void**` might suggest violation of the strict aliasing rule",
    "EDIT4702": "How to style expos-only members [Was: Restyle expos-only member basic-formatting-string::str]",
    "EDIT4703": "Mislead utterance of section [expr.mptr.oper]",
    "EDIT4704": "Consistent vertical spacing for access modifiers in [ranges]",
    "EDIT4705": "[format.syn] Remove extraneous commas in vformat_to declarations",
    "EDIT4706": "[basic.string.general], [string.view.template.general] remove constexpr",
    "EDIT4707": "remove the condition to clarify the case that the parameter pack is n\u2026",
    "EDIT4708": "[temp.variadic] Clarify template parameter packs not introduced by pa\u2026",
    "EDIT4709": "[basic, class, dcl] Fix ranged index entries",
    "EDIT4710": "Several issues about function parameter scope ",
    "EDIT4711": "Inappropriate \"Shall\" in PostConditions: elements",
    "EDIT4712": "Some rules are omitted in [dcl.ptr], [dcl.ref], [dcl.mptr], [dcl.array], [dcl.fct]",
    "EDIT4713": "Missing \"<condition> is `true`|`false`\"",
    "EDIT4714": "Better string splitting example",
    "EDIT4715": "[iterator.operations, range.iter.op.distance] Reword \"get to\".",
    "EDIT4716": "[format] Use \\exposid{,nc} for format-arg-store, not \\placeholder",
    "EDIT4717": "Sloppy wording around formatted/unformatted input/output functions",
    "EDIT4718": "[istream.extractors] mixes members and non-members",
    "EDIT4719": "[lib] Remove space between `requires` and parameter list",
    "EDIT4720": "[lib] Space between requires and its parameter list?",
    "EDIT4721": "[range.split.iterator] Fix formatting of the 'Effects' clause",
    "EDIT4722": "\"binds to\" versus \"is bound to\"",
    "EDIT4723": "Inconsistent meaning of \"result of a call\"",
    "EDIT4724": "Reword the wording for glvalue result of a function call",
    "EDIT4725": "upload the PDF for everybody to download",
    "EDIT4726": "Replace \"Working Draft\" for non mailing-list ready builds",
    "EDIT4727": "[dcl.pre] What's the meaning of (re)introducing names into the program?",
    "EDIT4728": "[allocator.uses.construction] LWG3527 incompletely applied",
    "EDIT4729": "[allocator.uses.construction] Add missing closing parentheses",
    "EDIT4730": "[std] Harmonize 'reference binds to an expression' phrasing",
    "EDIT4731": "using-declaration is not a member vs [class.member.lookup]",
    "EDIT4732": "[range.nonprop.cache] Clarify that emplace-deref does not require materialization of the result of *i before the initialization",
    "EDIT4733": "[expr.mptr.oper] Clarify pointer-to-member operators.",
    "EDIT4734": "[time.clock.cast.sys,time.clock.cast.utc] Shorten introdution of Duration2",
    "EDIT4735": "[over.match.class.deduct] The obscure structure of the rule for aggregate deduction",
    "EDIT4736": "[unique.ptr.single] Rephrase destruction",
    "EDIT4737": "[stmt.return,class.{ctor,dtor}] Clarify no return operand",
    "EDIT4738": "[thread] Fix and add cross-references in header synopses",
    "EDIT4739": "[func.require][func.wrap.func.inv] Use defined term target object",
    "EDIT4740": "[expr.delete] \"result\" usage fix",
    "EDIT4741": "[stmt.dcl]/3 is not precise",
    "EDIT4742": "[range.adaptor.object] Fix latex reference",
    "EDIT4743": "[basic.compound] Use quoted-string designation for pointer types",
    "EDIT4744": "[array.overview] Extend complexity exception to move construction",
    "EDIT4745": "Awkward invented declaration in P0849",
    "EDIT4746": "\"...denoted by the operand\" in [expr.delete] can result in a wrong meaning",
    "EDIT4747": "[bit.count] Turn introduction of `N` into a note",
    "EDIT4748": "Confliction between [expr.cast] and \"shall not discard cv-qualification\"",
    "EDIT4749": "The unclear definition for \"variable\"",
    "EDIT4750": "Integral promotion is excluded by Integral conversion in [expr.static.cast#10]",
    "EDIT4751": "Unclearly defined rule in [over.match.funcs#general-5]  conflicts with the rule defined in [dcl.init.ref#5.2]",
    "EDIT4752": "[expr.new] doesn't specify the type of a new-expression",
    "EDIT4753": "A lvalue-to-rvalue conversion is not necessary to be required in [dcl.init.ref#5.3]",
    "EDIT4754": "[optional.optional] Can we eliminate the exposition only member `val`?",
    "EDIT4755": "[expr.call] Consider noting the exception for temporary objects",
    "EDIT4756": "[expr.new] Clarify result type and value category",
    "EDIT4757": "ranges::split_view::iterator::operator* Not rendered properly",
    "EDIT4758": "[expr.static.cast] Admit integral promotion for cast to enumeration type",
    "EDIT4759": "[bit.count] Add missing paragraph number",
    "EDIT4760": "[over.match.funcs#general-7.3] is unclear on \"for the former set\" and its \"additional permissible types\"",
    "EDIT4761": "The permissible types in [over.match.conv] should not be reference types",
    "EDIT4762": "[expr.delete] Replace 'denote' with 'pointed to'",
    "EDIT4763": "[stmt.dcl] Clarify 'active' variables",
    "EDIT4764": "A note in [namespace.udir] that metions \"using-directive does no introduce name\" should be turned to a normative rule",
    "EDIT4765": "[variant.variant.general] fix constexpr typo",
    "EDIT4766": "[cpp.stringize] Whitespace is not a preprocessing token",
    "EDIT4767": "Some minor iostream edits for clarity",
    "EDIT4768": "[meta.member] Clarify is_corresponding_member semantics",
    "EDIT4769": "[span.streams.overview] Correct typo \"theses\" => \"these\"",
    "EDIT4770": "[basic.def.odr#9] Saying that a scope corresponds to a function is not precise",
    "EDIT4771": "[propagation] Make sure \"otherwise\" is at the start of a bullet P1675R2",
    "EDIT4772": "[std] Use \\Fundescx to avoid awkward mid-sentence colons.",
    "EDIT4773": " Fix notes due to TBAA and use \"implementation\" instead of \"compiler\"",
    "EDIT4774": "[container.adaptors.general] Fix ref",
    "EDIT4775": "Two conflict notes about member lookup occurred in base-specifier",
    "EDIT4776": "A definition for a class introduces a class scope rather than doing that by a declaration that is not a definition",
    "EDIT4777": "[defns.access] [basic.lval] Clarify what and how can be accessed",
    "EDIT4778": "[expr.add] Use better example",
    "EDIT4779": "[basic.types.general] p6 Incorrect comment in example",
    "EDIT4780": "[tuple.creation] Remove unused introductory notation",
    "EDIT4781": "Typo in Cpp17Allocator requirements Note",
    "EDIT4782": "[allocator.requirements.general] Fix typo in table's note",
    "EDIT4783": "[basic.types.general] Fix comment in example",
    "EDIT4784": "A pointer past the end of the last element should have an explicit pointer value category and consistently use that term ",
    "EDIT4785": "Don't reuse term \"note\" for normative requirements in tables",
    "EDIT4786": "[array.overview] Move default constructor exception to [container.requirements]",
    "EDIT4787": "[basic.scope#scope-4]The meaning of \"denote different entities\" is vague",
    "EDIT4788": "The odr restrictions didn't apply to enumerators",
    "EDIT4789": "[variant.variant],[variant.ctor] - clarifying the meaning of Ti",
    "EDIT4790": "Use $...$ around negative numbers, for proper minus signs",
    "EDIT4791": "[temp.res.general] p5: dependent qualified-id and using-declarator",
    "EDIT4792": "[temp.res.general] p5: dependent names in other than type-only context",
    "EDIT4793": "dependent names",
    "EDIT4794": "[expr.sizeof]p2 makes an unjustified inference about the size of an array",
    "EDIT4795": "[spanbuf.virtuals] Add missing \"override\"",
    "EDIT4796": "[dcl.spec.general] p2 prevents the valid type combination",
    "EDIT4797": "\"single-element of an array\" model",
    "EDIT4798": "What is \"the full-expression of its initialization\"?",
    "EDIT4799": "[dcl.init.general] default-initialization vs extern declaration",
    "EDIT4800": "[basic.start.static] p3 is a bit vague",
    "EDIT4801": "[stacktrace.entry.cmp] does not describe operator<=>",
    "EDIT4802": "[basic.life] Does zero-initialization as a static initialization begin the lifetime of an object?",
    "EDIT4803": "[stmt.return,dcl.fct.def.coroutine] Avoid use of 'glvalue result'",
    "EDIT4804": "[dcl.init.ref] Avoid 'value of the expression'",
    "EDIT4805": "[cmath.syn] p1 is missing lerp",
    "EDIT4806": "[cmath.syn] Add 'lerp' to list of differences vs. C",
    "EDIT4807": "[std] Replace vestigial parenthesized \\ref with \\iref",
    "EDIT4808": "[expr.sizeof] Clarify sizeof(array)",
    "EDIT4809": "[over.ics.list] define \"worst conversion sequence\" CWG2492",
    "EDIT4810": "[over.match.best] Define 'worst conversion sequence'",
    "EDIT4811": "[dcl.spec.auto.general] Call to conversion function whose conversion-function-id contains a placeholder CWG2493",
    "EDIT4812": "[basic.lookup.unqual] Component names in converstion-type-id are unqualified names?",
    "EDIT4813": "[basic.lookup.unqual] Clarify 'unqualified name'",
    "EDIT4814": "[temp.explicit] p4 has a vague expound",
    "EDIT4815": "[temp.expl.spec] p6 not only applies to definitions",
    "EDIT4816": "[temp.expl.spec] p7 merely implicit instantiation? ",
    "EDIT4817": "[range.dangling] Simplify syntax",
    "EDIT4818": "[range.iota.view] Mark exposition-only concepts as such",
    "EDIT4819": "[ranges] Inconsistent marking of definitions with `// \\expos`",
    "EDIT4820": "[stmt.return] p3 The context of the invocation of the potentially invoked destructor is unspecified",
    "EDIT4821": "[futures.async] Add missing space to fold expression",
    "EDIT4822": "[std] Where template and function parameter pack can be swapped",
    "EDIT4823": "[coroutine.handle.export.import] Add missing space after _cv_",
    "EDIT4824": "[coroutine.handle.resumption] Index implementation-defined behavior",
    "EDIT4825": "[coroutine.traits.primary] Separate parameters by spaces",
    "EDIT4826": "[expr.typeid] glvalue of incomplete type vs typeid",
    "EDIT4827": "[expr.typeid] Require class type to be complete",
    "EDIT4828": "[impldef] Add missing index entries",
    "EDIT4829": "[ranges] Add missing \\expos markers for nested types",
    "EDIT4830": "[expr.prim.req.nested] misuse of term \"unevaluated operand\"",
    "EDIT4831": "[iostream.format] Use the injected-class-name throughout",
    "EDIT4832": "[expr.prim.req] Fix uses of 'unevaluated operand'",
    "EDIT4833": "[basic.pre,basic.link] Clarify 'declaration of entity' vs. namespace-alias",
    "EDIT4834": "[dcl.spec.general,dcl.fct.spec] Clarify duplication of decl-specifiers",
    "EDIT4835": "[over.match.oper] p3 The \"rewritten\" is used in different meanings",
    "EDIT4836": "[range.istream.view] Repeat default template argument in synopsis",
    "EDIT4837": "Is the constructor call a prvalue and what's the type of it?",
    "EDIT4838": "The name is bound to a declaration vs is bound to a Scope",
    "EDIT4839": "[class.copy.elision] p3 The return type in the first bullet should be restricted ",
    "EDIT4840": "[basic.stc] Temporary object and its storage duration CWG1634",
    "EDIT4841": "[basic.scope.block] p1 The note should be as a normative rule",
    "EDIT4842": "[class.copy.elision] No implicit moves for reference return types",
    "EDIT4843": "[basic.scope.block] Fix regression introduced by P1787R6",
    "EDIT4844": "Several rules conflict with the modification of P1971",
    "EDIT4845": "[temp.arg.general] p2 template argument list of template-head seems to have a more restriction",
    "EDIT4846": "[temp.expl.spec] p6 explicitly specialized class vs explicitly specialized class template",
    "EDIT4847": "The operand in the copy-initialization of the result object of a function should be the possibly-converted one",
    "EDIT4848": "[expr.delete] Clarify treatment of arrays of classes",
    "EDIT4849": "[temp.spec.general] Format grammar terms",
    "EDIT4850": "[expr.delete] p7 The time of calling a deallocation function",
    "EDIT4851": "[conv.qual] identity conversion and similar type",
    "EDIT4852": "[dcl.constexpr] A full-expression of initialization of a variable may be not an expression",
    "EDIT4853": "[expr.delete] p2 The restriction on operand of a single-object delete expression",
    "EDIT4854": "[basic.lval] p5 value vs initialization",
    "EDIT4855": "[expr.const] p10 converted constant expression of type bool vs contextually converted constant expression of type bool",
    "EDIT4856": "[expr.const] \"converted expression is a constant expression\" ",
    "EDIT4857": "[basic.fundamental] Lacking a definition of overflow",
    "EDIT4858": "[forward] Fix typo in example 2 in paragraph 6",
    "EDIT4859": "[expr.delete] Clarify constraints on non-array delete",
    "EDIT4860": "[conv.integral,over.best.ics.general,over.ics.user] Ignore cv-qualification differences",
    "EDIT4861": "[intro.execution] p11 sequencing of co_await",
    "EDIT4862": "[basic.string.general] Fix basic_string::npos",
    "EDIT4863": "[lib] Extend exception propagation to cover the initialization",
    "EDIT4864": "[expr.ass] does not specify the type of the expression (and traditionally misuses \"result\")",
    "EDIT4865": "[expr.ass] Clarify type of assignment-expression",
    "EDIT4866": "[basic] Reference the more specific [expr.context]",
    "EDIT4867": "[expr.await] The lifetime of parameters and variables that are defined in a coroutine",
    "EDIT4868": "[dcl.fct.def.coroutine] p13 A valid reference type is not cv-qualified",
    "EDIT4869": "[utility.requirements,exception.propagation] Clarify the thrown exceptions that have requirements and guarantees imposed",
    "EDIT4870": "[dcl.fct.def.coroutine] p13 \"xvalue of type T\" where T is lvalue reference type",
    "EDIT4871": "[unique.ptr.single] Remove redundant preconditions after 079f7d3b02d",
    "EDIT4872": "[unique.ptr.single] Throwing after 079f7d3b02d can be well-defined",
    "EDIT4873": "[func.search] Fix inconsistencies between boyer_moore searchers",
    "EDIT4874": "[lex.phases] Some unused links are useful ",
    "EDIT4875": "[basic.lval] Remove an incorrect statement that assignment expects PR-value right operands",
    "EDIT4876": "[lib] Cpp17Meow requirements, its table, and references to those",
    "EDIT4877": "[format.syn] A wrong exposition for std::format definition",
    "EDIT4878": "[temp.deduct.type] p6 type name includes non-deduced context",
    "EDIT4879": "[temp.deduct.partial] p4 Partial ordering for a non-deduced context parameter",
    "EDIT4880": "[expr.const] Fix integer overflow reference",
    "EDIT4881": "Bad subclause nesting in [smartptr]",
    "EDIT4882": "Is a variable that is about to go out of scope an lvalue or an xvalue?",
    "EDIT4883": "[expr.typeid] Fix reference to header synopsis",
    "EDIT4884": "[temp.deduct.type] p4 values vs parameters",
    "EDIT4885": "Conflict for the result object of a prvalue",
    "EDIT4886": "Requires should now be Mandates",
    "EDIT4887": "[expr.dynamic.cast] Missing case when `C` is the most derived class in the runtime check",
    "EDIT4888": "Add a check for the commit message format when one of the sources is modified",
    "EDIT4889": "[expr.dynamic.cast] Remove apparent condition",
    "EDIT4890": "[module.private.frag] A confused example",
    "EDIT4891": "[dcl.init.aggr] Example 3 continues list of normative text",
    "EDIT4892": "[intro.abstract] Reference the sibling subclause",
    "EDIT4893": "[basic.fundamental] Unsigned integral type representation is neither unspecified nor implementation-defined",
    "EDIT4894": "[basic.life] Storage release also ends an object\u2019s lifetime",
    "EDIT4895": "[basic] Reference [basic.types.general] where appropriate",
    "EDIT4896": "[basic.life] Use Oxford comma",
    "EDIT4897": "[actions] Update dependencies cache before installing",
    "EDIT4898": "[dcl.init.aggr]/4.1 designated-initializer-list  vs initializer-clause",
    "EDIT4899": "[dcl.init.aggr] p2 Elements of an anonymous union",
    "EDIT4900": "Specifying the storage duration of temporary objects (automatic, thread, static, or dynamic?)",
    "EDIT4901": "[optional] Use x.has_value() instead of bool(x)",
    "EDIT4902": "[range.filter.iterator] Add noexcept to base() functions",
    "EDIT4903": "[lex.phases] p2 Any Splice's deleting is firstly taken place",
    "EDIT4904": "[dcl.spec.auto.general] Definition of _generic parameter type placeholder_ can be simplified",
    "EDIT4905": "[dcl.spec.auto.general] Remove redundant, mutually exclusive case",
    "EDIT4906": "[basic.life] Does storage reuse update pointers/references/names when the original object\u2019s lifetime has not ended?",
    "EDIT4907": "[module.import]/3 remove redundant importing of interface partitions",
    "EDIT4908": "[basic.type.qualifier] The ordering defined on cv-qualifiers is not a partial ordering",
    "EDIT4909": "[dcl.spec.auto.general] The placeholder type -> A placeholder type",
    "EDIT4910": "[dcl.init.general] Remove confusing \u2018no initialization\u2019 from default-initialization and zero-initialization",
    "EDIT4911": "[dcl.init.general] Mention scalar type explicitly for default-initialization",
    "EDIT4912": "[dcl.init.general] break p7 into three paragraphs",
    "EDIT4913": "[basic.lval] Replace the misused term \u2018classifications\u2019 by \u2018categories\u2019",
    "EDIT4914": "[class.mfct.non-static] p3 class member access transformation in the context where \"this\" is not permitted",
    "EDIT4915": "[facet.num.get.virtuals] Two minor fixes:",
    "EDIT4916": "[class.base.init] p9 is not suitable for implicitly defined copy/move constructor",
    "EDIT4917": "What is the value category of an expression denoting base class subobject in reference binding?",
    "EDIT4918": "[class.base.init] Clarify implicitly-defined copy/move constructors",
    "EDIT4919": "[reserved.names] Account for *module-name*s reserved in [module.unit]p1",
    "EDIT4920": "[std] Replace \\rSec with \\subclause",
    "EDIT4921": "[temp.param] p8 The value category of the non-type non-class non-reference parameter",
    "EDIT4922": "The requirement of the trailing requires-clause in function-definition",
    "EDIT4923": "[dcl.meaning.general] p5 Normalization of any declaration",
    "EDIT4924": "Follow-on to P2314R4: properly define encoding restrictions",
    "EDIT4925": "[basic.link] p19 Two confusing comments in the formal example",
    "EDIT4926": "[class.copy.elision] p2 incorrect comment in copy elision example",
    "EDIT4927": "[expr.prim.lambda.capture] p6 The specified behavior of an init-capture is incorrect",
    "EDIT4928": "[class.copy.elision] Fix comment in example",
    "EDIT4929": "[optional] Replace bool(x) with x.has_value()",
    "EDIT4930": "[dcl.init.aggr] Insert paragraph break to avoid bad \\item numbering",
    "EDIT4931": "[basic.scope.temp] p2 What is \"the scope D inhabits\"?",
    "EDIT4932": "Are members of a nested class be members of the enclosing class? ",
    "EDIT4933": "[fstream.syn] Fix grammar",
    "EDIT4934": "[over.best.ics.general] p1 \"T t = E;\" determins whether the implicitly conversion sequenced can be formed",
    "EDIT4935": "[headers] Fix note about importing library headers",
    "EDIT4936": "[expr.context] List of back references crossreference the parent subclause",
    "EDIT4937": "Consider adding a macro for semantic cross references",
    "EDIT4938": "[class.union.anon] p1 All implicitly declared special member functions for anonymous union violate that rule",
    "EDIT4939": "An anonymous union member is not a non-static data member on grammar",
    "EDIT4940": "[intro.execution] p5 Which language constructs does a full-expression include/comprise/contain",
    "EDIT4941": "[std] Fix cross-references to 'unevaluated operand'",
    "EDIT4942": "[lib] Rename exposition-only 'no-throw-' concepts",
    "EDIT4943": "[std] Use \\keyword for coroutine keywords",
    "EDIT4944": "Update the example of temporary pseudo-destruction to undefined behavior",
    "EDIT4945": "[temp.friend] p5 Two declarations correspond can ignore the return types",
    "EDIT4946": "[range.dangling] Use ranges::subrange in example",
    "EDIT4947": "[expr.const] p5 neither allocation nor deallocation function is a constexpr function",
    "EDIT4948": "[tuple.apply] Redundant/inconsistent std:: qualification for std::get",
    "EDIT4949": "[module.context] instantiation context of the enclosing specialization",
    "EDIT4950": "[customization.point.object] fix grammar",
    "EDIT4951": "[tuple.apply] Move exposition-only functions to namespace std",
    "EDIT4952": "[class.access.base] p6 Unclear about the cv-qualification",
    "EDIT4953": "[basic.life,basic.start.term,expr.delete] Clarify destruction of scalars",
    "EDIT4954": "[istream.iterator.cons] uses no-longer-defined term \"constant initializer\"",
    "EDIT4955": "[expr.const] the term \"constant-initialized\" is confusing",
    "EDIT4956": "Add trailing semicolon to the example in expr.prim.id.general p5",
    "EDIT4957": "[range.join.view] remove duplicative condition in end() const",
    "EDIT4958": "[support.types.layout] Note should be a recommended practice paragraph",
    "EDIT4959": "[stmt.pre] Remove erroneous crossreference",
    "EDIT4960": " P0288R9 move_only_function editorial fixes",
    "EDIT4961": "[support.types.layout] Avoid implementation guidance in a note",
    "EDIT4962": "[2021-10 CWG Motion 1] P2462R0 Core Language Working Group \"ready\" Issues for the October, 2021 meeting",
    "EDIT4963": "[2021-10 CWG Motion 2] P2242R3 Non-literal variables (and labels and gotos) in constexpr functions",
    "EDIT4964": "[2021-10 CWG Motion 3]  P0847R7 Deducing this",
    "EDIT4965": "[2021-10 CWG Motion 4] P2316R2 Consistent character literal encoding",
    "EDIT4966": "[2021-10 CWG Motion 5] P2334R1 Add support for preprocessing directives elifdef and elifndef",
    "EDIT4967": "[2021-10 CWG Motion 6] P2246R1 Character encoding of diagnostic text",
    "EDIT4968": "[2021-10 CWG Motion 7] P2360R0 Extend init-statement to allow alias-declaration",
    "EDIT4969": "[2021-10 CWG Motion 8] P2036R3 Change scope of lambda trailing-return-type",
    "EDIT4970": "[2021-10 CWG Motion 9] P2128R6 Multidimensional subscript operator",
    "EDIT4971": "[2021-10 CWG Motion 10] P2314R4 Character sets and encodings",
    "EDIT4972": "[2021-10 LWG Motion 1] C++ Standard Library Issues to be moved in Virtual Plenary, Oct. 2021",
    "EDIT4973": "[2021-10 LWG Motion 2] P2372R3 Fixing locale handling in chrono formatters",
    "EDIT4974": "[2021-10 LWG Motion 3] P2415R2 What is a view?",
    "EDIT4975": "[2021-10 LWG Motion 4] P2418R2 Add support for std::generator -like types to std::format",
    "EDIT4976": "[2021-10 LWG Motion 5] P2432R1 fix istream_view",
    "EDIT4977": "[2021-10 LWG Motion 6] P0288R9 move_only_function",
    "EDIT4978": "[2021-10 LWG Motion 7] P0798R8 Monadic operations for std::optional",
    "EDIT4979": "[2021-10 LWG Motion 8] P0849R8 auto(x): decay-copy in the language",
    "EDIT4980": "[2021-10 LWG Motion 9] P1072R10 basic_string::resize_and_overwrite",
    "EDIT4981": "[2021-10 LWG Motion 10] P1147R1 Printing volatile Pointers",
    "EDIT4982": "[2021-10 LWG Motion 11] P1272R4 Byteswapping for fun&&nuf",
    "EDIT4983": "[2021-10 LWG Motion 12] P1675R2 rethrow_exception must be allowed to copy",
    "EDIT4984": "[2021-10 LWG Motion 13] P2077R3 Heterogeneous erasure overloads for associative containers",
    "EDIT4985": "[2021-10 LWG Motion 14] P2251R1 Require span & basic_string_view to be Trivially Copyable",
    "EDIT4986": "[2021-10 LWG Motion 15] P2301R1 Add a pmr alias for std::stacktrace",
    "EDIT4987": "[2021-10 LWG Motion 16] P2321R2 zip",
    "EDIT4988": "[2021-10 LWG Motion 17] P2340R1 Clarifying the status of the \"C headers\"",
    "EDIT4989": "[2021-10 LWG Motion 18] P2393R1 Cleaning up integer-class types",
    "EDIT4990": "[2021-10 LWG Motion 19] P2401R0 Add a conditional noexcept specification to std::exchange",
    "EDIT4991": "\"automatic conversions\"",
    "EDIT4992": "P2334R1 Add support for preprocessing directives elifdef and elifndef",
    "EDIT4993": "P2242R3  Non-literal variables (and labels and gotos) in constexpr functions",
    "EDIT4994": "P2316R2 Consistent character literal encoding",
    "EDIT4995": "P2246R1 Character encoding of diagnostic text",
    "EDIT4996": "P2360R0 Extend init-statement to allow alias-declaration",
    "EDIT4997": "P2128R6 Multidimensional subscript operator",
    "EDIT4998": "P2301R1 Add a pmr alias for std::stacktrace",
    "EDIT4999": "P2401R0 Add a conditional noexcept specification to std::exchange",
    "EDIT5000": "P2251R1 Require span & basic_string_view to be Trivially Copyable",
    "EDIT5001": "[c.mb.wcs] mbrtoc8 should generally be said to store code units",
    "EDIT5002": "P0847R7 Deducing this",
    "EDIT5003": "P2036R3 Change scope of lambda trailing-return-type",
    "EDIT5004": "P2314R4 Character sets and encodings",
    "EDIT5005": "P2372R3 Fixing locale handling in chrono formatters",
    "EDIT5006": "[macros] Preserve straight apostrophes in code.",
    "EDIT5007": "[utility.intcmp].9 is redundant",
    "EDIT5008": "[utility.intcmp] Remove Mandates implied by Equivalent to",
    "EDIT5009": "[vector.cons].10 Code font `N` should be math font $N$",
    "EDIT5010": "P2415R2 What is a view?",
    "EDIT5011": "P2418R2 Add support for std::generator-like types to std::format",
    "EDIT5012": "P2432R1 Fix istream_view",
    "EDIT5013": "P0288R9 move_only_function",
    "EDIT5014": "P0798R8 Monadic operations for std::optional",
    "EDIT5015": "P0849R8 auto(x): decay-copy in the language",
    "EDIT5016": "P1072R10 basic_string::resize_and_overwrite",
    "EDIT5017": "P1147R1 Printing volatile Pointers",
    "EDIT5018": "P1272R4 Byteswapping for fun&&nuf",
    "EDIT5019": "P1675R2 rethrow_exception must be allowed to copy",
    "EDIT5020": "P2077R3 Heterogeneous erasure overloads for associative containers",
    "EDIT5021": "LWG3480 directory_iterator and recursive_directory_iterator are not C++20 ranges",
    "EDIT5022": "Consider introducing a new grammar `pp-balanced-token-seq`",
    "EDIT5023": "[over.best.ics] Minor reading improvements",
    "EDIT5024": "P2321R2 zip",
    "EDIT5025": "P2340R1 Clarifying the status of the \"C headers\"",
    "EDIT5026": "P2393R1 Cleaning up integer-class types",
    "EDIT5027": "P2450 C++ Standard Library Issues to be moved in Virtual Plenary, Oct. 2021",
    "EDIT5028": "[pairs.pair] contains a mix of T1/T2 and first_type/second_type",
    "EDIT5029": "[move.iterator] Use the template parameter directly in declaration of base()",
    "EDIT5030": "P2462R0 Core Language Working Group \"ready\" Issues for the October, 2021 meeting",
    "EDIT5031": "[iostreams] Make \"sentry\" object code font throughout",
    "EDIT5032": "inconsistent formatting for \\U+nnnn",
    "EDIT5033": "[lex.ccon]/p2 Reword long sentence so it's easier to parse",
    "EDIT5034": "What's a \"first-class object\"?",
    "EDIT5035": "How to format around a codeblock",
    "EDIT5036": "[time.format] Avoid sentence fragments in list",
    "EDIT5037": "[range.lazy.split.outer.value] Fix indexed outer class name",
    "EDIT5038": "Wording for how \"a contained value is initialized\" could be simplified",
    "EDIT5039": "[expr.type.conv] Move description of 'auto' deduction to [dcl.type.auto.deduct]",
    "EDIT5040": "[lex] P2314r4 fixes",
    "EDIT5041": "\"Duplicate\" index entries re: implementation-defined mapping from source",
    "EDIT5042": "[utilities][range.nonprop.cache] Simplify direct-non-list-initalization phrasing",
    "EDIT5043": "[support.c.headers.general] Do not use \\libheader with placeholder.",
    "EDIT5044": "[expos.only.func] Should we move decay-copy to [range.adaptors.general] ?",
    "EDIT5045": "what are \"view\"s?",
    "EDIT5046": "Indentation in the presence of requires-clauses",
    "EDIT5047": "[container.requirements] Improve punctuation of list items.",
    "EDIT5048": "[ranges] Tweak use of braces and whitespace",
    "EDIT5049": "[basic.def.odr] Introduce label 'term.odr.use' and refer to it",
    "EDIT5050": "[diff.cpp14.lex] Fix index entry for implementation-defined behavior",
    "EDIT5051": "Dangling references in index ",
    "EDIT5052": "Fix sentry dealings",
    "EDIT5053": "[vector.cons] Use math formatting for 'N' for consistency",
    "EDIT5054": "[c.mb.wcs] mbrtoc8 stores code units, not characters",
    "EDIT5055": "[index] Add UTF-8, UTF-16, UTF-32 to the index",
    "EDIT5056": "[system.error.syn,locale.facet] Replace 'automatic' by 'implicit' conversion",
    "EDIT5057": "[pairs.pair] Use T1/T2, not first_type/second_type",
    "EDIT5058": "[time.format] Avoid non-sentence in bulleted list",
    "EDIT5059": "[lex.ccon] Clarify antecedent for 'it'",
    "EDIT5060": "[basic.start.main, dcl.link] Avoid implementation guidance in note",
    "EDIT5061": "Mix of \"see\" and page numbers in the same index entry",
    "EDIT5062": "[expr.await] Remove hyphen from \"re-thrown\"",
    "EDIT5063": "Does the rule of \"corresponding bit\" need clarification?",
    "EDIT5064": "[range.view] Move note outside of list.",
    "EDIT5065": "[cpp.replace.general] Rephrase function-like macro invocations",
    "EDIT5066": "[index] Fix dangling 'see' references",
    "EDIT5067": "[func.wrap.func.general,func.wrap.move.class] Remove 'first-class' object",
    "EDIT5068": "Cv-qualification for access to inherited members",
    "EDIT5069": "Fixes misapplied resolution of LWG3539",
    "EDIT5070": "[basic.indet][bit.cast] Why \"unsigned ordinary character\"?",
    "EDIT5071": "[temp.constr.atomic] Fix phrasing in note",
    "EDIT5072": "[expr.prim.req.general] Change requirement-seq to right-recursive",
    "EDIT5073": "Avoid implementation guidance in notes",
    "EDIT5074": "[stdatomic.h.syn] Fix missing \\expos",
    "EDIT5075": "[intro.object,lex.ccon] Use \\Cpp{} macros",
    "EDIT5076": "[alg.c.library,c.math.fpclass,cmath.syn] Use \\xrefc macro",
    "EDIT5077": "[lex] Use \\textsc for Unicode character names",
    "EDIT5078": "[expr.ref] specify the result of a reference member access expression",
    "EDIT5079": "[macros] Allow \\keyword and \\grammarterm in section headings",
    "EDIT5080": "[std] Replace 'OK:' in code comments with 'OK,'",
    "EDIT5081": "Fix inconsistency in class grammar vs text",
    "EDIT5082": "[basic.link]/10 definition of \"attached to module\" is redunant and circular",
    "EDIT5083": "[basic.start.main] remove redundant phrase",
    "EDIT5084": "[dcl.init.general] Could the definition of value-initialization be simplified?",
    "EDIT5085": "[dcl.fct.def.coroutine] mention of `*this` does not make sense after P0847R7",
    "EDIT5086": "[over.best.ics] Clarify phrasing around user-defined conversion sequence",
    "EDIT5087": "[basic.fundamental] Clarify unspecified representation",
    "EDIT5088": "C compatibility fixes",
    "EDIT5089": "[check] Cosmetics",
    "EDIT5090": "[lex.string]: Encoding described only for expression evaluation",
    "EDIT5091": "[except.throw] doesn't specify the type of the lvalue denoting the exception object",
    "EDIT5092": "[except.throw,except.handle] Move lvalue specification for copies",
    "EDIT5093": "[lex] Unicode character names",
    "EDIT5094": "Unicode naming cleanups",
    "EDIT5095": "[lex.string] Clarify size of string-literal",
    "EDIT5096": "[defs] Update introduction to match ISO Directives",
    "EDIT5097": "[dcl.fct.def.coroutine] Limit 'this' to implicit object member functions",
    "EDIT5098": "[intro.refs] 3 ISO/IEC 9945:2003",
    "EDIT5099": "[intro.refs] Update dated reference to previous POSIX standard",
    "EDIT5100": "[locale.time.get] Replace 'ISO/IEC 9945' with 'POSIX'",
    "EDIT5101": "[lex.charset] Define 'valid encoding'",
    "EDIT5102": "[input.output] Fix headings of 'assign and swap' subclauses",
    "EDIT5103": "[dcl.init.string] p1 Successive characters initializing array elements make nosense after P2314",
    "EDIT5104": "Introduce term.* labels for [basic.types.general] terms",
    "EDIT5105": "[basic.fundamental] Excise normative requirements std::numeric_limits",
    "EDIT5106": "[spanstream.ctor] Fix base class name in effects",
    "EDIT5107": "[dcl.typedef] p2 Unexplained lookup \"error\" in example",
    "EDIT5108": "[dcl.typedef] Add explanation for lookup failure in example",
    "EDIT5109": "[version.syn] Use a digit separator to split the year and the month",
    "EDIT5110": "[temp.explicit] Note disallows explicit instantiation of non-template member functions of a class template specialization",
    "EDIT5111": "[std] Index specializations of range variable templates",
    "EDIT5112": "[range.adjacent.overview] Fix multi-character in example",
    "EDIT5113": "[index] Index keywords as '<keyword>, keyword' for differentiation",
    "EDIT5114": "[chrono.syn] Use nested namespace definitions for clarity",
    "EDIT5115": "[temp.arg.explicit] doesn't allow converting arguments if they deduced template parameters in non-deduced context",
    "EDIT5116": "[expr.prim.req.nested] Fix restriction on local parameters",
    "EDIT5117": "[version.syn] Add digit separators between year and month",
    "EDIT5118": "[lex.string,dcl.init.string] Use 'code unit' for initialization from a string-literal",
    "EDIT5119": "[smartptr] Rework subclause nesting",
    "EDIT5120": "[atomics.types.int] Reference [tab:atomics.types.int.comp]",
    "EDIT5121": "[allocator.adaptor.members] Fix select_on_container_copy_construction",
    "EDIT5122": "[refwrap.general] Add cross-references to the class synopsis",
    "EDIT5123": "[temp.deduct.conv] Implementations think there is a defect in this subclause",
    "EDIT5124": "Restructuring clauses for C++23",
    "EDIT5125": "[cpp.cond,cpp.predefined,version.syn] Highlight preprocessor dates",
    "EDIT5126": "[lib] Add 'namespace std' wrappings around class definitions",
    "EDIT5127": "[basic.lookup.qual.general] p2 Improve the definition of a member-qualified name",
    "EDIT5128": "Repository",
    "EDIT5129": "[temp.deduct.general]/p7 should exclude exception specifications",
    "EDIT5130": "[temp.deduct.general] Clarify explicit-specifier and exception specifications",
    "EDIT5131": "[over.oper.general] default arguments for operator[]",
    "EDIT5132": "[ranges] Considering adding ExecutionPolicy parameters into std::ranges::for_each",
    "EDIT5133": "[dcl.attr.grammar] Clarify that only non-standard attributes can be ignored",
    "EDIT5134": "[associative.reqmts.general] introduces `r` with two different meanings",
    "EDIT5135": "[associative.reqmts.general]/8.22.1 mentions nonexistent `rx`",
    "EDIT5136": "[associative.reqmts.general] Fix typo: 'kx', not 'rx'",
    "EDIT5137": "[fs.class.path.general]Where is section 4.12\uff1f",
    "EDIT5138": "[associative.reqmts.general] Fix confusing local use of 'r'",
    "EDIT5139": "[temp.local] injected-class-name as a type-name",
    "EDIT5140": "[over.sub] Fix typo: change oeprator to operator",
    "EDIT5141": "[temp.local] Fix type-name interpretation of injected-class-name",
    "EDIT5142": "[over.sub] Subscripting may have default arguments CWG2507",
    "EDIT5143": "[class.conv.fct] specifies the wrong type for conversion functions with explicit object parameters",
    "EDIT5144": "[class.virtual] Overriding virtual function through an explicit object member function",
    "EDIT5145": "[class.virtual] Explicit object member functions cannot be virtual",
    "EDIT5146": "Inconsistent cross-references for array of unknown bound",
    "EDIT5147": "[range.access] Fix cross-references for 'array'",
    "EDIT5148": "[dcl.meaning.general] p2.3 Correspond to a declaration that inhabits the block scope is not sufficient",
    "EDIT5149": "[dcl.meaning.general] Clarify correspondence for block-scope friends",
    "EDIT5150": "[temp.deduct.general] The rules regarding \"deduction fails\" need to be rearranged",
    "EDIT5151": "[std] Extend \\iref to accept a list of cross-references",
    "EDIT5152": "[depr.default.allocator] Index allocator::is_always_equal here",
    "EDIT5153": "[std] Fix bad \\grammarterms",
    "EDIT5154": "[atomics] Harmonize references to atomics operations tables",
    "EDIT5155": "[format.arg] Fix the determination of T without cvref-qualifiers removed",
    "EDIT5156": "[format.arg] Fix the determination of T without cvref-qualifiers removed LWG3631",
    "EDIT5157": "[dcl.meaning.general] p6 Which specifiers in the decl-specifier-seq contribute to the type of declarations are underspecified",
    "EDIT5158": "Avoid \"compiler\"",
    "EDIT5159": "[conv.rank] p1.10 Improve the definition of comparing ranks",
    "EDIT5160": "[over.ics.rank] p3.2.1 \"Proper subsequence\" vs. \"subsequence\"",
    "EDIT5161": "c plus plus application openSUSE 15.2 cannot find -lmysqlclient_",
    "EDIT5162": "[dcl.init.aggr] The meaning of \"corresponding\" is vague in aggregate initialization",
    "EDIT5163": "Lack an explicit restriction on \"return type\" in the explicit function template instantiation/specialization ",
    "EDIT5164": "[macros] Use math font for ranges",
    "EDIT5165": "[temp.variadic] Clarify \"pack expansion of its initialization\"",
    "EDIT5166": "[expr.prim.id.unqual] p3 Improve the utterance: \"contain\" vs. \"in\"",
    "EDIT5167": "[meta.rel] Avoid undefined term 'void types'",
    "EDIT5168": "[locale.ctype.virtuals] Clarify do_widen parameter",
    "EDIT5169": "[diff.expr] Replace 'will' with present tense",
    "EDIT5170": "[diff.stmt] Properly refer to function return types",
    "EDIT5171": "[basic.scope.pdecl] The locus of using-directives are underspecified",
    "EDIT5172": "[over.match.oper] p2, p3, p7 several issues",
    "EDIT5173": "[class.member.lookup] Clarify \"unambiguous base class\"",
    "EDIT5174": "[diff] Annotate keywords",
    "EDIT5175": "[class.cdtor.example] p1 The comment is wrong since the example violates [class.cdtor]p3",
    "EDIT5176": "Direct non-static data member vs. non-static data member",
    "EDIT5177": "The meaning of \"under construction or destruction\" is not precise",
    "EDIT5178": "[core] Replace 'enumerated type' with 'enumeration'",
    "EDIT5179": "[expr] Cleanup for 'discarded-value expression'",
    "EDIT5180": "[over.literal] p1 is out-date",
    "EDIT5181": "[lex.string] p7 Lacks the case that both have no \"encoding-prefix\"",
    "EDIT5182": "[diff.mods.to.declarations] Additions in <cmath> are not mentioned",
    "EDIT5183": "[stmt.expr] p1 There is not only a side effect but also value computation",
    "EDIT5184": "Improve [dcl.fct.def.general] p2",
    "EDIT5185": "[expr.prim.id.qual]/(3.2) declarative nested-name-specifier nominating a partial specialization",
    "EDIT5186": "[temp.dep.general] p2.1 lacks a trialing 'or'",
    "EDIT5187": "[lex.name] p3 contradicts to [usrlit.suffix]p1",
    "EDIT5188": "[lex.ppnumber] should also include user-defined-integer-literal and user-defined-floating-point-literal",
    "EDIT5189": "[temp.res.general]/1 What does \"is or is reachable\" mean?",
    "EDIT5190": "[temp.res.general] Clarify binding of names",
    "EDIT5191": "[basic.lookup.unqual] Clarify conversion-function-id components lookup",
    "EDIT5192": "Macro replacement is performed in a has-include-expression?",
    "EDIT5193": "[class.copy.ctor] p15 Only the corresponding active object can be created and copied from the source",
    "EDIT5194": "[class.copy.ctor] p10 What is the selected one by overload resolution for a variant member in the context of implicitly copy/move constructor for a union?",
    "EDIT5195": "[algorithm.syn][alg.min.max] Fix indexing of indirectly_copyable_storable",
    "EDIT5196": "[pairs.pair] Add missing `_v`",
    "EDIT5197": "[class.copy.assign] lacks to specify the effect of the implicitly-defined move assignment operator for a union class",
    "EDIT5198": "move_only_function takes one signature",
    "EDIT5199": "[expr.add] p4 lacks to specify the case when the expression J has an unscoped enumeration type",
    "EDIT5200": "[class.bit] p4 It is not clear whether a value of enumeration whose underlying type is fixed can be compared equally with the stored value in a bit-field",
    "EDIT5201": "[dcl.struct.bind] structured bindings vs. potentially conflict",
    "EDIT5202": "[func.memfn] Correct target object by fixing typo",
    "EDIT5203": "[func.require] Introduce labels 'term.perfect.forwarding.call.wrapper'",
    "EDIT5204": "[temp.param] Delete outdated wording at p15",
    "EDIT5205": "Create an exposition-only helper for the std::optional copy/move ctor constraints",
    "EDIT5206": "[util.smartptr.atomic] Add a note mentioning <memory>",
    "EDIT5207": "[util.smartptr.atomic] Add cross-reference to <memory> header",
    "EDIT5208": "[expr.await] lacks the specification for overload \"operator co_await\"",
    "EDIT5209": "[basic.lookup.argdep] should also perform if function declaration is not found",
    "EDIT5210": "[macros] Introduce 'term.*' labels",
    "EDIT5211": "[macros] In \\ucode, align size of digits and letters",
    "EDIT5212": "Less redundant 'typename' in type-id-only contexts",
    "EDIT5213": "the lifetime of the variant members of union class objects operated by memcpy",
    "EDIT5214": "[stmt.return.coroutine] p3 the original function-body vs. the replaced function-body ",
    "EDIT5215": "[editoral] the ambiguity in [stmt.return] p4",
    "EDIT5216": "[class.mem.general] only second use of \"layout-compatible types\" has xref to definition",
    "EDIT5217": "[stmt.return] Clarify flowing off the end of a function",
    "EDIT5218": "[class.mem.general] Add cross-reference for 'layout-compatible type'",
    "EDIT5219": "[basic.life] p1 omits a cross-reference to [class.copy.assign] for union member case",
    "EDIT5220": "[class.pre] p2 what is the locus of a injected-class-name?",
    "EDIT5221": "[basic.lookup.unqual] p5 The component names of a type-specifier or ptr-operator are underspecified",
    "EDIT5222": "[util.smartptr.atomic.general] Fix xref",
    "EDIT5223": "Improve certain definitions in [class.mem.general]",
    "EDIT5224": "P2441 Fix \"In that case\"",
    "EDIT5225": "inconsistent use of periods versus hyphens in [defns]",
    "EDIT5226": "[text] Create \"Text processing library\" clause",
    "EDIT5227": "[std] Replace hyphen with period in labels",
    "EDIT5228": "[basic.life] Add cross-reference for union member lifetime",
    "EDIT5229": "Move [class.free]",
    "EDIT5230": "Move [class.free]",
    "EDIT5231": "[stacktrace] Move into [diagnostics]",
    "EDIT5232": "[temp.res] Move a note outside itemize environment",
    "EDIT5233": "P2416 Inconsistent wording in the requirements for expressions",
    "EDIT5234": "[range.req.general]/2 still says view requires constant time destruction",
    "EDIT5235": "[range.req.general] Remove incorrect normative duplication for 'view'",
    "EDIT5236": "[except.handle] p9 handler vs. implicit handler ",
    "EDIT5237": "P1766R1 partially not reflected in draft",
    "EDIT5238": "Some unclear wording in [except]",
    "EDIT5239": "The definition of \"reference-compatible\" is not accurate ",
    "EDIT5240": "[stream.types][derivation] What are \"basic integral types\"?",
    "EDIT5241": "Terms \"template declaration\" and \"template entity\" are undefined",
    "EDIT5242": "[derivation] Remove 'basic integral type' from footnote",
    "EDIT5243": "[expr.prim.lambda.capture] vs. [basic.def.odr] in their use of \u00abnames\u00bb/\u00abnamed by\u00bb",
    "EDIT5244": "[iterator.operations] clarify preconditions on std::distance",
    "EDIT5245": "[fs.class.directory.iterator.general] Fix grammar",
    "EDIT5246": "Fix order of std-format-spec field descriptions.",
    "EDIT5247": "[lex.charset] p5 The associated character type of a code unit is not clear",
    "EDIT5248": "P2441R2 views::join_with",
    "EDIT5249": "P2442R1 Windowing range adaptors: views::chunk and views::slide",
    "EDIT5250": "[range.slide.view] Replace conditional with call to max",
    "EDIT5251": "[iterator.concept.winc] Duplicate paragraph",
    "EDIT5252": "P2443R1 views::chunk_by",
    "EDIT5253": "[iterator.concept.winc] Remove duplicate paragraph",
    "EDIT5254": "[expr.prim.lambda.capture] Fix 'potentially references' for members",
    "EDIT5255": "The links to [term.odr.use] all response 404.",
    "EDIT5256": "[container.gen.reqmts] Eliminate \"Value:\"",
    "EDIT5257": "[2022-02 CWG Motion 1] P2533R0 (Core Language Working Group \"ready\" Issue",
    "EDIT5258": "[2022-02 CWG Motion 2] P2173R1 Attributes on Lambda-Expressions",
    "EDIT5259": "[2022-02 CWG Motion 3] P2493R0 Missing feature test macros for C++20 core papers",
    "EDIT5260": "[2022-02 LWG Motion 1] P2531R0 C++ Standard Library Issues",
    "EDIT5261": "[2022-02 LWG Motion 2] P0323R12 std::expected",
    "EDIT5262": "[2022-02 LWG Motion 3] P0533R9 constexpr for <cmath> and <cstdlib>",
    "EDIT5263": "[2022-02 LWG Motion 4] P0627R6 Function to mark unreachable code",
    "EDIT5264": "[2022-02 LWG Motion 5] P1206R7 ranges::to: A function to convert any range to a container",
    "EDIT5265": "[2022-02 LWG Motion 6] P1413R3 Deprecate std::aligned_storage and std::aligned_union",
    "EDIT5266": "[2022-02 LWG Motion 7] P2255R2 A type trait to detect reference binding to temporary",
    "EDIT5267": "[2022-02 LWG Motion 8] P2273R3 Making std::unique_ptr constexpr",
    "EDIT5268": "[2022-02 LWG Motion 9] P2387R3 Pipe support for user-defined range adaptors",
    "EDIT5269": "[2022-02 LWG Motion 10] P2440R1 ranges::iota, ranges::shift_left and ranges::shift_right",
    "EDIT5270": "[2022-02 LWG Motion 11] P2441R2 views::join_with",
    "EDIT5271": "[2022-02 LWG Motion 12] P2442R1 Windowing range adaptors: views::chunk and views::slide",
    "EDIT5272": "[2022-02 LWG Motion 13] P2443R1 views::chunk_by",
    "EDIT5273": "P2173R1 Attributes on lambda-expressions",
    "EDIT5274": "P2493R0 Missing feature test macros for C++20 core papers",
    "EDIT5275": "[dcl.init.list] Unparenthesize cross-reference",
    "EDIT5276": "P0323R12 std::expected",
    "EDIT5277": "[namespace.udecl] does not explicitly state the reason for special member hidden",
    "EDIT5278": "P0533R9 constexpr for <cmath> and <cstdlib>",
    "EDIT5279": "P0627R6 Function to mark unreachable code",
    "EDIT5280": "P1206R7 Conversions from ranges to containers",
    "EDIT5281": "what is the locus of a function-definition?",
    "EDIT5282": "P1413R3 Deprecate std::aligned_storage and std::aligned_union",
    "EDIT5283": "P2255R2 A type trait to detect reference binding to temporary",
    "EDIT5284": "P2273R3 Making std::unique_ptr constexpr",
    "EDIT5285": "P2387R3 Pipe support for user-defined range adaptors",
    "EDIT5286": "P2440R1 ranges::iota, ranges::shift_left, and ranges::shift_right",
    "EDIT5287": "P2533R0 Core Language Working Group \"ready\"",
    "EDIT5288": "P2531R0 C++ Standard Library Issues",
    "EDIT5289": "we didn't explicitly specify that the current instantiation does not cause an implicit instantiation",
    "EDIT5290": "[module.interface] Add adjective 'exported' to dangling prons",
    "EDIT5291": "[stdatomic.h.syn] Add missing atomic_fetch_xor/_explicit",
    "EDIT5292": "[locale.cons] Ambiguous argument in Throws for locale+name+category constructor",
    "EDIT5293": "[range.zip.iterator]  Fix typo",
    "EDIT5294": "[expr.prim.lambda.closure] Conversion to function pointer doesn't account for explicit object parameter",
    "EDIT5295": "The resumer of a coroutine may not be a function",
    "EDIT5296": "[lex.name] prohibits uses of predefined macro names and feature-test macros",
    "EDIT5297": "Cplusplus",
    "EDIT5298": "[dcl.fct.def.coroutine] Initializer of a non-block variable is also a resumer",
    "EDIT5299": "[class.temporary] The use of term \"trivially copyable\" may be wrong",
    "EDIT5300": "Regardez \"Sokuu - Survie\" sur YouTube",
    "EDIT5301": "import-keyword, module-keyword, and export-keyword are not preprocessing tokens",
    "EDIT5302": "An improvement to ADL for the name declared by a friend declaration ",
    "EDIT5303": "Unable to find label {term.odr.use}",
    "EDIT5304": "[lex.name] Rephrase note to avoid upper/lower-case",
    "EDIT5305": "Difference between \"execution\" and \"evaluation\"",
    "EDIT5306": "[lib] Add missing \\pnum before descriptive elements",
    "EDIT5307": "[basic.start.dynamic] didn't state the situation for the initialization of the non-block thread storage duration inline variable",
    "EDIT5308": "How to space ref qualifiers",
    "EDIT5309": "[range.slide.iterator] Remove `@` in `\\tcode`",
    "EDIT5310": "[allocator.requirements.general] Remove unused provisions",
    "EDIT5311": "[version.syn] Remove mention of nonexistent header `<priority_queue>`",
    "EDIT5312": "spacing of ref-qualifiers",
    "EDIT5313": "Clause reorganization for C++23 ",
    "EDIT5314": "[diff.cpp20.library] is missing",
    "EDIT5315": "Restructuring clauses for C++26",
    "EDIT5316": "[headers][expected.syn] Index and list `<expected>`",
    "EDIT5317": "[temp.variadic] Use consistent utterances associated with pack expansion",
    "EDIT5318": "[class.prop] ambiguous conditions in definition of implicit-lifetime class",
    "EDIT5319": "[class.prop] Clarify definition of implicit-lifetime class",
    "EDIT5320": "[thread] Rename to 'Concurrency support library'",
    "EDIT5321": "Move the restrictions regarding macros away from [library] (or add links to them)",
    "EDIT5322": "[range.chunk.outer.value] Add missing private specifier",
    "EDIT5323": "How to specify small nested classes: struct/class, private members",
    "EDIT5324": "[diff.cpp20.library] Add subclause, highlighting new headers",
    "EDIT5325": "[range.chunk.inner.iter] Fix index reference.",
    "EDIT5326": "[range.slide.overview] Fix multi-character typo",
    "EDIT5327": "[allocator.requirements.general] Dismantle requirements table",
    "EDIT5328": "[range.utility.conv.general] Should `reservable-container` and `container-insertable` be concepts?",
    "EDIT5329": "[range.chunk.outer.value] Fix unformatted dereference operator",
    "EDIT5330": "[diff.expr][diff.dcl] Features removed in C99 are still mentioned",
    "EDIT5331": "[range.adjacent.transform.iterator] Fix template parameter typo",
    "EDIT5332": "[expr.const] Add cross-reference for construct_at",
    "EDIT5333": "[range.utility.conv.general] Add missing template parameter to container_inserter",
    "EDIT5334": "[container.rev.reqmts] p16+ are not \"reversible container requirements\"",
    "EDIT5335": "[class.compare.secondary] The extent to which \"The defaulted operator function is not considered\" applies CWG2546",
    "EDIT5336": "[class.compare.default] p1 The condition of implicitly defining a defaulted comparison operator function CWG2546",
    "EDIT5337": "[dcl.fct.def.default] Restrictions on what comparison operator function can be explicitly defaulted CWG2547",
    "EDIT5338": "[class.spaceship] lacks to specify the behavior if the defined expression for synthesized three-way comparison is ill-formed",
    "EDIT5339": "A subobject is contained by another object rather than by a type",
    "EDIT5340": "[temp.deduct.call] p1 The comment for a function parameter pack is conflict",
    "EDIT5341": "[temp.arg.explicit] p5 Explicitly specified template arguments can enforce to use the template",
    "EDIT5342": "[dcl.type.decltype] p1 What is the entity named by E when E is a class member access",
    "EDIT5343": "[temp.deduct.type] p4  Template parameter pack is only used in non-deduced context",
    "EDIT5344": "[temp.deduct.general] p1 What are these necessary template arguments when referring to a function template specialization",
    "EDIT5345": "The grammar template-name component has a narrow definition",
    "EDIT5346": "The definition of what entity denoted by a qualified-id is not clear",
    "EDIT5347": "Inconsistent \"default\"s in allocator requirements tables",
    "EDIT5348": "Preexisting: These probably needs to be more than just derived. Like \"a type with a base characteristic ([meta.rqmts]) of `bool_constant<`_`B`_`>`\".",
    "EDIT5349": "How many objects or references are associated with a block variable with static storage duration(in multi-thread)?",
    "EDIT5350": "[Editoral] Typo on home page",
    "EDIT5351": "[basic.lookup] lookup context vs. cv-qualified that type",
    "EDIT5352": "[class.temporary] p6.6 \"glvalue operand\" is misleading",
    "EDIT5353": "Improve the definition of the brace elision of aggregate initialization",
    "EDIT5354": "The range of representable values of compound types",
    "EDIT5355": "[expr.const.cast] Use \"shall\" to impose the requirement",
    "EDIT5356": "[basic.compound] p4 What the definition of whether two objects are the same",
    "EDIT5357": "[expr.cast] Clarify ambiguous static_cast/const_cast",
    "EDIT5358": "[conv.qual] Improvement and supply the omitted result",
    "EDIT5359": "[range.adjacent.transform.iterator] Fix wrong template parameter in adjacent_transform_view::iterator",
    "EDIT5360": "[expected.unexpected] Rearrange std::unexpected",
    "EDIT5361": "[over.match.funcs.general] p4 direct member vs. member for defining the type of implicit object parameter",
    "EDIT5362": "[spanstream.syn] doesn't mention `swap()` overloads",
    "EDIT5363": "[spanbuf] should be titled \"Class template `basic_spanbuf`\"",
    "EDIT5364": "[over.match.funcs.general] p5 user-defined conversions sequence are not considered for object parameter CWG2557",
    "EDIT5365": "[spanbuf] Fix template name in subclause heading",
    "EDIT5366": "[span.streams] Move non-member swaps to header synopsis",
    "EDIT5367": "[intro.refs] Add UAX#29 to normative references",
    "EDIT5368": "P2071R2 Named universal character escapes",
    "EDIT5369": "[over.best.ics.general] The type of parameter is unclear",
    "EDIT5370": "[lex.name] Remove extra vertical space in grammar",
    "EDIT5371": "[over.best.ics.general] The wording about implicit conversion sequence is inconsistent",
    "EDIT5372": "[temp.arg.template] p4 Saying PP is an id-expression has a wrong assumption",
    "EDIT5373": "[stacktrace.syn] should depict `<stacktrace>` including `<compare>`",
    "EDIT5374": "[stacktrace.syn] Add '#include <compare>'",
    "EDIT5375": "[alg.min.max] hasn't been updated when LWG3180 has been applied",
    "EDIT5376": "[alg.min.max] Consistently specify `ranges::minmax_element` with `ranges::minmax_element_result`",
    "EDIT5377": "[intro.progress] Does p1 conditionally introduce a kind of undefined behavior?",
    "EDIT5378": "nodiscard of allocate_at_least misses a closing bracket",
    "EDIT5379": "[memory.syn] Add missing closing bracket for attribute",
    "EDIT5380": "[expected.object.general] Remove explicit(see below) for expected copy/move constructor",
    "EDIT5381": "[expected.object.general] Add missing noexcept for expected::error()",
    "EDIT5382": "[range.utility.conv.general] Add missing constexpr for container-inserter",
    "EDIT5383": "[range.adaptors] Make the prints message format consistent",
    "EDIT5384": "LWG3687. `expected<cv void, E>` move constructor should move",
    "EDIT5385": "[atomics.syn] doesn't depict `memory_order_meow`",
    "EDIT5386": "[allocator.requirements.general] Specify all member types with `typename`",
    "EDIT5387": "[class.member.lookup] p7 Whether two conversion function (template)s correspond?",
    "EDIT5388": "[temp.over.link] types involving template parameters are not expressions",
    "EDIT5389": "[temp.constr.normal] The obscure(contradictory) of the normalization of a concept-id",
    "EDIT5390": "[expr.new] p26 Is the matching deallocation function guaranteed to be invoked when no matching handler can be found? CWG2566",
    "EDIT5391": "[class] \"class lattice\" is never clearly defined",
    "EDIT5392": "[expr.static.cast] p10 Circular definition of explicitly converting an integer value to enumeration type",
    "EDIT5393": "[cpp.pre] p1 directive-introducing token is immediately followed by a whitespace",
    "EDIT5394": "[temp.constr.normal]: Missing trailing semicolon after concept definition",
    "EDIT5395": "Update templates.tex",
    "EDIT5396": "Fix placement of namespace-scope declarations",
    "EDIT5397": "[string.view.deduct] Move to immediately after [string.view.cons]",
    "EDIT5398": "[expr.shift] p1 What is the promoted type of a source type to which integral promotion does not apply?",
    "EDIT5399": "[expr.call] Clarify the value of this",
    "EDIT5400": "[expr.prim.lambda.closure] p3 What is the return type of a function call operator(template) if trailing-return-type is omitted?",
    "EDIT5401": "[over.match.oper] p2 It seems that p2 omits the function call operator",
    "EDIT5402": "[depr.tuple],[depr.variant] Use struct class-key consistently",
    "EDIT5403": "[expected] Use `unex` as exposition-only name for all unexpected values",
    "EDIT5404": "[class.access.base] p5 Whether the base-specifier-list of a derived class is a point R where protected member is accessible? CWG372",
    "EDIT5405": "[expr.prim.lambda.general] Clarify deduced lambda return type",
    "EDIT5406": "[basic.def.odr] p10 What does function definition scope mean in this current draft?",
    "EDIT5407": "[expr] It is underspecified when evaluating an operation whose operands have values designated NaN ",
    "EDIT5408": "[iterator.concept.readable] remove obsolete Note",
    "EDIT5409": "[associative] Add \"i.e.\" in front of explanation",
    "EDIT5410": "[lex.ccon] A typo for \"'\" in table 10 ",
    "EDIT5411": "Fix the typo for \"apostrohpe\"",
    "EDIT5412": "Fix the typo for \"apostrohpe\"",
    "EDIT5413": "[except.pre] Reword \"shall not be used to\" avoiding question of actual \"use\"",
    "EDIT5414": "[range.utility.conv.general] Strike extraneous semicolon",
    "EDIT5415": "[expr.call] The result type of a function call and the value category relying on it",
    "EDIT5416": "[optional.ctor], [expected.object.ctor] Add converts-from-any-cvref",
    "EDIT5417": "Where to get the C++98 and C++03 drafts?",
    "EDIT5418": "[class.access] Remove dangling Note",
    "EDIT5419": "[ranges.syn] remove trailing `-> see below` return type from three `t\u2026",
    "EDIT5420": "[dcl.fct] p6 Does it make sense that a constructor can have an explicit object parameter?",
    "EDIT5421": "[class.dtor] p1 Make the requirement of a prospective destructor to be accurate.",
    "EDIT5422": "[dcl.constexpr] Uninitialized non-static data members of fundamental type CWG2558",
    "EDIT5423": "[expr.const] p5.14 The rule about lambda-expression in a core constant expression is not clear",
    "EDIT5424": "[expected.object.general, expected.void.general] copy and move constr\u2026",
    "EDIT5425": "[intro.execution] p3 Is an operand applied with (built-in)conversions not a subexpression of an operation E? ",
    "EDIT5426": "[dcl.constexpr] p6 Relax the condition for a constexpr function that could be well-formed",
    "EDIT5427": "Consider exposition-only helper for T(*)[] is convertible to U(*)[]",
    "EDIT5428": "Wholesale list of issues (with suggested fixes), as found in ISO14882:2020",
    "EDIT5429": "[cons.slice] lists undeclared copy constructor",
    "EDIT5430": "[thread.lock.unique.cons] should use nullptr",
    "EDIT5431": "[syncstream.osyncstream.cons] refers to undefined `os`",
    "EDIT5432": "[ostream.inserters.arithmetic] Missing itemdecl return types",
    "EDIT5433": "[over.match.best.general] example 7 should use 'c'",
    "EDIT5434": "[streambuf.virt.get] should use \"increments\"",
    "EDIT5435": "[thread.sema.cnt] missing parens on function call expression",
    "EDIT5436": "[thread.lock.unique.locking] confusion between function calls and names",
    "EDIT5437": "[stringbuf.virtuals] missing 'override' for setbuf",
    "EDIT5438": "Minor fixes related to issue 5428",
    "EDIT5439": "[namespace.udecl] How to consider the properties of an object parameter in the context other than overload resolution",
    "EDIT5440": "[namespace.udecl] p4 The member function of a base class cannot have the signature of the one of a derived class",
    "EDIT5441": "[range.transform.iterator] Add some missing \\exposid",
    "EDIT5442": "[stringbuf.virtuals] Add missing 'override' for setbuf",
    "EDIT5443": "[thread.sema.cnt] Add missing parentheses on function call expression",
    "EDIT5444": "[cons.slice] Add copy constructor for 'slice' to synopsis",
    "EDIT5445": "[syncstream.osyncstream.cons] Fix use of parameter name",
    "EDIT5446": "[over.match.best.general] Fix typo in example",
    "EDIT5447": "[over.match.ctor] Default-initialization and its argument list",
    "EDIT5448": "[namespace.udecl] Lack a sufficient rule to specify using-declaration cannot refer to a destructor",
    "EDIT5449": "[expr.prim.id.unqual] What id-expression denotes a destructor?",
    "EDIT5450": "[class.copy.ctor] Clarify the value category of the initializer in the implicit defined function",
    "EDIT5451": "Fix typos",
    "EDIT5452": "[class.copy.ctor] p6 The implicitly declared function does declare the function",
    "EDIT5453": "[temp.deduct] The substitution in deduction process that results failure should also apply to class templates CWG2054",
    "EDIT5454": "[temp.deduct.partial] The unclear points in partial ordering for function/class templates",
    "EDIT5455": "[range.join.with.iterator] Add missing 'template' keyword prior to dependent template name 'emplace'",
    "EDIT5456": "[dcl.fct.def.default] p2 The expression of tense ",
    "EDIT5457": "[temp.arg.nontype] Clarify the grammar meaning of template non-type argument",
    "EDIT5458": "[basic.def.odr] How is a default argument considered as a definition? ",
    "EDIT5459": "[temp.names] p9 The process of the parameter mapping is omitted",
    "EDIT5460": "[expr.prim.req] What is the kind of constraints introduced by requires expressions",
    "EDIT5461": "[temp.constr.normal] p1.4 The implementations have a divergence for substitution in the normalization of a concept-id",
    "EDIT5462": "[dcl.init.list p3.10 The prvalue mentioned in the initialization of the reference abruptly appears without any specification",
    "EDIT5463": "[over.ics.list] p9 The cross-referenced subclause [over.ics.ref] does not touch an non-expression initializer ",
    "EDIT5464": "[dcl.array] p8 A contradictory example and the rule should be improved",
    "EDIT5465": "[module.global.frag] Global namespace has no declaration how could it be \"decl-reachable\" from a declaration?",
    "EDIT5466": "[stacktrace.basic.nonmem] missing \\pnum in p2?",
    "EDIT5467": "[stacktrace.basic.nonmem] Add missing \\pnum before \\recommended",
    "EDIT5468": "[mem.poly.allocator.class.general] Specializations of `polymorphic_allocator` may need clarification",
    "EDIT5469": "[range.join.with.view] Add missing libconcept",
    "EDIT5470": "[mem.poly.allocator.class.general] Clarify `polymorphic_allocator<void>` etc.",
    "EDIT5471": "[basic.scope.temp] p2 Clarify the scope where D should have inhabited",
    "EDIT5472": "[ratio.arithmetic] Add missing index entries",
    "EDIT5473": "[fs.path.generic.obs] and [fs.path.modifiers]p2, wording of `make_preferred` and `generic_*` is ambiguous",
    "EDIT5474": "[range.join.view] Simplify `range_reference_t<V>` to `InnerRng`",
    "EDIT5475": "[over.oper.general] p7 Precedence is not a formal wording nor specified",
    "EDIT5476": "[expr.call] The value computation of a function call and the evaluations of expressions within the function body are not specified",
    "EDIT5477": "[intro.execution] p7 value computation vs. prvalue",
    "EDIT5478": "[range.join.iterator, range.join.with.iterator] Add `InnerBase` and replace more `OuterIter/InnerIter`",
    "EDIT5479": "[allocator.requirements.general] Consider changing Example 2",
    "EDIT5480": "[temp.dep.expr] p3 How an id-expression that is a template-id is dependent?",
    "EDIT5481": "[ranges] Consistent style for negated fold expressions in constraints",
    "EDIT5482": "[allocator.requirements.general] Simplify `SimpleAllocator` with some new styles",
    "EDIT5483": "[move.iter.cons] Add missing Returns clause",
    "EDIT5484": "[range.chunk.by.view] Should the help function `find-next`/`find-prev` of `chunk_by_view` be `private`?",
    "EDIT5485": "[expected.object.ctor] Use the injected class name to refer to the current instantiation",
    "EDIT5486": "The result of an expression is given different meanings between [basic.lval] and [expr.compound]",
    "EDIT5487": "[expected.object.general] E should use code-font",
    "EDIT5488": "The comment of the example in [dcl.init.general] p16.6.1 is wrong",
    "EDIT5489": "[dcl.init.general] Fix the informative description in 16.6.1 Example 2",
    "EDIT5490": "The bound of considering the context of the copy-initialization",
    "EDIT5491": "[class.ctor.general] p3 is made dangling by P1787",
    "EDIT5492": "[range.chunk.fwd.iter] Fix unformatted semicolon",
    "EDIT5493": "[conv.mem] p2 should specify the complete conversion path",
    "EDIT5494": "[range.chunk.overview], [range.chunk.by.overview] Fix inconsistent for loop format",
    "EDIT5495": "[dcl.fct]/22 An abbreviated function template is _functionally_ equivalent to a function template",
    "EDIT5496": "[dcl.meaning.general] p3.3 The lookup for the declarator-id that is an identifier in the explicit instantiation or specialization for function template",
    "EDIT5497": "[temp.expl.spec] p10 What if the declarator-id in an explicit specialization is not a template-id?",
    "EDIT5498": "[range.chunk.by.view] Add missing exposition only comment",
    "EDIT5499": "[ranges] Remove redundant `// exposition only` comments in itemdecl section",
    "EDIT5500": "[range.chunk.overview,range.slide.overview] Correct the italics of N/M in the overview",
    "EDIT5501": "[tuple.cnstr] Remove bad escaping in codeblock",
    "EDIT5502": "[lex.pptoken] p2 Split the quotation characters into the corresponding terms",
    "EDIT5503": "[stmt.dcl] p3 Improve the contradictory wording",
    "EDIT5504": "[std] Link header in summary tables to its synopsis",
    "EDIT5505": "[ranges] The explicity of the constructor needs to be consistent",
    "EDIT5506": "[diff.expr] Unmentioned incompatibility with C about pointer indirection CWG232",
    "EDIT5507": "[ranges] Should `constexpr default_sentinel_t end()` be `const`-qualified?",
    "EDIT5508": "Use of 'il' parameter name in functions taking initializer_lists inconsistent",
    "EDIT5509": "[expr.reinterpret.cast] p2 The meaning of \"its own type\" is not clear",
    "EDIT5510": "[module.reach] Remove redundant module implementation unit declaration",
    "EDIT5511": "[dcl.init.ref] p5.4.1 \"the result of the call\" is not an expression to which type check can be done",
    "EDIT5512": "Fixed wording regarding omitting the template argument list <>",
    "EDIT5513": "[res.on.functions] Use normal \"behavior is undefined\" words of power",
    "EDIT5514": "[range.istream.view] Add \\ref for `basic_istream_view::iterator`",
    "EDIT5515": "[range.istream.iterator] basic_istream_view::iterator is not a class \u2026",
    "EDIT5516": "[range.chunk] Add the class template description for `chunk_view`",
    "EDIT5517": "[func.wrap.move.ctor] Fix typo naming template parameter packs",
    "EDIT5518": "[container.reqmts] p65 seems to ban small string optimization",
    "EDIT5519": "[ranges.syn] Fix the constraints order of `slide_view`",
    "EDIT5520": "[range.adjacent.iterator] Use correct descriptive element",
    "EDIT5521": "[basic.align] Update note to reflect deprecation of aligned-storage templates",
    "EDIT5522": "[basic.align] Fix cross-reference to meanwhile deprecated aligned_storage",
    "EDIT5523": "[thread.lock.unique.locking] Fix function call expressions",
    "EDIT5524": "[ranges.syn] Add missing \\libconcept for `owning_view`",
    "EDIT5525": "[range.join.with.view] Add missing \\libconcept",
    "EDIT5526": "[range.elements.sentinel] Fix incorrect \\placeholder",
    "EDIT5527": "[module.unit] Is \u201cindirectly exported\u201d a deliberate design?",
    "EDIT5528": "[allocator.requirements.general] The meaning of \"parameterized in terms of allocators\" seems unclear",
    "EDIT5529": "[range.chunk.view.input] Add missing \\exposid for `base_`",
    "EDIT5530": "[range.join.with.sentinel] Add missing curly braces",
    "EDIT5531": "Typo and formatting fixes",
    "EDIT5532": " [common.iter.nav] Fix \\exposconceptnc",
    "EDIT5533": "[basic.def.odr] p5 \"appears as\" is not defined and \"named by\" is a better choice",
    "EDIT5534": "use \"named by\" in place of \"appear as\" for odr-using a variable",
    "EDIT5535": "[priqueue.overview] Add misssing `>` to deduction guide",
    "EDIT5536": "More typo and formatting fixes",
    "EDIT5537": "[module.private.frag] Remove misleading example and broaden note",
    "EDIT5538": "[temp.inst] Clarify referent of 'declaration'",
    "EDIT5539": "[dcl.fct.def.general] p2 \"declarator;\" is not described in [dcl.fct]",
    "EDIT5540": "[dcl.type.general] p3 The grammar type-specifier-seq does not comprise defining-type-specifier",
    "EDIT5541": "[over.call.object] Note has counterfactual statement re: surrogate functions and overload resolution",
    "EDIT5542": "[temp.inst] p12 \"In a function template specialization\" is not defined",
    "EDIT5543": "[syntax] p2 Add \"X-expression\" in the list",
    "EDIT5544": "Stop talking about fields",
    "EDIT5545": "[basic.fundamental] p5 Improve the definition of base-2 representation of the signed integer type",
    "EDIT5546": "[basic.fundamental] p12 Saying that \"range of representable values\" is implementation-defined is helpful",
    "EDIT5547": "[conv.ptr] p2 The cv-qualifications between source and destination type are not necessarily the same",
    "EDIT5548": "[dcl.friend] Specify where a friend specifier can appear",
    "EDIT5549": "[module.reach] p3 \"any\" is ambiguity in the rule",
    "EDIT5550": "[temp.deduct.call] lacks the cross-reference to [temp.deduct.type] for describing deduction",
    "EDIT5551": "[lib] Phrasing through \"inclusion\" precludes header imports",
    "EDIT5552": "[range.elements.view] Add missing \\libconcept for `move_constructible`",
    "EDIT5553": "[temp.variadic] p6 Rearrange the rule and make the meaning clearer",
    "EDIT5554": "[algorithm.syn, alg.swap] Add missing \\libconcept for `input_range`",
    "EDIT5555": "[specialized.algorithms, iterator.concept.readable] Replace \\placeholdernc to \\exposconcept for exposition-only concepts",
    "EDIT5556": "Qualify all calls to std::get",
    "EDIT5557": "[range.join.with.iterator] Add missing \\libconcept for `convertible_to`",
    "EDIT5558": "Definition of the term: free store",
    "EDIT5559": "[basic.compound] p3 Improve the definition of the hypothetical array for the arithmetic purpose",
    "EDIT5560": "[expr.sizeof] Clarify padding in class types CWG2609",
    "EDIT5561": "[basic.def.odr] p12 Is the definition domain isolated or union",
    "EDIT5562": "[unord.map.overview] Replace \\tcode with \\libconcept for `input_range`",
    "EDIT5563": "[sequence.reqmts] Add `ranges` namespace qualifier for `range` concept",
    "EDIT5564": "[range.take.overview]  Correct punctuation for `take_view` overview",
    "EDIT5565": "[basic.compound]/1 function type does not mention cv- and ref-quals",
    "EDIT5566": "[2022-07 CWG Motion 1] P2622R0 Core Language Working Group \"ready\" Issues for the July, 2022 meeting",
    "EDIT5567": "[2022-07 CWG Motion 2] P2622R0 Core Language Working Group \"ready\" Issues for the July, 2022 meeting",
    "EDIT5568": "[2022-07 CWG Motion 3] P2468R2 The Equality Operator You Are Looking For",
    "EDIT5569": "[2022-07 CWG Motion 4] P2327R1 De-deprecating volatile compound operations",
    "EDIT5570": "[2022-07 CWG Motion 5] P2437R1 Support for #warning",
    "EDIT5571": "[2022-07 CWG Motion 6] P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals",
    "EDIT5572": "[2022-07 CWG Motion 7] P2324R2 Labels at the end of compound statements (C compatibility)",
    "EDIT5573": "[2022-07 CWG Motion 8] P2290R3 Delimited escape sequences",
    "EDIT5574": "[2022-07 CWG Motion 9] P2448R2 Relaxing some constexpr restrictions",
    "EDIT5575": "[2022-07 CWG Motion 10] P2266R3 Simpler implicit move",
    "EDIT5576": "[2022-07 CWG Motion 11] P2071R2 Named universal character escapes",
    "EDIT5577": "[2022-07 CWG Motion 12] P1169R4 static operator()",
    "EDIT5578": "[2022-07 CWG Motion 13] P2280R4 Using unknown pointers and references in constant expressions",
    "EDIT5579": "[2022-07 CWG Motion 14] P1467R9 Extended floating-point types and standard names",
    "EDIT5580": "[2022-07 CWG Motion 15] P2493R0 Missing feature test macros for C++20 core papers",
    "EDIT5596": "[2022-07 LWG Motion 9] P1642R11 Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "EDIT5597": "[2022-07 LWG Motion 10] P1899R3 stride_view",
    "EDIT5598": "[2022-07 LWG Motion 11] P2093R14 Formatted output",
    "EDIT5599": "[2022-07 LWG Motion 12] P2165R4 Compatibility between tuple and tuple-like objects",
    "EDIT5600": "[2022-07 LWG Motion 13] P2278R4 cbegin should always return a constant iterator",
    "EDIT5601": "[2022-07 LWG Motion 14] P2286R8 Formatting Ranges",
    "EDIT5602": "[2022-07 LWG Motion 15] P2291R3 Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header",
    "EDIT5603": "[2022-07 LWG Motion 16] P2302R4 std::ranges::contains",
    "EDIT5604": "[2022-07 LWG Motion 17] P2322R6 ranges::fold",
    "EDIT5605": "[2022-07 LWG Motion 18] P2374R4 views::cartesian_product",
    "EDIT5606": "[2022-07 LWG Motion 19] P2540R1 Empty Product for certain Views",
    "EDIT5607": "[2022-07 LWG Motion 20] P2404R3 Move-only types for equality_comparable_with, totally_ordered_with, and three_way_comparable_with",
    "EDIT5608": "[2022-07 LWG Motion 21] P2408R5 Ranges iterators as inputs to non-Ranges algorithms",
    "EDIT5609": "[2022-07 LWG Motion 22] P2417R2 A more constexpr bitset",
    "EDIT5610": "[2022-07 LWG Motion 23] P2419R2 Clarify handling of encodings in localized formatting of chrono types",
    "EDIT5611": "[2022-07 LWG Motion 24] P2438R2 std::string::substr() &&",
    "EDIT5612": "[2022-07 LWG Motion 25] P2446R2 views::as_rvalue",
    "EDIT5613": "[2022-07 LWG Motion 26] P2465R3 Standard Library Modules std and std.compat",
    "EDIT5614": "[2022-07 LWG Motion 27] P2445R1 std::forward_like",
    "EDIT5615": "[2022-07 LWG Motion 28] P2467R1 Support exclusive mode for fstreams",
    "EDIT5616": "[2022-07 LWG Motion 29] P2474R2 views::repeat",
    "EDIT5617": "[2022-07 LWG Motion 30] P2494R2 Relaxing range adaptors to allow for move only types",
    "EDIT5618": "[2022-07 LWG Motion 31] P2499R0 string_view range constructor should be explicit",
    "EDIT5619": "[2022-07 LWG Motion 32] P2502R2 std::generator: Synchronous Coroutine Generator for Ranges",
    "EDIT5620": "[2022-07 LWG Motion 33] P2508R1 Exposing std::basic-format-string",
    "EDIT5621": "[2022-07 LWG Motion 34] P2517R1 Add a conditional noexcept specification to std::apply",
    "EDIT5622": "[2022-07 LWG Motion 35] P2520R0 move_iterator<T*> should be a random access iterator",
    "EDIT5623": "[2022-07 LWG Motion 36] P2549R1 std::unexpected<E> should have error() as member accessor",
    "EDIT5624": "[2022-07 LWG Motion 37] P2585R1 Improving default container formatting",
    "EDIT5625": "[2022-07 LWG Motion 38] P2590R2 Explicit lifetime management",
    "EDIT5626": "P0429R9 A Standard flat_map",
    "EDIT5627": "[sequence.reqmts] uses atypical and unclear wording for Cpp17 requirements and swappable conditions",
    "EDIT5628": "[swappable.requirements] Consider to introduce Cpp17Swappable requirements as new editorial convenience requirement",
    "EDIT5629": "[cpp.concat] p3 Is a placemarker preprocessing token considered as a valid preporcessing token",
    "EDIT5630": "[intro.object] Does the attributive clause intend to be a constraint or to convey a result?",
    "EDIT5631": "[ranges.syn] Is `#include <compare>` redundant?",
    "EDIT5632": "Post-LWG3713, use \"sorted with respect to `comp`\" consistently",
    "EDIT5633": "Substatements of if consteval",
    "EDIT5634": "[dcl.init.aggr]/1 Aggregate only cares about direct base classes",
    "EDIT5635": "P0009R18 mdspan",
    "EDIT5636": "[alg.random.shuffle] ranges::shuffle - \"exactly\" or \"at most\" for number of swaps?",
    "EDIT5637": "'maybe_const' is not indexed",
    "EDIT5638": "[basic.fundamental] Weird terminology about \"X character types\"",
    "EDIT5639": "[cpp] Explicitly say whether a resulting token sequence is rescanned or not",
    "EDIT5640": "P1899R3 stride_view",
    "EDIT5641": "What is \"compile\"?",
    "EDIT5642": "P1223R5 find_last",
    "EDIT5643": "P2302R4 std::ranges::contains",
    "EDIT5644": "[range.adaptors] Move [range.chunk.by] after [range.chunk]",
    "EDIT5645": "P2322R6 ranges::fold",
    "EDIT5646": "[range.filter.view] Add missing \\exposid",
    "EDIT5647": "P2374R4 views::cartesian_product",
    "EDIT5648": "[range.ref.view] Fix index command",
    "EDIT5649": "P2468R2 The Equality Operator You Are Looking For",
    "EDIT5650": "P2327R1 De-deprecating volatile compound operations",
    "EDIT5651": "P2437R1 Support for #warning",
    "EDIT5652": "[ranges.syn] Add \\ref for `ref_view`",
    "EDIT5653": "P2362R3 Remove non-encodable wide character literals and multicharacter wide character literals",
    "EDIT5654": "P2324R2 Labels at the end of compound statements (C compatibility)",
    "EDIT5655": "P2290R3 Delimited escape sequences",
    "EDIT5656": "P2448R2 Relaxing some constexpr restrictions",
    "EDIT5657": "[concept.booleantestable] Remove unnecessary hyphenation hint for `boolean-testable` concept",
    "EDIT5658": "P2266R3 Simpler implicit move",
    "EDIT5659": "P2071R2 Named universal character escapes",
    "EDIT5660": "[concept.equalitycomparable] Replace \\placeholder with \\exposconcept",
    "EDIT5661": "Cross-reference [range.range]/3.2 from [range.filter.view]/5",
    "EDIT5662": "P1169R4 static operator()",
    "EDIT5663": "P2280R4 Using unknown pointers and references in constant expressions",
    "EDIT5664": "[2022-07 CWG Motion 1] P2622R0 Core Defect Reports",
    "EDIT5665": "[2022-07 CWG Motion 2] P2622R0 Core Issues 2507 and 2586",
    "EDIT5666": "[algorithm.syn, bitset.syn, rand.synopsis, valarray.syn] Add \\ref for include header",
    "EDIT5667": "[2022-07 LWG Motion 1] P2618R0 C++ Standard Library Issues",
    "EDIT5668": "[special.mem.concepts] Add \\libconcept",
    "EDIT5669": "[istreambuf.iterator.general] Add \\ref for proxy",
    "EDIT5670": "P1467R9 Extended floating-point types and standard names",
    "EDIT5671": "P1774R8 Portable assumptions",
    "EDIT5672": "P2582R1 Wording for class template argument deduction from inherited \u2026",
    "EDIT5673": "P2295R6 Support for UTF-8 as a portable source file encoding",
    "EDIT5674": "P2460R2 Relax requirements on wchar_t to match existing practices",
    "EDIT5675": "P2579R0 Mitigation strategies for P2036 \"Changing scope for lambda trailing-return-type\"",
    "EDIT5676": "[diff] Inconsistent formatting of examples",
    "EDIT5677": "P2513R3 char8_t Compatibility and Portability Fix",
    "EDIT5678": "P2438R2 std::string::substr() &&",
    "EDIT5679": "P2417R2 A more constexpr bitset",
    "EDIT5680": "P2465R3 Standard Library Modules std and std.compat",
    "EDIT5681": "P2445R1 std::forward_like",
    "EDIT5682": "P2590R2 Explicit lifetime management",
    "EDIT5683": "[range.join.with.overview, range.split.overview] use fully-qualified name",
    "EDIT5684": "P2599R2 index_type & size_type in mdspan",
    "EDIT5685": "P2604R0 mdspan: rename pointer and contiguous",
    "EDIT5686": "P2613R1 Add the missing empty to mdspan",
    "EDIT5687": "P2467R1 Support exclusive mode for fstreams",
    "EDIT5688": "P2499R0 string_view range constructor should be explicit",
    "EDIT5689": "P2517R1 Add a conditional noexcept specification to std::apply",
    "EDIT5690": "P2508R1 Expose std::basic-format-string<charT, Args...>",
    "EDIT5691": "P2520R0 move_iterator<T*> should be a random access iterator",
    "EDIT5692": "P2549R1 std::unexpected<E> should have error() as member accessor",
    "EDIT5693": "P2093R14 Formatted output",
    "EDIT5694": "P2165R4 Compatibility between tuple and tuple-like objects",
    "EDIT5695": "P2502R2 std::generator: Synchronous Coroutine Generator for Ranges",
    "EDIT5696": "P1222R4 A Standard flat_set",
    "EDIT5697": "P2291R3 Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in <charconv> Header",
    "EDIT5698": "P2278R4 cbegin should always return a constant iterator",
    "EDIT5699": "P2540R1 Empty Product for certain Views",
    "EDIT5700": "P2286R8 Formatting Ranges",
    "EDIT5701": "P2404R3 Move-only types for equality_comparable_with, totally_ordered_with, and three_way_comparable_with",
    "EDIT5702": "Add examples in [format.string.escaped]",
    "EDIT5703": "[strings.general,thread.general] Remove nonexistent header and fix some style error",
    "EDIT5704": "License of the draft",
    "EDIT5705": "P2408R5 Ranges iterators as inputs to non-Ranges algorithms",
    "EDIT5706": "P2585R1 Improving default container formatting",
    "EDIT5707": "P2419R2 Clarify handling of encodings in localized formatting of chrono types",
    "EDIT5708": "P2446R2 views::as_rvalue",
    "EDIT5709": "P2474R2 views::repeat",
    "EDIT5710": "P2494R2 Relaxing range adaptors to allow for move only types",
    "EDIT5711": "Use fonts suitable for on-screen reading",
    "EDIT5712": "[expected.object.assign] Missing Returns element",
    "EDIT5713": "P1642R11 Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "EDIT5714": "Subclause [stdfloat.syn] is oddly disconnected",
    "EDIT5715": "[cpp.predefined] Use of \"an\" broadens condition too much",
    "EDIT5716": "[{o,i}stream.formatted] inconsistent in use of Elements",
    "EDIT5717": "[over.match.class.deduct] now has an awkward, long sentence",
    "EDIT5718": "Example \"uninit\" in [dcl.constexpr] no longer valid",
    "EDIT5719": "Codeblocks from P2286R8 need a home",
    "EDIT5720": "[support.initlist] Reorganize like [support.srcloc]",
    "EDIT5721": "[range.join.with.sentinel] Fix template format",
    "EDIT5722": "Fix up table of library headers after all new library headers have been added",
    "EDIT5723": "[memory.syn,ranges.syn] Class members inconsistently appended `// freestanding`",
    "EDIT5724": "[ranges.syn] Should the *namespace-alias* `std::views` be `// freestanding`?",
    "EDIT5725": "[mdspan.{overview,extents.ctor}] Increase reuse of definitions",
    "EDIT5726": "Flat map assorted editorial improvements",
    "EDIT5727": "[mdspan.mdspan] Remaining uses of `pointer`",
    "EDIT5728": "[flat.set.modifiers] Drop `return` statement from code block in *Effects* element",
    "EDIT5729": "[range.stride.overview] Make the prints message format consistent",
    "EDIT5730": "[range.chunk.fwd.iter, range.stride.iterator] What precondition is implied here?",
    "EDIT5731": "std::destroy should be marked freestanding",
    "EDIT5732": "[format.formattable] Fix spacing of _requires-expression_",
    "EDIT5733": "views::stride in [ranges.syn] should not be marked freestanding",
    "EDIT5734": "\\logop should use small caps, and bare ALLCAPS operations should be changed to use \\logops",
    "EDIT5735": "[range.cartesian.view] Fix _`cartesian-product-is-common`_",
    "EDIT5736": "[range.cartesian.overview] Use `auto` instead of _`decay-copy`_",
    "EDIT5737": "[ranges.cartesian.iterator] Fix format of `decltype(current_)`",
    "EDIT5738": "[ranges.syn] Fix `// freestanding` comments of under [range.as.rvalue]",
    "EDIT5739": "[range.adaptor.tuple] Remove (use of) _`tuple-or-pair`_",
    "EDIT5740": "[cpp.cond] Missing `__has_cpp_attribute(assume)`",
    "EDIT5741": "[std] Revise uses of undefined term \"potentially throwing\"",
    "EDIT5742": "[ranges.syn] Add missing \"freestanding\" comment for as_rvalue.",
    "EDIT5743": "[format] Remove redundant `\\tcode` around `\\exposid`",
    "EDIT5744": "[range.zip.transform.view] Fix typo: mmove_constructible.",
    "EDIT5745": "[range.as.const.view] Add missing angle brackets",
    "EDIT5746": "[const.iterators.alias] Use \\libconcept for input_\u00aditerator",
    "EDIT5747": "[dcl.fct.def.default] Elaborate on the difference of two declarations",
    "EDIT5748": "[range.as.rvalue.view] Fix curly brace format",
    "EDIT5749": "[lex.charset] Add missing hyphens",
    "EDIT5750": "[range.cartesian.view] Fix definition of cartesian-product-is-common",
    "EDIT5751": "[format.string.escaped] Fix invalid examples",
    "EDIT5752": "[const.iterators.types, const.iterators.ops] Use \\libconcept for range concepts",
    "EDIT5753": "[range.as.rvalue.overview] Add \\libconcept for same_as",
    "EDIT5754": "[range.cartesian.view] Use \\exposid for bases_",
    "EDIT5755": "[ranges.cartesian.iterator] Add missing @ for libconcept",
    "EDIT5756": "[ranges] Make the prints message format consistent",
    "EDIT5757": "[diff] Uniform style for examples",
    "EDIT5758": "[memory.syn] Add missing \"// freestanding\" comment to \"destroy\"",
    "EDIT5759": "[vector.syn, vector.bool] Add subclause structure.",
    "EDIT5760": "[range.as.const.view] Fix constrain order",
    "EDIT5761": "[expr.prim.id.unqual] Fix parameter name in example (\"y\", not \"z\")",
    "EDIT5762": "[defns.dynamic.type] A misleading note",
    "EDIT5763": "[basic.life]/6 and [basic.life]/7 Duplicate wording regarding access outside of lifetime",
    "EDIT5764": "[range.repeat.view] Add \\libconcept for same_as",
    "EDIT5765": "[range.repeat.view] Fix class template comment typo",
    "EDIT5766": "[ranges.cartesian.iterator] Fix typo",
    "EDIT5767": "[range.repeat.iterator] repeat_view::iterator is not a class template",
    "EDIT5768": "[range.cartesian.view] Fix cartesian-product-is-common",
    "EDIT5769": "[range.adaptor.tuple] Fix annoying tuple naming conflict",
    "EDIT5770": "[range.cartesian.view] Fix neglect for parent_",
    "EDIT5771": "[obj.lifetime] Fix preconditions for `start_lifetime_as_array`",
    "EDIT5772": "[flat.*.{syn,erasure}] Change return type of erase_if to member size_type",
    "EDIT5773": "[range.cartesian.view] Further fixing of cartesian-product-is-common",
    "EDIT5774": "[ranges.elementsof] Fix template format",
    "EDIT5775": "Fix various library typos and style issues from #5428",
    "EDIT5776": "[vector.capacity] p14 The precondition use \"and\" but should use \"or\"",
    "EDIT5777": "[ranges.cartesian.iterator] Fix non-existing `reference_t`",
    "EDIT5778": "[range.zip, ranges.cartesian.iterator] Simplify `maybe-const<Const, Views>` into `const Views`",
    "EDIT5779": "Fix adjacent_view example.",
    "EDIT5780": "[range.cartesian.view] Add missing angle brackets for `cartesian-is-sized-sentinel`",
    "EDIT5781": "[range.zip.overview] Use tuple in example, not pair",
    "EDIT5782": "[basic.life]/8 Add a note about pointer to uninitialized memory",
    "EDIT5783": "[stmt.return], [stmt.return.coroutine] update notes re implicit move",
    "EDIT5784": "[tuple.syn, tuple.like] Standardized template format",
    "EDIT5785": "[range.drop.overview, range.take.overview] Fixed unformatted `(void)F, decay-copy(E)`",
    "EDIT5786": "[algorithm.syn] Fix template format",
    "EDIT5787": "[check] Flag any space between 'template' and '<'",
    "EDIT5788": "[format.range.fmtstr] Add ranges namespace qualifier for range concepts",
    "EDIT5789": "[flat.set.syn] `<flat_set>` should include `<compare>`",
    "EDIT5790": "[class.dtor]/example-1 is illegal",
    "EDIT5791": "[ranges] Improve examples",
    "EDIT5792": "[move.sentinel] Remove extraneous \"`std::`\" qualification",
    "EDIT5793": "[containers] Add `std::` for `forward`/`move`",
    "EDIT5794": "[util.smartptr.shared.create] Add `std::` qualification for `forward`",
    "EDIT5795": "Improve automatic LaTeX checking of concept names",
    "EDIT5796": "[ranges] Add \\exposid for `iterator`",
    "EDIT5797": "[range.iota.sentinel]  Add \\exposid for `sentinel`",
    "EDIT5798": "[containers] Where are `cont-key-type`/`cont-mapped-type` used?",
    "EDIT5799": "[thread.stoptoken.syn] `stop_\u00adcallback` should be class template",
    "EDIT5800": "[flat.map.defn,flat.multimap.defn] Deduction guide needs to default `Allocator` to be useful",
    "EDIT5801": "[range.repeat.view] Use \\tcode for `WArgs`",
    "EDIT5802": "[expected.object.assign] Add missing 'Returns: *this'",
    "EDIT5803": "[flat.set.modifiers] Remove stray 'return' in Effects clause",
    "EDIT5804": "Fix and use \\logop",
    "EDIT5805": "Text is not clear about what it means to \"bind directly\"",
    "EDIT5806": "[functional.syn] Add \\tcode for `hash`",
    "EDIT5807": "[const.iterators.alias] Rename template parameter `It` to `I`",
    "EDIT5808": "Add blanket wording for operator++(int) on iterators",
    "EDIT5809": "Add blanket wording for \"Returns: *this.\" on assignment operators",
    "EDIT5810": "Style for chain-of-\"otherwise\" itemizations",
    "EDIT5811": "[ranges] make indentation consistent",
    "EDIT5812": "Style exposition-only members of flat_map, flat_multimap, flat_set, flat_multiset consistently",
    "EDIT5813": "[expr.const] Consider using \"non-constant library call\" more generally",
    "EDIT5814": "[class.local] p1 Improve the definition of local class ",
    "EDIT5815": "[expr.unary.op] p10 The operand should be the promoted operand",
    "EDIT5816": "[expr] Replace `\\^` with `\\caret`",
    "EDIT5817": "[format.string.std] where does the \"0x\" base prefix for pointers get added?",
    "EDIT5818": "[basic.life]/8.3 don't put const in the middle of \"complete object\" words of power",
    "EDIT5819": "[ranges] Add \\libconcept for `view` in Overview",
    "EDIT5820": "[check] Add check for \\^ and recommend \\caret",
    "EDIT5821": "[dcl.init.ref] Cv-qualification adjustments before temporary materialization",
    "EDIT5822": "[conv.fcttpr] Clarify the definition and the corresponding examples",
    "EDIT5823": "[algorithm.syn] Align some format",
    "EDIT5824": "[expr.prim.lambda.capture]/8 Add a note explaining when capture is required",
    "EDIT5825": "[over.best.ics.general] p6 is long",
    "EDIT5826": "Update references to Unicode Standard & Annexes.",
    "EDIT5827": "[range.chunk.view.input, range.slide.view] Remove unused name in the deduction guide",
    "EDIT5828": "placeholders::_2 is not indexed",
    "EDIT5829": "[func.bind.isplace] Add cross-reference to [func.bind.place]",
    "EDIT5830": "vector<bool>::reference is not indexed",
    "EDIT5831": "Index entries for range adaptors in namespace views",
    "EDIT5832": "Some exposition-only types are not formatted as such in the index",
    "EDIT5833": "this_thread::get_id() is not related to psychoanalysis",
    "EDIT5834": "[syserr.general] should use \"Recommended practice\"",
    "EDIT5835": "[diff.cpp03.containers] Add overdue compatibility note on allocators",
    "EDIT5836": "[expr.ref] p1 The evaluation of the id-expression in class member access",
    "EDIT5837": "[ranges.syn] std::[ranges::]get([const ]subrange<I, S, K>&) is not marked freestanding",
    "EDIT5838": "ranges::get should be freestanding",
    "EDIT5839": "[ranges.syn] Make get overloads freestanding",
    "EDIT5840": "[unord.general, container.adaptors.general] Complete the alias template that appears in the reduction guides",
    "EDIT5841": "[diagnostics] Remove 'shall', use 'recommended practice'",
    "EDIT5842": "[func.bind.isplace] Add cross-reference to [func.bind.place]",
    "EDIT5843": "[vector.bool.pspc] Index vector<bool>::reference",
    "EDIT5844": "[over.best.ics.general] Split long paragraph",
    "EDIT5845": "[expected] Change stable label from \"ctor\" to \"cons\", add xref",
    "EDIT5846": "[func.bind] Index 10 placeholders",
    "EDIT5847": "[expr.prim.lambda.capture] Cross-reference [basic.def.odr] for 'odr-usable'",
    "EDIT5848": "[thread.thread.this] Clarify this_thread::get_id",
    "EDIT5849": "[ranges] Indexing fixes for iterator and sentinel classes",
    "EDIT5850": "[format.string.std] Clarify location of 0x prefix for pointers",
    "EDIT5851": "[support, etc.] New subclause \"Arithmetic types\".",
    "EDIT5852": "[c.math.hypot3] Fix the mis-specified `double` parameter of 3-argument `hypot`",
    "EDIT5853": "[headers] Ordering `<type_traits>`",
    "EDIT5854": "[headers] Order `<type_traits>` before `<typeindex>` in the header table",
    "EDIT5855": "[futures.errors] Add `\\tcode` for `equivalent`",
    "EDIT5856": "[utility.arg.requirements] turn list of identifiers into a bullet list",
    "EDIT5857": "[mdspan.extents.cons] Correct spelling of \"dynamic-extents\"",
    "EDIT5858": "[ranges.syn] `repeat_view`, `stride_view`, `cartesian_product_view` are not marked as freestanding",
    "EDIT5859": "[meta, thread] Add/amend references to func.require, func.invoke",
    "EDIT5860": "[range.as.const.overview] Remove redundant ranges namespace qualification",
    "EDIT5861": "[intro.execution] p8 Sequenced before and the subexpressions thereof",
    "EDIT5862": "[template.bitset] reorder synopsis and member descriptions",
    "EDIT5863": "[range.cartesian.iterator] Absolve single item list",
    "EDIT5864": "[expected.expected] Missing explicit specification for unexpected-converting constructor",
    "EDIT5865": "[expected.expected] Missing explicit specification for unexpected-converting constructor LWG3754",
    "EDIT5866": "[ranges.cartesian.iterator] Fix inconsistent section naming",
    "EDIT5867": "[ranges.elementsof] Rename [ranges.elementsof] to [range.elementsof]",
    "EDIT5868": "[futures.task.members] Add missing explicit to packaged_task ctor",
    "EDIT5869": "[dcl.enum] Enumerators don't have \"initializers\"",
    "EDIT5870": "[futures.task.members] Correct capitalization",
    "EDIT5871": "Fix inconsistencies with hyphens",
    "EDIT5872": "[allocator.requirements.general] Remove redundant template syntax",
    "EDIT5873": "[index] Remove undefined term",
    "EDIT5874": "[ios.overview] Remove unconventional empty line",
    "EDIT5875": "[container.rev.reqmts] Correct capitalization",
    "EDIT5876": "[expr.const] Disjunction disqualifies `construct_at` of non-active member",
    "EDIT5877": "[expr.mtr.oper]/6 refers to \"the operand for the function call operator\", as if there can only be one",
    "EDIT5878": "Issue #5627: Replace \"swappable\" by \"lvalues of type T are swappable\"",
    "EDIT5879": "[ratio.ratio] What is `sign`?",
    "EDIT5880": "[func.wrap.move.general] Fix cv format",
    "EDIT5881": "[associative.reqmts.general] Fix namespace typo",
    "EDIT5882": "[class.union.general] Attach example to its note",
    "EDIT5883": "[conv.lval] Fix cross-reference for 'invalid pointer value'",
    "EDIT5884": "Guidelines for introducing `\\label`s",
    "EDIT5885": "[intro.defs] Update hyperlink according to SC22 requirements",
    "EDIT5886": "[conv.lval] Fix cross-reference for 'invalid pointer value'",
    "EDIT5887": "[obj.lifetime] Use static_cast instead of C-style cast expression",
    "EDIT5888": "Foreword placeholder",
    "EDIT5889": "[temp.local] Fix \"inject-class-name\"",
    "EDIT5890": "[format.string.escaped] Fix invalid example",
    "EDIT5891": "[range.split.view,range.chunk.by.view] public exposition-only member functions?",
    "EDIT5892": "[dcl.link] Fix the wording of the application of the specified language linkage",
    "EDIT5893": "[basic.stc.general]/4 Move the use of invalid pointer values to [basic.compound]/3",
    "EDIT5894": "Index of library names has exposition-only names under \"Symbols\"",
    "EDIT5895": "Index of library names has cbegin(const C&) and cend(const C&)",
    "EDIT5896": "[vector.bool.pspc] Add a blank line between the private and public members of std::vector<bool>::reference",
    "EDIT5897": "Ill-formed example in [range.drop.while.overview]",
    "EDIT5898": "[meta.const.eval] Add is_constant_evaluated() to index of library names",
    "EDIT5899": "[bibliography] Remove stray closing parenthesis.",
    "EDIT5900": "[tuple.rel] Unusual wording for comparison operators added by P2165R4",
    "EDIT5901": "(bunch of ranges) inconsistency about whether `*_view::iterator` has the `class` or `struct` class-key",
    "EDIT5902": "[range.repeat] The template parameter name `W` is confusing",
    "EDIT5903": "[range.repeat] Change template parameter name `W` to `T`",
    "EDIT5904": "[vector.bool] and [template.bitset] Divide more clearly",
    "EDIT5905": "[format.args] p1 should use \"recommended practice\"",
    "EDIT5906": "[format.arg] remove friend declaration from basic_format_arg::handle",
    "EDIT5907": "[mdspan.extents.expo] remove redundant // \\expos",
    "EDIT5908": "Change range adaptor examples to print with formatting ranges",
    "EDIT5909": "Member typedefs of iterators are missing from index of library names",
    "EDIT5910": "[intro.defs] Move the definition of \"multibyte character\" to library",
    "EDIT5911": "[ranges] Remove unnecessary copy-list-initialization LWG3796",
    "EDIT5912": "[format.string.std] \"Each formatter speclializations\"",
    "EDIT5913": "[stack.syn] [queue.syn] Add xref comments to the class definitions",
    "EDIT5914": "[flat.map.defn] [flat.multimap.defn] Exposition-only markup for \"c\" and \"compare\"",
    "EDIT5915": "[container.adaptors] uses_allocator specializations consistently use \"Alloc\"",
    "EDIT5916": "LWG-617: [sequences.general] <array> claimed to define a template meeting sequence container requirements",
    "EDIT5917": "[flat.set.modifiers] Add missing \\exposid",
    "EDIT5918": "[views.span] Add \\exposid for `span`'s `data_` and `size_`",
    "EDIT5919": "[dcl.init.list]/(3.10) Specify the type of the prvalue",
    "EDIT5920": "new (ptr) T() == static_cast<T*>(ptr) ?",
    "EDIT5921": "[meta.type.synop] Make template parameter names start with capital",
    "EDIT5922": "[range.dangling] The `tag` of a `struct` is not a C++ term",
    "EDIT5923": "[flat.set] [flat.multiset] [flat.map] [flat.multimap] Editorial part of LWG3802",
    "EDIT5924": "[flat.map] s/compare/key_comp()/",
    "EDIT5925": "[ratio.ratio] Use defined function for sign",
    "EDIT5926": "[climits.syn] Correct note about types of macros",
    "EDIT5927": "[flat.multiset.modifiers] s/mulitset/multiset/",
    "EDIT5928": "[flat.set] [flat.multiset] Use value_type, not key_type",
    "EDIT5929": "[time.format] incorrect namespace qualifications",
    "EDIT5930": "[expr.new] p20 Accurate the example for the allocation call in array new expression",
    "EDIT5931": "[execpol.unseq] Fix inconsistent indent",
    "EDIT5932": "[time.format] use basic_ostringstream<charT> instead of ostringstream",
    "EDIT5933": "[time.clock.tai.nonmembers] Example doesn't use the function it's supposed to show",
    "EDIT5934": "[time.clock.system.nonmembers], [time.zone.zonedtime.nonmembers] add <charT>",
    "EDIT5935": "[temp.res.general] Format name in code font",
    "EDIT5936": "Three editorial fixes re \"X means that Y\"",
    "EDIT5937": "[time.syn] <chrono> synopsis uses time_zone before declaring it",
    "EDIT5938": " [coro.generator.promise] Ambigous specification of A in p17",
    "EDIT5939": "[atomics] Replace integral and floating-point placeholders",
    "EDIT5940": "Exposition-Only Members Without \\exposid",
    "EDIT5941": "Superfluous // exposition only (on item decls)",
    "EDIT5942": "Editorial NB comments",
    "EDIT5943": "[temp.deduct.general] Fix typo in comment in example",
    "EDIT5944": "Compatibility entry check for new headers",
    "EDIT5945": "[expected] Remove redundant 'and' in multiple conditions",
    "EDIT5946": "[temp.deduct.conv] Remove misleading paragraph break",
    "EDIT5947": "[mdspan.extents.cons] \"constexpr\" should precede \"explicit\"",
    "EDIT5948": "[check] Add check for \"explicit constexpr\" in the library",
    "EDIT5949": "[basic.stc.dynamic.general]p2 is not easy to tell whether the following functions are attached to the global mdoule fragment",
    "EDIT5950": "2022-11 CWG Motion 7",
    "EDIT5951": "2022-11 CWG Motion 8",
    "EDIT5952": "Inconsistent Latex source for \"const\" in \"(possibly const)\"",
    "EDIT5953": "2022-11 CWG Motion 9",
    "EDIT5954": "2022-11 CWG Motion 10",
    "EDIT5955": "2022-11 CWG Motion 11",
    "EDIT5956": "[2022-11 CWG Motion 1]  P2709R0 ready issues except 2635 and 2602",
    "EDIT5957": "[2022-11 CWG Motion 2] issue 2635 from P2709R0 (ready issues)",
    "EDIT5958": "[2022-11 CWG Motion 3] P2710R0 NB comment ready issues except 2615, 2639, 2640, 2652, 2653, 2654, and 2538",
    "EDIT5959": "[2022-11 CWG Motion 4] Issues 2615, 2639, 2640, 2652, and 2653 from P2710R0",
    "EDIT5960": "[2022-11 CWG Motion 5] Issue 2654 (Un-deprecation of compound volatile assignments) from P2710R0 ",
    "EDIT5961": "[2022-11 CWG Motion 6] Issue 2538 (Can standard attributes be syntactically ignored?) from P2710R0",
    "EDIT5962": "[2022-11 CWG Motion 7] P2589R1 static operator[]",
    "EDIT5963": "[2022-11 CWG Motion 8] P2647R1 Permitting static constexpr variables in constexpr functions",
    "EDIT5964": "[2022-11 CWG Motion 9] P2564R3 consteval needs to propagate up",
    "EDIT5965": "[2022-11 CWG Motion 10] P2706R0 Redundant specification for defaulted functions",
    "EDIT5966": "[2022-11 CWG Motion 11]  P2615R1 Meaningful exports",
    "EDIT5967": "[2022-11 CWG Motion 12] P2718R0 Wording for P2644R1 Fix for Range-based for Loop",
    "EDIT5968": "[2022-11 LWG Motion 7] P2703R0 C++ Standard Library Ready Issues",
    "EDIT5969": "[2022-11 LWG Motion 8] P2704R0 C++ Standard Library Immediate Issues",
    "EDIT5970": "[2022-11 LWG Motion 9] P2602R2 Poison Pills are Too Toxic",
    "EDIT5971": "[2022-11 LWG Motion 10] P2167R3 Improved Proposed Wording for LWG 2114 (contextually convertible to bool)",
    "EDIT5972": "[2022-11 LWG Motion 11] P2539R4 Should the output of std::print to a terminal be synchronized with the underlying stream?",
    "EDIT5973": "[2022-11 LWG Motion 12] P1264R2 Revising the wording of stream input operations",
    "EDIT5974": "[2022-11 LWG Motion 13] P2505R5 Monadic Functions for std::expected",
    "EDIT5975": "[2022-11 LWG Motion 14] P2696R0 Introduce Cpp17Swappable as additional convenience requirements",
    "EDIT5976": "[meta.trans.other] Add index entry for invoke_result.",
    "EDIT5977": "2022-11 CWG Motion 12",
    "EDIT5978": "2022-11 LWG Motion 14",
    "EDIT5979": "2022-11 LWG Motion 11",
    "EDIT5980": "[time.clock.req] Fix punctuation of list p4",
    "EDIT5981": "Incorrect types for application of \"temporary materialization conversion\" in [conv.array]",
    "EDIT5982": "[Motions 2022 11 lwg 8] P2704R0 C++ Standard Library Immediate Issues",
    "EDIT5983": "[Motions 2022 11 lwg 7] P2703R0 C++ Standard Library Ready Issues",
    "EDIT5984": "[Motions 2022 11 cwg 1] P2709R0 ready issues except 2635 and 2602",
    "EDIT5985": "[motions-2022-11-cwg-2] P2709R0 ready issue 2635",
    "EDIT5986": "P2167R3 Improved Proposed Wording for LWG 2114 (contextually converti\u2026",
    "EDIT5987": "2022-11 CWG Motion 3",
    "EDIT5988": "[Motions 2022 11 cwg 4] Issues 2615, 2639, 2640, 2652, and 2653 from P2710R0 ",
    "EDIT5989": "[Motions 2022 11 cwg 5] Issue 2654 (Un-deprecation of compound volatile assignments) from P2710R0",
    "EDIT5990": "[Motions 2022 11 cwg 6] Issue 2538 (Can standard attributes be syntactically ignored?) from P2710R0",
    "EDIT5991": "[Motions 2022 11 lwg 12] P1264R2 Revising the wording of stream input operations",
    "EDIT5992": "Dismantle remaining requirements tables",
    "EDIT5993": "[Motions 2022 11 lwg 13] P2505R5 Monadic Functions for std::expected",
    "EDIT5994": "[expected.object.general] A program that vs. a program which",
    "EDIT5995": "Motions 2022 11 lwg 9",
    "EDIT5996": "Is there an ambiguity around `~` meaning ones'-complement and destructor?",
    "EDIT5997": "Reword \"corresponding function templates\"",
    "EDIT5998": "[expr.unary.op] Cleanup of {ones',two's} complement, and of \"operator\"",
    "EDIT5999": "[temp.over.link] Reword to clarify that declarations correspond",
    "EDIT6000": "[time.zone.zonedtime.overview] Rename parameters to match [time.zone.zonedtime.ctor]",
    "EDIT6001": "[class.temporary] p6.11 Returned reference is clearer than returned value",
    "EDIT6002": "[uaxid, macros, etc.] Smaller capital-style glyphs",
    "EDIT6003": "[format.arg] Add std:: for forward",
    "EDIT6004": "[depr.conversions.string] remove redundent respecification",
    "EDIT6005": "Consider making a new index for macro names",
    "EDIT6006": "[utilities] Consistently index all member typedefs in the utilites he\u2026",
    "EDIT6007": "[format.arg] Apply `\\exposid` consistently",
    "EDIT6008": "Add the SI prefixes to the index of library names",
    "EDIT6009": "[coro.generator.promise] Fix tparams for generator::promise_type::yield_value",
    "EDIT6010": "Update wd-index.md",
    "EDIT6011": "[iterators] Add missing definitions from the iterators library to the library index",
    "EDIT6012": "[concepts.object] Changed built-in types to fundamental types",
    "EDIT6013": "[format] No description for `STATICALLY-WIDEN`",
    "EDIT6014": "[format.syn] No forward declaration for `tuple` formatter",
    "EDIT6015": "[expr.const] Remove redundant \"ill-formed\" in \"error\" comment",
    "EDIT6016": "[time.zone.leap.members] update note about leap seconds",
    "EDIT6017": "[range.split] The example does not work after P2499R0",
    "EDIT6018": "[mdspan.mdspan.overview] Add default template parameters for mdspan",
    "EDIT6019": "`badbit` not properly qualified as `ios_base::badbit`",
    "EDIT6020": "\"calls `swap` for `x` with `y`\"  is unusal",
    "EDIT6021": "[formatter.requirements] Remove one level of list nesting",
    "EDIT6022": "[lex.string] Remove link to non-existing \"zero, null\" index entry.",
    "EDIT6023": "[lex.string] Remove link to non-existing \"zero, null\" index entry.",
    "EDIT6024": "[concept.copyconstructible] Avoid \"possibly \\tcode{const}\"",
    "EDIT6025": "Replace \"possibly \\tcode{const}\" with \"possibly const\"",
    "EDIT6026": "Draft",
    "EDIT6027": "[depr.meta.types] Remove is_literal_type index entry",
    "EDIT6028": "[ranges] Add subrange_kind to the library index",
    "EDIT6029": "[time.syn] Fixes ymwd abbreviation consistency.",
    "EDIT6030": "[lex.ccon] Add xref to lex.charset, where encodings are defined",
    "EDIT6031": "[lex.ccon] Add a grouping brace to clarify table cell",
    "EDIT6032": "[range.istream] Start `CharT` and `Traits` with lowercase",
    "EDIT6033": "Dismantling requirements tables 29-36",
    "EDIT6034": "[utility.requirements] Dismantle requirements tables",
    "EDIT6035": "[class.compare] Don't introduce `V` for the return value",
    "EDIT6036": "Clarify wording of [class.eq]",
    "EDIT6037": "[format.string.std] Fixing grammar error (#5912)",
    "EDIT6038": "Suggested changes for CWG#204 (on GitHub)",
    "EDIT6039": "[coroutine.handle] clarify whether it's legal to create handles for promise base classes",
    "EDIT6040": "[range.single.view] Fix extra comma",
    "EDIT6041": "Fix an example that got broken by P2499R0",
    "EDIT6042": "[range.take.overview, range.drop.overview] Remove redundant ranges:: qualifier",
    "EDIT6043": "[move.sentinel] make the example strictly correct",
    "EDIT6044": "[range.adjacent.transform.iterator, range.adjacent.transform.sentinel] unfriendly horizontal scroll bar",
    "EDIT6045": "[bitwise.operations.not] missing parameter name",
    "EDIT6046": "Add extra notes to `ranges::c*` to mirror `ranges::*`",
    "EDIT6047": "[temp.pre] [temp.decls.general] Templated function",
    "EDIT6048": "[unord.map.overview] Remove stray template-head on non-template",
    "EDIT6049": "[over.over] Missed edit for P0847R7",
    "EDIT6050": "unsigned long Maxcode = 0x10ffff",
    "EDIT6051": "(primary-expression && ...) in a requires-clause",
    "EDIT6052": "friend [[nodiscard]]",
    "EDIT6053": "using const_reverse_iterator = reverse_iterator<const_iterator>;",
    "EDIT6054": "Attributes on hidden friends",
    "EDIT6055": "expression in requirement-seq no longer IFNDR due to DR2392",
    "EDIT6056": "[reverse.iter.conv] Remove unclear explicit comments",
    "EDIT6057": "Petition to stop with versioning C++",
    "EDIT6058": "Add cross-references between [basic.life],",
    "EDIT6059": "[range.cartesian.view] Add missing `views::` qualifier in deduction guide",
    "EDIT6060": "[class.mem.general] Clarify ambiguous 'and'",
    "EDIT6061": "[basic.life] Move definition of \"before\" and \"after\" from last paragraph",
    "EDIT6062": "[expr.prim.req.general] Correct the IFNDR example",
    "EDIT6063": "Harmonize wording for format-spec syntax used by different formatter specializations",
    "EDIT6064": "[iterator.synopsis] Fix inconsistent template constraint",
    "EDIT6065": "Why does `__cpp_lib_constexpr_bitset` have value 202202L instead of 202207L?",
    "EDIT6066": "[version.syn] Fix value of __cpp_lib_constexpr_bitset",
    "EDIT6067": "[class.default.ctor] Default member initializer and brace-or-equal-initializer",
    "EDIT6068": "[const.iterators.iterator] Add \\expos comment for concept",
    "EDIT6069": "[mdspan.layout.left.cons] Fix editorial issue in layout_left/right conversion constructors",
    "EDIT6070": "[intro, front] Special page header before Clause 1",
    "EDIT6071": "[format.range.fmtmap] Fix undefined type name",
    "EDIT6072": "<print> header is missing in Table 118 ",
    "EDIT6073": "[func.require] Use math font for non-code conditions",
    "EDIT6074": "[temp.over.link] Comment cut off in example 1",
    "EDIT6075": "[support.c.headers.other] Ambiguity in the requirements for includes",
    "EDIT6076": "[dcl.attr.grammar] Add note about the semantic ignorability of standard attributes CWG2695",
    "EDIT6077": "[util.smartptr.atomic.general] Remove redundant explicit construction of return types",
    "EDIT6078": "[iostream.cons] Add std:: qualified for move",
    "EDIT6079": "[tab:iostreams.summary] Add missing header in summary table",
    "EDIT6080": "[locale.codecvt.general] codecvt_base names missing from index of library names",
    "EDIT6081": "[dcl.stc]/1 and [dcl.typedef]/1 each forbid \"static typedef\"",
    "EDIT6082": "Section name of Header synopsis",
    "EDIT6083": "[2023-02 CWG Motion 1] P2796R0 CWG ready issues except 2518, 2521, 2659, 2674, 2678, and 2691",
    "EDIT6084": "[2023-02 CWG Motion 2]  P2796R0 issues 2674 and 2691",
    "EDIT6085": "[2023-02 CWG Motion 3] P2796R0  issue 2518 Conformance requirements and #error/#warning",
    "EDIT6086": "[2023-02 CWG Motion 4] P2796R0 issue 2521 User-defined literals and reserved identifiers",
    "EDIT6087": "[2023-02 CWG Motion 5] P2796R0 issue 2678 std::source_location::current is unimplementable",
    "EDIT6088": "[2023-02 CWG Motion 6] P2796R0 issue 2659 Missing feature-test macro for lifetime extension in range-for loop",
    "EDIT6089": "[2023-02 CWG Motion 8] P2736R2 Referencing The Unicode Standard",
    "EDIT6090": "[2023-02 CWG Motion 9] P2788R0 Linkage for modular constants",
    "EDIT6091": "[2023-02 CWG Motion 10] P2797R0 Proposed resolution for CWG2692 Static and explicit object member functions with the same parameter-type-lists",
    "EDIT6092": "[2023-02 LWG Motion 2] P2789R0 C++ Standard Library Issues to be moved in Issaquah, Feb. 2023",
    "EDIT6093": "[2023-02 LWG Motion 3] Immediate issues except 3441 in P2790R0 C++ Standard Library Immediate Issues to be moved in Issaquah, Feb. 2023",
    "EDIT6094": "[2023-02 LWG Motion 4] issue 3441 in P2790R0",
    "EDIT6095": "[2023-02 LWG Motion 5] P2770R0 Stashing stashing iterators for proper flattening",
    "EDIT6096": "[2023-02 LWG Motion 6] P2164R9 views::enumerate)",
    "EDIT6097": "[2023-02 LWG Motion 7] P2711R1 Making multi-param constructors of views explicit",
    "EDIT6098": "[2023-02 LWG Motion 8] P2609R3 Relaxing Ranges Just A Smidge",
    "EDIT6099": "[2023-02 LWG Motion 9] P2713R1 Escaping improvements in std::format",
    "EDIT6100": "[2023-02 LWG Motion 10]  P2675R1 format's width estimation is too approximate and not forward compatible",
    "EDIT6101": "[2023-02 LWG Motion 11] P2572R1 std::format fill character allowances",
    "EDIT6102": "[2023-02 LWG Motion 12] P2693R1 Formatting thread::id and stacktrace",
    "EDIT6103": "[2023-02 LWG Motion 13] P2679R2 Fixing std::start_lifetime_as for arrays",
    "EDIT6104": "[2023-02 LWG Motion 14] P2674R1 (A trait for implicit lifetime types",
    "EDIT6105": "[2023-02 LWG Motion 15] P2655R3 common_reference_t of reference_wrapper Should Be a Reference Type",
    "EDIT6106": "[2023-02 LWG Motion 16] P2652R2 Disallow User Specialization of allocator_traits",
    "EDIT6107": "[2023-02 LWG Motion 17] P2787R1 (pmr::generator - Promise Types are not Values",
    "EDIT6108": "[2023-02 LWG Motion 18] P2614R2 Deprecate numeric_limits::has_denorm",
    "EDIT6109": "[2023-02 LWG Motion 19] P2588R3 barrier\u2019s phase completion guarantees",
    "EDIT6110": "[2023-02 LWG Motion 20] P2763R1 layout_stride static extents default constructor fix",
    "EDIT6111": "ff",
    "EDIT6112": "[expr.const] Missing indefinite article in CWG2558 resolution",
    "EDIT6113": "[dcl.constexpr] awkward grammar in resolution of CWG2602",
    "EDIT6114": "[Motions 2023 02 lwg 13] P2679R2 Fixing std::start_lifetime_as and std::start_lifetime_as_array",
    "EDIT6115": "[CWG 9] P2788R0: Linkage for modular constants",
    "EDIT6116": "[LWG 3] P2790R0 Immediate issues except 3441",
    "EDIT6117": "[LWG 4] LWG3441 Misleading note about calls to customization points",
    "EDIT6118": "[CWG 1] P2796R0 except issues 2518, 2521, 2659, 2674, 2678, and 2691 ",
    "EDIT6119": "[CWG 2] P2796R0 issues 2674 and 2691",
    "EDIT6120": "[CWG 3] P2796R0 CWG2518 Conformance requirements and #error/#warning",
    "EDIT6121": "[CWG 4] P2796R0 CWG2521 User-defined literals and reserved identifiers",
    "EDIT6122": "[CWG 5] P2796R0 CWG2678 std::source_location::current is unimplementable",
    "EDIT6123": "[CWG 6] P2796R0 CWG2659 Missing feature-test macro for lifetime extension in range-fo\u2026",
    "EDIT6124": "[LWG  2] P2789R0 Ready and Tentatively Ready issues",
    "EDIT6125": "[CWG 10] P2797R0 Proposed resolution for CWG2692 Static and explicit object me\u2026",
    "EDIT6126": "[CWG 8] P2736R2 Referencing The Unicode Standard",
    "EDIT6127": "[over.over] p1 Eliminate the ambiguity in the sentence",
    "EDIT6128": "[LWG 5] P2770R0 Stashing stashing iterators for proper flattening",
    "EDIT6129": "[LWG 14] P2674R1 A trait for implicit lifetime types",
    "EDIT6130": "[LWG 17] P2787R1 pmr::generator - Promise Types are not Values",
    "EDIT6131": "[LWG 15] P2655R3 common_reference_t of reference_wrapper Should Be a Reference\u2026",
    "EDIT6132": "[temp.deduct.call] p3 Adding \"including\" to make the meaning clearer",
    "EDIT6133": "[pairs.pair] Consistent wording for assignment",
    "EDIT6134": "[LWG 16] P2652R2 Disallow User Specialization of allocator_traits",
    "EDIT6135": "[LWG 6] P2164R9 views::enumerate",
    "EDIT6136": "[LWG 7] P2711R1 Making multi-param constructors of views explicit",
    "EDIT6137": "[LWG 8] P2609R3 Relaxing Ranges Just A Smidge",
    "EDIT6138": "[re.results.const] Sentence can be a note",
    "EDIT6139": "[LWG 9] P2713R1 Escaping improvements in std::format",
    "EDIT6140": "[LWG 10] P2675R1 format's width estimation is too approximate and not forward \u2026",
    "EDIT6141": "P2614R2 Deprecate numeric_limits::has_denorm",
    "EDIT6142": "P2588R3 barrier's phase completion guarantees",
    "EDIT6143": "[specialized.algorithms.general] The note seems incorrect",
    "EDIT6144": "[LWG 11] P2572R1 std::format fill character allowances",
    "EDIT6145": "[range.join.with.iterator] Simplify `operator--` with *`as-lvalue`*",
    "EDIT6146": "[range.lazy.split.view] Use present only *when* `bool`-condition",
    "EDIT6147": "[LWG 12] P2693R1 Formatting thread::id and stacktrace",
    "EDIT6148": "[LWG 20] P2763R1 layout_stride static extents default constructor fix",
    "EDIT6149": "[library.general,tab:thread.summary] Sync references with Clause title",
    "EDIT6150": "[check] Diagnose redundant `\\tcode` in `\\tcode{\\exposid{expos-only-name}}`",
    "EDIT6151": "[ranges.syn,range.enumerate] Inconsistent _template-head_",
    "EDIT6152": "[allocator.requirements.general]/98 make sure SimpleAllocator meets t\u2026",
    "EDIT6153": "[expected.object.eq] Fix typo",
    "EDIT6154": "[flat.map] `key_equiv` might be made an aggregate to simplify wording",
    "EDIT6155": "[format.string.std] Should \"UCS\" be replaced with \"Unicode\"?",
    "EDIT6156": "[temp.expl.spec] Use normal spacing after \"etc.\" within a sentence",
    "EDIT6157": "[specialized.algorithms.general] Strike the possibly wrong note",
    "EDIT6158": "[intro.object] The term \"potentially-overlapping subobject\" doesn't seem to exclude reference members",
    "EDIT6159": "[expr.prim.req.compound] Move compound requirement example from inner to outer bullet",
    "EDIT6160": "[intro.object] References are not potentially-overlapping subobjects",
    "EDIT6161": "[dcl.pre] Add missing markup that makes \"fails\" a definition.",
    "EDIT6162": "[cpp.pre] Fix grammar for #elifdef",
    "EDIT6163": "[string.capacity] Use \\tcode+\\placeholder for placeholder",
    "EDIT6164": "[depr.template.template] Add cross-ref to core language",
    "EDIT6165": "[lex.pptoken] p2 Make the effect of the whitespace in preprocessing tokens clearly",
    "EDIT6166": "[over.match.funcs.general]/9 fix the style of references",
    "EDIT6167": "[specialized.algorithms] remove voidify completely",
    "EDIT6168": "Move [expected] from [utilities] to [diagnostics]",
    "EDIT6169": "[module.interface] Fix outdated example",
    "EDIT6170": "[dcl.init.general] Clarify initialization of arrays",
    "EDIT6171": "[expr.prim.lambda.capture] Improve wording on anonymous unions in lambda captures",
    "EDIT6172": "[conv.qual] Remove unused definition of 'cv-qualification signature'",
    "EDIT6173": "[expr.rel] Clarify confusing wording",
    "EDIT6174": "Bring pointer terminology up to date",
    "EDIT6175": "C++",
    "EDIT6176": "[re.results.general] Add type of `match_results::const_iterator` to index of imp def behaviour",
    "EDIT6177": "[range.cartesian.view] Remove unused template parameter",
    "EDIT6178": "[ranges] Format of `&&` expression",
    "EDIT6179": "[check] Add check for i.e. and e.g. followed by comma",
    "EDIT6180": "[fs.conform.9945] Use inter-sentence spacing after an (uppercase) acronym",
    "EDIT6181": "[temp.deduct.funcaddr] Add missing \\tcode",
    "EDIT6182": "[intro.abstract] Index the you-know-what clause",
    "EDIT6183": "[span.iterators] Fix cross-reference to container iterators",
    "EDIT6184": "[std] Update references to [container.requirements.general]",
    "EDIT6185": "LWG3906 [atomics.types.pointer], [atomics.ref.pointer] \"Undefined address\" is undefined",
    "EDIT6186": "[projected, alg.req.ind.{move, copy}, range.as.rvalue.overview] fix typo",
    "EDIT6187": "typography: `'` (straight single quote) or `\u2019` (curly single quote)",
    "EDIT6188": "[stmt] Fix cross-references for condition",
    "EDIT6189": "[container.alloc.reqmts] Better cross-references for allocator-aware \u2026",
    "EDIT6190": "[expr.pre] p3 \"operators that are overloaded\" is not a defined term",
    "EDIT6191": "[intro.execution] p10 Ambiguous meaning with the \"and\"",
    "EDIT6192": "[container.reqmts] Fix cross-references to contiguous container",
    "EDIT6193": "[container.requirements.general] Move exposition-only concept",
    "EDIT6194": "[class.abstract] Missing change of note for inherited member functions in P1787R6",
    "EDIT6195": "[class.ctor.general] Remove the paragraph made dangling by P1787R6",
    "EDIT6196": "[intro.object] Clarify [intro.object]/3.1",
    "EDIT6197": "[range.adaptor.helpers] make as-lvalue noexcept",
    "EDIT6198": "[range.cartesian.view] `cartesian_product_view` deduction guide should qualify `views::all_t`",
    "EDIT6199": "[container.reqmts] Relocate more container requirements",
    "EDIT6200": "Prevent double spacing in tcode",
    "EDIT6201": "CWG 2642: [class.member.lookup] p7 Note 3 now out-of-sync",
    "EDIT6202": "Bump value of __cpp_lib_allocate_at_least for C++23",
    "EDIT6203": "[defns.dynamic.type] Say \"most derived object\" in the example",
    "EDIT6204": "N4944 pre-CD: Remaining inconsistent inline constexpr variable templates",
    "EDIT6205": "[version.syn] bump value of __cpp_lib_allocate_at_least",
    "EDIT6206": "Mac modernization: allow listings 1.9, and don't allow errors in a pipe",
    "EDIT6207": "Fix date",
    "EDIT6208": "[range.utility.conv.to] Use model instead of satisfy for range concept",
    "EDIT6209": "[over.literal] Cross-reference deprecated grammar",
    "EDIT6210": "[basic.compound] Fix incorrect cross-reference",
    "EDIT6211": "[temp.variadic] \"instantiation of the init-capture pack\" vs. \"instantiation of the init-capture pack declaration\"",
    "EDIT6212": "[temp.variadic] Change \"init-capture pack\" to \"init-capture pack declaration\"",
    "EDIT6213": "[depr.atomics.volatile] Use tcode to call out template name",
    "EDIT6214": "\"behavior of a program is undefined\" vs \"program has undefined behavior\"",
    "EDIT6215": "[dcl.decl.general] Fix cross-references",
    "EDIT6216": "[temp.variadic] Change \"init-capture pack\" to \"init-capture pack declaration\"",
    "EDIT6217": "LaTeX: package extract abuses internal LaTeX interfaces and seems to be highly incompatible with modern versions of LaTeX",
    "EDIT6218": "#6204 Remove remaining inline from variable templates",
    "EDIT6219": "[range.enumerate.overview] Refer to [range.adaptor.object]",
    "EDIT6220": "[container.opt.reqmts] Index 3-way compare for containers",
    "EDIT6221": "[container.adapters] The `flat_*` container adapters need to index their members",
    "EDIT6222": "[string.iterators] should be removed as `basic_string` is a reversible container",
    "EDIT6223": "Doubtful uses of term \"lifetime\"",
    "EDIT6224": "[format.string.std] Replace \"Derived Extracted Property\" with simply \"property\"",
    "EDIT6225": "[expr.shift] more precise wording for arithmetic shift rounding CWG2724",
    "EDIT6226": "[class.static.data] IFNDR case is not distinguished",
    "EDIT6227": "Fix Subclause name for cstddef in headers.cpp.fs",
    "EDIT6228": "[iterator.concept.winc] Improve implementation-defined text",
    "EDIT6229": "Index for implementation defined entities",
    "EDIT6230": "[coro.generator] Editorial fixes",
    "EDIT6231": "tools: update action in GitHub workflow",
    "EDIT6232": "[range.enumerate.view] make the format more consistent",
    "EDIT6233": "[alg.unique] namepace -> namespace",
    "EDIT6234": "[range.repeat.iterator] Remove redundant period",
    "EDIT6235": "One \\grammarterm{x}, two \\grammarterm{x}{s} (and likewise)",
    "EDIT6236": "[defns.iostream.templates] This section doesn't seem helpful and may be misleading",
    "EDIT6237": "[utilities] Add range_format to index of library names",
    "EDIT6238": "[flat.map.modifiers] try_emplace_hint doesn't exist",
    "EDIT6239": "[dcl.attr.grammar] Braces of _balanced-token_ are unaligned",
    "EDIT6240": "Use new term \"constexpr-suitable\"",
    "EDIT6241": "[lex, expr, dcl.dcl] Disable character protrusion from BNF lines.",
    "EDIT6242": "[cpp.predefined] Add __cpp_auto_cast",
    "EDIT6243": "[cmp.alg] Add missing formatting for `F`",
    "EDIT6244": "[container.alloc.reqmts] Fix incorrect change of \\mandates to \\expects",
    "EDIT6245": "[flat.map.cons] Close an angle bracket",
    "EDIT6246": "[flat.set.modifiers] `(first, last)` should be `rg`",
    "EDIT6247": "What should the standard say for changes listed in Annex C that are backported by implementations?",
    "EDIT6248": "[flat.{map,multiset,set}.modifiers] Harmonize description of insert(s, first, last)",
    "EDIT6249": "[flat.map.modifiers] \"Arg...\" should be \"Args...\"",
    "EDIT6250": "[basic.pre] p9.1 \"character\" should be improved with \"translation character\"",
    "EDIT6251": "[intro.execution] Fix bad function call in example",
    "EDIT6252": "[class.base.init] use defnadj to introduce delegating and target constructor",
    "EDIT6253": "[strings], [unord.req.general], [stringbuf.members]: Fix xrefs to [co\u2026",
    "EDIT6254": "[ranges] Make the \"Effects: Equivalent to\" format consistent",
    "EDIT6255": "Fix remaining references to container requirements, and adjust subclause naming",
    "EDIT6256": "[optional.monadic] Should we remove invented variable declarations?",
    "EDIT6257": "[unord.hash] [format.formatter.spec] Rephrase \"specialization of X<Y>\"",
    "EDIT6258": "[dcl.init.list] Eliminate a case of \"specialization of X<Y>\"",
    "EDIT6259": "[flat.multiset.defn] Fix erroneous duplication of `iter-value-type<InputIterator>`",
    "EDIT6260": "[flat.multiset.defn] Fix minor errors and inconsistencies",
    "EDIT6261": "[expr.static.cast] Paragraph 8 ends in a colon",
    "EDIT6262": "[expr.prim.req.nested][expr.prim.id.general] Say the normal form of the constraint-expression",
    "EDIT6263": "[mdspan.mdspan.cons] `OtherIndexType` is not a parameter pack ([mdspan.mdspan.cons]/8.2)",
    "EDIT6264": "[format.formattable] Add the second template argument for `basic_format_context` LWG3925",
    "EDIT6265": "Refer to library exposition-only function templates as templates",
    "EDIT6266": "[basic.stc.dynamic.allocation] Remove redundant 'address of'",
    "EDIT6267": "[expr.const] Check the result object of a prvalue",
    "EDIT6268": "[expr.add] Pointer subtraction when P-Q is out of range of ptrdiff_t is unclear",
    "EDIT6269": "[expr.add] Clarify note on pointer subtraction",
    "EDIT6270": "[string.view], [string.view.comparison] Refactor string_view comparisons, exploiting rewritten candidates",
    "EDIT6271": "An \"introduction\" clause",
    "EDIT6272": "[basic.def.odr] Restructure requirements in p14-p15",
    "EDIT6273": "[func.wrap.func.general], [func.wrap.move.class] Remove redundant declaration",
    "EDIT6274": "P2767R0 \u00a73 as seen by LWG in Varna",
    "EDIT6275": "P0792R14, [func.wrap.ref.class]: Remove redundant declaration of another undefined primary template declaration",
    "EDIT6276": "[2023-06 CWG Motion 1] P2922R0 Core Language Working Group \"ready\" Issues",
    "EDIT6277": "[2023-06 CWG Motion 2] P2621R2 UB? In my Lexer?",
    "EDIT6278": "[2023-06 CWG Motion 3] P1854R4 Making non-encodable string literals ill-formed",
    "EDIT6279": "[2023-06 CWG Motion 4] P2361R6 Unevaluated strings",
    "EDIT6280": "[2023-06 CWG Motion 5] P2558R2 Add @, $, and ` to the basic character set",
    "EDIT6281": "[2023-06 CWG Motion 6] P2738R1 constexpr cast from void*: towards constexpr type-erasure",
    "EDIT6282": "[2023-06 CWG Motion 7] P2915R0 Proposed resolution for CWG1223",
    "EDIT6283": "[2023-06 CWG Motion 8] P2552R3 On the ignorability of standard attributes",
    "EDIT6284": "[2023-06 CWG Motion 9] P2752R3 Static storage for braced initializers",
    "EDIT6285": "[2023-06 CWG Motion 10] P2741R3 User-generated static_assert messages",
    "EDIT6286": "[2023-06 CWG Motion 11] P2169R4 A nice placeholder with no name",
    "EDIT6287": "[2023-06 LWG Motion 1] Tentatively Ready issues in P2910R0 C++ Standard Library Issues to be moved in Varna, Jun. 2023",
    "EDIT6288": "[2023-06 LWG Motion 2] P2497R0 Testing for success or failure of <charconv> functions",
    "EDIT6289": "[2023-06 LWG Motion 3] P2592R3 Hashing support for std::chrono value classes",
    "EDIT6290": "[2023-06 LWG Motion 4] P2587R3 to_string or not to_string",
    "EDIT6291": "[2023-06 LWG Motion 5] P2562R1 constexpr Stable Sorting",
    "EDIT6292": "[2023-06 LWG Motion 6] P2545R4 Read-Copy Update (RCU)",
    "EDIT6293": "[2023-06 LWG Motion 7] P2530R3 Hazard Pointers for C++26",
    "EDIT6294": "[2023-06 LWG Motion 8] P2538R1 ADL-proof std::projected",
    "EDIT6295": "[2023-06 LWG Motion 9] P2495R3 Interfacing stringstreams with string_view",
    "EDIT6296": "[2023-06 LWG Motion 10] P2510R3 Formatting pointers",
    "EDIT6297": "[2023-06 LWG Motion 11] P2198R7 Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "EDIT6298": "[2023-06 LWG Motion 12] P2338R4 Freestanding Library: Character primitives and the C library",
    "EDIT6299": "[2023-06 LWG Motion 12] P2338R4 Freestanding Library: Character primitives and the C library",
    "EDIT6300": "[2023-06 LWG Motion 13] P2013R5 Freestanding Language: Optional ::operator new",
    "EDIT6301": "[2023-06 LWG Motion 15] P2363R5 Extending associative containers with the remaining heterogeneous overloads",
    "EDIT6302": "[2023-06 LWG Motion 16] P1901R2 Enabling the Use of weak_ptr as Keys in Unordered Associative Containers",
    "EDIT6303": "[2023-06 LWG Motion 17] P1885R12 Naming Text Encodings to Demystify Them",
    "EDIT6304": "[2023-06 LWG Motion 18] P0792R14 function_ref: a type-erased callable reference",
    "EDIT6305": "[2023-06 LWG Motion 19] P2874R2 Mandating Annex D",
    "EDIT6306": "[2023-06 LWG Motion 20] P2757R3 Type checking format args",
    "EDIT6307": "[2023-06 LWG Motion 21] P2637R3 Member visit",
    "EDIT6308": "[2023-06 LWG Motion 22] P2641R4 Checking if a union alternative is active",
    "EDIT6309": "[2023-06 LWG Motion 23] P1759R6 Native handles and file streams",
    "EDIT6310": "[2023-06 LWG Motion 24] P2697R1 Interfacing bitset with string_view",
    "EDIT6311": "[2023-06 LWG Motion 25] P1383R2 More constexpr for cmath and complex",
    "EDIT6312": "[2023-06 LWG Motion 26]  P2734R0 Adding the new 2022 SI prefixes",
    "EDIT6313": "[2023-06 LWG Motion 27] P2548R6 copyable_function",
    "EDIT6314": "[2023-06 LWG Motion 28] P2714R1 Bind front and back to NTTP callables",
    "EDIT6315": "[2023-06 LWG Motion 29] P2630R4 submdspan",
    "EDIT6316": "P2621R2 Undefined behavior in the lexer",
    "EDIT6317": "P1854R4 Making non-encodable string literals ill-formed",
    "EDIT6318": "P2361R6 Unevaluated strings",
    "EDIT6319": "P2558R2 Add @, $, and ` to the basic character set",
    "EDIT6320": "P2738R1 constexpr cast from void*: towards constexpr type-erasure",
    "EDIT6321": "P2552R3 On the ignorability of standard attributes",
    "EDIT6322": "P2752R3 Static storage for braced initializers",
    "EDIT6323": "[README] Update Arch Linux instructions",
    "EDIT6324": "[string.view], [string.view.comparison] Refactor string_view comparis\u2026",
    "EDIT6325": "P2741R3 User-generated static_assert messages",
    "EDIT6326": "P2169R4 A nice placeholder with no name",
    "EDIT6327": "P2874R2 Mandating Annex D",
    "EDIT6328": "[Motions 2023 06 cwg 1] P2922R0 Core Language Working Group \"ready\" Issues",
    "EDIT6329": "[Motion cwg 7] P2915R0 (Proposed resolution for CWG1223)",
    "EDIT6330": "P2497R0 Testing for success or failure of <charconv> functions",
    "EDIT6331": "P2587R3 to_string or not to_string",
    "EDIT6332": "P2592R3 Hashing support for std::chrono value classes",
    "EDIT6333": "[lex.icon]p4 Note condition for ill-formedness off-by 1 bit/`u`-suffix",
    "EDIT6334": "Missing Licensing Information",
    "EDIT6335": "[Motion lwg 1] P2910R0 C++ Standard Library Issues",
    "EDIT6336": "[string.require]p3 Move note's contents",
    "EDIT6337": "[expected.void.obs] Fix index for specialization",
    "EDIT6338": "[LWG 29] P2630R4 submdspan",
    "EDIT6339": "[LWG motion 28] P2714R1 Bind front and back to NTTP callables",
    "EDIT6340": "[LWG Motion 26] P2734R0 Adding the new 2022 SI prefixes",
    "EDIT6341": "P2562R1 constexpr Stable Sorting",
    "EDIT6342": "[LWG motion 27] P2548R6 copyable_function",
    "EDIT6343": "[LWG motion 25] P1383R2 More constexpr for cmath and complex",
    "EDIT6344": "P2545R4 Read-Copy Update (RCU)",
    "EDIT6345": "P2530R3 Hazard Pointers for C++26",
    "EDIT6346": "[LWG motion 24] P2697R1 Interfacing bitset with string_view",
    "EDIT6347": "[LWG motion 23] P1759R6 Native handles and file streams",
    "EDIT6348": "[LWG motion 22] P2641R4 Checking if a union alternative is active",
    "EDIT6349": "P2538R1 ADL-proof std::projected",
    "EDIT6350": "[LWG motion 21] P2637R3 Member visit",
    "EDIT6351": "[LWG motion 20] P2757R3 Type checking format args",
    "EDIT6352": "P2495R3 Interfacing stringstreams with string_view",
    "EDIT6353": "[mdspan.submdspan] `full_extent_t` doesn't exist",
    "EDIT6354": "P2510R3 Formatting pointers",
    "EDIT6355": "P2198R7 Freestanding Feature-Test Macros and Implementation-Defined ...",
    "EDIT6356": "P2338R4 Freestanding Library: Character primitives and the C library",
    "EDIT6357": "[LWG motion 18] P0792R14 function_ref: a type-erased callable reference",
    "EDIT6358": "P2013R5 Freestanding Language: Optional ::operator new",
    "EDIT6359": "[LWG motion 17] P1885R12 Naming Text Encodings to Demystify Them",
    "EDIT6360": "P2363R5 Extending associative containers with the remaining heterogen\u2026",
    "EDIT6361": "[LWG motion 16] P1901R2 Enabling the Use of weak_ptr as Keys in Unordered Associative\u2026",
    "EDIT6362": "[func.wrap.ref.class, func.wrap.ref.deduct] Inconsistent parameter",
    "EDIT6363": "[meta.unary.prop.query, meta.trans.arr] Use `static_assert` instead of `assert` in example",
    "EDIT6364": "[basic.def.odr] lambda-expression example seemingly constradicts normative wording",
    "EDIT6365": "[mdspan.submdspan] Introduced `rank` should be _`rank`_ or dissolved",
    "EDIT6366": "[expr.mul] Add missing commas after conditional and introductory phrases",
    "EDIT6367": "[namespace.std] Convert unconventional (a) and (b) notation to items",
    "EDIT6368": "[basic.def.odr] Add serial comma",
    "EDIT6369": "[filebuf.virtuals] fix \"if width if less than zero\" typo",
    "EDIT6370": "[basic.fundamental] Wording implies existence of unique maximum value of floating-point types",
    "EDIT6371": "[time.duration.general] Use code font for duration",
    "EDIT6372": "[time.duration.cons] Fix redeclaration error in example",
    "EDIT6373": "[flat.map.cons] etc.: zip_view should be views::zip",
    "EDIT6374": "[basic.life][class.dtor] Seemingly redundant normative specification for undefined behavior about double destruction",
    "EDIT6375": "[temp.point] Clarify ambiguous wording on point of instantiation",
    "EDIT6376": "[atomics.order] Clarify whether p11 makes demands towards loads, or just stores",
    "EDIT6377": "[basic.scope.scope] Avoid hard-to-read except...unless construction.",
    "EDIT6378": "[dcl.fct.def.delete] p1 Improve the phrase for \"implicitly defined as deleted\"",
    "EDIT6379": "[expr.prim.id.general] p2 The first note in the rule is a bit misleading",
    "EDIT6380": "[atomics.order] p11 - Make it recommended practice and rephrase",
    "EDIT6381": "[dcl.enum] Fix double spaces in Example 4",
    "EDIT6382": "[dcl.init] Fix brace spacing inconsistencies",
    "EDIT6383": "[time.zone.leap.overview] Fix example",
    "EDIT6384": "[basic.def.odr] Make example 6 much less confusing",
    "EDIT6385": "mdspan/layout_stride: fix missed rename in use of template argument name",
    "EDIT6386": "[dcl.ambig.res] example has two declarations of 'y'",
    "EDIT6387": "[dcl.ambig.res] fix double declaration of 'y' in example",
    "EDIT6388": "[priqueue.members] [queue.mod] [stack.mod] Harmonize push_range wording",
    "EDIT6389": "[basic.life][class.dtor] Turn normatively redundant paragraphs for double destruction into notes",
    "EDIT6390": "[version.syn] Fix header references.",
    "EDIT6391": "[version.syn] Fix <cstdlib> header reference.",
    "EDIT6392": "[over.call.func] Example 1 - Fix misleading indentation",
    "EDIT6393": "Text encodings/locales: missing normative association?",
    "EDIT6394": "Replace cross-references from C++20 with cross-references from C++23.",
    "EDIT6395": "[dcl.link] Clarify the intent of CWG2483",
    "EDIT6396": "[intro.races] Drop a possibly misleading sentence in p20",
    "EDIT6397": "Stray \\mandates in submdspan",
    "EDIT6398": "[func.wrap.ref.class] change deduction guide to match its detailed specifications",
    "EDIT6399": "[mdspan.submdspan.submdspan] p4.3 and p5.1 could be removed",
    "EDIT6400": "[mdspan.submdspan.extents] Factor out common result expression",
    "EDIT6401": "[class.copy.assign] Remove note obsoleted by CWG2586",
    "EDIT6402": "[input.output] Fix non-compliance Effects: Equivalent to format",
    "EDIT6403": "[dcl.fct.def.default] Highlight different references in defaulted assignments",
    "EDIT6404": "[flat.map][flat.multimap] Exposition-only formatting for `c`, `comp`, `compare`, and `key-equiv`",
    "EDIT6405": "[temp.point] Itemize some paragraphs",
    "EDIT6406": "[span.cons][range.slide.iterator][text.encoding.members] Simplify `\\tcode{\\exposid{name}}` to `\\exposid{name}`",
    "EDIT6407": "[expr.const.cast] \"Cast away constness\" covers not only const-qualification",
    "EDIT6408": "[assets] Move separate assets into \"assets\" subdirectory",
    "EDIT6409": "[expr.static.cast]",
    "EDIT6410": "[basic.fundamental] Clarify that table of minimum integral type widths applies only to standard integral types",
    "EDIT6411": "[conv.ptr], [conv.mem] Remove redundant text on null pointer comparisons",
    "EDIT6412": "[intro.object] Fix cross-references for implicit object creation in the library",
    "EDIT6413": "[over.call.object] Refer to the static type of the object expression",
    "EDIT6414": "[dcl.meaning.general] Use 'declarator-id' instead of 'name'",
    "EDIT6415": "Cherrypicks for the C++23 IS",
    "EDIT6416": "[optional.optional] Remove qualified destructor calls, refactor postconditions of `swap`",
    "EDIT6417": "[module.global.frag] Simplify wording",
    "EDIT6418": "Switch to lualatex and New Computer Modern",
    "EDIT6419": "Don't define typedef-names in the library wording",
    "EDIT6420": "typo fix appeartain -> appertain",
    "EDIT6421": " [version.syn] Bump value of __cpp_lib_constexpr_complex",
    "EDIT6422": "[intro.object] Make the storage in the example for storage providing properly aligned",
    "EDIT6423": "[ostream.formatted.print] Use \\impldef macro.",
    "EDIT6424": "[basic.lookup.qual.general] Ignore top-level cv-qualifiers for the purpose of lookup context",
    "EDIT6425": "[class.compare.default] Say subobjects of an object instead of a class",
    "EDIT6426": "[cmp.categories] Exposition-only formatting for `value` and `is-ordered`",
    "EDIT6427": "Remove `friend class` from the library wording",
    "EDIT6428": "[dcl.inline] p2 - Make it recommended practice",
    "EDIT6429": "[intro.object] Example for p10",
    "EDIT6430": "[memory.syn][ranges.syn] Remove redundant `// freestanding` marks for freestanding class members",
    "EDIT6431": "[intro.races] p13 - add missing serial comma between items",
    "EDIT6432": "[basic.compound] Clarify a pointer to a non-first element object of an array",
    "EDIT6433": "[diagnostics] Exposition-only formatting for `val_`, `cat_`, and `frames_`",
    "EDIT6434": "[intro.execution] \"Sequenced before\" should be a strict partial order",
    "EDIT6435": "[basic][expr] Declare but not define typedef-names in standard headers",
    "EDIT6436": "[meta.unary.prop] Itemize p10 more",
    "EDIT6437": "[conv.mem] Itemize p2",
    "EDIT6438": "[basic.align] Fix non-mathematical wording of p7",
    "EDIT6439": "[expr.cond] Itemize p4",
    "EDIT6440": "[dcl.meaning.general] Remove `extern` in one case to make example 3 more informative",
    "EDIT6441": "[basic.def.odr] Fix grammatical error in p17",
    "EDIT6442": "[basic.link] fix unusual punctuation in p4",
    "EDIT6443": "[temp.over] Itemize p1",
    "EDIT6444": "[class.static.data] Fix - classes have no subobjects",
    "EDIT6445": "[class.cdtor] p2 needs changes/notes to clarify intent and limitations",
    "EDIT6446": "[except.terminate] Fix missing introductory comma",
    "EDIT6447": "[algorithms.parallel.defns] Insert new paragraph number for example",
    "EDIT6448": "[depr.static.constexpr] Cross-reference core clauses ",
    "EDIT6449": "[dcl.ptr] p3 - Entire normative paragraph dedicated to \"See also\"",
    "EDIT6450": "[dlc.init.general] Fix wording of direct-initialization",
    "EDIT6451": "[coro.generator.class] Name the generator's second template parameter Val?",
    "EDIT6452": "[allocator.requirements.general] Fix the misuse of `launder`",
    "EDIT6453": "[over.ics.list] Fix missing std:: in example 5",
    "EDIT6454": "[over.ics.list] expand example 5, fix inconsistent spacing",
    "EDIT6455": "[expr.type] p1 should possibly be a note",
    "EDIT6456": "[lib] Avoid redundant \\tcode{\\exposid{...}} and add a check",
    "EDIT6457": "[intro.races] Remove unclear uses of \"shall\"",
    "EDIT6458": "[stdfloat.syn] Add typedefs to library index",
    "EDIT6459": "Various editorial fixes in [time]",
    "EDIT6460": "[iterator.concept.readable] Add missing \\expos for `indirectly-readable-impl` concept",
    "EDIT6461": "[mdspan.extents.cons] Fix typo (`dynamic_rank` => `rank_dynamic`)",
    "EDIT6462": "[defns.projection] The example isn't demonstrating the effects of customized projection",
    "EDIT6463": "[bit.cast] simplify \"unsigned ordinary character type\" to `unsigned char`",
    "EDIT6464": "[basic.fundamental] Itemize p13",
    "EDIT6465": "[basic.fundamental] Itemize uses of `void` expressions",
    "EDIT6466": "[basic.fundamental] Turn normative wording for `void` return types into a note",
    "EDIT6467": "[expr.sizeof] Turn identifier into a grammarterm",
    "EDIT6468": "[expr.sizeof] Use constexpr member in example",
    "EDIT6469": "[stmt.expr] use grammarterm for expression",
    "EDIT6470": "[lex.icon] Itemize extended integer choice",
    "EDIT6471": "[dcl.attr.noreturn] Remove redundant note",
    "EDIT6472": "[dcl.attr.nodiscard] Add example of nodiscard with message",
    "EDIT6473": "[dcl.attr.unused] Add static keyword to function in example",
    "EDIT6474": "[format.string.std]/4: sC example doesn't have enough clowns",
    "EDIT6475": "[intro.memory] Remove stray bit definitions",
    "EDIT6476": "[temp.spec.general] Instantiated definitions",
    "EDIT6477": "[dcl.stc] rearrange wording, turn typedef restriction into note",
    "EDIT6478": "[tuple.swap] change weird 'call x with y' wording",
    "EDIT6479": "[mem.res.pool.options] Replace `field` with `member`",
    "EDIT6480": "[intro.memory] Replace `fields` with `members`",
    "EDIT6481": "[diff.cpp20.utilities] Hyphenate bit-fields",
    "EDIT6482": "[diff.dcl] Replace `field initializers` with `member initializers`",
    "EDIT6483": "[basic.def.odr] Greatly expand example 6",
    "EDIT6484": "[dcl.constexpr] Modernize example of constexpr-usable functions",
    "EDIT6485": "[lex.phases] Add iref to [cpp.include]",
    "EDIT6486": "[gram.key] Is it in a C++98 state, or is it intentional?",
    "EDIT6487": "[lex.phases],[forward.list.ops],[list.ops],[alg.unique] Hyphenate non-empty",
    "EDIT6488": "[dcl.init.string] Reword character array initialization",
    "EDIT6489": "[dcl.init.string] Shorten example string",
    "EDIT6490": "[dcl.init.general],[dcl.init.list],[over.ics.list] Array of characters isn't defined",
    "EDIT6491": "[basic.scope] What is type equivalence?",
    "EDIT6492": "[stmt.do] Needs some work",
    "EDIT6493": "[stmt.while] Should include grammar",
    "EDIT6494": "[stmt.while] Add grammar",
    "EDIT6495": "[stmt.do] Add grammar equivalence and reorder paragraphs",
    "EDIT6496": "[class.conv.fct] Can p8 be a note?",
    "EDIT6497": "[class.conv.ctor] Fix missing space",
    "EDIT6498": "[class.copy.assign] Definition and hyphenation issues",
    "EDIT6499": "[utility.intcmp] Simplify equivalences",
    "EDIT6500": "[expected.object.monadic][LWG 3938] Use **this may cause compile fail",
    "EDIT6501": "[intro.races] Make reading atomic objects nondeterministic",
    "EDIT6502": "[atomics] Make notify_one nondeterministic",
    "EDIT6503": "[intro.multithread.general] Do not access functions",
    "EDIT6504": "Broken or unsightly iref links after line breaks after #5151",
    "EDIT6505": "[class.conv.ctor] Turn last paragraph into a note",
    "EDIT6506": "[basic.def.odr],[res.on.arguments],[futures] Fix hyphenation of \"assignment operator\"",
    "EDIT6507": "[stmt.return] format operand as `\\term`",
    "EDIT6508": "[stmt.dcl] Add example of static/thread_local block variable initialization",
    "EDIT6509": "tools: Use grep -F instead of fgrep",
    "EDIT6510": "Section headings should use \\hypertarget",
    "EDIT6511": "[atomics.types.operations] p7 What if the supplied arguments does not denote any enumerator?",
    "EDIT6512": "[dcl.attr.assume] Contradictory wording around contextual conversion",
    "EDIT6513": "[rand.device] Weird text style in comment",
    "EDIT6514": "[rand.device] Remove stray \\textit.",
    "EDIT6515": "[meta.unary.op] Expand note for has_unique_object_representations",
    "EDIT6516": "Add \\hypertarget to enable url links into xrefs",
    "EDIT6517": "[check] Use single quotes for grep argument",
    "EDIT6518": "[atomics.ref.ops], [atomics.types.operations], [util.smartptr.atomic.\u2026",
    "EDIT6519": "[atomics] Reword preconditions on memory_order values in a positive form",
    "EDIT6520": "[temp.expl.spec] Turn paragraph into note",
    "EDIT6521": "[basic.link],[dcl.constexpr] \"constexpr variable\" is not defined",
    "EDIT6522": "[temp.expl.spec] Is p13 too limited or is it intentional?",
    "EDIT6523": "[dcl.constinit] p1 \"Declaration of a variable\" is broken wording",
    "EDIT6524": "[cpp] \"identifier\" should be `\\grammarterm{identifier}` in more cases",
    "EDIT6525": "Can we do something about \"constant-initialized\" vs \"constant initialization\"",
    "EDIT6526": "[vector.data],[array.members] Clarify C++ boolean expression",
    "EDIT6527": "[expr.call] Add further forward references",
    "EDIT6528": "[expr.call] Turn recursive call wording into note",
    "EDIT6529": "[cpp] `\\grammarterm` overhaul",
    "EDIT6530": "[mdspan.submdspan.extents] Format equations as math.",
    "EDIT6531": "[format.string.std] Fix example",
    "EDIT6532": "[class.access.general] Fix improper `\\keyword{private}`",
    "EDIT6533": "[lex.string] Format narrow string literals as definition",
    "EDIT6534": "[input.output] Fix missing `is \\keyword{true}` or `is \\keyword{false}`",
    "EDIT6535": "[fs.path.member],[fs.path.modifier],[fs.filesystem.error.members] Fix equals postconditions involving `empty()`",
    "EDIT6536": "p2579r0 vs. https://eel.is/c++draft/basic.scope#block-2",
    "EDIT6537": "Confusion about formatting of Cpp17 iterator requirements",
    "EDIT6538": "Draft",
    "EDIT6539": "[expr.unary.noexcept] Replace informative wording",
    "EDIT6540": "[c.math] Is there a reason why math functions such as `sqrt` are not indexed?",
    "EDIT6541": "[temp.deduct.type] Remove excessive spacing in example",
    "EDIT6542": "[cmath.syn] Fix misaligned parameter lists",
    "EDIT6543": "[cmath.syn] Align function declarations",
    "EDIT6544": "[intro.progress],[atomics.order] Significant overlap between paragraphs",
    "EDIT6545": "[class.local] Add comma after introductory clause",
    "EDIT6546": "[class.copy.elision] Improve reference and replace informal term",
    "EDIT6547": "[res.on.exception.handling] Use `\\grammarterm` instead of informal term",
    "EDIT6548": "Add a `ranges::to_container(T container)` which accepts a reusable container",
    "EDIT6549": "[basic.scope.scope] add reference for equivalence to [temp.over.link]",
    "EDIT6550": "[diff.cpp20.thread] Fixed typo \"ill formed\" -> \"ill-formed\"",
    "EDIT6551": "[intro.races] It is slightly unclear whether a data race can occur if no bits are changed",
    "EDIT6552": "[allocator.traits.other] uses \"above\" to reference something 14 pages before it",
    "EDIT6553": "[temp.dep.expr] Weird circumventing of nested bullets",
    "EDIT6554": "[basic.types.general] Apply Oxford comma consistently",
    "EDIT6555": "[expr.unary.op] Clarify through note whether indirection of a prvalue array is possible CWG2548",
    "EDIT6556": "[tab:headers.cpp] Rebalance table columns",
    "EDIT6557": "[temp.dep.expr] Introduce nested bullets for clarity",
    "EDIT6558": "[dcl.fct.default] Incorrect note on `this` in default arguments",
    "EDIT6559": "[conv.general] Note misuses \u00abdestination type\u00bb",
    "EDIT6560": "Added missing template argument",
    "EDIT6561": "[mdspan] require conversion results to be nonnegative",
    "EDIT6562": "[class.temporary] Clarify wording for lifetime of temporaries.",
    "EDIT6563": "[basic.start.main] Clarify what it means to \"use\" `main`",
    "EDIT6564": "[preprocessor] [version.syn] Add index entries for \"feature-test macro\" in the two places they're defined",
    "EDIT6565": "[mdspan.layout.stride.cons] Fix cross-reference",
    "EDIT6566": "[mdspan.mdspan.overview] Don't use \"requires(\" for non-requires-expressions",
    "EDIT6567": "[atomics.order] Memory operations should be definitions",
    "EDIT6568": "[range.utility.conv.to] Add terminating condition for first bullet",
    "EDIT6569": "[expected.object.cons, expected.un.cons] Should we simplify `is_constructible_v<unexpected<E>, expected<U, G>&>` and its friends?",
    "EDIT6570": "[version.syn] Put feature test macros in alphabetical order",
    "EDIT6571": "Remove section 2 from [sequence.reqmts]",
    "EDIT6572": "[class.temporary] \"Temporary object\" is not defined",
    "EDIT6573": "[expr.ref] p1 should use the term \"sequenced\"",
    "EDIT6574": "[expr.log.and],[expr.log.or] improve wording symmetry and quality",
    "EDIT6575": "[dcl.fct] It is unclear whether zero-size arrays in function parameters are allowed",
    "EDIT6576": "[over.over] p2 function type vs. pointer to function type",
    "EDIT6577": "[temp.res.general] Fix misleading example related to syntax errors",
    "EDIT6578": "[func.not.fn], [func.bind.partial] Use {term.xxx} as reference for perfect forwarding call wrapper",
    "EDIT6579": "Add memory order for atomic_flag_test_and_set and atomic_flag_clear.",
    "EDIT6580": "[temp.over.link] Fix cross-reference introduced by P1787R6",
    "EDIT6581": "[const.iterators.ops] Add missing \\pnum and replace returns with effects",
    "EDIT6582": "[func.wrap.func] Drop Lvalue-Callable?",
    "EDIT6583": "[fs.filesystem.syn] Remove redundant inline",
    "EDIT6584": "[common.iter.const] Add missing periods for Returns",
    "EDIT6585": "[tab:headers.cpp] `<hazard_pointer>` is hazardously missing",
    "EDIT6586": "[tab:headers.cpp] Add <hazard_pointer>",
    "EDIT6587": "[string.cons] Remove erroneous paragraph break",
    "EDIT6588": "[thread.lock.guard] Does not take into account storage reuse",
    "EDIT6589": "[expr.const] \"Constant expression\" is defined twice",
    "EDIT6590": "[mdspan.mdspan.overview] Rename parameter ptr to p",
    "EDIT6591": "[basic.types.general] Create a term for implicit-lifetime type",
    "EDIT6592": "Dehyphenate trivially-copyable",
    "EDIT6593": "[temp.param] Introduce term to xref structural type",
    "EDIT6594": "[expr.prim.lambda.closure] insert an extra pnum",
    "EDIT6595": "DIS **-011: remove unused definitions",
    "EDIT6596": "[annex] Fix table numbering in annexes",
    "EDIT6597": "[unique.ptr.runtime.modifiers] Fix placement of 'constexpr'",
    "EDIT6598": "[util.smartptr.shared.cmp] Fix missing right parenthesis",
    "EDIT6599": "[lex.name] Add cross-reference to Annex E",
    "EDIT6600": "[intro.refs] Fix title of ISO/IEC 9899:2018",
    "EDIT6601": "[time.format] Make reference to ISO 8601 more precise",
    "EDIT6602": "[mdspan.layout.left] Add missing `noexcept`",
    "EDIT6603": "[intro.scope] Clarify 'they'",
    "EDIT6604": "[expr.const] Amend comments in example",
    "EDIT6605": "[expr.prim.lambda.general] Add example for parsing ambiguity",
    "EDIT6606": "[defns.component] Remove unwarranted italics",
    "EDIT6607": "[std] \"modeled\" should be spelled \"modelled\"",
    "EDIT6608": "[lex.charset] Clarify normative reference to Unicode for UTF-x",
    "EDIT6609": "[type.traits] Add references to tables",
    "EDIT6610": "Avoid 'must'",
    "EDIT6611": "Notes with requirements",
    "EDIT6612": "[forward.iterators] Consistently use Cpp17 requirements",
    "EDIT6613": "[iterator.requirements.general] Clarify non-forward iterator",
    "EDIT6614": "[defns.{impl.limits,iostream.templates}] Use singular",
    "EDIT6615": "Replace \"C Standard\" with \"ISO/IEC 9899:2018\" and define \"C standard library\"",
    "EDIT6616": "[stmt.return] p5 \"which\" is ambiguous in the sentence",
    "EDIT6617": "[basic.scope.block] et al. - Ambiguous definition of \"local variable\"",
    "EDIT6618": "[basic.lval] Turn reference paragraph into note",
    "EDIT6619": "[class.copy.assign] Remove a superfluous note.",
    "EDIT6620": "Various minor editorial cleanups",
    "EDIT6621": "Fix a few small bugs in submdspan",
    "EDIT6622": "[mdspan.accessor.reqmts] Name type `A` to `ACC`?",
    "EDIT6623": "[intro.defs, dcl.init.list] Move definition of direct-non-list-init",
    "EDIT6624": "[xrefdelta] Remove mention of removals that are now already in C++23",
    "EDIT6625": "[expr.prim.lambda.general] Added missing definition for the term \"lambda\".",
    "EDIT6626": "[stmt.if] Add an example for the value-dependence of the condition after instantiation",
    "EDIT6627": "[lex.phases] Whitespace characters should be kept for the sake of the stringize operator",
    "EDIT6628": "[basic.pre] Eliminate the redundant block-declaration",
    "EDIT6629": "[streambuf.general] `std::basic_streambuf` is not an abstract class",
    "EDIT6630": "[streambuf.general] Strike \"abstract\" from \"basic_streambuf serves as an abstract base class\"",
    "EDIT6631": "[std] Use more \\defnadj",
    "EDIT6632": "[span.cons] Add `std::` for `data(arr)`",
    "EDIT6633": "[ranges] Reuse `bidirectional-common` concept?",
    "EDIT6634": "code example in [expr.await]",
    "EDIT6635": "[stack.syn, queue.syn] Show `formatter` specializations in the synopses",
    "EDIT6636": "[format.formatter.spec] Add missing include to example",
    "EDIT6637": "[expr.prim.lambda.closure] Improve some parallel grammar",
    "EDIT6638": "Teste",
    "EDIT6639": "[intro.refs] Move nicknames for standards to relevant subclauses",
    "EDIT6640": "[func.require] Unclear use of \"shall\" LWG4007",
    "EDIT6641": "[flat.map.capacity]: Where are the other `flat_meow`'s correspondences about this?",
    "EDIT6642": "[class.conv.fct] Fix reference to 'ref-qualifier-seq'",
    "EDIT6643": "[mdspan.submdspan] Add missing definitions for full_extent_t and full_extent",
    "EDIT6644": "[defns.character.container] Improve note",
    "EDIT6645": "[string.capacity] Remove parentheses from \"reserve()\"",
    "EDIT6646": "[conv.general, expr.static.cast] Remove inappropriate \"temporary\"",
    "EDIT6647": "[diff] Annex C missing some header additions",
    "EDIT6648": "[diff.cpp23.library] Note new headers in C++26",
    "EDIT6649": "[diff.cpp03.library] Two entries for <typeinfo> in the index of library headers",
    "EDIT6650": "[dcl.init.ref] Clarify \"related type\"",
    "EDIT6651": "Should we stop talking about related types?",
    "EDIT6652": "Change floating point wording from mantissa to significand",
    "EDIT6653": "[algorithms] Change stable tag 'mismatch' to alg.mismatch, so that it is consistent with similar labels in the same section",
    "EDIT6654": "[ranges] Introduce `bidirectional-common` and `random-access-sized` to simplify concept spelling",
    "EDIT6655": "[2023-11 CWG Motion 1] Core Language Working Group \"ready\" Issues for the November, 2023 meeting",
    "EDIT6656": "[2023-11 CWG Motion 2] Template parameter initialization",
    "EDIT6657": "[2023-11 CWG Motion 3] Pack Indexing",
    "EDIT6658": "[2023-11 CWG Motion 4] Remove Deprecated Arithmetic Conversion on Enumerations From C++26",
    "EDIT6659": "[2023-11 LWG Motion 1] C++ Standard Library Issues to be moved in Kona, Nov. 2023",
    "EDIT6660": "[2023-11 LWG Motion 2] Saturation arithmetic",
    "EDIT6661": "[2023-11 LWG Motion 3] Freestanding Library: Partial Classes",
    "EDIT6662": "[2023-11 LWG Motion 4] Debugging Support",
    "EDIT6663": "[2023-11 LWG Motion 5] Runtime format strings",
    "EDIT6664": "[2023-11 LWG Motion 6] Runtime format strings II",
    "EDIT6665": "[2023-11 LWG Motion 7] Fix formatting of code units as integers",
    "EDIT6666": "[2023-11 LWG Motion 8] A new specification for std::generate_canonical",
    "EDIT6667": "[2023-11 LWG Motion 9] std::span over an initializer list",
    "EDIT6668": "[2023-11 LWG Motion 10] span.at()",
    "EDIT6669": "[2023-11 LWG Motion 11] Remove Deprecated std::allocator Typedef From C++26",
    "EDIT6670": "[2023-11 LWG Motion 12] Remove basic_string::reserve() From C++26",
    "EDIT6671": "[2023-11 LWG Motion 13] Remove Deprecated Unicode Conversion Facets from C++26",
    "EDIT6672": "[2023-11 LWG Motion 14] Add tuple protocol to complex",
    "EDIT6673": "[2023-11 LWG Motion 15] Freestanding: Remove strtok",
    "EDIT6674": "[2023-11 LWG Motion 16] Freestanding Library: inout expected span",
    "EDIT6675": "[2023-11 LWG Motion 17] std::basic_const_iterator should follow its underlying type\u2019s convertibility",
    "EDIT6676": "[2023-11 LWG Motion 18] Make assert() macro user friendly for C and C++",
    "EDIT6677": "[2023-11 LWG Motion 19] A free function linear algebra interface based on the BLAS",
    "EDIT6678": "Initial text for P2546, debugging support.",
    "EDIT6679": "[Motions 2023 11 cwg 3] P2662R3 Pack Indexing",
    "EDIT6680": "[support.initlist] Teletype font for `initializer_list`",
    "EDIT6681": "[LWG motion 4] P2546R5 Debugging Support",
    "EDIT6682": "[intro.defs, macros] Add cross-references among definitions",
    "EDIT6683": "[Motions 2023 11 cwg 4] P2864R2 Remove deprecated arithmetic conversions",
    "EDIT6684": "[Motions 2023 11 cwg 1] P3046R0 Core Language Working Group \"ready\" Issues",
    "EDIT6685": "[Motions 2023 11 lwg 1] P3040R0 C++ Standard Library Issues",
    "EDIT6686": "[LWG motion 2] P0543R3 Saturation arithmetic",
    "EDIT6687": "[LWG 5] P2905R2 Runtime format strings",
    "EDIT6688": "[LWG 6] P2918R2 Runtime format strings II",
    "EDIT6689": "[LWG 7] P2909R4 Fix formatting of code units as integers (Dude, where\u2019s my char?)",
    "EDIT6690": "[LWG 8] P0952R2 A new specification for std::generate_canonical",
    "EDIT6691": "[LWG 9] P2447R6 std::span over an initializer list",
    "EDIT6692": "[LWG 11] P2821R5 span.at()",
    "EDIT6693": "[LWG 14] P2819R2 Add tuple protocol to complex",
    "EDIT6694": "[LWG 15] P2937R0 Freestanding: Remove strtok",
    "EDIT6695": "Fix typo in [allocator.requirements.general] wording for `a.construct(c, args)`",
    "EDIT6696": "[Motions 2023 11 cwg 2] P2308R1 Template parameter initialization",
    "EDIT6697": "[basic.def.odr] The set should be the potential results of E_2",
    "EDIT6698": "[stacktrace.format], [stacktrace.basic.hash] change rSec3 to rSec2",
    "EDIT6699": "P2836R1 std::basic_const_iterator should follow its underlying type's convertibility",
    "EDIT6700": "[array,localization] Fix order of indexed `get` members",
    "EDIT6701": "[LWG 18] P2264R7 Make assert() macro user friendly for C and C++",
    "EDIT6702": "[LWG 3] P2407R5 Freestanding Library: Partial Classes",
    "EDIT6703": "[LWG 16] P2833R2 Freestanding Library: inout expected span",
    "EDIT6704": "[LWG 19] P1673R13 A free function linear algebra interface based on the BLAS",
    "EDIT6705": "\\indexlibrary-global or -member? ",
    "EDIT6706": "Updated templates.tex to make program ill formed when the set of func\u2026",
    "EDIT6707": "Fix indentation in [algorithms.parallel.defns] paragraph 5 example",
    "EDIT6708": "[LWG 11] P2868 Remove deprecated typedef from std::allocator",
    "EDIT6709": "[LWG 12] P2870R3 Remove deprecated basic_string::reserve() with no parameters",
    "EDIT6710": "[LWG 13] P2871R3 Remove deprecated <codecvt> header",
    "EDIT6711": "[class.eq] Fix the return value of a defaulted == operator function",
    "EDIT6712": "[time.parse,diff.cpp17.temp] Argument-dependent lookup is spelled without a hyphen",
    "EDIT6713": "[dcl.init.ref, over.ics.ref, over.ics.rank] Avoid saying function lvalue",
    "EDIT6714": "[expected.general] Contradictory description of expected<T, E>.",
    "EDIT6715": "[expected.general] Fix description of expected<T, E> (issue #6714.)",
    "EDIT6716": " Undefined control sequence M@currentTitle",
    "EDIT6717": "[range.repeat.iterator] \\exposid{current_} does not display italics on the web",
    "EDIT6718": "Cleanups after CWG2672",
    "EDIT6719": "[dcl.init.list] Construction of an `initializer_list` object from a pair of pointers",
    "EDIT6720": "[std] Update references from ISO 8601:2004 to ISO 8601-1:2019",
    "EDIT6721": "[basic.scope.pdecl] Add missing \\grammarterm markup",
    "EDIT6722": "[syntax] Change \"italic\" to \"italic, sans-serif\"",
    "EDIT6723": "[introduction] A minimal \"Introduction\" clause",
    "EDIT6724": "[intro.abstract] Actually use the phrase 'unspecified/undefined behavior'",
    "EDIT6725": "[func.wrap.ref.class] Redundant description of exposition-only data members",
    "EDIT6726": "[intro.defs] Remove mention of symbols from ISO 80000-2",
    "EDIT6727": "[basic.life] Fix indentation in example",
    "EDIT6728": "[sf.cmath] contains superfluous \"Effects:\"-clauses",
    "EDIT6729": "C++",
    "EDIT6730": "[charconv.from.chars] Ambiguous specification of floating-point rounding",
    "EDIT6731": "[16.4.6.10] missing dereference",
    "EDIT6732": "[range.access.general] Use consistent \"In addition to being available\" form",
    "EDIT6733": "[vector.cons.10] complexity in term of copy constructor calls but T does not need to have constructors",
    "EDIT6734": "[algorithm.syn] refactors _`indirectly-binary-left-foldable`_",
    "EDIT6735": "[algorithms] reorders the fold family",
    "EDIT6736": "[class.friend] Fix a mistakenly monospaced \"`friend` declaration\"",
    "EDIT6737": "[std] Rephrase notes containing 'must'",
    "EDIT6738": "[version.syn] New feature test macro __cpp_lib_freestanding_numeric",
    "EDIT6739": "[basic.def.odr] \"Lambda scope\" should be included as a possible \"intervening scope\" in definition of \"odr-usable\"",
    "EDIT6740": "[linalg.syn] Add header index entry",
    "EDIT6741": "[basic.def] Replace \\normalfont \\itshape with \\textnormal and \\textit",
    "EDIT6742": "Grammar railroad diagram",
    "EDIT6743": "Abolish the term \"converting constructor\"",
    "EDIT6744": "Abolish the term \"converting constructor\"",
    "EDIT6745": "[linalg] Add indexing",
    "EDIT6746": "[func.wrap.func.cons] [any.assign] Harmonize operator= wording",
    "EDIT6747": "Replace \"smaller\" with \"lower\" and \"larger\" with \"greater\"?",
    "EDIT6748": "Replace some improper occurences of `this`",
    "EDIT6749": "[expr] Missing definition of \"operand\" (other than \"unevaluated operand\")",
    "EDIT6750": "[basic.pre] 'variable' is not an entity",
    "EDIT6751": "[basics.pre] `opaque-enum-declaration` is not a declaration",
    "EDIT6752": "[alg.min.max] Replace small/large terminology with less/greater",
    "EDIT6753": "[basic.pre] unintended re-definition of `declaration`",
    "EDIT6754": "[linalg.syn] Add header index entry.",
    "EDIT6755": "[dcl.init.general] p20 contradicts the wording of parenthesized aggregate-initialization",
    "EDIT6756": "[basic.scope.pdecl], [basic.types.general] Remove unnecessary whitespace",
    "EDIT6757": "[range.istream.view] Remove constexpr-ness?",
    "EDIT6758": "[std] Remove problematic phrases from notes",
    "EDIT6759": "[basic.scope.param] Add missing grammarterm for requires-expression",
    "EDIT6760": "[stringbuf.cons] Rename const Allocator &a to const Allocator& a",
    "EDIT6761": "[expr.new] \"is required to provide\" could be just \"provides\"",
    "EDIT6762": "[containers] contains dangling references to requirement tables",
    "EDIT6763": "cerrno, system_error and charconv",
    "EDIT6764": "[strings] Consistently use shorter forms of return types",
    "EDIT6765": "[depr.c.macros] Missing description of `__alignof_is_defined` LWG4036",
    "EDIT6766": "[basic.def] Replace . with ,",
    "EDIT6767": "[locale.categories] Promote remaining static const data members to `constexpr`",
    "EDIT6768": "[text.encoding.overview] Use same parameter names as detailed description",
    "EDIT6769": "[text.encoding.aliases] Use code font for class name in heading",
    "EDIT6770": "[std] Reword \"cannot\" in notes to not sound like negative permission",
    "EDIT6771": "[structure.specifications] clarify description of Results element",
    "EDIT6772": "[exception] Paragraph two is no longer universally true",
    "EDIT6773": "[alg.ends.with]: drop_view should be views::drop",
    "EDIT6774": "[zombie.names] Fix punctuation",
    "EDIT6775": "[thread.sema] `std::binary_semaphore` is not indexed",
    "EDIT6776": "[alg.min.max] Reword min/max/minmax in modern style",
    "EDIT6777": "[tuple.helper] paragraph one not universally true",
    "EDIT6778": "[class.mem.general,class.mfct.non.static] End note with .",
    "EDIT6779": "P2582R1 CTAD from inherited constructors is missing a feature-test macro bump",
    "EDIT6780": "P0493R4 atomic_fetch_max / atomic_fetch_min rejected?",
    "EDIT6781": "[semaphore.syn] add binary_semaphore to index",
    "EDIT6782": "[array.zero] p3 looks normatively redundant",
    "EDIT6783": "[numeric.special] Fix indentation",
    "EDIT6784": "[locale.ctype.members] Add missing parameter name",
    "EDIT6785": "[tuple.cnstr] Do not use code font for cardinal number 1",
    "EDIT6786": "Fix CI",
    "EDIT6787": "[container.alloc.reqmts] End note with .",
    "EDIT6788": "[range.drop.overview] Remove redundant \\iref for subrange",
    "EDIT6789": "[headers] has incorrect name for subclause xref",
    "EDIT6790": "\"truncation towards zero\" could be \"truncation\"",
    "EDIT6791": "ISO C structs with different tags are incompatible",
    "EDIT6792": "Clarify that \"constexpr iterator\" is a requirement to be met",
    "EDIT6793": "[iterator.requirements.general] Clarify that \"constexpr iterator\" is \u2026",
    "EDIT6794": "[rand.dist.samp.plinear] Fix copy & paste error in Mandates",
    "EDIT6795": "[string.view.synop,string.syn] Fix indentation",
    "EDIT6796": "[temp.res.general] Grammatical parallelism: remove a stray \"a\"",
    "EDIT6797": "[dcl.type.elab] Don't start a paragraph with a note",
    "EDIT6798": "12.5  [over.built] 11, 12",
    "EDIT6799": "[expr.dynamic.cast] The phrase \"runtime check\" is not quite correct",
    "EDIT6800": "[iterator.concept.winc] Fix typo",
    "EDIT6801": "[format.parse.ctx] Paragraph 14 is hard to read",
    "EDIT6802": "[mem.res.private, mem.res.monotonic.buffer.mem, re.traits] Use `*this` instead of improper `this` in the library wording",
    "EDIT6803": "[expr.call] Say \"implicit object parameter\" instead of \"`this` parameter\"",
    "EDIT6804": "[temp.arg.template] Clean up wording for template template argument matching",
    "EDIT6805": "C++ Increment and Decrement Operators",
    "EDIT6806": "[basic.def] Define (i++)+(++i)",
    "EDIT6807": "[array.zero] Fix triple comparison and improve wording consistency",
    "EDIT6808": "[temp.func.order] Specify to only add extra first argument if needed",
    "EDIT6809": "[temp.deduct.general] Some cases in the example in p9 don't seem correct after CWG2672",
    "EDIT6810": "[thread.once.callonce] INVOKE is evaluated, not called",
    "EDIT6811": "[rand.adapt.ibits,rand.dist.pois.poisson] Add namespace std in class \u2026",
    "EDIT6812": "[temp.constr.order] Move index entry to correct paragraph",
    "EDIT6813": "[format.syn] Remove obsolete index entry",
    "EDIT6814": "[temp.pre] Add comma after introductory clause",
    "EDIT6815": "[format.parse.ctx] improve readability of paragraphs 12 and 14",
    "EDIT6816": "[format.parse.ctx] add comma before 'which'",
    "EDIT6817": "[format.parse.ctx] add comma before consisting",
    "EDIT6818": "[string.view.ops] convert Effects to Returns paragraphs",
    "EDIT6819": "[expr.unary.op] remove redundant value category wording",
    "EDIT6820": "[bit.pow.two] Remove redundant Remarks specification",
    "EDIT6821": "[format.syn] Bad index entry for format_args_t",
    "EDIT6822": "[iterator.operations] `std::distance` may be missing a precondition",
    "EDIT6823": "[container.reqmts] Fix stray semicolon in description of expression",
    "EDIT6824": "[container.requirements] Fix malformed Result specifications",
    "EDIT6825": "[basic.fundamental] Should we remove Note 1 on `int` having the \"natural width\"?",
    "EDIT6826": "[container.reqmts] Avoid dependency of `size`/`max_size` on `distance(begin(), end())`",
    "EDIT6827": "P0732R2 Add `__cpp_nontype_template_parameter_class`",
    "EDIT6828": "[stmt.while], [stmt.do] Add commas after introductory phrases",
    "EDIT6829": "[stmt.jump] Add reference to [stmt.dcl]",
    "EDIT6830": "[expr.dynamic.cast] Add comma after conditional clause",
    "EDIT6831": "Update link to secure connection",
    "EDIT6832": "[headers] Strike 'C standard library headers' and turn paragraph into note",
    "EDIT6833": "[charconv.from.chars] Clarify effect of from_chars",
    "EDIT6834": "[time.parse], [diff.cpp17.temp] Hyphenate argument-dependent lookup",
    "EDIT6835": "[expr.mul] Reword 'truncation towards zero' in footnote",
    "EDIT6836": "[dcl.fct.default] Correct note on 'this' in default arguments",
    "EDIT6837": "[gram.key] Replace 'context-dependent keywords' with 'names'",
    "EDIT6838": "[format.arg] Remove exposition-only friend class",
    "EDIT6839": "[rand.req.seedeq], [rand.req.dist], [char.traits.require] Eliminate \"compile-time\" complexity",
    "EDIT6840": "[std.iterator.tags] Reword iterator tag description",
    "EDIT6841": "[type.traits] Strike 'at compile time'",
    "EDIT6842": "[meta.trans.other] Normative paragraph starting with \"Note A:\"",
    "EDIT6843": "[lex] `\\indextext{separate translation|see{compilation, separate}}` ?",
    "EDIT6844": "[lex.pptoken] import-keyword, module-keyword, export-keyword are not indexed",
    "EDIT6845": "[handler.functions] Add reference to [intro.races]",
    "EDIT6846": "[charconv.to.chars] Itemize mapping of `chars_format` onto conversion specifiers",
    "EDIT6847": "[charconv.syn] Clarify what types match integer-type",
    "EDIT6848": "[charconv.from.chars] Clarify the role of a `0x` prefix in `from_chars`",
    "EDIT6849": "[pairs.pair] Replace `std::forward` with `std::move` where equivalent",
    "EDIT6850": "[handler.functions], [mem.res.global] Replace 'shall synchronize with' with 'synchronizes with'",
    "EDIT6851": "[class.member.lookup,basic.lookup.argdep,basic.life] Remove extra whi\u2026",
    "EDIT6852": "[atomics.order] Make out-of-thin-air prevention Recommended practice",
    "EDIT6853": "[expr.const] Clarify example on when evaluation takes place",
    "EDIT6854": "[lex.phases] Clarify the state of forming logical-lines when partially composing a comment",
    "EDIT6855": "[expr.prim.this] Clarify that `this` can appear within a lambda with an explicit object parameter",
    "EDIT6856": "coroutine_traits is not in the index",
    "EDIT6857": "[utilities.swap] Replace unusual \"stored in two locations\" wording",
    "EDIT6858": "Containers refer to exploded tables as though they still exist",
    "EDIT6859": "[coroutine.traits.primary] Index `coroutine_traits`",
    "EDIT6860": "[stdfloat.syn] Which part is implementation-defined?",
    "EDIT6861": "[diff.cpp03.expr] Should we list the behavioral change of `typeid` in C++11 due to N3055?",
    "EDIT6862": "[time.hash] Fix spelling of 'Cpp17Hash'",
    "EDIT6863": "[2024-03 CWG Motion 1] Core Language Working Group \"ready\" Issues",
    "EDIT6864": "[2024-03 CWG Motion 2] Disallow Binding a Returned Glvalue to a Temporary",
    "EDIT6865": "[2024-03 CWG Motion 4] Attributes for Structured Bindings",
    "EDIT6866": "[2024-03 CWG Motion 3] Clarifying rules for brace elision in aggregate initialization",
    "EDIT6867": "[2024-03 CWG Motion 5] Module Declarations Shouldn\u2019t be Macros",
    "EDIT6868": " [2024-03 CWG Motion 6] Trivial infinite loops are not Undefined Behavior",
    "EDIT6869": "[2024-03 CWG Motion 7] Erroneous behaviour for uninitialized reads",
    "EDIT6870": "[2024-03 CWG Motion 9] = delete(\"should have a reason\");",
    "EDIT6871": "[2024-03 CWG Motion 10] Variadic friends",
    "EDIT6872": "[2024-03 LWG Motion 1] C++ Standard Library Ready Issues",
    "EDIT6873": "[2024-03 LWG Motion 2] Undeprecate polymorphic_allocator::destroy for C++26",
    "EDIT6874": "[2024-03 LWG Motion 3] Remove Deprecated strstreams From C++26",
    "EDIT6875": "[2024-03 LWG Motion 4] Remove Deprecated shared_ptr Atomic Access APIs from C++26",
    "EDIT6876": "[2024-03 LWG Motion 5] Remove wstring_convert From C++26",
    "EDIT6877": "[2024-03 LWG Motion 6] Permit an efficient implementation of std::print",
    "EDIT6878": "[2024-03 LWG Motion 7] Printing Blank Lines with println",
    "EDIT6879": "[2024-03 LWG Motion 8] Formatting of std::filesystem::path",
    "EDIT6880": "[2024-03 LWG Motion 9] Atomic minimum/maximu",
    "EDIT6881": "[2024-03 LWG Motion 10] views::concat",
    "EDIT6882": "[2024-03 LWG Motion 11] Concatenation of strings and string views",
    "EDIT6883": "[2024-03 LWG Motion 12] Enabling list-initialization for algorithms",
    "EDIT6884": "[2024-03 LWG Motion 13] is_debugger_present is_replaceable",
    "EDIT6885": "[2024-03 LWG Motion 14] Vector API for random number generation",
    "EDIT6886": "[2024-03 LWG Motion 16] Comparisons for reference_wrapper",
    "EDIT6887": "[2024-03 LWG Motion 17] Padded mdspan layouts",
    "EDIT6888": " [2024-03 LWG Motion 18] Better mdspan's CTAD",
    "EDIT6889": "CWG motion 2: P2748R5 Disallow Binding a Returned Glvalue to a Temporary",
    "EDIT6890": "[macros] Fix LaTeX build on MacOS with newer memoir class",
    "EDIT6891": "P0609R3 Attributes for Structured Bindings",
    "EDIT6892": "P3106R1 Clarifying rules for brace elision in aggregate initialization",
    "EDIT6893": "P3034R1 Module Declarations Shouldn\u2019t be Macros",
    "EDIT6894": "P2809R3 Trivial infinite loops are not Undefined Behavior",
    "EDIT6895": "P2573R2 = delete(\"should have a reason\");",
    "EDIT6896": "P2893R3 Variadic friends",
    "EDIT6897": "P2795R5 Erroneous behaviour for uninitialized reads",
    "EDIT6898": "Refactor list of zombie names as a table",
    "EDIT6899": "P2867R2 Remove deprecated strstreams from C++26",
    "EDIT6900": "P2875R4 Undeprecate polymorphic_allocator::destroy",
    "EDIT6901": "Annex C wording should not claim old code will \"fail to compile\"",
    "EDIT6902": "P2869R4 Remove deprecated atomic free function API for shared_ptr",
    "EDIT6903": "P2872R3 Remove wstring_convert from C++26",
    "EDIT6904": "P1068R11 Vector API for random number generation",
    "EDIT6905": "[variant.relops] Fix \\exposid in \\codeblock",
    "EDIT6906": "[Motions 2024 03 cwg 1] P3196R0 (Core Language Working Group \"ready\" Issues)",
    "EDIT6907": "[LWG motion 18] P3029R1 Better mdspan's CTAD",
    "EDIT6908": "[LWG motion 6] P3107R5 Permit an efficient implementation of std::print",
    "EDIT6909": "[LWG motion 7] P3142R0 Printing Blank Lines with println",
    "EDIT6910": "[LWG motion 8] P2845R8 Formatting of std::filesystem::path",
    "EDIT6911": "P2248R8 Enabling list-initialization for algorithms",
    "EDIT6912": "P2810R4 is_debugger_present is_replaceable",
    "EDIT6913": "P2944R3 Comparisons for reference_wrapper",
    "EDIT6914": "P2591R5 Concatenation of strings and string views",
    "EDIT6915": "[LWG motion 1] P3180R0 C++ Standard Library Issues to be moved in Tokyo, Mar. 2024",
    "EDIT6916": "Consistently uses \u201ca program may specialize\u201d",
    "EDIT6917": "[LWG motion 10] P2542R8 views::concat",
    "EDIT6918": "P0493R5 Atomic minimum/maximum",
    "EDIT6919": "P2642R6 Padded mdspan layouts",
    "EDIT6920": "[check] Fix overly aggressive 'constexpr static' check",
    "EDIT6921": "[LWG motions 2--5] Consolidates P2867R2, P2869R4, P2872R3, and P2875R4 ",
    "EDIT6922": "[time.zone.db.access] Definition of std::chrono::current_zone() unclear",
    "EDIT6923": "Correctly render packages installs",
    "EDIT6924": "[expos.only.entity] Add missing \\expos for two exposition-only names",
    "EDIT6925": "[zombie.names] Turn lists of zombie names into tables",
    "EDIT6926": "[basic.life] Reflow text defining transparently replaceable",
    "EDIT6927": "[tab:headers.cpp.fs] Move debugging library to correct position",
    "EDIT6928": "[range.concat.iterator] Add missing \\tcode block",
    "EDIT6929": "[range.concat.view] Formatting code to match the current style",
    "EDIT6930": "[range.concat.view] Use \\exposid for `is-const`",
    "EDIT6931": "[range.concat.overview] Remove unnecessary `std::` prefix from example",
    "EDIT6932": "[range.utility.conv.general] Fix typo",
    "EDIT6933": "[range.concat.view] Add missing \\exposid to `make-unsigned-like-t`",
    "EDIT6934": "[range.concat.iterator] Remove @ in \\exposid",
    "EDIT6935": "[range.concat.iterator] Formatting constraints of `operator==`",
    "EDIT6936": "LWG3031 Fix missing code-formatting of const",
    "EDIT6937": "[range.concat.iterator] Fix indentation",
    "EDIT6938": "Revert \"LWG3031 Fix missing code-formatting of const\"",
    "EDIT6939": "[range.access] Clarify notes on SFINAE for CPOs",
    "EDIT6940": "[index] Add missing entries for Cpp17 _oldconcepts_",
    "EDIT6941": "[utility.arg.requirements] Break down requirement tables",
    "EDIT6942": "[range.concat.iterator] Remove redundant \\expos",
    "EDIT6943": "[range.concat.iterator] Add missing \\tcode for `difference_type`",
    "EDIT6944": "[mdspan.layout.leftpad.obs] Remove extra \\item",
    "EDIT6945": "[intro.execution] Add comma after conditional clause",
    "EDIT6946": "Clarify functions, member functions, and constructors",
    "EDIT6947": "[mdspan.layout.rightpad.obs] Line break between \\expects and \\returns",
    "EDIT6948": "[intro.progress] \"Trivially empty iteration statement\" or \"Trivial infinite loop\"?",
    "EDIT6949": "P2248R8 did not modify the non-range replace_copy overloads",
    "EDIT6950": "[alg.replace] Fix misapplication of P2248R8 to `std::replace_copy`",
    "EDIT6951": "[range.concat.view] Add missing \\exposid for `tuple-transform`",
    "EDIT6952": "[cmath.syn] Remove extra whitespace",
    "EDIT6953": "[range.concat.iterator] Add missing \\libconcept for `swappable_with` and `indirectly_swappable`",
    "EDIT6954": "James Bond in index",
    "EDIT6955": "[alg.rand.generate] Use \\libconcept for `sized_range`",
    "EDIT6956": "[alg.rand.generate] Remove redundant `}`",
    "EDIT6957": "[algorithm.syn, alg.fill] Fix typo in constraints",
    "EDIT6958": "[mdspan.layout.leftpad.overview] Add missing \\tcode for `0zu`",
    "EDIT6959": "[print.syn] Correctly order println overloads",
    "EDIT6960": "[range.concat.iterator] Remove the unnecessary period",
    "EDIT6961": "[mdspan.layout] Fix `explicit(see below)` format",
    "EDIT6962": "[linalg] formatting `for` loop in example",
    "EDIT6963": "[alg.fold] Spelling the actual`ranges::fold_meow`'s return type in function signature?",
    "EDIT6964": "[memory.syn][specialized.algorithms] Prefer trailing returns on complex signatures",
    "EDIT6965": "[memory.syn] Move specification macros to appropriate subclause",
    "EDIT6966": "[range.reverse.overview] Replace 'equivalent to' with 'then'",
    "EDIT6967": "No index entry for customization point object",
    "EDIT6968": "[range.common.overview] Removing redundant requirement of `views\u200b::\u200ball(E)` to be well-formed",
    "EDIT6969": "[class.derived.general] Restore accidental reversal of P2662R3 change",
    "EDIT6970": "[format.context] Fix incorrect example",
    "EDIT6971": "[print.syn] Show `locking` functions in the synopsis of `<print>`",
    "EDIT6972": "[meta.const.eval] Fix `is_within_lifetime` example",
    "EDIT6973": "[over.oper.general] Clarify operator functions being inherited from base classes",
    "EDIT6974": "[over.oper.general] Remove paragraph 8 and make [over.xxx] more self-contained",
    "EDIT6975": "[ISO/CS C++2023] Remove hanging paragraphs",
    "EDIT6976": "[ISO/CS C++2023] Remove the word \"subclause\"",
    "EDIT6977": "[std] Avoid hanging paragraphs by introducing \"General\" subclauses",
    "EDIT6978": "[ISO/CS C++2023] Re-paginate to avoid lone \"Example\" or \"Note\" introducers",
    "EDIT6979": "[ISO/CS C++2023] Use square brackets around round parentheses",
    "EDIT6980": "[ISO/CS C++2023] Replace forbidden words in notes and examples",
    "EDIT6981": "[ISO/CS C++2023] Bad use of italics and bold",
    "EDIT6982": "[std] Remove mid-sentence 'subclause' introducer",
    "EDIT6983": "[ISO/CS C++2023] Fix punctuation details",
    "EDIT6984": "[ISO/CS C++2023] Specification unclarity around \"ISO weeks\"",
    "EDIT6985": "Fix punctuation details",
    "EDIT6986": "[time.format,time.parse] Fix references to ISO week calendar",
    "EDIT6987": "[ISO/CS C++2023] Make table headings bold",
    "EDIT6988": "Fix table formatting",
    "EDIT6989": "[macros] Prefer page break above 'note' or 'example' introducers",
    "EDIT6990": "[ISO/CS C++2023] Format examples in Annex C with proper \"example\" markers",
    "EDIT6991": "[util.smartptr.weak.general] Clarify when a `weak_ptr` is empty",
    "EDIT6992": "[diff] Mark examples as such",
    "EDIT6993": "[ISO/CS C++2023] Adjust presentation of bibliography",
    "EDIT6994": "[numeric.limits.members,bibliography] Remove LIA-1 abbreviation for ISO 10967",
    "EDIT6995": "[macros] Remove italics and boldface",
    "EDIT6996": "[styles] Redesign Annex titles per Rice Model Standard",
    "EDIT6997": "[meta.unary.prop] [class.default.ctor] [class.dtor] Indexing and xrefs for the word \"trivial\"",
    "EDIT6998": "[rand.req] Replace 'that Table' with a precise reference",
    "EDIT6999": "[ISO/CS C++2023] Colons before bulleted lists",
    "EDIT7000": "[std] Fix colons in front of bulleted lists",
    "EDIT7001": "[ISO/CS C++2023] Change 'through' to 'to'",
    "EDIT7002": "[std] Replace 'through' with 'to' for clause ranges",
    "EDIT7003": "[ISO/CS C++2023] Move Unicode trademark footnote",
    "EDIT7004": "[intro.memory] Move footnote about Unicode trademark to [lex.phases]",
    "EDIT7005": "[input.output] Add cross-references to header synopses",
    "EDIT7006": "[ISO/CS C++2023] Move titles of old C++ standards to the bibliography",
    "EDIT7007": "[diff,bibliography] Move details of old C++ standards to the bibliography",
    "EDIT7008": "[ISO/CS C++2023] Do not use \"C++ 20xx\" or \"ISO C++ 20xx\"",
    "EDIT7009": "[unique.ptr.create] `std::make_unique<int&>` may not be rejected properly",
    "EDIT7010": "[macros,diff] Replace '(ISO) C++ 20xx' with the full document identifier",
    "EDIT7011": "[ISO/CS  C++2023] Avoid \"ISO C\"",
    "EDIT7012": "[basic.fundamental,cstdarg.syn] Use full reference for ISO C sections",
    "EDIT7013": "[std] Remove ISO from any mention of 'C'",
    "EDIT7014": "[cpp.predefined,namespace.future,version.syn] Replace 'C++' with 'this document'",
    "EDIT7015": "[unique.ptr.general] Intro wording is misleadingly restrictive",
    "EDIT7016": "[format.string.std] Add (R) symbol after Windows",
    "EDIT7017": "[namespace.future] Replace 'this International Standard' with 'this document'",
    "EDIT7018": "[macros,diff] Replace '(ISO) C++ 20xx' with the full document identifier",
    "EDIT7019": "[class.copy.ctor] Remove reference to non-existing example",
    "EDIT7020": "[class.conv.general] Remove vague reference to unhelpful examples",
    "EDIT7021": "[lex.ccon,expr.prim.lambda.capture] Excise 'ISO' prefix",
    "EDIT7022": "[execpol.general] Use 'this document', not 'this standard'",
    "EDIT7023": "[std] Rename 'In general' headings to 'General' for consistency",
    "EDIT7024": "[macros] Avoid small caps for cross-references to C.",
    "EDIT7025": "[fs.class.path.general] Defuse cross-reference to POSIX",
    "EDIT7026": "[macros,numerics] Add and use numbered 'formula' environment",
    "EDIT7027": "[futures.state] Turn note into example",
    "EDIT7028": "[diff] Replace 'this revision of C++' with 'this document'",
    "EDIT7029": "[std] Replace 'this standard' with 'this document'",
    "EDIT7030": "[uaxid.general] Replace 'C++' with 'this document'",
    "EDIT7031": "[uaxid] Replace 'this requirement' with a specific reference",
    "EDIT7032": "[implimits] Rephrase introductory sentence for list of quantities",
    "EDIT7033": "[lib] Excise Note A, Note B, etc. designations",
    "EDIT7034": "[intro.compliance.general] Refer to Annex B normatively",
    "EDIT7035": "[util.smartptr.shared.cast] \"Will eventually\" is so sure",
    "EDIT7036": "Harmonize the phrasing of \"X models foo_of<Y>\"",
    "EDIT7037": "[util.smartptr.shared.cast] Properly describe a bad outcome in notes",
    "EDIT7038": "[variant.visit] `as-variant` are not a `constexpr` unction templates",
    "EDIT7039": "Fix forbidden words in notes and examples",
    "EDIT7040": "[intro.scope] \"free store\" is undefined and used only once",
    "EDIT7041": "[intro.scope], [expr.new], [class.free] Remove remaining \"free store\"",
    "EDIT7042": "[defns.undefined] Incorrect/incomplete note referencing [expr.const]",
    "EDIT7043": "[defns.erroneous] Erroneous behavior is not indexed in `/generalindex`",
    "EDIT7044": "[defns.erroneous], [basic.indet] Index 'erroneous behavior' and 'erroneous value'",
    "EDIT7045": "[conv.lval], [basic.indet] Circular cross-referencing for \"erroneous value\"",
    "EDIT7046": "[basic.indet] Convert reference to [conv.lval] into note",
    "EDIT7047": "[conv.lval] Add example of indeterminate values that are not valid for the type CWG2899",
    "EDIT7048": "[expr.static.cast], [basic.type.qualifier] \"More cv-qualified\" vs \"greater cv-qualification\"",
    "EDIT7049": "[conv.lval] Add example of erroneous 'trap representation' being read",
    "EDIT7050": "[expr.static.cast], [over.call.object] Replace 'greater cv-qualification' with 'more cv-qualified'",
    "EDIT7051": "[conv.lval] Make note and generalize comment on UB CWG2899",
    "EDIT7052": "[dcl.array] Subscript for arrays no longer performs array-to-pointer conversion",
    "EDIT7053": "[dcl.array] No longer explain array subscript in terms of array-to-pointer conversion",
    "EDIT7054": "[array.cons] Fix various wording issues",
    "EDIT7055": "[expr.new] Extend example for new-expressions with zero size arrays",
    "EDIT7056": "Add hypertarget before table captions",
    "EDIT7057": "Enable hyperlinks to tables",
    "EDIT7058": "[res.on.exception.handling] Add cross-reference to [except.spec]",
    "EDIT7059": "[flat.set.defn] Fix indentation",
    "EDIT7060": "[stmt.pre] Cross-reference [intro.execution]",
    "EDIT7061": "[stmt.if] Add missing comma after conditional clause",
    "EDIT7062": "[class.virtual] Add commas",
    "EDIT7063": "[expr.type], [expr.call] Draw connection between type adjustment paragraphs",
    "EDIT7064": "[expr.static.cast] \"Cast\" vs. \"converted\" vs. \"explicitly converted\"",
    "EDIT7065": "`non-type template parameter` should be `non-type \\grammarterm{template-parameter}` more consistently",
    "EWG1": "N3638, N3582, N3386 Return type deduction for normal functions",
    "EWG2": "N3387 Overload resolution tiebreakers for integer types",
    "EWG3": "N3760, N3394 [[deprecated]] attribute",
    "EWG4": "N3396 Dynamic memory allocation for over-aligned data",
    "EWG5": "N3400 A proposal for eliminating the underscore madness that library writers have to suffer",
    "EWG6": "N3667, N3401 Generating move operations (elaborating on Core 1402)",
    "EWG7": "N3642, N3468, N3402 User-defined Literals for Standard Library Types, N3472 Binary Literals in the C++ Core Language",
    "EWG8": "N3492, N3403 Use Cases for Compile-Time Reflection",
    "EWG9": "N4469 Template Argument Type Deduction, N3601 Implicit template parameters, N3405 Template Tidbits",
    "EWG10": "N3407 Proposal to Add Decimal Floating Point Support to C++",
    "EWG11": "N3409 Strict Fork-Join Parallelism",
    "EWG12": "N3410 Rich Pointers with Dynamic and Static Introspection",
    "EWG13": "N3639, N3497, N3467, N3412 Runtime-sized arrays with automatic storage duration",
    "EWG14": "N3413 Allowing arbitrary literal types for non-type template parameters",
    "EWG15": "N3416 Packaging Parameter Packs",
    "EWG16": "N3649, N3560, N3559, N3418 Proposal for Generic (Polymorphic) Lambda Expressions",
    "EWG17": "N3419 Vector loops and Parallel Loops",
    "EWG18": "N3424 Lambda Correctness and Usability Issues",
    "EWG19": "N3429 A C++ Library Solution To Parallelism",
    "EWG20": "N3778, N3663, N3536, N3432 C++ Sized Deallocation",
    "EWG21": "N3664, N3537, N3433 Clarifying Memory Allocation",
    "EWG22": "N4030, 3745, N3694 Feature-testing recommendations for C++, N3435 Standardized feature-test macros",
    "EWG23": "N3437 Type Name Strings For C++",
    "EWG24": "N3441 Call Stack Utilities and std::exception Extension Proposal",
    "EWG25": "N3652, N3597, N3598, N3444 Relaxing syntactic constraints on constexpr function definitions",
    "EWG26": "N3538, N3445 Pass by Const Reference or Value",
    "EWG27": "N3781 Single-Quotation-Mark as a Digit Separator, N3661, N3499 Digit Separators, N3448 Painless Digit Separation",
    "EWG28": "N3449 Open and Efficient Type Switch for C++",
    "EWG29": "N4461 Static if resurrected, N3329 Proposal: static if declaration",
    "EWG30": "N4235 Selecting from Parameter Packs, [tiny] Efficient/Flexible Access to Argument Packs",
    "EWG31": "[tiny] constexpr functions must work at runtime",
    "EWG32": "[tiny] Templated constructor accidentally preferred over copy constructor",
    "EWG33": "[tiny] contextual bool conversion from scoped enum",
    "EWG34": "[tiny] Defining hash functions for composite user-defined types is annoying",
    "EWG35": "[tiny] Some concise way to generate a unique, unused variable name",
    "EWG36": "[tiny] no way to say \"prefer this implicit conversion over that\"",
    "EWG37": "[tiny] Logical xor operator",
    "EWG38": "[tiny] Core issue 1542",
    "EWG39": "[tiny] local class and friendship",
    "EWG40": "[tiny] Relax the allocator requirements on vector so that the small object optimization is allowed",
    "EWG41": "[tiny] In-class explicit specializations forbidden but not partial specializations",
    "EWG42": "[tiny] basic_string(const charT*, size_type, const Allocator&) requires clause too restrictive",
    "EWG43": "[tiny] simultaneous iteration with new-style for syntax",
    "EWG44": "[tiny] variadic bind",
    "EWG45": "[tiny] Type Trait is_range<T>",
    "EWG46": "[tiny] Type Trait is_final<T>",
    "EWG47": "[tiny] Fix the relation operators on standard templated types",
    "EWG48": "N3867, N3730 Specializations and namespaces (was \"Specializing templates in different namespaces\" before the paper)",
    "EWG49": "N3463 Portable Program Source Files",
    "EWG50": "N3466 More Perfect Forwarding",
    "EWG51": "N3490 ADL Control for C++",
    "EWG52": "N3741, N3515 Toward Opaque Typedefs for C++1Y",
    "EWG53": "N3526 Uniform initialization for arrays and class aggregate types",
    "EWG54": "N3746, N3553 Proposing a C++1Y Swap Operator",
    "EWG55": "N3839, Proposing the Rule of Five, v2, N3578 Proposing the Rule of Five",
    "EWG56": "N3583 Exploring constexpr at Runtime",
    "EWG57": "N3587 For Loop Exit Strategies",
    "EWG58": "N3595 Simplifying Argument-Dependent Lookup Rules",
    "EWG59": "N3596 Code Reuse in Class Template Specialization",
    "EWG60": "N4471 Template parameter deduction for constructors (Rev 2), N3602 Template parameter deduction for constructors",
    "EWG61": "N3653, N3605 Member initializers and aggregates",
    "EWG62": "N3648, N3610 Generic lambda-capture initializers, supporting capture-by-move",
    "EWG63": "N4152 uncaught_exceptions, N3614 unwinding_exception",
    "EWG64": "N3651, N3615 Constexpr Variable Templates, N3552 Introducing Object Aliases",
    "EWG65": "N3617 Lifting overload sets into function objects",
    "EWG66": "N3599 Literal operator templates for strings",
    "EWG67": "[tiny] Unspecialized std::tuple_size should be defined",
    "EWG68": "[tiny] C++ DR about global placement array new",
    "EWG69": "[tiny] Returning a void expression from a constructor or destructor",
    "EWG70": "[tiny] Const in expressions",
    "EWG71": "N3627 Relaxed switch statement",
    "EWG72": "N4150 Alias-Set Attributes: Toward restrict-like aliasing semantics for C++, N3988 Towards restrict-like aliasing semantics for C++ N3635 Towards restrict-like semantics for C++",
    "EWG73": "N3681 Auto and braced-init lists",
    "EWG74": "N3723 Extend operator-> to support rvalues",
    "EWG75": "N3744 Proposing [[pure]]",
    "EWG76": "N4035, N3748 Implicit Evaluation of \"auto\" Variables and Arguments",
    "EWG77": "N3772 Changing the type of address-of-member expression",
    "EWG78": "N3820 Working Draft, Technical Specification \u2014 Array Extensions, N3810 Alternatives for Array Extensions",
    "EWG79": "[tiny] Core issues with extension status",
    "EWG80": "N3846 Extending static_assert",
    "EWG81": "N3994, N3853 Range-Based For-Loops: The Next Generation",
    "EWG82": "N4180 SG5 Transactional Memory Support for C++ Update, N3919, N3859, N3718 Transactional Memory Support for C++",
    "EWG83": "N3863 Private Extension Methods",
    "EWG84": "N4294 Arrays of run-time bounds as data members, N3875 Run-time bound array data members",
    "EWG85": "N3879 Explicit Flow Control: break label, goto case and explicit switch",
    "EWG86": "N3880 Improving the Verification of C++ Programs",
    "EWG87": "N3897 Auto-type members",
    "EWG88": "[tiny] Uniform handling of operator[] and operator().",
    "EWG89": "[tiny] Core issue 203, Type of address-of-member expression",
    "EWG90": "[tiny] Core issue 476, Determining the buffer size for placement new",
    "EWG91": "[tiny] Core issue 622, Relational comparisons of arbitrary pointers",
    "EWG92": "[tiny] Core issue 687, template keyword with unqualified-ids",
    "EWG93": "[tiny] Core issue 728, Restrictions on local classes",
    "EWG94": "[tiny] Core issue 794, Base-derived conversion in member type of pointer-to-member conversion",
    "EWG95": "[tiny] Core issue 822, Additional contexts for template aliases",
    "EWG96": "[tiny] Core issue 914, Value-initialization of array types, Core issue 1300, T() for array types, Core issue 1326, Deducing an array bound from an initializer-list",
    "EWG97": "[tiny] Core issue 947, Deducing type template arguments from default function arguments",
    "EWG98": "[tiny] Core issue 1008, Querying the alignment of an object",
    "EWG99": "[tiny] Core issue 1259, Deleting a POD via a pointer to base",
    "EWG100": "[tiny] Core issue 1272, Implicit definition of static data member of const literal type",
    "EWG101": "[tiny] Core issue 1331, const mismatch with defaulted copy constructor",
    "EWG102": "[tiny] Core issue 1393, Pack expansions in using-declarations",
    "EWG103": "[tiny] Core issue 1426, Allowing additional parameter types in defaulted functions",
    "EWG104": "[tiny] Core issue 1433, trailing-return-type and point of declaration",
    "EWG105": "[tiny] Core issue 1451, Objects with no linkage in non-type template arguments",
    "EWG106": "[tiny] Core issue 1463, extern \"C\" alias templates, Core issue 13, extern \"C\" for Parameters of Function Templates",
    "EWG107": "[tiny] Core issue 1519, Conflicting default and variadic constructors",
    "EWG108": "N4404 Extension to aggregate initialization, was [tiny] Core issue 1561, Aggregates with empty base classes",
    "EWG109": "[tiny] Core issue 1564, Template argument deduction from an initializer list",
    "EWG110": "[tiny] Core issue 1577, Unnecessary restrictions on partial specializations",
    "EWG111": "[tiny] Core issue 1582, Template default arguments and deduction failure",
    "EWG112": "[tiny] Core issue 1586, Naming a destructor via decltype",
    "EWG113": "N4196 Attributes for namespaces and enumerators, [tiny] Core issue 1657, Attributes for namespaces and enumerators",
    "EWG114": "N4074 Let return {expr} Be Explicit, Revision 2, N4131 explicit should never be implicit, N4094 Response To: Let return {expr} Be Explicit, N4029 Let return Be Direct and explicit, N3452 (unpublished) Let {x,y,z} => explicit",
    "EWG115": "N3899 Nested Allocation",
    "EWG116": "N4475 Default comparisons (R2), N4476 Thoughts about Comparisons (R2), N4126, N4114, N3950 Defaulted comparison operators, N4175 Default comparisons, N4176 Thoughts about Comparisons, N4239 Defaulted Comparison Using Reflection",
    "EWG117": "N3955 Group Member Specifiers",
    "EWG118": "[tiny] Allow conversion from pointer to array of known bound to pointer to array of unknown bound",
    "EWG119": "N4197 Adding u8 character literals, [tiny] Why no u8 character literals?",
    "EWG120": "[tiny] CWG 900 and 1498",
    "EWG121": "N4086, N3981 Removing trigraphs??!, N4210 IBM comment on preparing for a Trigraph-adverse future in C++17",
    "EWG122": "N3986 Adding Standard support to avoid padding within structures",
    "EWG123": "N3990 Adding Standard Circular Shift operators for computer integers",
    "EWG124": "N4014 Uniform Copy Initialization",
    "EWG125": "N4025 Exploring classes of runtime size",
    "EWG126": "N4230 Nested namespace definition (revision 2), N4116 Nested Namespace Definition (rev 1), N4026 Nested namespace definition",
    "EWG127": "N4028 Defining a Portable C++ ABI",
    "EWG128": "N4043 Dynarray Allocation Context",
    "EWG129": "N4234 0-overhead-principle violations in exception handling - part 2, N4049 0-overhead-principle violations in exception handling",
    "EWG130": "N4050 Dynarray Semi-Editorial Issues",
    "EWG131": "N4051 Allow typename in a template template parameter",
    "EWG132": "Core Issue 1754 Declaration of partial specialization of static data member template",
    "EWG133": "Core Issue 1798, exception-specifications of template arguments",
    "EWG134": "[tiny] Core closed issues with a previous extension status",
    "EWG135": "[tiny] Mutable is part of a lambda-declarator, so when a lambda is mutable, the parentheses aren't optional",
    "EWG136": "N4072 Fixed Size Parameter Packs",
    "EWG137": "N4293 C++ language support for contract programming, N4110 Exploring the design space of contract specifications for C++",
    "EWG138": "N4120 Null Coalescing Conditional Operator",
    "EWG139": "N4121 Compile-Time String: std::string_literal<n>",
    "EWG140": "N4127 Checked-dereference conditions",
    "EWG141": "N4415 Simple Contracts for C++, N4435 Proposing Contract Attributes, N4378 Language Support for Contract Assertions, N4379 FAQ about N4378, Language Support for Contract Assertions, N4253, N4135 Language Support for Runtime Contract Validation",
    "EWG142": "N4424 Inline Variables, N4147 Inline variables, or encapsulated expressions",
    "EWG143": "N4148 Disallowing Inaccessible Operators From Trivially Copyable",
    "EWG144": "N4149 Categorically qualified classes",
    "EWG145": "N4154 Operator assert",
    "EWG146": "N4160 Value constraints",
    "EWG147": "N4164 Forwarding References",
    "EWG148": "N4474 Unified Call Syntax: x.f(y) and f(x,y), N4165 Unified Call Syntax, N4174 Call syntax: x.f(y) vs. f(x,y)",
    "EWG149": "N4166 Movable initializer lists",
    "EWG150": "N4172 Named arguments",
    "EWG151": "N4477 Operator Dot (R2), N4173 Operator Dot",
    "EWG152": "N4186 Supporting Custom Diagnostics and SFINAE",
    "EWG153": "N4188 Proposal for classes with runtime size",
    "EWG154": "N4191 Folding expressions",
    "EWG155": "N4198 Allow constant evaluation for all non-type template arguments",
    "EWG156": "N4221 Generalized lifetime extension",
    "EWG157": "N4225 Towards uniform handling of subobjects",
    "EWG158": "N4228 Refining Expression Evaluation Order for Idiomatic C++",
    "EWG159": "N4248 Library Preconditions are a Language Feature",
    "EWG160": "N4393 Noop Constructors and Destructors, N4158 Destructive Move (Rev 1), N4034 Destructive Move",
    "EWG161": "N3922 New Rules for auto deduction from braced-init-list, N3912 Auto and braced-init-lists, continued, N3681 Auto and braced-init lists",
    "EWG162": "N4357 Introduce the [[noexit]] attribute for main as a hint to eliminate destructor calls for objects with static storage duration, N4226 Apply the [[noreturn]] attribute to main as a hint to eliminate global object destructor calls",
    "EWG163": "N4465 A Module System for C++ (Revision 3), N4466 Wording for Modules, N4214 A Module System for C++ (Revision 2), N4047 A Module System for C++",
    "EWG164": "N4129 Source-Code Information Capture",
    "EWG165": "N4229 Pointer Ordering",
    "EWG166": "N4402 Resumable Functions (revision 4), N4403 Draft Wording for Resumable Functions, N4286 Resumable Functions, N4287 Threads, Fibers and Couroutines (slides deck)",
    "EWG167": "N4309 Return type deduction for explicitly-defaulted and deleted special member functions",
    "EWG168": "N4319 Contracts for C++: What are the Choices",
    "EWG169": "N4320 Make exception specifications be part of the type system",
    "EWG170": "N4340 Remove Deprecated Use of the register Keyword",
    "EWG171": "N4356 Relaxed Array Type Declarator",
    "EWG172": "N4358 Unary Folds and Empty Parameter Packs",
    "EWG173": "N4360 Delayed Evaluation Parameters",
    "EWG174": "N4367 Comparison in C++",
    "EWG175": "[tiny] pointer to void as template non-type parameter",
    "EWG176": "[tiny] Explicit capture-by-value syntax for lambdas",
    "EWG177": "[tiny] LWG 2432",
    "EWG178": "N4401 Defaulted comparison operator semantics should be uniform",
    "EWG179": "N4425 Generalized Dynamic Assumptions",
    "EWG180": "N4429 Core issue 1941 - rewording inherited constructors",
    "EWG181": "N4433 Flexible static_assert messages",
    "EWG182": "N4434 Tweaks to Streamline Concepts Lite Syntax, other Concepts TS issues",
    "EWG183": "N4453 Resumable Expressions",
    "EWG184": "N4460 LWG 2424: Atomics, mutexes and condition variables should not be trivially copyable",
    "EWG185": "N4462 LWG 2089, Towards more perfect forwarding",
    "EWG186": "N4472 constexpr goto",
    "EWG187": "N4473 noexcept(auto), again",
    "EWG188": "LEWG Bug 95 - std::decay_copy(), suggestion to support an \"auto cast\".",
    "EWG189": "Unions with differing access control are not standard layout",
    "FS1": "[PDTS] Make namespaces consistent with Library TS policy",
    "FS2": "[PDTS] Tighten specification when there is no reasonable behavior",
    "FS3": "[PDTS] Filename length needs bullet item",
    "FS4": "[PDTS] Need definition of dot and dot-dot",
    "FS5": "[PDTS] Parent of root directory unspecified",
    "FS6": "[PDTS] Path depth is underspecified",
    "FS7": "[PDTS] Unhelpful comment for struct space_info",
    "FS8": "[PDTS] file_time_type underspecified",
    "FS9": "[PDTS] Unclear why range-based-for functions return different types",
    "FS10": "[PDTS] Apparently inconsistent return types from several functions",
    "FS11": "[PDTS] Lack of relative() operation function",
    "FS12": "[PDTS] uintmax_t too small for large file sizes",
    "FS13": "[PDTS] Missing actual error conditions thrown",
    "FS14": "[PDTS] Incorrect postconditions for path copy/move constructor",
    "FS15": "[PDTS] Missing behavior for characters with no representation",
    "FS16": "[PDTS] Append behavior underspecified if target is empty",
    "FS17": "[PDTS] path member swap() unnecessary",
    "FS18": "[PDTS] is_absolute() return clause confusing",
    "FS19": "[PDTS] Consider using quoted manipulators",
    "FS21": "[PDTS] directory_entry operator== needs clarification",
    "FS22": "[PDTS] directory_iterator underspecified",
    "FS23": "[PDTS] Request for create_regular_file() and/or touch()",
    "FS24": "[PDTS] Incorrect effects clause for path copy",
    "FS25": "[PDTS] Copying equivalent paths effects not specified",
    "FS26": "[PDTS] Equivalence is a volatile property",
    "FS27": "[PDTS] Return value of uintmax_t on error?",
    "FS28": "[PDTS] Possible last_write_time() postcondition?",
    "FS29": "[PDTS] Unclear semantics of read_symlink on error",
    "FS30": "[PDTS] remove() must avoid race",
    "FS31": "[PDTS] POSIX guarantees atomicity for rename()",
    "FS32": "[PDTS] system_complete() example needs clarification",
    "FS33": "[PDTS] unique_path() is a security vulnerability",
    "FS34": "[PDTS] enum class directory_options has no summary",
    "FS35": "[PDTS] directory_options::skip_permission_denied is not used",
    "FS36": "[PDTS] copy_options::copy_symlinks is not used",
    "FS37": "[PDTS] All functions with error_code arguments should be noexcept",
    "FS38": "[PDTS] Make certain functions noexcept and drop error_code version",
    "FS39": "[PDTS] permissions() is missing from synopsis",
    "FS40": "[PDTS] class directory_entry should retain operator const path&() from V2",
    "FS41": "[PDTS] directory_iterator, recursive_directory_iterator, move construct/assign should be noexcept",
    "FS42": "[PDTS] class path should have defaulted constructors/destructor/assignments.",
    "FS43": "[PDTS] path::compare(const string&) should be path::compare(const string_type&)",
    "FS44": "[PDTS] enum classes copy_options and perms should be bitmask types",
    "FS45": "[PDTS] create_directory should refer to perms::all instead of Posix S_IRWXU|S_IRWXG|S_IRWXO",
    "FS46": "[PDTS] Do we really need generic*?",
    "FS47": "[PDTS] last_write_time() uses ill-formed cast",
    "FS48": "[PDTS] path::template<class charT>string() conversion rules",
    "FS49": "[PDTS] path and directory_entry move ctors should not be noexcept",
    "FS50": "[PDTS] path::compare(const string& s) wrong argument type",
    "FS51": "[PDTS] directory_iterator, recursive_directory_iterator, pointer/reference typedefs wrong",
    "FS52": "[PDTS] Better to avoid deriving from std::iterator",
    "FS53": "[PDTS] directory_entry multithreading concerns",
    "FS54": "[PDTS] Concerns with security and testability",
    "FS55": "[PDTS] Clarify Error reporting",
    "FS56": "[PDTS] Feature test macro for TS version",
    "FS57": "[PDTS] Inappropriate use of \"No diagnostic is required\"",
    "FS58": "[PDTS] POSIX utime() is obsolescent",
    "FS59": "[PDTS] Invalid expressions for bitmask types",
    "FS60": "[PDTS] Incorrect Throws specification for absolute()",
    "FS61": "Surprising equivalent() behavior if neither file exists",
    "FS62": "Allocator requirements unspecified",
    "FS63": "Enable efficient retrieval of file size from directory_entry",
    "FS64": "operator / (and other append) semantics not useful if argument has root",
    "FS65": "remove_filename() post condition is incorrect",
    "FS66": "Bitmask operations should use bitmask terms",
    "FS67": "path::root_directory() description is confusing",
    "FS68": "path::operator+= is defined, but not operator+",
    "FS69": "recursive_directory_iterator effects refers to non-existent functions",
    "FS70": "system_complete refers to undefined variable 'base'",
    "FS71": "Errors in Copy",
    "FS72": "Should is_empty use error_code in its specification?",
    "LEWG1": "Test Issue",
    "LEWG2": "TransformationTrait Alias void_t",
    "LEWG3": "Centralized Defensive-Programming Support for Narrow  Contracts",
    "LEWG4": "Fixes for optional objects",
    "LEWG5": "not_fn()",
    "LEWG6": "Scoped Resource - Generic RAII Wrapper for the Standard Library",
    "LEWG7": "Extending make_shared to Support Arrays",
    "LEWG8": "Greatest Common Divisor and Least Common Multiple",
    "LEWG9": "Allocator-aware regular expressions",
    "LEWG10": "Provide a function to compute x mod 2**n",
    "LEWG11": "equal_range() should return a range",
    "LEWG12": "noexcept and the wide/narrow contract theory",
    "LEWG13": "Making tuple concept-friendly",
    "LEWG14": "Multidimensional bounds, index and array_view",
    "LEWG15": "Define some cryptographic operations.",
    "LEWG16": "Improving pair and tuple",
    "LEWG17": "Establish conventions for Technical Specification contents",
    "LEWG18": "Const-propagating smart pointer wrapper",
    "LEWG19": "Polymorphic Deleter for Unique Pointers",
    "LEWG20": "Ostream Buffers",
    "LEWG21": "Make it easier for users to define good hash functions",
    "LEWG22": "Rvalue reference overloads for optional",
    "LEWG23": "Hashing tuple-like types",
    "LEWG24": "Transaction-safe standard library",
    "LEWG25": "Enable noexcept on string and vector default/move constructors/assignments",
    "LEWG26": "Supporting move-only types with emplace in unique-key maps",
    "LEWG27": "Delimited iterators (fixing ostream_iterator)",
    "LEWG28": "Uniform Container Erasure",
    "LEWG29": "std::expected<Error, T>",
    "LEWG30": "Non-member size(), empty(), front(), back(), and data().",
    "LEWG31": "make_array",
    "LEWG32": "Destructive Move",
    "LEWG33": "Safe conversions in unique_ptr<T[]>",
    "LEWG34": "Need type-erased wrappers for move-only callable objects",
    "LEWG35": "Minimal incomplete type support for standard containers",
    "LEWG36": "Develop guidelines for the use of constexpr",
    "LEWG37": "A constexpr bitwise operations library for C++",
    "LEWG38": "Relax the allocator requirements on vector so that the small object optimization is allowed",
    "LEWG39": "basic_string(const charT*, size_type, const Allocator&) requires clause too restrictive",
    "LEWG40": "Simplified partial function application",
    "LEWG41": "Type Trait is_range<T>",
    "LEWG42": "Unspecialized std::tuple_size should be defined",
    "LEWG43": "Extend INVOKE to support types convertible to target class",
    "LEWG44": "A proposal to add invoke() function template",
    "LEWG45": "Should the rvalue-ref-qualified overloads for optional really return a value?",
    "LEWG46": "Fix iterator categories",
    "LEWG47": "Task Regions",
    "LEWG48": "Searching and Manipulation of Parameter Packs",
    "LEWG49": "introduce the term \"contiguous iterator\"",
    "LEWG50": "raw_storage_iterator needs rvalue ref support",
    "LEWG51": "bool_constant",
    "LEWG52": "Ranges for the Standard Library",
    "LEWG53": "Source-Code Information Capture",
    "LEWG54": "Data-Invariant (constant time/side-channel-resistant) Functions",
    "LEWG55": "TriviallyCopyable reference_wrapper",
    "LEWG56": "Remove auto_ptr",
    "LEWG57": "Remove deprecated library features",
    "LEWG58": "Remove random_shuffle()",
    "LEWG59": "Remove old function objects and binders",
    "LEWG60": "Utilities for contiguous iterators",
    "LEWG61": "Alignment helpers",
    "LEWG62": "Size and alignment control for std::bitset",
    "LEWG63": "Fast ASCII Character Manipulation",
    "LEWG64": "Latches and Barriers",
    "LEWG65": "std::rand replacement",
    "LEWG66": "Variant",
    "LEWG67": "array_view extensions: storage ordering, operator(), range access, and data()",
    "LEWG68": "Networking Library",
    "LEWG69": "Static reflection",
    "LEWG70": "Reflection Type Traits For Classes, Unions and Enumerations",
    "LEWG71": "Editorial: Order of functions in section 5.8 and 5.9 are inconsistent.",
    "LEWG72": "bad_optional_access should derive from std::exception, not std::logic_error",
    "LEWG73": "Editorial - some functions in optional have remarks about constexpr; others do not.",
    "LEWG74": "Some tuple and pair constructors need magic SFINAE \"does not participate in overload resolution\" wording",
    "LEWG75": "Optional specifies that a constructor that takes a forwarding reference will move from it",
    "LEWG76": "Consider supporting fancy pointers in propagate_const",
    "LEWG77": "User-defined literals for additional arithmetic types",
    "LEWG78": "'end' arguments to advance(), next(), and prev()",
    "LEWG79": "An absolute-difference function",
    "LEWG80": "P0009 - Multidimensional Array View with Polymorphic Layout",
    "LEWG81": "vector::release to extract vector's internal array",
    "LEWG82": "Add bitset::size_type",
    "LEWG83": "Make advance(it) equivalent to ++it",
    "LEWG84": "An easy conversion to const",
    "LEWG85": "Design future customization points",
    "LEWG86": "Improve or replace iostreams",
    "LEWG87": "Make vector support non-moveable types",
    "LEWG88": "Adding [nothrow-]swappable traits",
    "LEWG89": "Standard Library Support for the C++ Detection Idiom",
    "LEWG90": "Move the Mathematical Special Functions into C++",
    "LEWG91": "An is_callable trait",
    "LEWG92": "Message digests (includes cryptographic hashes)",
    "LEWG93": "Merge Fundamentals v1 into v2",
    "LEWG94": "Splicing Maps and Sets",
    "LEWG95": "std::decay_copy()",
    "LEWG96": "A compile-time string type",
    "LEWG97": "shared_mutex (untimed)",
    "LEWG98": "N4509 constexpr atomic<T>::is_always_lock_free",
    "LEWG99": "Unions with differing access control are not standard layout (but could be)",
    "LEWG100": "Unify the interfaces of optional, any, and variant",
    "LEWG101": "If vector::reserve(n) reallocates, capacity()==n",
    "LEWG102": "clamp()",
    "LEWG103": "shared_ptr::weak_type",
    "LEWG104": "Function wrapper for const- and ref-qualified operator()",
    "LEWG105": "Remove Deprecated iostreams aliases",
    "LEWG106": "Adopt not_fn for C++17 and remove not1 & not2",
    "LEWG107": "Adopt Type Traits Variable Templates for C++17",
    "LEWG108": "Additions to Filesystem supporting Relative Paths",
    "LEWG109": "Logical Operator Type Traits",
    "LEWG110": "Add a multiline option to std::regex for the ECMAScript engine",
    "LEWG111": "A specialization-friendly std::common_type",
    "LEWG112": "Proxy Iterators for the Ranges Extensions",
    "LEWG113": "A 3-Argument Overload for std::hypot",
    "LEWG114": "Add Constexpr Modifiers to reverse_iterator, move_iterator, array and Range Access",
    "LEWG115": "Fix enable_shared_from_this",
    "LEWG116": "Support Civil Time in the standard library",
    "LEWG117": "Fixed-Point Real Numbers",
    "LEWG118": "Flat Associative Containers",
    "LEWG119": "Extending raw_storage_iterator",
    "LEWG120": "New uninitialized_* algorithms and destroy(range)",
    "LEWG121": "Unstable remove algorithms",
    "LEWG122": "A uniform way to undo type erasure",
    "LEWG123": "Function wrappers with allocators and noexcept",
    "LEWG124": "Change is_transparent to a metafunction",
    "LEWG125": "Building overload sets from function objects",
    "LEWG126": "A generic match function",
    "LEWG127": "Interactions Between Coroutines and Networking Library",
    "LEWG128": "Coroutines",
    "LEWG129": "Circular-buffer queues",
    "LEWG130": "High-performance number<->string conversions",
    "LEWG131": "Make std::owner_less more flexible",
    "LEWG132": "emplace* should return the new element",
    "LEWG133": "Remove result_type and friends",
    "LEWG134": "Minor additions to <chrono>",
    "LEWG135": "Explicitly total-, weak-, and partial-ordering customization points",
    "LEWG136": "Boolean conversion for Standard Library types",
    "LEWG137": "Easy lexical conversions",
    "LEWG138": "read/write view of a sequence of characters",
    "LEWG139": "bitset inclusion test methods",
    "LEWG140": "Container operations that handle failure w/o exceptions",
    "LEWG141": "constexpr std::thread::hardware_{constructive,destructive}_interference_size",
    "LEWG142": "Tweaks to the Kona Variant",
    "LEWG143": "memory_resource_ptr: A Limited Smart Pointer for memory_resource Correctness",
    "LEWG144": "Regular expressions with Unicode character types",
    "LEWG145": "Warning about concurrent use of random number engines",
    "LEWG146": "Update the C reference to C11",
    "LEWG147": "span: reference to a single-dimensional contiguous range of objects",
    "LEWG148": "Bitset Iterators, Masks, and Container Operations",
    "LEWG149": "Deprecating Vestigial Library Parts",
    "LEWG150": "Synopses for the C library",
    "LEWG151": "Cleaning up propagation allocator_traits",
    "LEWG152": "Unequal allocators and swap",
    "LEWG153": "Reserve a New Library Namespace for Future Standardization",
    "LEWG154": "A default_order comparator",
    "LEWG155": "Iterator Facade Library",
    "LEWG156": "A generic none_t literal type for Nullable types",
    "LEWG157": "Add the Y Combinator to the Standard Library",
    "LEWG158": "A cloning pointer class",
    "LEWG159": "Add constexpr modifiers to functions in <algorithm> and <cstring>",
    "LEWG160": "Allow Seeding Random Number Engines with std::random_device",
    "LEWG161": "Joining threads on destruction",
    "LEWG162": "A helper for the copy-swap idiom in the presence of non-propagating allocators",
    "LEWG163": "make_from_tuple: apply() for construction",
    "LEWG164": "A vector<> that doesn't store a capacity",
    "LEWG165": "Allocator-aware library wrappers for dynamic allocation",
    "LEWG166": "A Time-Zone Library",
    "LEWG167": "Adopt the File System TS for C++17",
    "LEWG168": "Adopt Library Fundamentals V1 TS Components for C++17",
    "LEWG169": "Weakening the iterator categories of some sorting algorithms",
    "LEWG170": "Safe (bounds-checked) Integer Types",
    "LEWG171": "Bit value, reference, pointer, and iterator",
    "LEWG172": "Rename variant's corrupted_by_exception() to valueless_by_exception()",
    "LEWG173": "Regular void in the standard library",
    "LEWG174": "Text_view: A C++ concepts and range based character encoding and code point enumeration library",
    "LEWG175": "Return the end of the match from searchers",
    "LEWG176": "is_contiguous_layout",
    "LEWG177": "Add 2D Graphics Rendering and Display to C++",
    "LEWG178": "Give 'std::string' a non-const '.data()' member function",
    "LEWG179": "Clump \u2013 A Vector-like Contiguous Sequence Container with Embedded Storage",
    "LEWG180": "Const-preserving overloads for the strtox family of functions",
    "LEWG181": "std::direct_init<T>, a functor to expose T's constructor overload set",
    "LEWG182": "The Parallelism TS Should be Standardized",
    "LEWG183": "Dynamic memory allocation for over-aligned data",
    "LEWG184": "Adopt gcd and lcm from Library Fundamentals V2 Components for C++17",
    "LEWG185": "Default comparisons",
    "LEWG186": "missing rationale for numeric_limits template member values defaulting to 0.",
    "LEWG187": "Manipulating the width of numeric types",
    "LEWG188": "Delete operator= for polymorphic_allocator",
    "LEWG189": "Better Names for Parallel Execution Policies in C++17",
    "LEWG190": "Floating Point Atomic",
    "LEWG191": "Vector and Wavefront Policies",
    "LEWG192": "Thread-Local Storage and light-weight executors",
    "LEWG193": "Data-Parallel Vector Types & Operations",
    "LEWG194": "Integrating std::string_view and std::string",
    "LEWG195": "A byte type",
    "LEWG196": "Dynamic library loading",
    "LEWG197": "Forward progress guarantees for the Parallelism TS v2",
    "LEWG198": "Deprecating Allocator Support in std::function",
    "LEWG199": "Optional<T>'s >= should forward to T's >=",
    "LEWG200": "Valueless Variants Considered Harmful",
    "LEWG201": "Splitting node and array allocation in allocators",
    "LEWG202": "Directory Entry Caching for Filesystem",
    "LEWG203": "Unwrapping reference_wrapper",
    "LEWG204": "Adding Emplace functions for promise<T>/future<T>",
    "LEWG205": "Thread Constructor Attributes",
    "LEWG206": "User-creatable exception_list",
    "LEWG207": "Adopt make_array into the IS",
    "LEWG208": "Improving Parallel Algorithm Exception Handling",
    "LEWG209": "Immutable Containers",
    "LEWG210": "Generic factory function",
    "LEWG211": "polymorphic_allocator<void> as a vocabulary type",
    "LEWG212": "Making std::underlying_type SFINAE-friendly",
    "LEWG213": "High-order metaprogramming functions",
    "LEWG214": "Rename \"uniform random number generator\" to \"... bit generator\"",
    "LEWG215": "Simplifying simple uses of <random>",
    "LEWG216": "Unicode Encoding Conversions",
    "LEWG217": "reference_wrapper for incomplete types and assorted removals",
    "LEWG218": "Fixes for not_fn",
    "LEWG219": "Invoking Algorithms Asynchronously",
    "LEWG220": "A class to describe the kind of data accesses",
    "LEWG221": "Ranges TS Design Updates",
    "LEWG222": "A Single Generalization of std::invoke, std::apply, and std::visit",
    "LEWG223": "General-Purpose Constant Value Type",
    "LEWG224": "string_view and filesystem::path",
    "LEWG225": "Structured binding: customization points issues",
    "LEWG226": "operator+ overloads for std::string and std::string_view",
    "LEWG227": "variant converting constructor allows unintended conversions",
    "LEWG228": "P0019 - Atomic Ref",
    "LEWG229": "allocate_unique and allocator_delete",
    "LEWG230": "Pointer Cast Functions with Move Semantics",
    "LEWG231": "Extensions to the Allocator interface",
    "LEWG232": "Literal suffixes for basic_string_view",
    "LEWG233": "Intrusive Containers",
    "LEWG234": "Allocator-aware basic stringbuf",
    "LEWG235": "Efficient Access to basic stringbuf\u2019s Buffer",
    "LEWG236": "Standard Library Specification in a Concepts and Contracts World",
    "LEWG237": "Constexpr for std::complex",
    "LEWG238": "Constexpr for std::char_traits",
    "LEWG239": "Integrating template deduction for class templates into the standard library",
    "LEWG240": "Floating Point Atomic View",
    "LEWG241": "std::colony",
    "LEWG242": "A strstream replacement using span<charT> as buffer",
    "LEWG243": "A minimal multi-dimensional span, mdspan<>",
    "LEWG244": "String Prefix and Suffix Checking",
    "LEWG245": "Checking for Existence of an Element in Associative Containers",
    "LEWG246": "endian, Just endian",
    "LEWG247": "Layout-compatibility and Pointer-interconvertibility Traits",
    "LEWG248": "Sample in place",
    "LEWG249": "Single argument std::inserter",
    "LEWG250": "Put std::monostate in <utility>",
    "LEWG251": "Bit-casting object representations",
    "LEWG252": "std::monostate_function<>",
    "LEWG253": "move_if_noexcept from a range to uninitialized memory",
    "LEWG254": "Enhancing Thread Constructor Attributes",
    "LEWG255": "for_each_iter algorithm",
    "LEWG256": "Atomic maximum/minimum",
    "LEWG257": "contiguous_container",
    "LEWG258": "Deduction guide for std::array",
    "LEWG259": "Add split/join of string/string_view",
    "LEWG260": "Post-Increment on Input and Output Iterators",
    "LEWG261": "User Injection of Filesystems",
    "LEWG262": "Supporting offsetof for Stable-layout Classes",
    "LEWG263": "Span - foundation for the future",
    "LEWG264": "Adjuncts to std::hash",
    "LEWG265": "Transformation Trait uncvref",
    "LEWG266": "Thou Shalt Not Specialize std Function Templates!",
    "LEWG267": "string_view for source_location",
    "LEWG268": "Class template deduction guides for \"diamond operators\"",
    "LEWG269": "Vector Front Operations",
    "LEWG270": "Utility functions to implement uses-allocator construction",
    "LEWG271": "[[nodiscard]] in the Library",
    "LEWG272": "constexpr for <cmath> and <cstdlib>",
    "LEWG273": "An Intrusive Smart Pointer",
    "LEWG274": "File system library on non-POSIX-like operating systems",
    "LEWG275": "Use string_view for library function parameters instead of const string &/const char *",
    "LEWG276": "Numeric Traits for the Next Standard Library",
    "LEWG277": "Toward a <random> Technical Specification",
    "LEWG278": "Saturation arithmetic",
    "LEWG279": "Bit operations",
    "LEWG280": "Integral power-of-2 operations",
    "LEWG281": "Consistent comparison",
    "LEWG282": "Standard Library Modules",
    "LEWG283": "Updating Parallel Execution Policy Names in the Parallelism TS",
    "LEWG284": "Make std::memory_order a scoped enumeration",
    "LEWG285": "Future-Proofing Parallel Algorithms Exception Handling",
    "LEWG286": "Binary-Binary transform_reduce(): The Missing Overload",
    "LEWG287": "Clarify That shared_future\u2019s Copy Operations have Wide Contracts",
    "LEWG288": "The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange",
    "LEWG289": "call/cc (call-with-current-continuation): A low-level API for stackful context switching",
    "LEWG290": "Type Requirements for <numeric> Algorithms",
    "LEWG291": "Hazard Pointers",
    "LEWG292": "Product-Type access",
    "LEWG293": "[Networking] PDTS ballot comment 001 (US): use callable/invocable terminology instead of \"function object\"",
    "LEWG294": "[Networking] PDTS ballot comment 004 (FR1): Implement using coroutines",
    "LEWG295": "[Networking] PDTS ballot comment 006 (US): Use callbacks instead of completion tokens",
    "LEWG296": "[Networking] PDTS ballot comment 008 (GB3): Specify reentrancy rules for dispatch functions",
    "LEWG297": "[Networking] PDTS ballot comment 011 (US): Remove defer function from executors",
    "LEWG298": "[Networking] PDTS ballot comment 015 (GB6): Reentrancy and use_service/make_service.",
    "LEWG299": "[Networking] PDTS ballot comment 016 (GB7): run()/run_one() specification overly restrictive on users.",
    "LEWG300": "[Networking] PDTS ballot comment 018 (GB9): user-provided overloads of buffer_size intended?",
    "LEWG301": "[Networking] PDTS ballot comment 022 (GB12): const_buffer is a view",
    "LEWG302": "[Networking] PDTS ballot comment 025 (GB14): Add integer_option helper",
    "LEWG303": "[Networking] PDTS ballot comment 026 (GB15):  Consider adding release() member functions to basic_socket and basic_socket_acceptor",
    "LEWG304": "[Networking] PDTS ballot comment 027 (GB16): Consider adding constructors to basic_socket and basic_socket_acceptor to move a socket to another io_context",
    "LEWG305": "[Networking] PDTS ballot comment 033 (GB20): Shorten ip::resolver_errc enumerator names.",
    "LEWG306": "[Networking] PDTS ballot comment 034 (GB21): Consider ip::address::is_loopback() and ip::address_v6::is_loopback() behaviour for IPv4-mapped IPv6 addresses",
    "LEWG307": "[Networking] PDTS ballot comment 018 (GB9): user-provided overloads of buffer_size intended?",
    "LEWG308": "apply() for synchronized_value<T>",
    "LEWG309": "Integrating simd with parallel algorithms and executors",
    "LEWG310": "Distributed Counters",
    "LEWG311": "Reviewing Deprecated Facilities of C++17 for C++20",
    "LEWG312": "Crochemore-Perrin search algorithm for std::search",
    "LEWG313": "Floating point value access for std::ratio",
    "LEWG314": "Switch the Ranges TS to Use Variable Concepts",
    "LEWG315": "Improvements to library class template argument deduction",
    "LEWG316": "Support for contract based programming in C++",
    "LEWG317": "variant and optional should propagate copy/move triviality",
    "LEWG318": "de-pessimize legacy <numeric> algorithms with std::move",
    "LEWG319": "Math Constants",
    "LEWG320": "Add c_array() member function to std::array",
    "LEWG321": "User-defined exception information and diagnostic information in exception objects",
    "LEWG322": "Text Formatting",
    "LEWG323": "Improving the Return Value of Erase-Like Algorithms",
    "LEWG324": "C++ Monadic interface",
    "LEWG325": "pointer_traits utility to convert to raw pointer",
    "LEWG326": "Deprecate Certain Declarations in the Global Namespace",
    "LEWG327": "slot_map Container",
    "LEWG328": "Repairing elementary string conversions",
    "LEWG329": "[Networking] PDTS ballot comments US 9 and US 10",
    "LEWG330": "Implicit and Explicit Conversions",
    "LEWG331": "A Proposal to add wide_int Template Class",
    "LEWG332": "Reducing <ratio>",
    "LEWG333": "Numeric Traits for Type Composition",
    "LEWG334": "Template Library for Parallel For Loops",
    "LEWG335": "Adopt atomic<shared_ptr> from concurrency TS",
    "LEWG336": "Composition of Arithmetic Types",
    "LEWG337": "C++ Latches",
    "LEWG338": "Standard Library Specification in a Concepts and Contracts World",
    "LEWG339": "Library Support for the Spaceship (Comparison) Operaton",
    "LEWG340": "function_ref: a non-owning reference to a Callable",
    "LEWG341": "ValuedOrError and ValueOrNone types",
    "LEWG342": "Keep alias syntax extendable",
    "LEWG343": "No More Nested Namespaces in Library Design",
    "LEWG344": "Comparing Unordered Containers",
    "LEWG345": "Ranges Naming",
    "LEWG346": "Manipulators for C++ Synchronized Buffered Ostream",
    "LEWG347": "Using Concepts and requires in the C++ Standard Library",
    "LEWG348": "hash_combine() Again",
    "LEWG349": "construct() shall Return the Replaced Address",
    "LEWG350": "visit<R>: Explicit Return Type for visit",
    "LEWG351": "Comparing Containers",
    "LEWG352": "A conditional transform algorithm for C++",
    "LEWG353": "RAII Interface for Deferred Reclamation",
    "LEWG354": "Range Adaptors and Utilities",
    "LEWG355": "Effect of operator<=> on the C++ Standard Library",
    "LEWG356": "Implicit conversion traits and utility functions",
    "LEWG357": "Add shift to <algorithm>",
    "LEWG358": "Extensions to C++ for Short Float Type",
    "LEWG359": "Endian Library Request for Comments",
    "LEWG360": "Applying Concepts to the Standard Library",
    "LEWG361": "Safe integral comparisons",
    "LEWG362": "std::vector Destruction Order",
    "LEWG363": "<version>, to include implementation-specific meta-information",
    "LEWG364": "regex_iterator should be iterable",
    "LEWG365": "std::function move operations should be noexcept",
    "LEWG366": "Towards meaningful fancy pointers",
    "LEWG367": "Monadic operations for std::optional",
    "LEWG368": "Best practices and issues with <system_error>",
    "LEWG369": "A friendlier tuple get",
    "LEWG370": "SFINAE-friendly std::bind",
    "LEWG371": "Update freestanding requirements",
    "LEWG372": "Fixed-Point Real Numbers",
    "LEWG373": "Well-behaved interpolation for numbers and pointers",
    "LEWG377": "C++ Concurrent Communication Queues",
    "LEWG379": "P0443: A Unified Executors Proposal for C++",
    "LEWG391": "Rebase the Parallelism TS onto the C++17 Standard",
    "LEWG403": "Rebase the Parallelism TS onto the C++17 Standard",
    "LEWG409": "Static reflection of functions",
    "LEWG410": "Symmetry for spaceship",
    "LEWG411": "Standard Library Concepts",
    "LEWG412": "reference_wrapper for incomplete types",
    "LEWG413": "variant and optional should propagate copy/move triviality",
    "LEWG414": "Extending the noexcept Policy",
    "LEWG415": "Naming implementation-defined simd_abi tag types",
    "LEWG416": "Heterogeneous lookup for unordered containers",
    "LEWG417": "Move-only iterators",
    "LEWG418": "Adding support for type-based metaprogramming to the standard library",
    "LEWG419": "P0546 - Span - foundation for the future",
    "LEWG420": "Type Requirements for <numeric> Algorithms",
    "LEWG421": "P0856 - Restrict Access Property for mdspan and span",
    "LEWG422": "Fixing the partial_order comparison algorithm",
    "LEWG423": "A Proposal to add stack trace library",
    "LEWG424": "An Ontology for Properties of mdspan",
    "LEWG425": "Renaming cell<> to latest<>",
    "LEWG426": "Define basic_string_view(nullptr) and basic_string(nullptr)",
    "LEWG427": "Tightening the constraints on std::function",
    "LEWG428": "Introducing a <smart_ptr> header",
    "LEWG429": "string::reserve Should Not Shrink",
    "LEWG430": "allocate_unique and allocator_delete",
    "LEWG431": "Making std::underlying_type SFINAE-friendly",
    "LEWG432": "Crochemore-Perrin search algorithm for std::search",
    "LEWG433": "fixed_capacity_vector",
    "LEWG434": "A Proposal for a Universally Unique Identifier Library",
    "LEWG435": "User-defined Literals for std::filesystem::path",
    "LEWG436": "The identity metafunction",
    "LEWG437": "Integrating feature-test macros into the C++ WD",
    "LEWG438": "Merging the Ranges TS",
    "LEWG439": "Add symmetric coroutine control transfer",
    "LEWG440": "char8_t: A type for UTF-8 characters and strings",
    "LEWG441": "std::is_constant_evaluated()",
    "LEWG442": "Standard containers and constexpr",
    "LEWG443": "Standard Library Compatibility",
    "LEWG444": "How to catch an exception_ptr without even try-ing",
    "LEWG445": "realloc() for C++",
    "LEWG446": "Runtime type introspection with std::exception ptr",
    "LEWG447": "Finding the right set of traits for simd<T>",
    "LEWG448": "Better, Safer Range Access Customization Points",
    "LEWG449": "A few additional type manipulation utilities",
    "LEWG450": "Smart pointer creation with default initialization",
    "LEWG451": "constexpr comparison operators for std::array",
    "LEWG452": "Usability Enhancements for std::span",
    "LEWG453": "A call for a Data Persistence (iostream v2) study group",
    "LEWG454": "SG14 status_code and standard error object for P0709 Zero-overhead deterministic exceptions",
    "LEWG455": "std::filesystem::path_view",
    "LEWG456": "Low level file i/o library",
    "LEWG457": "Misc constexpr bits",
    "LEWG458": "Rangify the uninitialised memory algorithms!",
    "LEWG459": "Input range adaptors",
    "LEWG460": "Deep Integration of the Ranges TS",
    "LEWG461": "A proposal for a type trait to detect scoped enumerations",
    "LEWG462": "std::experimental::expected LWG design issues",
    "LEWG463": "A Modest Executor Proposal",
    "LEWG464": "Adapting Asio to use std::expected",
    "LEWG465": "On empty structs in the standard library",
    "LEWG466": "Move resource_adaptor from Library TS to the C++ WP",
    "LEWG467": "Sizes Should Only span Unsigned",
    "LEWG468": "<chrono> zero(), min(), and max() should be noexcept",
    "LEWG469": "std::assume_aligned",
    "LEWG470": "Container support for implicit lifetime types",
    "LEWG471": "P0860: Atomic Access Property for mdspan",
    "LEWG472": "P0958: Networking TS changes to support proposed Executors TS",
    "LEWG473": "std::async() in an Executors World",
    "LEWG474": "[P1053] Future-proofing continuations for executors",
    "LEWG475": "A Cooperatively Interruptible Joining Thread, Rev 2",
    "LEWG476": "Concurrency TS is growing: Concurrent Utilities and Data Structures",
    "LEWG477": "P0836:Introduce Parallelism to the Ranges TS",
    "LEWG478": "Feedback on P0214",
    "LEWG479": "Support C atomics in C++",
    "LEWG480": "String View Conversion for Function Arguments",
    "LEWG481": "Making std::vector constexpr",
    "LEWG482": "Constexpr in std::pointer_traits",
    "LEWG483": "Constant Pointer View - std::as_const Strikes Back!",
    "LEWG484": "Constexpr iterator requirements",
    "LEWG485": "A Function Returning Whether An Underlying Type Value Is a Valid Enumerator of a Given Enumeration",
    "LEWG486": "namespace std { namespace fs = filesystem; }",
    "LEWG487": "Let strong_order Truly Be a Customization Point!",
    "LEWG491": "Fractional Numeric Type",
    "LEWG493": "Target Vectorization Policies from Parallelism V2 TS to C++20",
    "LEWG494": "Fixing Atomic Initialization",
    "LEWG495": "Contiguous Ranges",
    "LEWG496": "Should Span Be Regular",
    "LEWG497": "Add coroutine task type",
    "LEWG498": "Improving atomic_flag",
    "LEWG499": "Add c_array() member function to std::array",
    "LEWG500": "P1122R0: Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)",
    "LEWG501": "Function to mark unreachable code",
    "LEWG502": "fiber_handle - fibers without scheduler",
    "LEWG503": "Everyone Deserves a Little Order",
    "LEWG504": "More simd<> operations",
    "LEWG505": "Precalculated hash values in lookup",
    "LEWG506": "Runtime type introspection with std::exception ptr",
    "LEWG507": "Making std::string constexpr",
    "LEWG508": "std::embed",
    "LEWG509": "Refining standard library support for Class Template Argument Deduction",
    "LEWG510": "Optimized Initialization for basic_string and vector",
    "LEWG511": "Efficient composition with DynamicBuffer",
    "LEWG512": "web_view",
    "LEWG513": "out_ptr - a scalable output pointer abstraction",
    "LEWG514": "Networking TS Associations For Call Wrappers",
    "LEWG515": "The C++20 Synchronization Library",
    "LEWG516": "Buffer Sequence Adaptors",
    "LEWG517": "Printing volatile Pointers",
    "LEWG518": "Constexpr regex",
    "LEWG519": "Type Erased Iterators for modern C++",
    "LEWG520": "ADD TEST POLYMORPHIC MEMORY RESOURCE TO THE STANDARD LIBRARY",
    "LEWG521": "The Concept of Memory Allocator",
    "LEWG522": "a simple and practical optional reference for C++",
    "LEWG523": "C++ Compile",
    "LEWG524": "New names for the power-of-2 templates",
    "LEWG525": "When do you actually use <=>?",
    "LEWG526": "A type trait for std::compare_3way()'s type",
    "LEWG527": "Adding operator<=> to types that are not currently comparable",
    "LEWG528": "Making <system_error> constexpr",
    "LEWG529": "Value-based std::error_category comparison",
    "LEWG530": "A non-allocating overload of error_category::message()",
    "LEWG531": "Adding error_category::failed()",
    "LEWG532": "Variant direct comparisons",
    "LEWG533": "Range constructors for standard containers and views",
    "LEWG534": "Movability of Single-pass Iterators",
    "LEWG535": "Adopt source_location from Library Fundamentals V3 for C++20",
    "LEWG536": "Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20",
    "LEWG537": "Completing the Rebase of Library Fundamentals, Version 3, Working Draft",
    "LEWG538": "A Standard flat_set",
    "LEWG539": "find_backward",
    "LEWG540": "Signed size() functions",
    "LEWG541": "Shift-by-negative in shift_left and shift_right",
    "LEWG542": "Rangify New Algorithms",
    "LEWG543": "Fixing Relations",
    "LEWG544": "Extension by inspecting members of User Defined Types?",
    "LEWG545": "A more constexpr bitset",
    "LEWG546": "Ranges Design Cleanup",
    "LEWG547": "A view of 0 or 1 elements: view::maybe",
    "LEWG548": "Integer Width Literals",
    "LEWG549": "std::ranges::less<> Should Be More!",
    "LEWG550": "ostream_joiner",
    "LEWG551": "Spaceship library update",
    "LEWG552": "Unifying the many ways to compare",
    "LEWG553": "Comparison Concepts",
    "LEWG554": "unique_val: a default-on-move type",
    "LEWG555": "secure_val: a secure-clear-on-move type",
    "LEWG556": "Remove return type deduction in std::apply",
    "LEWG557": "Tuple application traits",
    "LEWG558": "to_array from LFTS with updates",
    "LEWG559": "Feedback on 2D Graphics",
    "LEWG560": "Byteswapping for fun&&nuf",
    "LEWG561": "A Class for Status and Optional Value",
    "LEWG562": "Explicitly implicifying explicit constructors",
    "LEWG563": "Fixing allocator usage for operator + (basic_string)",
    "LEWG564": "Fixing allocator usage for operator + (basic_string)",
    "LEWG565": "Unified executors proposal",
    "LEWG566": "std::environment and std::arguments",
    "LWG1": "C library linkage editing oversight",
    "LWG2": "Auto_ptr conversions effects incorrect",
    "LWG3": "Atexit registration during atexit() call is not described",
    "LWG4": "basic_string size_type and difference_type should be implementation defined",
    "LWG5": "String::compare specification questionable",
    "LWG6": "File position not an offset unimplementable",
    "LWG7": "String clause minor problems",
    "LWG8": "Locale::global lacks guarantee",
    "LWG9": "Operator new(0) calls should not yield the same pointer",
    "LWG10": "Codecvt<>::do unclear",
    "LWG11": "Bitset minor problems",
    "LWG12": "Way objects hold allocators unclear",
    "LWG13": "Eos refuses to die",
    "LWG14": "Locale::combine should be const",
    "LWG15": "Locale::name requirement inconsistent",
    "LWG16": "Bad ctype_byname<char> decl",
    "LWG17": "Bad bool parsing",
    "LWG18": "Get(...bool&) omitted",
    "LWG19": "\"Noconv\" definition too vague",
    "LWG20": "Thousands_sep returns wrong type",
    "LWG21": "Codecvt_byname<> instantiations",
    "LWG22": "Member open vs. flags",
    "LWG23": "Num_get overflow result",
    "LWG24": "\"do_convert\" doesn't exist",
    "LWG25": "String operator<< uses width() value wrong",
    "LWG26": "Bad sentry example",
    "LWG27": "String::erase(range) yields wrong iterator",
    "LWG28": "Ctype<char>is ambiguous",
    "LWG29": "Ios_base::init doesn't exist",
    "LWG30": "Wrong header for LC_*",
    "LWG31": "Immutable locale values",
    "LWG32": "Pbackfail description inconsistent",
    "LWG33": "Codecvt<> mentions from_type",
    "LWG34": "True/falsename() not in ctype<>",
    "LWG35": "No manipulator unitbuf in synopsis",
    "LWG36": "Iword & pword storage lifetime omitted",
    "LWG37": "Leftover \"global\" reference",
    "LWG38": "Facet definition incomplete",
    "LWG39": "istreambuf_iterator<>::operator++(int) definition garbled",
    "LWG40": "Meaningless normative paragraph in examples",
    "LWG41": "Ios_base needs clear(), exceptions()",
    "LWG42": "String ctors specify wrong default allocator",
    "LWG43": "Locale table correction",
    "LWG44": "Iostreams use operator== on int_type values",
    "LWG45": "Stringstreams read/write pointers initial position unclear",
    "LWG46": "Minor Annex D errors",
    "LWG47": "Imbue() and getloc() Returns clauses swapped",
    "LWG48": "Use of non-existent exception constructor",
    "LWG49": "Underspecification of ios_base::sync_with_stdio",
    "LWG50": "Copy constructor and assignment operator of ios_base",
    "LWG51": "Requirement to not invalidate iterators missing",
    "LWG52": "Small I/O problems",
    "LWG53": "Basic_ios destructor unspecified",
    "LWG54": "Basic_streambuf's destructor",
    "LWG55": "Invalid stream position is undefined",
    "LWG56": "Showmanyc's return type",
    "LWG57": "Mistake in char_traits",
    "LWG58": "Extracting a char from a wide-oriented stream",
    "LWG59": "Ambiguity in specification of gbump",
    "LWG60": "What is a formatted input function?",
    "LWG61": "Ambiguity in iostreams exception policy",
    "LWG62": "Sync's return value",
    "LWG63": "Exception-handling policy for unformatted output",
    "LWG64": "Exception handling in basic_istream::operator>>(basic_streambuf*)",
    "LWG65": "Underspecification of strstreambuf::seekoff",
    "LWG66": "Strstreambuf::setbuf",
    "LWG67": "Setw useless for strings",
    "LWG68": "Extractors for char* should store null at end",
    "LWG69": "Must elements of a vector be contiguous?",
    "LWG70": "Uncaught_exception() missing throw() specification",
    "LWG71": "Do_get_monthname synopsis missing argument",
    "LWG72": "Do_convert phantom member function",
    "LWG73": "is_open should be const",
    "LWG74": "Garbled text for codecvt::do_max_length",
    "LWG75": "Contradiction in codecvt::length's argument types",
    "LWG76": "Can a codecvt facet always convert one internal character at a time?",
    "LWG77": "Valarray operator[] const returning value",
    "LWG78": "Typo: event_call_back",
    "LWG79": "Inconsistent declaration of polar()",
    "LWG80": "Global Operators of complex declared twice",
    "LWG81": "Wrong declaration of slice operations",
    "LWG82": "Missing constant for set elements",
    "LWG83": "String::npos vs. string::max_size()",
    "LWG84": "Ambiguity with string::insert()",
    "LWG85": "String char types",
    "LWG86": "String constructors don't describe exceptions",
    "LWG87": "Error in description of string::compare()",
    "LWG88": "Inconsistency between string::insert() and string::append()",
    "LWG89": "Missing throw specification for string::insert() and string::replace()",
    "LWG90": "Incorrect description of operator >> for strings",
    "LWG91": "Description of operator>> and getline() for string<> might cause endless loop",
    "LWG92": "Incomplete Algorithm Requirements",
    "LWG93": "Incomplete Valarray Subset Definitions",
    "LWG94": "May library implementors add template parameters to Standard Library classes?",
    "LWG95": "Members added by the implementation",
    "LWG96": "Vector<bool> is not a container",
    "LWG97": "Insert inconsistent definition",
    "LWG98": "Input iterator requirements are badly written",
    "LWG99": "Reverse_iterator comparisons completely wrong",
    "LWG100": "Insert iterators/ostream_iterators overconstrained",
    "LWG101": "No way to free storage for vector and deque",
    "LWG102": "Bug in insert range in associative containers",
    "LWG103": "set::iterator is required to be modifiable, but this allows modification of keys",
    "LWG104": "Description of basic_string::operator[] is unclear",
    "LWG105": "fstream ctors argument types desired",
    "LWG106": "Numeric library private members are implementation defined",
    "LWG107": "Valarray constructor is strange",
    "LWG108": "Lifetime of exception::what() return unspecified",
    "LWG109": "Missing binders for non-const sequence elements",
    "LWG110": "istreambuf_iterator::equal not const",
    "LWG111": "istreambuf_iterator::equal overspecified, inefficient",
    "LWG112": "Minor typo in ostreambuf_iterator constructor",
    "LWG113": "Missing/extra iostream sync semantics",
    "LWG114": "Placement forms example in error twice",
    "LWG115": "Typo in strstream constructors",
    "LWG116": "bitset cannot be constructed with a const char*",
    "LWG117": "basic_ostream uses nonexistent num_put member functions",
    "LWG118": "basic_istream uses nonexistent num_get member functions",
    "LWG119": "Should virtual functions be allowed to strengthen the exception specification?",
    "LWG120": "Can an implementor add specializations?",
    "LWG121": "Detailed definition for ctype<wchar_t> specialization",
    "LWG122": "streambuf/wstreambuf description should not say they are specializations",
    "LWG123": "Should valarray helper arrays fill functions be const?",
    "LWG124": "ctype_byname<charT>::do_scan_is & do_scan_not return type should be const charT*",
    "LWG125": "valarray<T>::operator!() return type is inconsistent",
    "LWG126": "typos in Effects clause of ctype::do_narrow()",
    "LWG127": "auto_ptr<> conversion issues",
    "LWG128": "Need open_mode() function for file stream, string streams, file buffers, and string buffers",
    "LWG129": "Need error indication from seekp() and seekg()",
    "LWG130": "Return type of container::erase(iterator) differs for associative containers",
    "LWG131": "list::splice throws nothing",
    "LWG132": "list::resize description uses random access iterators",
    "LWG133": "map missing get_allocator()",
    "LWG134": "vector constructors over specified",
    "LWG135": "basic_iostream doubly initialized",
    "LWG136": "seekp, seekg setting wrong streams?",
    "LWG137": "Do use_facet and has_facet look in the global locale?",
    "LWG138": "Class ctype_byname<char> redundant and misleading",
    "LWG139": "Optional sequence operation table description unclear",
    "LWG140": "map<Key, T>::value_type does not satisfy the assignable requirement",
    "LWG141": "basic_string::find_last_of, find_last_not_of say pos instead of xpos",
    "LWG142": "lexicographical_compare complexity wrong",
    "LWG143": "C .h header wording unclear",
    "LWG144": "Deque constructor complexity wrong",
    "LWG145": "adjustfield lacks default value",
    "LWG146": "complex<T> Inserter and Extractor need sentries",
    "LWG147": "Library Intro refers to global functions that aren't global",
    "LWG148": "Functions in the example facet BoolNames should be const",
    "LWG149": "Insert should return iterator to first element inserted",
    "LWG150": "Find_first_of says integer instead of iterator",
    "LWG151": "Can't currently clear() empty container",
    "LWG152": "Typo in scan_is() semantics",
    "LWG153": "Typo in narrow() semantics",
    "LWG154": "Missing double specifier for do_get()",
    "LWG155": "Typo in naming the class defining the class Init",
    "LWG156": "Typo in imbue() description",
    "LWG157": "Meaningless error handling for pword() and iword()",
    "LWG158": "Underspecified semantics for setbuf()",
    "LWG159": "Strange use of underflow()",
    "LWG160": "Typo: Use of non-existing function exception()",
    "LWG161": "Typo: istream_iterator vs. istreambuf_iterator",
    "LWG162": "Really \"formatted input functions\"?",
    "LWG163": "Return of gcount() after a call to gcount",
    "LWG164": "do_put() has apparently unused fill argument",
    "LWG165": "xsputn(), pubsync() never called by basic_ostream members?",
    "LWG166": "Really \"formatted output functions\"?",
    "LWG167": "Improper use of traits_type::length()",
    "LWG168": "Typo: formatted vs. unformatted",
    "LWG169": "Bad efficiency of overflow() mandated",
    "LWG170": "Inconsistent definition of traits_type",
    "LWG171": "Strange seekpos() semantics due to joint position",
    "LWG172": "Inconsistent types for basic_istream::ignore()",
    "LWG173": "Inconsistent types for basic_filebuf::setbuf()",
    "LWG174": "Typo: OFF_T vs. POS_T",
    "LWG175": "Ambiguity for basic_streambuf::pubseekpos() and a few other functions.",
    "LWG176": "exceptions() in ios_base...?",
    "LWG177": "Complex operators cannot be explicitly instantiated",
    "LWG178": "Should clog and cerr initially be tied to cout?",
    "LWG179": "Comparison of const_iterators to iterators doesn't work",
    "LWG180": "Container member iterator arguments constness has unintended consequences",
    "LWG181": "make_pair() unintended behavior",
    "LWG182": "Ambiguous references to size_t",
    "LWG183": "I/O stream manipulators don't work for wide character streams",
    "LWG184": "numeric_limits<bool> wording problems",
    "LWG185": "Questionable use of term \"inline\"",
    "LWG186": "bitset::set() second parameter should be bool",
    "LWG187": "iter_swap underspecified",
    "LWG188": "valarray helpers missing augmented assignment operators",
    "LWG189": "setprecision() not specified correctly",
    "LWG190": "min() and max() functions should be std::binary_functions",
    "LWG191": "Unclear complexity for algorithms such as binary search",
    "LWG192": "a.insert(p,t) is inefficient and overconstrained",
    "LWG193": "Heap operations description incorrect",
    "LWG194": "rdbuf() functions poorly specified",
    "LWG195": "Should basic_istream::sentry's constructor ever set eofbit?",
    "LWG196": "Placement new example has alignment problems",
    "LWG197": "max_size() underspecified",
    "LWG198": "Validity of pointers and references unspecified after iterator destruction",
    "LWG199": "What does allocate(0) return?",
    "LWG200": "Forward iterator requirements don't allow constant iterators",
    "LWG201": "Numeric limits terminology wrong",
    "LWG202": "unique() effects unclear when predicate not an equivalence relation",
    "LWG203": "basic_istream::sentry::sentry() is uninstantiable with ctype<user-defined type>",
    "LWG204": "distance(first, last) when \"last\" is before \"first\"",
    "LWG205": "numeric_limits unclear on how to determine floating point types",
    "LWG206": "operator new(size_t, nothrow) may become unlinked to ordinary operator new if ordinary version replaced",
    "LWG207": "ctype<char> members return clause incomplete",
    "LWG208": "Unnecessary restriction on past-the-end iterators",
    "LWG209": "basic_string declarations inconsistent",
    "LWG210": "distance first and last confused",
    "LWG211": "operator>>(istream&, string&) doesn't set failbit",
    "LWG212": "Empty range behavior unclear for several algorithms",
    "LWG213": "Math function overloads ambiguous",
    "LWG214": "set::find() missing const overload",
    "LWG215": "Can a map's key_type be const?",
    "LWG216": "setbase manipulator description flawed",
    "LWG217": "Facets example (Classifying Japanese characters) contains errors",
    "LWG218": "Algorithms do not use binary predicate objects for default comparisons",
    "LWG219": "find algorithm missing version that takes a binary predicate argument",
    "LWG220": "~ios_base() usage valid?",
    "LWG221": "num_get<>::do_get stage 2 processing broken",
    "LWG222": "Are throw clauses necessary if a throw is already implied by the effects clause?",
    "LWG223": "reverse algorithm should use iter_swap rather than swap",
    "LWG224": "clear() complexity for associative containers refers to undefined N",
    "LWG225": "std:: algorithms use of other unqualified algorithms",
    "LWG226": "User supplied specializations or overloads of namespace std function templates",
    "LWG227": "std::swap() should require CopyConstructible or DefaultConstructible arguments",
    "LWG228": "Incorrect specification of \"..._byname\" facets",
    "LWG229": "Unqualified references of other library entities",
    "LWG230": "Assignable specified without also specifying CopyConstructible",
    "LWG231": "Precision in iostream?",
    "LWG232": "\"depends\" poorly defined in 17.4.3.1",
    "LWG233": "Insertion hints in associative containers",
    "LWG234": "Typos in allocator definition",
    "LWG235": "No specification of default ctor for reverse_iterator",
    "LWG236": "ctype<char>::is() member modifies facet",
    "LWG237": "Undefined expression in complexity specification",
    "LWG238": "Contradictory results of stringbuf initialization.",
    "LWG239": "Complexity of unique() and/or unique_copy incorrect",
    "LWG240": "Complexity of adjacent_find() is meaningless",
    "LWG241": "Does unique_copy() require CopyConstructible and Assignable?",
    "LWG242": "Side effects of function objects",
    "LWG243": "get and getline when sentry reports failure",
    "LWG244": "Must find's third argument be CopyConstructible?",
    "LWG245": "Which operations on istream_iterator trigger input operations?",
    "LWG246": "a.insert(p,t) is incorrectly specified",
    "LWG247": "vector, deque::insert complexity",
    "LWG248": "time_get fails to set eofbit",
    "LWG249": "Return Type of auto_ptr::operator=",
    "LWG250": "splicing invalidates iterators",
    "LWG251": "basic_stringbuf missing allocator_type",
    "LWG252": "missing casts/C-style casts used in iostreams",
    "LWG253": "valarray helper functions are almost entirely useless",
    "LWG254": "Exception types in clause 19 are constructed from std::string",
    "LWG255": "Why do basic_streambuf<>::pbump() and gbump() take an int?",
    "LWG256": "typo in 27.4.4.2, p17: copy_event does not exist",
    "LWG257": "STL functional object and iterator inheritance.",
    "LWG258": "Missing allocator requirement",
    "LWG259": "basic_string::operator[] and const correctness",
    "LWG260": "Inconsistent return type of istream_iterator::operator++(int)",
    "LWG261": "Missing description of istream_iterator::operator!=",
    "LWG262": "Bitmask operator ~ specified incorrectly",
    "LWG263": "Severe restriction on basic_string reference counting",
    "LWG264": "Associative container insert(i, j) complexity requirements are not feasible.",
    "LWG265": "std::pair::pair() effects overly restrictive",
    "LWG266": "bad_exception::~bad_exception() missing Effects clause",
    "LWG267": "interaction of strstreambuf::overflow() and seekoff()",
    "LWG268": "Typo in locale synopsis",
    "LWG269": "cstdarg and unnamed parameters",
    "LWG270": "Binary search requirements overly strict",
    "LWG271": "basic_iostream missing typedefs",
    "LWG272": "Missing parentheses around subexpression",
    "LWG273": "Missing ios_base qualification on members of a dependent class",
    "LWG274": "a missing/impossible allocator requirement",
    "LWG275": "Wrong type in num_get::get() overloads",
    "LWG276": "Assignable requirement for container value type overly strict",
    "LWG277": "Normative encouragement in allocator requirements unclear",
    "LWG278": "What does iterator validity mean?",
    "LWG279": "const and non-const iterators should have equivalent typedefs",
    "LWG280": "Comparison of reverse_iterator to const reverse_iterator",
    "LWG281": "std::min() and max() requirements overly restrictive",
    "LWG282": "What types does numpunct grouping refer to?",
    "LWG283": "std::replace() requirement incorrect/insufficient",
    "LWG284": "unportable example in 20.3.7, p6",
    "LWG285": "minor editorial errors in fstream ctors",
    "LWG286": "<cstdlib> requirements missing size_t typedef",
    "LWG287": "conflicting ios_base fmtflags",
    "LWG288": "<cerrno> requirements missing macro EILSEQ",
    "LWG289": "<cmath> requirements missing C float and long double versions",
    "LWG290": "Requirements to for_each and its function object",
    "LWG291": "Underspecification of set algorithms",
    "LWG292": "effects of a.copyfmt (a)",
    "LWG293": "Order of execution in transform algorithm",
    "LWG294": "User defined macros and standard headers",
    "LWG295": "Is abs defined in <cmath>?",
    "LWG296": "Missing descriptions and requirements of pair operators",
    "LWG297": "const_mem_fun_t<>::argument_type should be const T*",
    "LWG298": "::operator delete[] requirement incorrect/insufficient",
    "LWG299": "Incorrect return types for iterator dereference",
    "LWG300": "list::merge() specification incomplete",
    "LWG301": "basic_string template ctor effects clause omits allocator argument",
    "LWG302": "Need error indication from codecvt<>::do_length",
    "LWG303": "Bitset input operator underspecified",
    "LWG304": "Must *a return an lvalue when a is an input iterator?",
    "LWG305": "Default behavior of codecvt<wchar_t, char, mbstate_t>::length()",
    "LWG306": "offsetof macro and non-POD types",
    "LWG307": "Lack of reference typedefs in container adaptors",
    "LWG308": "Table 82 mentions unrelated headers",
    "LWG309": "Does sentry catch exceptions?",
    "LWG310": "Is errno a macro?",
    "LWG311": "Incorrect wording in basic_ostream class synopsis",
    "LWG312": "Table 27 is missing headers",
    "LWG313": "set_terminate and set_unexpected question",
    "LWG314": "Is the stack unwound when terminate() is called?",
    "LWG315": "Bad \"range\" in list::unique complexity",
    "LWG316": "Vague text in Table 69",
    "LWG317": "Instantiation vs. specialization of facets",
    "LWG318": "Misleading comment in definition of numpunct_byname",
    "LWG319": "Storage allocation wording confuses \"Required behavior\", \"Requires\"",
    "LWG320": "list::assign overspecified",
    "LWG321": "Typo in num_get",
    "LWG322": "iterator and const_iterator should have the same value type",
    "LWG323": "abs() overloads in different headers",
    "LWG324": "Do output iterators have value types?",
    "LWG325": "Misleading text in moneypunct<>::do_grouping",
    "LWG326": "Missing typedef in moneypunct_byname",
    "LWG327": "Typo in time_get facet in table 52",
    "LWG328": "Bad sprintf format modifier in money_put<>::do_put()",
    "LWG329": "vector capacity, reserve and reallocation",
    "LWG330": "Misleading \"exposition only\" value in class locale definition",
    "LWG331": "bad declaration of destructor for ios_base::failure",
    "LWG332": "Consider adding increment and decrement operators to std::fpos< T >",
    "LWG333": "does endl imply synchronization with the device?",
    "LWG334": "map::operator[] specification forces inefficient implementation",
    "LWG335": "minor issue with char_traits, table 37",
    "LWG336": "Clause 17 lack of references to deprecated headers",
    "LWG337": "replace_copy_if's template parameter should be InputIterator",
    "LWG338": "is whitespace allowed between `-' and a digit?",
    "LWG339": "definition of bitmask type restricted to clause 27",
    "LWG340": "interpretation of has_facet<Facet>(loc)",
    "LWG341": "Vector reallocation and swap",
    "LWG342": "seek and eofbit",
    "LWG343": "Unspecified library header dependencies",
    "LWG344": "grouping + showbase",
    "LWG345": "type tm in <cwchar>",
    "LWG346": "Some iterator member functions should be const",
    "LWG347": "locale::category and bitmask requirements",
    "LWG348": "Minor issue with std::pair operator<",
    "LWG349": "Minor typographical error in ostream_iterator",
    "LWG350": "allocator<>::address",
    "LWG351": "unary_negate and binary_negate: struct or class?",
    "LWG352": "missing fpos requirements",
    "LWG353": "std::pair missing template assignment",
    "LWG354": "Associative container lower/upper bound requirements",
    "LWG355": "Operational semantics for a.back()",
    "LWG356": "Meaning of ctype_base::mask enumerators",
    "LWG357": "<cmath> float functions cannot return HUGE_VAL",
    "LWG358": "interpreting thousands_sep after a decimal_point",
    "LWG359": "num_put<>::do_put (..., bool) undocumented",
    "LWG360": "locale mandates inefficient implementation",
    "LWG361": "num_get<>::do_get (..., void*&) checks grouping",
    "LWG362": "bind1st/bind2nd type safety",
    "LWG363": "Missing exception specification in 27.4.2.1.1",
    "LWG364": "Inconsistent wording in 27.5.2.4.2",
    "LWG365": "Lack of const-qualification in clause 27",
    "LWG366": "Excessive const-qualification",
    "LWG367": "remove_copy/remove_copy_if and Input Iterators",
    "LWG368": "basic_string::replace has two \"Throws\" paragraphs",
    "LWG369": "io stream objects and static ctors",
    "LWG370": "Minor error in basic_istream::get",
    "LWG371": "Stability of multiset and multimap member functions",
    "LWG372": "Inconsistent description of stdlib exceptions",
    "LWG373": "Are basic_istream and basic_ostream to use (exceptions()&badbit) != 0 ?",
    "LWG374": "moneypunct::frac_digits returns int not unsigned",
    "LWG375": "basic_ios should be ios_base in 27.7.1.3",
    "LWG376": "basic_streambuf semantics",
    "LWG377": "basic_string::insert and length_error",
    "LWG378": "locale immutability and locale::operator=()",
    "LWG379": "nonsensical ctype::do_widen() requirement",
    "LWG380": "typos in codecvt tables 53 and 54",
    "LWG381": "detection of invalid mbstate_t in codecvt",
    "LWG382": "codecvt do_in/out result",
    "LWG383": "Bidirectional iterator assertion typo",
    "LWG384": "equal_range has unimplementable runtime complexity",
    "LWG385": "Does call by value imply the CopyConstructible requirement?",
    "LWG386": "Reverse iterator's operator[] has impossible return type",
    "LWG387": "std::complex over-encapsulated",
    "LWG388": "Use of complex as a key in associative containers",
    "LWG389": "Const overload of valarray::operator[] returns by value",
    "LWG390": "CopyConstructible requirements too strict",
    "LWG391": "non-member functions specified as const",
    "LWG392": "'equivalence' for input iterators",
    "LWG393": "do_in/do_out operation on state unclear",
    "LWG394": "behavior of formatted output on failure",
    "LWG395": "inconsistencies in the definitions of rand() and random_shuffle()",
    "LWG396": "what are characters zero and one",
    "LWG397": "ostream::sentry dtor throws exceptions",
    "LWG398": "effects of end-of-file on unformatted input functions",
    "LWG399": "volations of unformatted input function requirements",
    "LWG400": "redundant type cast in lib.allocator.members",
    "LWG401": "incorrect type casts in table 32 in lib.allocator.requirements",
    "LWG402": "wrong new expression in [some_]allocator::construct",
    "LWG403": "basic_string::swap should not throw exceptions",
    "LWG404": "May a replacement allocation function be declared inline?",
    "LWG405": "qsort and POD",
    "LWG406": "vector::insert(s) exception safety",
    "LWG407": "Can singular iterators be destroyed?",
    "LWG408": "Is vector<reverse_iterator<char*> > forbidden?",
    "LWG409": "Closing an fstream should clear error state",
    "LWG410": "Missing semantics for stack and queue comparison operators",
    "LWG411": "Wrong names of set member functions",
    "LWG412": "Typo in 27.4.4.3",
    "LWG413": "Proposed resolution to LDR#64 still wrong",
    "LWG414": "Which iterators are invalidated by v.erase()?",
    "LWG415": "behavior of std::ws",
    "LWG416": "definitions of XXX_MIN and XXX_MAX macros in climits",
    "LWG417": "what does ctype::do_widen() return on failure",
    "LWG418": "exceptions thrown during iostream cleanup",
    "LWG419": "istream extractors not setting failbit if eofbit is already set",
    "LWG420": "is std::FILE a complete type?",
    "LWG421": "is basic_streambuf copy-constructible?",
    "LWG422": "explicit specializations of member functions of class templates",
    "LWG423": "Effects of negative streamsize in iostreams",
    "LWG424": "normative notes",
    "LWG425": "return value of std::get_temporary_buffer",
    "LWG426": "search_n(), fill_n(), and generate_n() with negative n",
    "LWG427": "Stage 2 and rationale of DR 221",
    "LWG428": "string::erase(iterator) validity",
    "LWG429": "typo in basic_ios::clear(iostate)",
    "LWG430": "valarray subset operations",
    "LWG431": "Swapping containers with unequal allocators",
    "LWG432": "stringbuf::overflow() makes only one write position available",
    "LWG433": "Contradiction in specification of unexpected()",
    "LWG434": "bitset::to_string() hard to use",
    "LWG435": "bug in DR 25",
    "LWG436": "are cv-qualified facet types valid facets?",
    "LWG437": "Formatted output of function pointers is confusing",
    "LWG438": "Ambiguity in the \"do the right thing\" clause",
    "LWG439": "Should facets be copyable?",
    "LWG440": "Should std::complex use unqualified transcendentals?",
    "LWG441": "Is fpos::state const?",
    "LWG442": "sentry::operator bool() inconsistent signature",
    "LWG443": "filebuf::close() inconsistent use of EOF",
    "LWG444": "Bad use of casts in fstream",
    "LWG445": "iterator_traits::reference unspecified for some iterator categories",
    "LWG446": "Iterator equality between different containers",
    "LWG447": "Wrong template argument for time facets",
    "LWG448": "Random Access Iterators over abstract classes",
    "LWG449": "Library Issue 306 Goes Too Far",
    "LWG450": "set::find is inconsistent with associative container requirements",
    "LWG451": "Associative erase should return an iterator",
    "LWG452": "locale::combine should be permitted to generate a named locale",
    "LWG453": "basic_stringbuf::seekoff need not always fail for an empty stream",
    "LWG454": "basic_filebuf::open should accept wchar_t names",
    "LWG455": "cerr::tie() and wcerr::tie() are overspecified",
    "LWG456": "Traditional C header files are overspecified",
    "LWG457": "bitset constructor: incorrect number of initialized bits",
    "LWG458": "24.1.5 contains unintended limitation for operator-",
    "LWG459": "Requirement for widening in stage 2 is overspecification",
    "LWG460": "Default modes missing from basic_fstream member specifications",
    "LWG461": "time_get hard or impossible to implement",
    "LWG462": "Destroying objects with static storage duration",
    "LWG463": "auto_ptr usability issues",
    "LWG464": "Suggestion for new member functions in standard containers",
    "LWG465": "Contents of <ciso646>",
    "LWG466": "basic_string ctor should prevent null pointer error",
    "LWG467": "char_traits::lt(), compare(), and memcmp()",
    "LWG468": "unexpected consequences of ios_base::operator void*()",
    "LWG469": "vector<bool> ill-formed relational operators",
    "LWG470": "accessing containers from their elements' special functions",
    "LWG471": "result of what() implementation-defined",
    "LWG472": "Missing \"Returns\" clause in std::equal_range",
    "LWG473": "underspecified ctype calls",
    "LWG474": "confusing Footnote 297",
    "LWG475": "May the function object passed to for_each modify the elements of the iterated sequence?",
    "LWG476": "Forward Iterator implied mutability",
    "LWG477": "Operator-> for const forward iterators",
    "LWG478": "Should forward iterator requirements table have a line for r->m?",
    "LWG479": "Container requirements and placement new",
    "LWG480": "unary_function and binary_function should have protected nonvirtual destructors",
    "LWG481": "unique's effects on the range [result, last)",
    "LWG482": "Swapping pairs",
    "LWG483": "Heterogeneous equality and EqualityComparable",
    "LWG484": "Convertible to T",
    "LWG485": "output iterator insufficiently constrained",
    "LWG486": "min/max CopyConstructible requirement is too strict",
    "LWG487": "Allocator::construct is too limiting",
    "LWG488": "rotate throws away useful information",
    "LWG489": "std::remove / std::remove_if wrongly specified",
    "LWG490": "std::unique wrongly specified",
    "LWG491": "std::list<>::unique incorrectly specified",
    "LWG492": "Invalid iterator arithmetic expressions",
    "LWG493": "Undefined Expression in Input Iterator Note Title",
    "LWG494": "Wrong runtime complexity for associative container's insert and delete",
    "LWG495": "Clause 22 template parameter requirements",
    "LWG496": "Illegal use of \"T\" in vector<bool>",
    "LWG497": "meaning of numeric_limits::traps for floating point types",
    "LWG498": "Requirements for partition() and stable_partition() too strong",
    "LWG499": "Std. doesn't seem to require stable_sort() to be stable!",
    "LWG500": "do_length cannot be implemented correctly",
    "LWG501": "Proposal: strengthen guarantees of lib.comparisons",
    "LWG502": "Proposition: Clarification of the interaction between a facet and an iterator",
    "LWG503": "more on locales",
    "LWG504": "Integer types in pseudo-random number engine requirements",
    "LWG505": "Result_type in random distribution requirements",
    "LWG506": "Requirements of Distribution parameter for variate_generator",
    "LWG507": "Missing requirement for variate_generator::operator()",
    "LWG508": "Bad parameters for ranlux64_base_01",
    "LWG509": "Uniform_int template parameters",
    "LWG510": "Input_type for bernoulli_distribution",
    "LWG511": "Input_type for binomial_distribution",
    "LWG512": "Seeding subtract_with_carry_01 from a single unsigned long",
    "LWG513": "Size of state for subtract_with_carry_01",
    "LWG514": "Size of state for subtract_with_carry",
    "LWG515": "Random number engine traits",
    "LWG516": "Seeding subtract_with_carry_01 using a generator",
    "LWG517": "Should include name in external representation",
    "LWG518": "Are insert and erase stable for unordered_multiset and unordered_multimap?",
    "LWG519": "Data() undocumented",
    "LWG520": "Result_of and pointers to data members",
    "LWG521": "Garbled requirements for argument_type in reference_wrapper",
    "LWG522": "Tuple doesn't define swap",
    "LWG523": "regex case-insensitive character ranges are unimplementable as specified",
    "LWG524": "regex named character classes and case-insensitivity don't mix",
    "LWG525": "type traits definitions not clear",
    "LWG526": "Is it undefined if a function in the standard changes in parameters?",
    "LWG527": "tr1::bind has lost its Throws clause",
    "LWG528": "const_iterator iterator issue when they are the same type",
    "LWG529": "The standard encourages redundant and confusing preconditions",
    "LWG530": "Must elements of a string be contiguous?",
    "LWG531": "array forms of unformatted input functions",
    "LWG532": "Tuple comparison",
    "LWG533": "typo in 2.2.3.10/1",
    "LWG534": "Missing basic_string members",
    "LWG535": "std::string::swap specification poorly worded",
    "LWG536": "Container iterator constructor and explicit convertibility",
    "LWG537": "Typos in the signatures in 27.6.1.3/42-43 and 27.6.2.4",
    "LWG538": "241 again: Does unique_copy() require CopyConstructible and Assignable?",
    "LWG539": "partial_sum and adjacent_difference should mention requirements",
    "LWG540": "shared_ptr<void>::operator*()",
    "LWG541": "shared_ptr template assignment and void",
    "LWG542": "shared_ptr observers",
    "LWG543": "valarray slice default constructor",
    "LWG544": "minor NULL problems in C.2",
    "LWG545": "When is a deleter deleted?",
    "LWG546": "[tr1] _Longlong and _ULonglong are integer types",
    "LWG547": "division should be floating-point, not integer",
    "LWG548": "May random_device block?",
    "LWG549": "Undefined variable in binomial_distribution",
    "LWG550": "What should the return type of pow(float,int) be?",
    "LWG551": "<ccomplex>",
    "LWG552": "random_shuffle and its generator",
    "LWG553": "very minor editorial change intptr_t / uintptr_t",
    "LWG554": "Problem with lwg DR 184 numeric_limits<bool>",
    "LWG555": "[tr1] 8.21/1: typo",
    "LWG556": "Is Compare a BinaryPredicate?",
    "LWG557": "TR1: div(_Longlong, _Longlong) vs div(intmax_t, intmax_t)",
    "LWG558": "lib.input.iterators Defect",
    "LWG559": "numeric_limits<const T>",
    "LWG560": "User-defined allocators without default constructor",
    "LWG561": "inserter overly generic",
    "LWG562": "stringbuf ctor inefficient",
    "LWG563": "stringbuf seeking from end",
    "LWG564": "stringbuf seekpos underspecified",
    "LWG565": "xsputn inefficient",
    "LWG566": "array forms of unformatted input function undefined for zero-element arrays",
    "LWG567": "streambuf inserter and extractor should be unformatted",
    "LWG568": "[tr1] log2 overloads missing",
    "LWG569": "Postcondition for basic_ios::clear(iostate) incorrectly stated",
    "LWG570": "Request adding additional explicit specializations of char_traits",
    "LWG571": "Update C90 references to C99?",
    "LWG572": "Oops, we gave 507 WP status",
    "LWG573": "C++0x file positioning should handle modern file sizes",
    "LWG574": "DR 369 Contradicts Text",
    "LWG575": "the specification of ~shared_ptr is MT-unfriendly, makes implementation assumptions",
    "LWG576": "find_first_of is overconstrained",
    "LWG577": "upper_bound(first, last, ...) cannot return last",
    "LWG578": "purpose of hint to allocator::allocate()",
    "LWG579": "erase(iterator) for unordered containers should not return an iterator",
    "LWG580": "unused allocator members",
    "LWG581": "flush() not unformatted function",
    "LWG582": "specialized algorithms and volatile storage",
    "LWG583": "div() for unsigned integral types",
    "LWG584": "missing int pow(int,int) functionality",
    "LWG585": "facet error reporting",
    "LWG586": "string inserter not a formatted function",
    "LWG587": "iststream ctor missing description",
    "LWG588": "requirements on zero sized tr1::arrays and other details",
    "LWG589": "Requirements on iterators of member template functions of containers",
    "LWG590": "Type traits implementation latitude should be removed for C++0x",
    "LWG591": "Misleading \"built-in",
    "LWG592": "Incorrect treatment of rdbuf()->close() return type",
    "LWG593": "__STDC_CONSTANT_MACROS",
    "LWG594": "Disadvantages of defining Swappable in terms of CopyConstructible and Assignable",
    "LWG595": "TR1/C++0x: fabs(complex<T>) redundant / wrongly specified",
    "LWG596": "27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes",
    "LWG597": "[dec.tr] The notion of 'promotion' cannot be emulated by user-defined types.",
    "LWG598": "[dec.tr] Conversion to integral should truncate, not round.",
    "LWG599": "[dec.tr] Say \"octets\" instead of \"bytes.\"",
    "LWG600": "[dec.tr] Wrong parameters for wcstod* functions",
    "LWG601": "[dec.tr] numeric_limits typos",
    "LWG602": "[dec.tr] \"generic floating type\" not defined.",
    "LWG603": "[dec.tr] Trivially simplifying decimal classes.",
    "LWG604": "[dec.tr] Storing a reference to a facet unsafe.",
    "LWG605": "[dec.tr] <decfloat.h> doesn't live here anymore.",
    "LWG606": "[dec.tr] allow narrowing conversions",
    "LWG607": "Concern about short seed vectors",
    "LWG608": "Unclear seed_seq construction details",
    "LWG609": "missing static const",
    "LWG610": "Suggested non-normative note for C++0x",
    "LWG611": "Standard library templates and incomplete types",
    "LWG612": "numeric_limits::is_modulo insufficiently defined",
    "LWG613": "max_digits10 missing from numeric_limits",
    "LWG614": "std::string allocator requirements still inconsistent",
    "LWG615": "Inconsistencies in Section 21.4",
    "LWG616": "missing 'typename' in ctype_byname",
    "LWG617": "std::array is a sequence that doesn't satisfy the sequence requirements?",
    "LWG618": "valarray::cshift() effects on empty array",
    "LWG619": "Longjmp wording problem",
    "LWG620": "valid uses of empty valarrays",
    "LWG621": "non-const copy assignment operators of helper arrays",
    "LWG622": "behavior of filebuf dtor and close on error",
    "LWG623": "pubimbue forbidden to call imbue",
    "LWG624": "valarray assignment and arrays of unequal length",
    "LWG625": "Mixed up Effects and Returns clauses",
    "LWG626": "new Remark clauses not documented",
    "LWG627": "Low memory and exceptions",
    "LWG628": "Inconsistent definition of basic_regex constructor",
    "LWG629": "complex<T> insertion and locale dependence",
    "LWG630": "arrays of valarray",
    "LWG631": "conflicting requirements for BinaryPredicate",
    "LWG632": "Time complexity of size() for std::set",
    "LWG633": "Return clause mentions undefined \"type()\"",
    "LWG634": "allocator.address() doesn't work for types overloading operator&",
    "LWG635": "domain of allocator::address",
    "LWG636": "26.5.2.3 valarray::operator[]",
    "LWG637": "\u00a7[c.math]/10 inconsistent return values",
    "LWG638": "deque end invalidation during erase",
    "LWG639": "Still problems with exceptions during streambuf IO",
    "LWG640": "27.6.2.5.2 does not handle (unsigned) long long",
    "LWG641": "Editorial fix for 27.6.4 (N2134)",
    "LWG642": "Invalidated fstream footnotes in N2134",
    "LWG643": "Impossible \"as if\" clauses",
    "LWG644": "Possible typos in 'function' description",
    "LWG645": "Missing members in match_results",
    "LWG646": "const incorrect match_result members",
    "LWG647": "Inconsistent regex_search params",
    "LWG648": "regex_iterator c'tor needs clarification/editorial fix",
    "LWG649": "Several typos in regex_token_iterator constructors",
    "LWG650": "regex_token_iterator and const correctness",
    "LWG651": "Missing preconditions for regex_token_iterator c'tors",
    "LWG652": "regex_iterator and const correctness",
    "LWG653": "Library reserved names",
    "LWG654": "Missing IO roundtrip for random number engines",
    "LWG655": "Signature of generate_canonical not useful",
    "LWG656": "Typo in subtract_with_carry_engine declaration",
    "LWG657": "unclear requirement about header inclusion",
    "LWG658": "Two unspecified function comparators in [function.objects]",
    "LWG659": "istreambuf_iterator should have an operator->()",
    "LWG660": "Missing Bitwise Operations",
    "LWG661": "New 27.6.1.2.2 changes make special extractions useless",
    "LWG662": "Inconsistent handling of incorrectly-placed thousands separators",
    "LWG663": "Complexity Requirements",
    "LWG664": "do_unshift for codecvt<char, char, mbstate_t>",
    "LWG665": "do_unshift return value",
    "LWG666": "moneypunct::do_curr_symbol()",
    "LWG667": "money_get's widened minus sign",
    "LWG668": "money_get's empty minus sign",
    "LWG669": "Equivalent postive and negative signs in money_get",
    "LWG670": "money_base::pattern and space",
    "LWG671": "precision of hexfloat",
    "LWG672": "Swappable requirements need updating",
    "LWG673": "unique_ptr update",
    "LWG674": "shared_ptr interface changes for consistency with N1856",
    "LWG675": "Move assignment of containers",
    "LWG676": "Moving the unordered containers",
    "LWG677": "Weaknesses in seed_seq::randomize [rand.util.seedseq]",
    "LWG678": "Changes for [rand.req.eng]",
    "LWG679": "resize parameter by value",
    "LWG680": "move_iterator operator-> return",
    "LWG681": "Operator functions impossible to compare are defined in [re.submatch.op]",
    "LWG682": "basic_regex ctor takes InputIterator or ForwardIterator?",
    "LWG683": "regex_token_iterator summary error",
    "LWG684": "Unclear which members of match_results should be used in comparison",
    "LWG685": "reverse_iterator/move_iterator difference has invalid signatures",
    "LWG686": "unique_ptr and shared_ptr fail to specify non-convertibility to int for unspecified-bool-type",
    "LWG687": "shared_ptr conversion constructor not constrained",
    "LWG688": "reference_wrapper, cref unsafe, allow binding to rvalues",
    "LWG689": "reference_wrapper constructor overly constrained",
    "LWG690": "abs(long long) should return long long",
    "LWG691": "const_local_iterator cbegin, cend missing from TR1",
    "LWG692": "get_money and put_money should be formatted I/O functions",
    "LWG693": "std::bitset::all() missing",
    "LWG694": "std::bitset and long long",
    "LWG695": "ctype<char>::classic_table() not accessible",
    "LWG696": "istream::operator>>(int&) broken",
    "LWG697": "New <system_error> header leads to name clashes",
    "LWG698": "system_error needs const char* constructors",
    "LWG699": "N2111 changes min/max",
    "LWG700": "N1856 defines struct identity",
    "LWG701": "[tr1] assoc laguerre poly's",
    "LWG702": "[tr1] Restriction in associated Legendre functions",
    "LWG703": "map::at() need a complexity specification",
    "LWG704": "MoveAssignable requirement for container value type overly strict",
    "LWG705": "type-trait decay incompletely specified",
    "LWG706": "make_pair() should behave as make_tuple() wrt. reference_wrapper()",
    "LWG707": "null pointer constant for exception_ptr",
    "LWG708": "Locales need to be per thread and updated for POSIX changes",
    "LWG709": "char_traits::not_eof has wrong signature",
    "LWG710": "Missing postconditions",
    "LWG711": "Contradiction in empty shared_ptr",
    "LWG712": "seed_seq::size no longer useful",
    "LWG713": "sort() complexity is too lax",
    "LWG714": "search_n complexity is too lax",
    "LWG715": "minmax_element complexity is too lax",
    "LWG716": "Production in [re.grammar] not actually modified",
    "LWG717": "Incomplete valarray::operator[] specification in [valarray.access]",
    "LWG718": "basic_string is not a sequence",
    "LWG719": "std::is_literal type traits should be provided",
    "LWG720": "Omissions in constexpr usages",
    "LWG721": "wstring_convert inconsistensies",
    "LWG722": "Missing [c.math] functions nanf and nanl",
    "LWG723": "basic_regex should be moveable",
    "LWG724": "DefaultConstructible is not defined",
    "LWG725": "Optional sequence container requirements column label",
    "LWG726": "Missing regex_replace() overloads",
    "LWG727": "regex_replace() doesn't accept basic_strings with custom traits and allocators",
    "LWG728": "Problem in [rand.eng.mers]/6",
    "LWG729": "Problem in [rand.req.eng]/3",
    "LWG730": "Comment on [rand.req.adapt]/3 e)",
    "LWG731": "proposal for a customizable seed_seq",
    "LWG732": "Defect in [rand.dist.samp.genpdf]",
    "LWG733": "Comment on [rand.req.dist]/9",
    "LWG734": "Unnecessary restriction in [rand.dist.norm.chisq]",
    "LWG735": "Unfortunate naming",
    "LWG736": "Comment on [rand.dist.samp.discrete]",
    "LWG737": "Comment on [rand.dist.samp.pconst]",
    "LWG738": "Editorial issue in [rand.adapt.disc]/3",
    "LWG739": "Defect in [rand.util.canonical]/3",
    "LWG740": "Please remove *_ptr<T[N]>",
    "LWG741": "Const-incorrect get_deleter function for shared_ptr",
    "LWG742": "Enabling swap for proxy iterators",
    "LWG743": "rvalue swap for shared_ptr",
    "LWG744": "What is the lifetime of an exception pointed to by an exception_ptr?",
    "LWG745": "copy_exception API slices.",
    "LWG746": "current_exception may fail with bad_alloc",
    "LWG747": "We have 3 separate type traits to identify classes supporting no-throw operations",
    "LWG748": "The is_abstract type trait is defined by reference to 10.4.",
    "LWG749": "Currently has_nothrow_copy_constructor<T>::value is true if T has 'a' nothrow copy constructor.",
    "LWG750": "The current definition for is_convertible requires that the type be implicitly convertible, so explicit constructors are ignored.",
    "LWG751": "change pass-by-reference members of vector<bool> to pass-by-value?",
    "LWG752": "Allocator complexity requirement",
    "LWG753": "Move constructor in draft",
    "LWG754": "Ambiguous return clause for std::uninitialized_copy",
    "LWG755": "std::vector and std:string lack explicit shrink-to-fit operations",
    "LWG756": "Container adaptors push",
    "LWG757": "Typo in the synopsis of vector",
    "LWG758": "shared_ptr and nullptr",
    "LWG759": "A reference is not an object",
    "LWG760": "The emplace issue",
    "LWG761": "unordered_map needs an at() member function",
    "LWG762": "std::unique_ptr requires complete type?",
    "LWG763": "Renaming emplace() overloads",
    "LWG764": "equal_range on unordered containers should return a pair of local_iterators",
    "LWG765": "More on iterator validity",
    "LWG766": "Inconsistent exception guarantees between ordered and unordered associative containers",
    "LWG767": "Forwarding and backward compatibility",
    "LWG768": "Typos in [atomics]?",
    "LWG769": "std::function should use nullptr_t instead of \"unspecified-null-pointer-type\"",
    "LWG770": "std::function should use rvalue swap",
    "LWG771": "Impossible throws clause in [string.conversions]",
    "LWG772": "Impossible return clause in [string.conversions]",
    "LWG773": "issues with random",
    "LWG774": "Member swap undefined for most containers",
    "LWG775": "Tuple indexing should be unsigned?",
    "LWG776": "Undescribed assign function of std::array",
    "LWG777": "Atomics Library Issue",
    "LWG778": "std::bitset does not have any constructor taking a string literal",
    "LWG779": "Resolution of #283 incomplete",
    "LWG780": "std::merge() specification incorrect/insufficient",
    "LWG781": "std::complex should add missing C99 functions",
    "LWG782": "Extended seed_seq constructor is useless",
    "LWG783": "thread::id reuse",
    "LWG784": "unique_lock::release",
    "LWG785": "[tr1] Random Number Requirements in TR1",
    "LWG786": "Thread library timed waits, UTC and monotonic clocks",
    "LWG787": "complexity of binary_search",
    "LWG788": "Ambiguity in [istream.iterator]",
    "LWG789": "xor_combine_engine(result_type) should be explicit",
    "LWG790": "xor_combine::seed not specified",
    "LWG791": "piecewise_constant_distribution::densities has wrong name",
    "LWG792": "piecewise_constant_distribution is undefined for a range with just one endpoint",
    "LWG793": "discrete_distribution missing constructor",
    "LWG794": "piecewise_constant_distribution missing constructor",
    "LWG795": "general_pdf_distribution should be dropped",
    "LWG796": "ranlux48_base returns wrong value",
    "LWG797": "ranlux48 returns wrong value",
    "LWG798": "Refactoring of binders lead to interface breakage",
    "LWG799": "Mersenne twister equality overspecified",
    "LWG800": "Issues in 26.4.7.1 [rand.util.seedseq](6)",
    "LWG801": "tuple and pair trivial members",
    "LWG802": "knuth_b returns wrong value",
    "LWG803": "Simplification of seed_seq::seq_seq",
    "LWG804": "Some problems with classes error_code/error_condition",
    "LWG805": "posix_error::posix_errno concerns",
    "LWG806": "unique_ptr::reset effects incorrect, too permissive",
    "LWG807": "tuple construction should not fail unless its element's construction fails",
    "LWG808": "\u00a7[forward] incorrect redundant specification",
    "LWG809": "std::swap should be overloaded for array types",
    "LWG810": "Missing traits dependencies in operational semantics of extended manipulators",
    "LWG811": "pair of pointers no longer works with literal 0",
    "LWG812": "unsolicited multithreading considered harmful?",
    "LWG813": "\"empty\" undefined for shared_ptr",
    "LWG814": "vector<bool>::swap(reference, reference) not defined",
    "LWG815": "std::function and reference_closure do not use perfect forwarding",
    "LWG816": "Should bind()'s returned functor have a nofail copy ctor when bind() is nofail?",
    "LWG817": "bind needs to be moved",
    "LWG818": "wording for memory ordering",
    "LWG819": "rethrow_if_nested",
    "LWG820": "current_exception()'s interaction with throwing copy ctors",
    "LWG821": "Minor cleanup : unique_ptr",
    "LWG822": "Object with explicit copy constructor no longer CopyConstructible",
    "LWG823": "identity<void> seems broken",
    "LWG824": "rvalue ref issue with basic_string inserter",
    "LWG825": "Missing rvalues reference stream insert/extract operators?",
    "LWG826": "Equivalent of %'d, or rather, lack thereof?",
    "LWG827": "constexpr shared_ptr::shared_ptr()?",
    "LWG828": "Static initialization for std::mutex?",
    "LWG829": "current_exception wording unclear about exception type",
    "LWG830": "Incomplete list of char_traits specializations",
    "LWG831": "wrong type for not_eof()",
    "LWG832": "Applying constexpr to System error support",
    "LWG833": "Freestanding implementations header list needs review for C++0x",
    "LWG834": "unique_ptr::pointer requirements underspecified",
    "LWG835": "Tying two streams together (correction to DR 581)",
    "LWG836": "Effects of money_base::space and money_base::none on money_get",
    "LWG837": "basic_ios::copyfmt() overly loosely specified",
    "LWG838": "Can an end-of-stream iterator become a non-end-of-stream one?",
    "LWG839": "Maps and sets missing splice operation",
    "LWG840": "pair default template argument",
    "LWG841": "cstdint.syn inconsistent with C99",
    "LWG842": "ConstructibleAsElement and bit containers",
    "LWG843": "Reference Closure",
    "LWG844": "complex pow return type is ambiguous",
    "LWG845": "atomics cannot support aggregate initialization",
    "LWG846": "No definition for constructor",
    "LWG847": "string exception safety guarantees",
    "LWG848": "Missing std::hash specializations for std::bitset/std::vector<bool>",
    "LWG849": "missing type traits to compute root class and derived class of types in a class hierachy",
    "LWG850": "Should shrink_to_fit apply to std::deque?",
    "LWG851": "simplified array construction",
    "LWG852": "unordered containers begin(n) mistakenly const",
    "LWG853": "to_string needs updating with zero and one",
    "LWG854": "default_delete converting constructor underspecified",
    "LWG855": "capacity() and reserve() for deque?",
    "LWG856": "Removal of aligned_union",
    "LWG857": "condition_variable::time_wait return bool error prone",
    "LWG858": "Wording for Minimal Support for Garbage Collection",
    "LWG859": "Monotonic Clock is Conditionally Supported?",
    "LWG860": "Floating-Point State",
    "LWG861": "Incomplete specification of EqualityComparable for std::forward_list",
    "LWG862": "Impossible complexity for 'includes'",
    "LWG863": "What is the state of a stream after close() succeeds",
    "LWG864": "Defect in atomic wording",
    "LWG865": "More algorithms that throw away information",
    "LWG866": "Qualification of placement new-expressions",
    "LWG867": "Valarray and value-initialization",
    "LWG868": "Default construction and value-initialization",
    "LWG869": "Bucket (local) iterators and iterating past end",
    "LWG870": "Do unordered containers not support function pointers for predicate/hasher?",
    "LWG871": "Iota's requirements on T are too strong",
    "LWG872": "move_iterator::operator[] has wrong return type",
    "LWG873": "signed integral type and unsigned integral type are not clearly defined",
    "LWG874": "Missing initializer_list constructor for discrete_distribution",
    "LWG875": "Missing initializer_list constructor for piecewise_constant_distribution",
    "LWG876": "basic_string access operations should give stronger guarantees",
    "LWG877": "to throw() or to Throw: Nothing.",
    "LWG878": "forward_list preconditions",
    "LWG879": "Atomic load const qualification",
    "LWG880": "Missing atomic exchange parameter",
    "LWG881": "shared_ptr conversion issue",
    "LWG882": "duration non-member arithmetic requirements",
    "LWG883": "swap circular definition",
    "LWG884": "shared_ptr swap",
    "LWG885": "pair assignment",
    "LWG886": "tuple construction",
    "LWG887": "issue with condition::wait_...",
    "LWG888": "this_thread::yield too strong",
    "LWG889": "thread::id comparisons",
    "LWG890": "Improving <system_error> initialization",
    "LWG891": "std::thread, std::call_once issue",
    "LWG892": "Forward_list issues...",
    "LWG893": "std::mutex issue",
    "LWG894": "longjmp and destructors",
    "LWG895": "\"Requires:\" on std::string::at et al",
    "LWG896": "Library thread safety issue",
    "LWG897": "Forward_list issues... Part 2",
    "LWG898": "Small contradiction in n2723 to forward to committee",
    "LWG899": "Adjusting shared_ptr for nullptr_t",
    "LWG900": "Stream move-assignment",
    "LWG901": "insert iterators can move from lvalues",
    "LWG902": "Regular is the wrong concept to constrain numeric_limits",
    "LWG903": "back_insert_iterator issue",
    "LWG904": "result_of argument types",
    "LWG905": "Mutex specification questions",
    "LWG906": "ObjectType is the wrong concept to constrain initializer_list",
    "LWG907": "Bitset's immutable element retrieval is inconsistently defined",
    "LWG908": "Deleted assignment operators for atomic types must be volatile",
    "LWG909": "regex_token_iterator should use initializer_list",
    "LWG910": "Effects of MoveAssignable",
    "LWG911": "I/O streams and move/swap semantic",
    "LWG912": "Array swap needs to be conceptualized",
    "LWG913": "Superfluous requirements for replace algorithms",
    "LWG914": "Superfluous requirement for unique",
    "LWG915": "minmax with initializer_list should return pair of T, not pair of const T&",
    "LWG916": "Redundant move-assignment operator of pair should be removed",
    "LWG917": "Redundant move-assignment operator of tuple should be removed",
    "LWG918": "Swap for tuple needs to be conceptualized",
    "LWG919": "(forward_)list specialized remove algorithms are over constrained",
    "LWG920": "Ref-qualification support in the library",
    "LWG921": "Rational Arithmetic should use template aliases",
    "LWG922": "\u00a7[func.bind.place] Number of placeholders",
    "LWG923": "atomics with floating-point",
    "LWG924": "structs with internal padding",
    "LWG925": "shared_ptr's explicit conversion from unique_ptr",
    "LWG926": "Sequentially consistent fences, relaxed operations and modification order",
    "LWG927": "Dereferenceable should be HasDereference",
    "LWG928": "Wrong concepts used for tuple's comparison operators",
    "LWG929": "Thread constructor",
    "LWG930": "Access to std::array data as built-in array type",
    "LWG931": "type trait extent<T, I>",
    "LWG932": "unique_ptr(pointer p) for pointer deleter types",
    "LWG933": "Unique_ptr defect",
    "LWG934": "duration is missing operator%",
    "LWG935": "clock error handling needs to be specified",
    "LWG936": "Mutex type overspecified",
    "LWG937": "Atomics for standard typedef types",
    "LWG938": "default_delete<T[]>::operator() should only accept T*",
    "LWG939": "Problem with std::identity and reference-to-temporaries",
    "LWG940": "std::distance",
    "LWG941": "Ref-qualifiers for assignment operators",
    "LWG942": "Atomics synopsis typo",
    "LWG943": "ssize_t undefined",
    "LWG944": "atomic<bool> derive from atomic_bool?",
    "LWG945": "system_clock::rep not specified",
    "LWG946": "duration_cast improperly specified",
    "LWG947": "duration arithmetic: contradictory requirements",
    "LWG948": "ratio arithmetic tweak",
    "LWG949": "owner_less",
    "LWG950": "unique_ptr converting ctor shouldn't accept array form",
    "LWG951": "Various threading bugs #1",
    "LWG952": "Various threading bugs #2",
    "LWG953": "Various threading bugs #3",
    "LWG954": "Various threading bugs #4",
    "LWG955": "Various threading bugs #5",
    "LWG956": "Various threading bugs #6",
    "LWG957": "Various threading bugs #7",
    "LWG958": "Various threading bugs #8",
    "LWG959": "Various threading bugs #9",
    "LWG960": "Various threading bugs #10",
    "LWG961": "Various threading bugs #11",
    "LWG962": "Various threading bugs #12",
    "LWG963": "Various threading bugs #13",
    "LWG964": "Various threading bugs #14",
    "LWG965": "Various threading bugs #15",
    "LWG966": "Various threading bugs #16",
    "LWG967": "Various threading bugs #17",
    "LWG968": "Various threading bugs #18",
    "LWG969": "What happened to Library Issue 475?",
    "LWG970": "addressof overload unneeded",
    "LWG971": "Spurious diagnostic conversion function",
    "LWG972": "The term \"Assignable\" undefined but still in use",
    "LWG973": "auto_ptr characteristics",
    "LWG974": "duration<double> should not implicitly convert to duration<int>",
    "LWG975": "is_convertible cannot be instantiated for non-convertible types",
    "LWG976": "Class template std::stack should be movable",
    "LWG977": "insert iterators inefficient for expensive to move types",
    "LWG978": "Hashing smart pointers",
    "LWG979": "Bad example",
    "LWG980": "mutex lock() missing error conditions",
    "LWG981": "Unordered container requirements should add initializer_list support",
    "LWG982": "Wrong complexity for initializer_list assignment in Table 85",
    "LWG983": "unique_ptr reference deleters should not be moved from",
    "LWG984": "Does <cinttypes> have macro guards?",
    "LWG985": "Allowing throwing move",
    "LWG986": "Generic try_lock contradiction",
    "LWG987": "reference_wrapper and function types",
    "LWG988": "Reflexivity meaningless?",
    "LWG989": "late_check and library",
    "LWG990": "monotonic_clock::is_monotonic must be true",
    "LWG991": "Provide allocator for wstring_convert",
    "LWG992": "Allow implementations to implement C library in the global namespace",
    "LWG993": "_Exit needs better specification",
    "LWG994": "quick_exit should terminate well-defined",
    "LWG995": "Operational Semantics Unclear",
    "LWG996": "Move operation not well specified",
    "LWG997": "\"Effects: Equivalent to\" is underspecified",
    "LWG998": "Smart pointer referencing its owner",
    "LWG999": "Taking the address of a function",
    "LWG1000": "adjacent_find is over-constrained",
    "LWG1001": "Pointers, concepts and headers",
    "LWG1002": "Provide bulk include headers",
    "LWG1003": "Require more useful headers for freestanding implementations",
    "LWG1004": "Clarify \"throws an exception\"",
    "LWG1005": "numeric_limits partial specializations not concept enabled",
    "LWG1006": "operator delete in garbage collected implementation",
    "LWG1007": "throw_with_nested not concept enabled",
    "LWG1008": "nested_exception wording unclear",
    "LWG1009": "InputIterator post-increment dangerous",
    "LWG1010": "operator-= should use default in concept",
    "LWG1011": "next/prev wrong iterator type",
    "LWG1012": "reverse_iterator default ctor should value initialize",
    "LWG1013": "Remove IsSameType hold-over constraints",
    "LWG1014": "basic_regex should be created/assigned from initializer lists",
    "LWG1015": "C++ programs - but not users - need to provide support concept_maps",
    "LWG1016": "Provide LessThanComparable and EqualityComparable for FloatingPointType",
    "LWG1017": "Floating-point types should not satisfy Regular",
    "LWG1018": "Trait specifications should be expressed in terms of concepts",
    "LWG1019": "Make integral_constant objects useable in integral-constant-expressions",
    "LWG1020": "Restore aligned_union",
    "LWG1021": "Allow nullptr_t assignments to unique_ptr",
    "LWG1022": "Pointer-safety API has nothing to do with smart pointers",
    "LWG1023": "Unclear inheritance relation for std::function",
    "LWG1024": "std::function constructors overly generous",
    "LWG1025": "The library should provide more specializations for std::hash",
    "LWG1026": "Smart pointers need to be concept-constrained templates",
    "LWG1027": "std::allocator needs to be a concept-constrained template",
    "LWG1028": "raw_storage_iterator needs to be a concept-constrained template",
    "LWG1029": "Specialized algorithms for memory management need to be concept-constrained templates",
    "LWG1030": "Missing requirements for smart-pointer safety API",
    "LWG1031": "Need shared_ptr conversion to a unique_ptr",
    "LWG1032": "Tome utility templates need to be concept-constrained",
    "LWG1033": "thread::join() effects?",
    "LWG1034": "Clarify generality of Container Requirement tables",
    "LWG1035": "<array>::swap can invalidate references, pointers, and iterators",
    "LWG1036": "Remove iterator specification that is redundant due to concept constraints",
    "LWG1037": "Unclear status of match_results as library container",
    "LWG1038": "Sequence requirement table needs to reference several new containers",
    "LWG1039": "Sequence container back function should also support const_iterator",
    "LWG1040": "Clarify possible sameness of associative container's iterator and const_iterator",
    "LWG1041": "Add associative/unordered container functions that allow to extract elements",
    "LWG1042": "Provide ContiguousStorage concept and apply it to corresponding containers",
    "LWG1043": "Clarify that compare_exchange is not a read-modify-write operation",
    "LWG1044": "Empty tag types should be constexpr literals",
    "LWG1045": "Remove unnecessary preconditions from unique_lock constructor",
    "LWG1046": "Provide simple facility to start asynchronous operations",
    "LWG1047": "Ensure that future's get() blocks when not ready",
    "LWG1048": "Provide empty-state inspection for std::unique_future",
    "LWG1049": "Move assignment of promise inverted",
    "LWG1050": "Clarify postconditions for get_future()",
    "LWG1051": "Specify subscript operation return types of reverse_iterator and move_iterator",
    "LWG1052": "reverse_iterator::operator-> should also support smart pointers",
    "LWG1053": "Unify algorithms with operator and function object variants",
    "LWG1054": "forward broken",
    "LWG1055": "Provide a trait that returns the underlying type of an enumeration type",
    "LWG1056": "Must all Engines and Distributions be Streamable?",
    "LWG1057": "RandomNumberEngineAdaptor",
    "LWG1058": "New container issue",
    "LWG1059": "Usage of no longer existing FunctionType concept",
    "LWG1060": "Embedded nulls in NTBS",
    "LWG1061": "Bad indexing for tuple access to pair (Editorial?)",
    "LWG1062": "Missing insert_iterator for stacks/queues",
    "LWG1063": "03 iterator compatibilty",
    "LWG1064": "Term \"object state\" should not refer to classes",
    "LWG1065": "Allow inline namespaces within namespace std for implementations",
    "LWG1066": "Use [[noreturn]] attribute in the library",
    "LWG1067": "simplified wording for inner_product",
    "LWG1068": "class random_device should be movable",
    "LWG1069": "class seed_seq should support efficient move operations",
    "LWG1070": "Ambiguous move overloads in function",
    "LWG1071": "is_bind_expression should derive from integral_constant<bool>",
    "LWG1072": "Is std::hash a constrained template or not?",
    "LWG1073": "Declaration of allocator_arg should be constexpr",
    "LWG1074": "concept map broken by N2840",
    "LWG1075": "Scoped allocators are too complex",
    "LWG1076": "unary/binary_negate need constraining and move support",
    "LWG1077": "Nonesense tuple declarations",
    "LWG1078": "DE-17: Remove class type_index",
    "LWG1079": "UK-265: RandomAccessIterator's operator- has nonsensical effects clause",
    "LWG1080": "Concept ArithmeticLike should provide explicit boolean conversion",
    "LWG1081": "basic_string needs to be a concept-constrained template",
    "LWG1082": "codecvt needs to be a concept-constrained template",
    "LWG1083": "InputIterator and OutputIterator template parameters need to be concept constraints",
    "LWG1084": "Concept ForwardIterator should provide default implementation for post-increment",
    "LWG1085": "BidirectionalIterator concept should provide default implementation for post-decrement",
    "LWG1086": "Stream iterators need to be concept-constrained templates",
    "LWG1087": "Incorrect OutputIterator concept requirements for replace algorithms",
    "LWG1088": "std::promise should provide non-member swap overload",
    "LWG1089": "Unify \"Throws: Nothing.\" specifications",
    "LWG1090": "Missing description of packaged_task member swap, missing non-member swap",
    "LWG1091": "Multimap description confusing",
    "LWG1092": "Class template integral_constant should be a constrained template",
    "LWG1093": "Multiple definitions for random_shuffle algorithm",
    "LWG1094": "Replace \"unspecified-bool-type\" by \"explicit operator bool() const\" in I/O library",
    "LWG1095": "Shared objects and the library wording unclear",
    "LWG1096": "unconstrained rvalue ref parameters",
    "LWG1097": "#define __STDCPP_THREADS",
    "LWG1098": "definition of get_pointer_safety()",
    "LWG1099": "Various issues",
    "LWG1100": "auto_ptr to unique_ptr conversion",
    "LWG1101": "unique requirements",
    "LWG1102": "std::vector's reallocation policy still unclear",
    "LWG1103": "system_error constructor postcondition overly strict",
    "LWG1104": "basic_ios::move should accept lvalues",
    "LWG1105": "Shouldn't Range be an auto concept",
    "LWG1106": "Multiple exceptions from connected shared_future::get()?",
    "LWG1107": "constructor shared_future(unique_future) by value?",
    "LWG1108": "thread.req.exception overly constrains implementations",
    "LWG1109": "std::includes should require CopyConstructible predicate",
    "LWG1110": "Is for_each overconstrained?",
    "LWG1111": "associative containers underconstrained",
    "LWG1112": "bitsets and new style for loop",
    "LWG1113": "bitset::to_string could be simplified",
    "LWG1114": "Type traits underspecified",
    "LWG1115": "va_copy missing from Standard macros table",
    "LWG1116": "Literal constructors for tuple",
    "LWG1117": "tuple copy constructor",
    "LWG1118": "tuple query APIs do not support cv-qualification",
    "LWG1119": "tuple query APIs do not support references",
    "LWG1120": "New type trait - remove_all",
    "LWG1121": "Support for multiple arguments",
    "LWG1122": "Ratio values should be constexpr",
    "LWG1123": "No requirement that standard streams be flushed",
    "LWG1124": "Invalid definition of concept RvalueOf",
    "LWG1125": "ostream_iterator does not work with movable types",
    "LWG1126": "istreambuff_iterator::equal needs a const & parameter",
    "LWG1127": "rvalue references and iterator traits",
    "LWG1128": "Missing definition of iterator_traits<T*>",
    "LWG1129": "istream(buf)_iterator should support literal sentinel value",
    "LWG1130": "copy_exception name misleading",
    "LWG1131": "C++0x does not need alignment_of",
    "LWG1132": "JP-30: nested exceptions",
    "LWG1133": "Does N2844 break current specification of list::splice?",
    "LWG1134": "Redundant specification of <stdint.h>, <fenv.h>, <tgmath.h>, and maybe <complex.h>",
    "LWG1135": "exception_ptr should support contextual conversion to bool",
    "LWG1136": "Incomplete specification of nested_exception::rethrow_nested()",
    "LWG1137": "Return type of conj and proj",
    "LWG1138": "Unusual return value for operator+",
    "LWG1139": "Thread support library not concept enabled",
    "LWG1140": "Numerics library not concept enabled",
    "LWG1141": "Input/Output library not concept enabled",
    "LWG1142": "Regular expressions library not concept enabled",
    "LWG1143": "Atomic operations library not concept enabled",
    "LWG1144": "\"thread safe\" is undefined",
    "LWG1145": "Inappropriate headers for atomics",
    "LWG1146": "\"lockfree\" does not say enough",
    "LWG1147": "Non-volatile atomic functions",
    "LWG1148": "Wrong argument type of I/O stream manipulators setprecision() and setw()",
    "LWG1149": "Reformulating NonemptyRange axiom",
    "LWG1150": "wchar_t, char16_t and char32_t filenames",
    "LWG1151": "Behavior of the library in the presence of threads is incompletely specified",
    "LWG1152": "Expressions parsed differently than intended",
    "LWG1153": "Standard library needs review for constructors to be explicit to avoid treatment as initializer-list constructor",
    "LWG1154": "complex should accept integral types",
    "LWG1155": "Reference should be to C99",
    "LWG1156": "Constraints on bitmask and enumeration types to be tightened",
    "LWG1157": "Local types can now instantiate templates",
    "LWG1158": "Encouragement to use monotonic clock",
    "LWG1159": "Unclear spec for resource_deadlock_would_occur",
    "LWG1160": "future_error public constructor is 'exposition only'",
    "LWG1161": "Unnecessary unique_future limitations",
    "LWG1162": "shared_future should support an efficient move constructor",
    "LWG1163": "shared_future is inconsistent with shared_ptr",
    "LWG1164": "promise::swap should pass by rvalue reference",
    "LWG1165": "Unneeded promise move constructor",
    "LWG1166": "Allocator-specific move/copy break model of move-constructor and move-assignment",
    "LWG1167": "pair<T,U> doesn't model LessThanComparable in unconstrained code even if T and U do.",
    "LWG1168": "Odd wording for bitset equality operators",
    "LWG1169": "num_get not fully compatible with strto*",
    "LWG1170": "String char-like types no longer PODs",
    "LWG1171": "duration types should be literal",
    "LWG1172": "select_on_container_(copy|move)_construction over-constrained",
    "LWG1173": "\"Equivalence\" wishy-washiness",
    "LWG1174": "Type property predicates",
    "LWG1175": "unordered complexity",
    "LWG1176": "Make thread constructor non-variadic",
    "LWG1177": "Improve \"diagnostic required\" wording",
    "LWG1178": "Header dependencies",
    "LWG1179": "Probably editorial in [structure.specifications]",
    "LWG1180": "Missing string_type member typedef in class sub_match",
    "LWG1181": "Invalid sub_match comparison operators",
    "LWG1182": "Unfortunate hash dependencies",
    "LWG1183": "basic_ios::set_rdbuf may break class invariants",
    "LWG1184": "Feature request: dynamic bitset",
    "LWG1185": "Iterator categories and output iterators",
    "LWG1186": "Forward list could model a stack",
    "LWG1187": "std::decay",
    "LWG1188": "Unordered containers should have a minimum load factor as well as a maximum",
    "LWG1189": "Awkward interface for changing the number of buckets in an unordered associative container",
    "LWG1190": "Setting the maximum load factor should return the previous value",
    "LWG1191": "tuple get API should respect rvalues",
    "LWG1192": "basic_string missing definitions for cbegin / cend / crbegin / crend",
    "LWG1193": "default_delete cannot be instantiated with incomplete types",
    "LWG1194": "Unintended queue constructor",
    "LWG1195": "\"Diagnostic required\" wording is insufficient to prevent UB",
    "LWG1196": "move semantics undefined for priority_queue",
    "LWG1197": "Can unordered containers have bucket_count() == 0?",
    "LWG1198": "Container adaptor swap: member or non-member?",
    "LWG1199": "Missing extended copy constructor in container adaptors",
    "LWG1200": "\"surprising\" char_traits<T>::int_type requirements",
    "LWG1201": "Do we always want to unwrap ref-wrappers in make_tuple",
    "LWG1202": "integral_constant needs a spring clean",
    "LWG1203": "More useful rvalue stream insertion",
    "LWG1204": "Global permission to move",
    "LWG1205": "Some algorithms could more clearly document their handling of empty ranges",
    "LWG1206": "Incorrect requires for move_backward and copy_backward",
    "LWG1207": "Underspecified std::list operations?",
    "LWG1208": "valarray initializer_list constructor has incorrect effects",
    "LWG1209": "match_results should be moveable",
    "LWG1210": "Iterator reachability should not require a container",
    "LWG1211": "Move iterators should be restricted as input iterators",
    "LWG1212": "result of post-increment/decrement operator",
    "LWG1213": "Meaning of valid and singular iterator underspecified",
    "LWG1214": "Insufficient/inconsistent key immutability requirements for associative containers",
    "LWG1215": "list::merge with unequal allocators",
    "LWG1216": "LWG 1066 Incomplete?",
    "LWG1217": "Quaternion support",
    "LWG1218": "mutex destructor synchronization",
    "LWG1219": "unique_lock::lock and resource_deadlock_would_occur",
    "LWG1220": "What does condition_variable wait on?",
    "LWG1221": "condition_variable wording",
    "LWG1222": "condition_variable incorrect effects for exception safety",
    "LWG1223": "condition_variable_any lock matching?",
    "LWG1224": "condition_variable_any support for recursive mutexes?",
    "LWG1225": "C++0x result_of issue",
    "LWG1226": "Incomplete changes of #890",
    "LWG1227": "<bitset> synopsis overspecified",
    "LWG1228": "User-specialized nothrow type traits",
    "LWG1229": "error_code operator= typo",
    "LWG1230": "mem_fn and variadic templates",
    "LWG1231": "weak_ptr comparisons incompletely resolved",
    "LWG1232": "Still swap's with rvalue-references",
    "LWG1233": "Missing unique_ptr signatures in synopsis",
    "LWG1234": "\"Do the right thing\" and NULL",
    "LWG1235": "Issue with C++0x random number proposal",
    "LWG1236": "reserved identifiers in programs not using the library",
    "LWG1237": "Constrained error_code/error_condition members",
    "LWG1238": "Defining algorithms taking iterator for range",
    "LWG1239": "Defect report",
    "LWG1240": "Deleted comparison functions of std::function not needed",
    "LWG1241": "unique_copy needs to require EquivalenceRelation",
    "LWG1242": "Enable SCARY iterators",
    "LWG1243": "Missing operator+= (initializer_list<T>) for valarray",
    "LWG1244": "wait_*() in *future for synchronous functions",
    "LWG1245": "std::hash<string> & co",
    "LWG1246": "vector::resize() missing efficiency guarantee",
    "LWG1247": "auto_ptr is overspecified",
    "LWG1248": "Equality comparison for unordered containers",
    "LWG1249": "basic_ios default ctor",
    "LWG1250": "<bitset> still overspecified",
    "LWG1251": "move constructing basic_stringbuf",
    "LWG1252": "wbuffer_convert::state_type inconsistency",
    "LWG1253": "invalidation of iterators and emplace vs. insert inconsistence in assoc. containers",
    "LWG1254": "Misleading sentence in vector<bool>::flip",
    "LWG1255": "declval should be added to the library",
    "LWG1256": "weak_ptr comparison functions should be removed",
    "LWG1257": "Header <ios> still contains a concept_map",
    "LWG1258": "std::function Effects clause impossible to satisfy",
    "LWG1259": "Should initializer-list constructors move elements?",
    "LWG1260": "is_constructible<int*,void*> reports true",
    "LWG1261": "Insufficent overloads for to_string / to_wstring",
    "LWG1262": "std::less<std::shared_ptr<T>> is underspecified",
    "LWG1263": "missing swap overloads for regex",
    "LWG1264": "quick_exit support for freestanding implementations",
    "LWG1265": "longjmp and destructors",
    "LWG1266": "shared_future::get and deferred async functions",
    "LWG1267": "Incorrect wording for condition_variable_any::wait_for",
    "LWG1268": "The Mutex requirements in 30.4.1 and 30.4.2 are wrong",
    "LWG1269": "Associated state doesn't account for async",
    "LWG1270": "result_of should be moved to <type_traits>",
    "LWG1271": "CR undefined in duration operators",
    "LWG1272": "confusing declarations of promise::set_value",
    "LWG1273": "future::valid should be callable on an invalid future",
    "LWG1274": "atomic_future constructor",
    "LWG1275": "Creating and setting futures",
    "LWG1276": "forwardlist missing allocator constructors",
    "LWG1277": "std::thread::id should be trivially copyable",
    "LWG1278": "Inconsistent return values for forward_list::insert_after",
    "LWG1279": "forbid [u|bi]nary_function specialization",
    "LWG1280": "Initialization of stream iterators",
    "LWG1281": "CopyConstruction and Assignment between ratios having the same normalized form",
    "LWG1282": "A proposal to add std::split algorithm",
    "LWG1283": "MoveConstructible and MoveAssignable need clarification of moved-from state",
    "LWG1284": "vector<bool> initializer_list constructor missing an allocator argument",
    "LWG1285": "allocator_traits call to new",
    "LWG1286": "allocator_traits::select_on_container_copy_construction type-o",
    "LWG1287": "std::function requires CopyConstructible target object",
    "LWG1288": "std::function assignment from rvalues",
    "LWG1289": "Generic casting requirements for smart pointers",
    "LWG1290": "Don't require [u|bi]nary_function inheritance",
    "LWG1291": "Exceptions thrown during promise::set_value",
    "LWG1292": "std::function should support all callable types",
    "LWG1293": "unique_ptr<T[], D> needs to get rid of unspecified-pointer-type",
    "LWG1294": "Difference between callable wrapper and forwarding call wrapper unclear",
    "LWG1295": "Contradictory call wrapper requirements",
    "LWG1296": "map and multimap value_compare overspecified",
    "LWG1297": "unique_ptr's relational operator functions should induce a total order",
    "LWG1298": "Missing specialization of ctype_byname<char>",
    "LWG1299": "Confusing typo in specification for get_time",
    "LWG1300": "Circular definition of promise::swap",
    "LWG1301": "clear() and assignment",
    "LWG1302": "different emplace semantics for sequence and associated containers",
    "LWG1303": "shared_ptr, unique_ptr, and rvalue references v2",
    "LWG1304": "Missing preconditions for shared_future",
    "LWG1305": "preconditions for atomic_future",
    "LWG1306": "pointer and const_pointer for <array>",
    "LWG1307": "exception_ptr and allocator pointers don't understand !=",
    "LWG1308": "Concerns about initializer_list overloads of min, max, and minmax",
    "LWG1309": "Missing expressions for Move/CopyConstructible",
    "LWG1310": "forward_list splice_after from lvalues",
    "LWG1311": "multi-pass property of Forward Iterator underspecified",
    "LWG1312": "vector::data no longer returns a raw pointer",
    "LWG1313": "Seed sequence's param function not useful for pure output iterator",
    "LWG1314": "NULL and nullptr",
    "LWG1315": "return type of async",
    "LWG1316": "scoped_allocator_adaptor operator== has no definition",
    "LWG1317": "make_hash",
    "LWG1318": "N2982 removes previous allocator capabilities",
    "LWG1319": "Containers should require an iterator that is at least a Forward Iterator",
    "LWG1320": "Header for iter_swap",
    "LWG1321": "scoped_allocator_adaptor construct and destroy don't use allocator_traits",
    "LWG1322": "Explicit CopyConstructible requirements are insufficient",
    "LWG1323": "basic_string::replace should use const_iterator",
    "LWG1324": "Still too many implicit conversions for pair and tuple",
    "LWG1325": "bitset",
    "LWG1326": "Missing/wrong preconditions for pair and tuple functions",
    "LWG1327": "templates defined in <cmath> replacing C macros with the same name",
    "LWG1328": "istream extractors not setting failbit if eofbit is already set",
    "LWG1329": "Data races on vector<bool>",
    "LWG1330": "Move container requirements into requirements tables",
    "LWG1331": "incorporate move special member functions into library",
    "LWG1332": "Let Hash objects throw!",
    "LWG1333": "Missing forwarding during std::function invocation",
    "LWG1334": "Insert iterators are broken for some proxy containers compared to C++03",
    "LWG1335": "Insufficient requirements for tuple::operator<()",
    "LWG1337": "Swapped arguments in regex_traits::isctype",
    "LWG1338": "LWG 1205 incorrectly applied",
    "LWG1339": "uninitialized_fill_n should return the end of its range",
    "LWG1340": "Why does forward_list::resize take the object to be copied by value?",
    "LWG1344": "Replace throw() with noexcept",
    "LWG1345": "Library classes should have noexcept move operations",
    "LWG1346": "Apply noexcept where library specification does not permit exceptions",
    "LWG1347": "Apply noexcept judiciously throughout the library",
    "LWG1348": "Exception safety of unspecified types",
    "LWG1349": "swap should not throw",
    "LWG1350": "Implicit contructors accidentally made some library types move-only",
    "LWG1351": "Replace dynamic exception specifications with noexcept",
    "LWG1352": "Apply noexcept where library specification says \"Throws: Nothing\"",
    "LWG1353": "Clarify the state of a moved-from object",
    "LWG1354": "The definition of deadlock excludes cases involving a single thread",
    "LWG1355": "The definition of move-assignment operator is redundant",
    "LWG1356": "The definition of move-constructor is redundant",
    "LWG1357": "Library bitmask types to not satisfy the bimask type requirements",
    "LWG1358": "Add <chrono> and <ratio> to freestanding implementations",
    "LWG1359": "Add <tuple> and <utility> to freestanding implementations",
    "LWG1360": "Add <atomic> to free-standing implementations",
    "LWG1361": "Does use of std::size_t in a header imply that typedef name is available to users?",
    "LWG1362": "Description of binding to rvalue-references should use the new 'xvalue' vocabulary",
    "LWG1363": "offsetof should be marked noexcept",
    "LWG1364": "It is not clear how exception_ptr is synchronized",
    "LWG1365": "Thread-safety of handler functions",
    "LWG1366": "New-handler and data races",
    "LWG1367": "Deprecate library support for checking dynamic exception specifications",
    "LWG1368": "Thread safety of std::uncaught_exception()",
    "LWG1369": "rethrow_exception may introduce data races",
    "LWG1370": "throw_with_nested should not use perfect forwarding",
    "LWG1371": "Standard exceptions require stronger no-throw guarantees",
    "LWG1372": "Adopt recommended practice for standard error categories",
    "LWG1373": "Customizable traits should have their own headers",
    "LWG1374": "Clarify moved-from objects are \"toxic\"",
    "LWG1375": "reference_type should not have been removed from the allocator requirements",
    "LWG1376": "Allocator interface is not backward compatible",
    "LWG1377": "The revised forward is not compatible with access-control",
    "LWG1378": "pair and tuple have too many conversions",
    "LWG1379": "pair copy-assignment not consistent for references",
    "LWG1380": "pair and tuple of references need to better specify move-semantics",
    "LWG1381": "Replace pair's range support by proper range facility",
    "LWG1382": "pair and tuple constructors should forward arguments",
    "LWG1383": "Inconsistent defaulted move/copy members in pair and tuple",
    "LWG1384": "Function pack_arguments is poorly named",
    "LWG1385": "tuple_cat should be a single variadic signature",
    "LWG1386": "pack_arguments overly complex",
    "LWG1387": "Range support by tuple should be removed",
    "LWG1388": "LWG 1281 incorrectly accepted",
    "LWG1389": "Compile-time rational arithmetic and overflow",
    "LWG1390": "Limit speculative compilation for constructible/convertible traits",
    "LWG1391": "constructible/convertible traits and access control",
    "LWG1392": "result_of should support pointer-to-data-member",
    "LWG1393": "Trivial traits imply noexcept",
    "LWG1394": "is_constructible reports false positives",
    "LWG1395": "Inconsistent reference links should be unified",
    "LWG1396": "regex should support allocators",
    "LWG1397": "Deprecate '98 binders",
    "LWG1398": "Users should be able to specialize functors without depending on whole <functional> header",
    "LWG1399": "function does not need an explicit default constructor",
    "LWG1400": "FCD function does not need an explicit default constructor",
    "LWG1401": "Provide support for unique_ptr<T> == nullptr",
    "LWG1402": "nullptr constructors for smart pointers should be constexpr",
    "LWG1403": "Inconsistent definitions for allocator_arg",
    "LWG1404": "pointer_traits should have a size_type member",
    "LWG1405": "Move scoped_allocator_adaptor into separate header",
    "LWG1406": "Support hashing smart-pointers based on owner",
    "LWG1407": "Synch shared_ptr constructors taking movable types",
    "LWG1408": "Allow recycling of pointers after undeclare_no_pointers",
    "LWG1409": "Specify whether monotonic_clock is a distinct type or a typedef",
    "LWG1410": "Add a feature-detect macro for monotonic_clock",
    "LWG1411": "Add a compile-time flag to detect monotonic_clock",
    "LWG1412": "Make monotonic clocks mandatory",
    "LWG1413": "Specify whether high_resolution_clock is a distinct type or a typedef",
    "LWG1414": "Fixing remaining dead links to POS_T and OFF_T",
    "LWG1415": "Iterator stability bans the short-string optimization",
    "LWG1416": "forward_list::erase_after should not be allowed to throw",
    "LWG1417": "front/back on a zero-sized array should be undefined",
    "LWG1418": "Effects of resize(size()) on a deque",
    "LWG1419": "forward_list::erase_after should return an iterator",
    "LWG1420": "Effects of resize(size()) on a list",
    "LWG1421": "Accidental move-only library types due to new core language rules",
    "LWG1422": "vector<bool> iterators are not random access",
    "LWG1423": "map constructor accepting an allocator as single parameter should be explicit",
    "LWG1424": "multimap constructor accepting an allocator as a single parameter should be explicit",
    "LWG1425": "set constructor accepting an allocator as a single parameter should be explicit",
    "LWG1426": "multiset constructor accepting an allocator as a single parameter should be explicit",
    "LWG1427": "unordered_map constructor accepting an allocator as a single parameter should be explicit",
    "LWG1428": "unordered_multimap constructor accepting an allocator as a single parameter should be explicit",
    "LWG1429": "unordered_set constructor accepting an allocator as a single parameter should be explicit",
    "LWG1430": "unordered_multiset constructor accepting an allocator as a single parameter should be explicit",
    "LWG1431": "is_permutation must be more restrictive",
    "LWG1432": "random_shuffle signatures are inconsistent",
    "LWG1433": "random_shuffle and shuffle should have consistent signatures",
    "LWG1434": "For min/max functions replace variadic arguments by initializer_list argument",
    "LWG1435": "Unclear returns specifications for C99 complex number functions",
    "LWG1436": "Random number engine constructor concerns",
    "LWG1437": "Mersenne twister meaningless for word sizes less than two",
    "LWG1438": "No definition for base()",
    "LWG1439": "Return from densities() functions?",
    "LWG1440": "Incorrect specification for piecewise_linear_distribution",
    "LWG1441": "Floating-point test functions are incorrectly specified",
    "LWG1442": "\"happens-before\" should be \"synchronizes-with\"",
    "LWG1443": "Imposed happens-before edges are not made transitive",
    "LWG1444": "OFF_T is not defined",
    "LWG1445": "Several iostreams member functions incorrectly specified",
    "LWG1446": "Move and swap for I/O streams",
    "LWG1447": "Request to resolve issue LWG 1328",
    "LWG1448": "Concerns about basic_stringbuf::str(basic_string) postconditions",
    "LWG1449": "Incomplete specification of header <cinttypes>",
    "LWG1450": "Contradiction in regex_constants",
    "LWG1451": "regex should support allocators",
    "LWG1452": "\"target sequence\" is not defined",
    "LWG1453": "Default constructed match_results behavior for certain operations",
    "LWG1454": "Ensure C compatibility for atomics",
    "LWG1455": "C language compatibility for atomics",
    "LWG1456": "Missing fixed-size atomic_ typedefs",
    "LWG1457": "Splitting lock-free properties",
    "LWG1458": "Overlapping evaluations are allowed",
    "LWG1459": "Overlapping evaluations are allowed",
    "LWG1460": "Missing lock-free property for type bool should be added",
    "LWG1461": "Rename all ATOMIC_* macros as STD_ATOMIC_*",
    "LWG1462": "Ambiguous value assignment to atomic_bool",
    "LWG1463": "Inconsistent value assignment for atomic_bool",
    "LWG1464": "Underspecified typedefs for atomic integral types",
    "LWG1465": "Missing arithmetic operators for atomic_address",
    "LWG1466": "Silent const breakage by compare_exchange_* member functions",
    "LWG1467": "Deriving atomic<T*> from atomic_address breaks type safety",
    "LWG1468": "atomic_address::compare_exchange_* member functions should match atomic_compare_exchange_* free functions",
    "LWG1469": "atomic<T*> inheritance from atomic_address breaks type safety",
    "LWG1470": "\"Same-ness\" curiosities",
    "LWG1471": "Default constructor of atomics needs specification",
    "LWG1472": "Incorrect semantics of atomic_init",
    "LWG1473": "Incomplete memory order specifications",
    "LWG1474": "weak compare-and-exchange confusion",
    "LWG1475": "weak compare-and-exchange confusion II",
    "LWG1476": "Meaningless specification of spurious failure",
    "LWG1477": "weak compare-and-exchange confusion III",
    "LWG1478": "Clarify race conditions in atomics initialization",
    "LWG1479": "Fence functions should be extern \"C\"",
    "LWG1480": "Atomic fences don't have synchronizes with relation",
    "LWG1481": "Missing Lockable requirements",
    "LWG1482": "Timeout operations are under-specified",
    "LWG1483": "__STDCPP_THREADS spelling",
    "LWG1484": "Need a way to join a thread with a timeout",
    "LWG1485": "Unclear thread::id specification",
    "LWG1486": "Value of this_thread::get_id() underspecified for detached thread",
    "LWG1487": "Clock related operations exception specifications conflict",
    "LWG1488": "Improve interoperability between the C++0x and C1x threads APIs",
    "LWG1489": "unlock functions and unlock mutex requirements are inconsistent",
    "LWG1490": "Mutex requirements too stringent",
    "LWG1491": "try_lock does not guarantee forward progress",
    "LWG1492": "Mutex requirements should not be bound to threads",
    "LWG1493": "Add mutex, recursive_mutex, is_locked function",
    "LWG1494": "Term \"are serialized\" not defined",
    "LWG1495": "Condition variable wait_for return value insufficient",
    "LWG1496": "condition_variable not implementable",
    "LWG1497": "lock() postcondition can not be generally achieved",
    "LWG1498": "Unclear specification for [thread.condition]",
    "LWG1499": "Condition variables preclude wakeup optimization",
    "LWG1500": "Consider removal of native_handle()",
    "LWG1501": "Specification for managing associated asynchronous state has problems",
    "LWG1502": "Specification of [futures.state] unclear",
    "LWG1503": "\"associated asynchronous state\" must go",
    "LWG1504": "Term \"are serialized\" is not defined",
    "LWG1505": "Synchronization between promise::set_value and future::get",
    "LWG1506": "set_exception with a null pointer",
    "LWG1507": "promise::XXX_at_thread_exit functions have no synchronization requirements",
    "LWG1508": "Rename packaged_task::operator bool()",
    "LWG1509": "No restriction on calling future::get more than once",
    "LWG1510": "Should be undefined behaviour to call atomic_future operations unless valid()",
    "LWG1511": "Synchronize the move-constructor for atomic_future",
    "LWG1512": "Conflict in specification: block or join?",
    "LWG1513": "'launch' enum too restrictive",
    "LWG1514": "packaged_task constructors need review",
    "LWG1515": "packaged_task::make_ready_at_thread_exit has no synchronization requirements",
    "LWG1516": "No specification for which header contains auto_ptr",
    "LWG1517": "default_delete's default constructor should be trivial",
    "LWG1518": "Waiting for deferred functions",
    "LWG1519": "bucketsize() const only for unordered set",
    "LWG1520": "INVOKE on member data pointer with too many arguments",
    "LWG1521": "Requirements on internal pointer representations in containers",
    "LWG1522": "conj specification is now nonsense",
    "LWG1523": "noexcept for Clause 29",
    "LWG1524": "Allocation functions are missing happens-before requirements and guarantees",
    "LWG1525": "Effects of resize(size()) on a vector",
    "LWG1526": "C++ should not impose thread safety requirements on C99 library implementations",
    "LWG2000": "Missing definition of packaged_task specialization of uses_allocator",
    "LWG2001": "Class template basic_regex uses non existent string_type",
    "LWG2002": "Class template match_results does not specify the semantics of operator==",
    "LWG2003": "String exception inconsistency in erase.",
    "LWG2004": "duration::operator* has template parameters in funny order",
    "LWG2005": "unordered_map::insert(T&&) protection should apply to map too",
    "LWG2006": "emplace broken for associative containers",
    "LWG2007": "Incorrect specification of return value for map<>::at()",
    "LWG2008": "Conflicting Error Conditions for packaged_task::operator()",
    "LWG2009": "Reporting out-of-bound values on numeric string conversions",
    "LWG2010": "is_* traits for binding operations can't be meaningfully specialized",
    "LWG2011": "Unexpected output required of strings",
    "LWG2012": "Associative maps should insert pair, not tuple",
    "LWG2013": "Do library implementers have the freedom to add constexpr?",
    "LWG2014": "More restrictions on macro names",
    "LWG2015": "Incorrect pre-conditions for some type traits",
    "LWG2016": "Allocators must be no-throw swappable",
    "LWG2017": "std::reference_wrapper makes incorrect usage of std::result_of",
    "LWG2018": "[CD] regex_traits::isctype Returns clause is wrong",
    "LWG2019": "isblank not supported by std::locale",
    "LWG2020": "Time utility arithmetic constexpr functions have invalid effects",
    "LWG2021": "Further incorrect usages of result_of",
    "LWG2022": "reference_wrapper<T>::result_type is underspecified",
    "LWG2023": "Incorrect requirements for lock_guard and unique_lock",
    "LWG2024": "Inconsistent implementation requirements for atomic<integral> and atomic<T*>",
    "LWG2025": "Incorrect semantics of move assignment operator of packaged_task",
    "LWG2026": "hash should be std qualified for unordered container",
    "LWG2027": "Initialization of the stored task of a packaged_task",
    "LWG2028": "messages_base::catalog overspecified",
    "LWG2029": "Missing 'noexcept' on basic_regex move-assignment operator",
    "LWG2030": "packaged_task::result_type should be removed",
    "LWG2031": "std::future<>::share() only applies to rvalues",
    "LWG2032": "Incorrect synchronization clause of async function",
    "LWG2033": "Preconditions of reserve, shrink_to_fit, and resize functions",
    "LWG2034": "Initialization of atomics is misspecified so that it doesn't preserve sequential consistency",
    "LWG2035": "Output iterator requirements are broken",
    "LWG2036": "istream >> char and eofbit",
    "LWG2037": "atomic free functions incorrectly specified",
    "LWG2038": "Missing definition for incrementable iterator",
    "LWG2039": "Issues with std::reverse and std::copy_if",
    "LWG2040": "Missing type traits related to is_convertible",
    "LWG2041": "Stage 2 accumulate incompatibilty",
    "LWG2042": "Comparing forward_list::before_begin() to forward_list::end()",
    "LWG2043": "std{in,out,err} should be usable as field names",
    "LWG2044": "No definition of \"Stable\" for copy algorithms",
    "LWG2045": "forward_list::merge and forward_list::splice_after with unequal allocators",
    "LWG2046": "shared_future(future<R>&&) should be allowed to throw",
    "LWG2047": "Incorrect \"mixed\" move-assignment semantics of unique_ptr",
    "LWG2048": "Unnecessary mem_fn overloads",
    "LWG2049": "is_destructible is underspecified",
    "LWG2050": "Unordered associative containers do not use allocator_traits to define member types",
    "LWG2051": "Explicit tuple constructors for more than one parameter",
    "LWG2052": "Mixup between mapped_type and value_type for associative containers",
    "LWG2053": "Errors in regex bitmask types",
    "LWG2054": "time_point constructors need to be constexpr",
    "LWG2055": "std::move in std::accumulate and other algorithms",
    "LWG2056": "future_errc enums start with value 0 (invalid value for broken_promise)",
    "LWG2057": "time_point + duration semantics should be made constexpr conforming",
    "LWG2058": "valarray and begin/end",
    "LWG2059": "C++0x ambiguity problem with map::erase",
    "LWG2060": "unique_ptr<T[]>(nullptr_t) missing noexcept",
    "LWG2061": "make_move_iterator and arrays",
    "LWG2062": "Effect contradictions w/o no-throw guarantee of std::function swaps",
    "LWG2063": "Contradictory requirements for string move assignment",
    "LWG2064": "More noexcept issues in basic_string",
    "LWG2065": "Minimal allocator interface",
    "LWG2066": "Missing specification of vector::resize(size_type)",
    "LWG2067": "packaged_task should have deleted copy c'tor with const parameter",
    "LWG2068": "std::pair not C++03-compatible with defaulted copy c'tor",
    "LWG2069": "Inconsistent exception spec for basic_string move constructor",
    "LWG2070": "allocate_shared should use allocator_traits<A>::construct",
    "LWG2071": "std::valarray move-assignment",
    "LWG2072": "Unclear wording about capacity of temporary buffers",
    "LWG2073": "Library exceptions that take string arguments",
    "LWG2074": "Off by one error in std::reverse_copy",
    "LWG2075": "Progress guarantees, lock-free property, and scheduling assumptions",
    "LWG2076": "Bad CopyConstructible requirement in set constructors",
    "LWG2077": "Further incomplete constraints for type traits",
    "LWG2078": "Throw specification of async() incomplete",
    "LWG2079": "Required pow() overloads",
    "LWG2080": "Specify when once_flag becomes invalid",
    "LWG2081": "Allocator requirements should include CopyConstructible",
    "LWG2082": "Misleading complexity requirements in <algorithm>",
    "LWG2083": "const-qualification on weak_ptr::owner_before",
    "LWG2084": "basic_string use of charT*",
    "LWG2085": "Wrong description of effect 1 of basic_istream::ignore",
    "LWG2086": "Overly generic type support for math functions",
    "LWG2087": "iostream_category() and noexcept",
    "LWG2088": "std::terminate problem",
    "LWG2089": "std::allocator::construct should use uniform initialization",
    "LWG2090": "Minor Overconstraint in Mutex Types",
    "LWG2091": "Misplaced effect in m.try_lock_for()",
    "LWG2092": "Vague Wording for condition_variable_any",
    "LWG2093": "Throws clause of condition_variable::wait with predicate",
    "LWG2094": "duration conversion overflow shouldn't participate in overload resolution",
    "LWG2095": "promise and packaged_task missing constructors needed for uses-allocator construction",
    "LWG2096": "Incorrect constraints of future::get in regard to MoveAssignable",
    "LWG2097": "packaged_task constructors should be constrained",
    "LWG2098": "Minor Inconsistency between promise::set_value and promise::set_value_at_thread_exit",
    "LWG2099": "Unnecessary constraints of va_start() usage",
    "LWG2100": "timed waiting functions cannot timeout if launch::async policy used",
    "LWG2101": "Some transformation types can produce impossible types",
    "LWG2102": "Why is std::launch an implementation-defined type?",
    "LWG2103": "std::allocator_traits<std::allocator<T>>::propagate_on_container_move_assignment",
    "LWG2104": "unique_lock move-assignment should not be noexcept",
    "LWG2105": "Inconsistent requirements on const_iterator's value_type",
    "LWG2106": "move_iterator wrapping iterators returning prvalues",
    "LWG2107": "Some iterator category should guarantee the lifetime of references",
    "LWG2108": "No way to identify allocator types that always compare equal",
    "LWG2109": "Incorrect requirements for hash specializations",
    "LWG2110": "remove can't swap but note says it might",
    "LWG2111": "Which unexpected/terminate handler is called from the exception handling runtime?",
    "LWG2112": "User-defined classes that cannot be derived from",
    "LWG2113": "Do library implementers have the freedom to add final to non-polymorphic components?",
    "LWG2114": "Incorrect \"contextually convertible to bool\" requirements",
    "LWG2115": "Undefined behaviour for valarray assignments with mask_array index?",
    "LWG2116": "is_nothrow_constructible and destructors",
    "LWG2117": "ios_base manipulators should have showgrouping/noshowgrouping",
    "LWG2118": "[CD] unique_ptr for array does not support cv qualification conversion of actual argument",
    "LWG2119": "Missing hash specializations for extended integer types",
    "LWG2120": "What should async do if neither 'async' nor 'deferred' is set in policy?",
    "LWG2121": "app for string streams",
    "LWG2122": "merge() stability for lists versus forward lists",
    "LWG2123": "merge() allocator requirements for lists versus forward lists",
    "LWG2124": "Seed sequence over-specified",
    "LWG2125": "TimedMutex specification problem",
    "LWG2126": "Several specification problems in regard to mutex requirements",
    "LWG2127": "Move-construction with raw_storage_iterator",
    "LWG2128": "Absence of global functions cbegin/cend",
    "LWG2129": "User specializations of std::initializer_list",
    "LWG2130": "Missing ordering constraints",
    "LWG2131": "Member function getline taking a string as parameter",
    "LWG2132": "std::function ambiguity",
    "LWG2133": "Attitude to overloaded comma for iterators",
    "LWG2134": "Redundant Mutex requirement?",
    "LWG2135": "Unclear requirement for exceptions thrown in condition_variable::wait()",
    "LWG2136": "Postconditions vs. exceptions",
    "LWG2137": "Misleadingly constrained post-condition in the presence of exceptions",
    "LWG2138": "atomic_flag::clear should not accept memory_order_consume",
    "LWG2139": "What is a user-defined type?",
    "LWG2140": "Meaning of notify_all_at_thread_exit synchronization requirement?",
    "LWG2141": "common_type trait produces reference types",
    "LWG2142": "packaged_task::operator() synchronization too broad?",
    "LWG2143": "ios_base::xalloc should be thread-safe",
    "LWG2144": "Missing noexcept specification in type_index",
    "LWG2145": "error_category default constructor",
    "LWG2146": "Are reference types Copy/Move-Constructible/Assignable or Destructible?",
    "LWG2147": "Unclear hint type in Allocator's allocate function",
    "LWG2148": "Hashing enums should be supported directly by std::hash",
    "LWG2149": "Concerns about 20.8/5",
    "LWG2150": "Unclear specification of find_end",
    "LWG2151": "basic_string<>::swap semantics ignore allocators",
    "LWG2152": "Instances of standard container types are not swappable",
    "LWG2153": "Narrowing of the non-member swap contract",
    "LWG2154": "What exactly does compile-time complexity imply?",
    "LWG2155": "Macro __bool_true_false_are_defined should be removed",
    "LWG2156": "Unordered containers' reserve(n) reserves for n-1 elements",
    "LWG2157": "How does std::array<T,0> initialization work when T is not default-constructible?",
    "LWG2158": "Conditional copy/move in std::vector",
    "LWG2159": "atomic_flag initialization",
    "LWG2160": "Unintended destruction ordering-specification of resize",
    "LWG2161": "const equivalence of std::map",
    "LWG2162": "allocator_traits::max_size missing noexcept",
    "LWG2163": "nth_element requires inconsistent post-conditions",
    "LWG2164": "What are the semantics of vector.emplace(vector.begin(), vector.back())?",
    "LWG2165": "std::atomic<X> requires X to be nothrow default constructible",
    "LWG2166": "Heap property underspecified?",
    "LWG2167": "Copy assignment requirements of Containers",
    "LWG2168": "Inconsistent specification of uniform_real_distribution constructor",
    "LWG2169": "Missing reset() requirements in unique_ptr specialization",
    "LWG2170": "Aggregates cannot be DefaultConstructible",
    "LWG2171": "\"swappable\" undefined for swapping lvalue and rvalue",
    "LWG2172": "Does atomic_compare_exchange_* accept v == nullptr arguments?",
    "LWG2173": "The meaning of operator + in the description of the algorithms",
    "LWG2174": "wstring_convert::converted() should be noexcept",
    "LWG2175": "wstring_convert and wbuffer_convert validity",
    "LWG2176": "Special members for wstring_convert and wbuffer_convert",
    "LWG2177": "Requirements on Copy/MoveInsertable",
    "LWG2178": "Allocator requirement changes not mentioned Annex C",
    "LWG2179": "enable_shared_from_this and construction from raw pointers",
    "LWG2180": "Exceptions from std::seed_seq operations",
    "LWG2181": "Exceptions from seed sequence operations",
    "LWG2182": "Container::[const_]reference types are misleadingly specified",
    "LWG2183": "Muddled allocator requirements for match_results constructors",
    "LWG2184": "Muddled allocator requirements for match_results assignments",
    "LWG2185": "Missing throws clause for future/shared_future::wait_for/wait_until",
    "LWG2186": "Incomplete action on async/launch::deferred",
    "LWG2187": "vector<bool> is missing emplace and emplace_back member functions",
    "LWG2188": "Reverse iterator does not fully support targets that overload operator&",
    "LWG2189": "Throwing swap breaks unordered containers' state",
    "LWG2190": "Condition variable specification",
    "LWG2191": "Incorrect specification of match_results(match_results&&)",
    "LWG2192": "Validity and return type of std::abs(0u) is unclear",
    "LWG2193": "Default constructors for standard library containers are explicit",
    "LWG2194": "Impossible container requirements for adaptor types",
    "LWG2195": "Missing constructors for match_results",
    "LWG2196": "Specification of is_*[copy/move]_[constructible/assignable] unclear for non-referencable types",
    "LWG2197": "Specification of is_[un]signed unclear for non-arithmetic types",
    "LWG2198": "max_load_factor(z) makes no strong guarantees, but bans useful behavior",
    "LWG2199": "unordered containers are required to have an initial max load factor of 1.0",
    "LWG2200": "Data race avoidance for all containers, not only for sequences",
    "LWG2201": "Missing macro entries from C standard library",
    "LWG2202": "Missing allocator support by async",
    "LWG2203": "scoped_allocator_adaptor uses wrong argument types for piecewise construction",
    "LWG2204": "reverse_iterator should not require a second copy of the base iterator",
    "LWG2205": "Problematic postconditions of regex_match and regex_search",
    "LWG2206": "Inaccuracy in initializer_list constructor requirements",
    "LWG2207": "basic_string::at should not have a Requires clause",
    "LWG2208": "std::reverse_iterator should be a literal type",
    "LWG2209": "assign() overspecified for sequence containers",
    "LWG2210": "Missing allocator-extended constructor for allocator-aware containers",
    "LWG2211": "Replace ambiguous use of \"Allocator\" in container requirements",
    "LWG2212": "tuple_size for const pair request <tuple> header",
    "LWG2213": "Return value of std::regex_replace",
    "LWG2214": "Clarify basic_ios::init call restrictions",
    "LWG2215": "(unordered) associative container functors should be CopyConstructible",
    "LWG2216": "regex_replace(basic_string) allocator handling",
    "LWG2217": "operator==(sub_match, string) slices on embedded '\\0's",
    "LWG2218": "Unclear how containers use allocator_traits::construct()",
    "LWG2219": "INVOKE-ing a pointer to member with a reference_wrapper as the object expression",
    "LWG2220": "Under-specification of operator== for regex_token_iterator",
    "LWG2221": "No formatted output operator for nullptr",
    "LWG2222": "Inconsistency in description of forward_list::splice_after single-element overload",
    "LWG2223": "shrink_to_fit effect on iterator validity",
    "LWG2224": "Ambiguous status of access to non-live objects",
    "LWG2225": "Unrealistic header inclusion checks required",
    "LWG2226": "wstring_convert methods do not take allocator instance",
    "LWG2227": "Stateful comparison objects in associative containers",
    "LWG2228": "Missing SFINAE rule in unique_ptr templated assignment",
    "LWG2229": "Standard code conversion facets underspecified",
    "LWG2230": "\"see below\" for initializer-list constructors of unordered containers",
    "LWG2231": "DR 704 removes complexity guarantee for clear()",
    "LWG2232": "[CD] The char_traits specializations should declare their length(), compare(), and find() members constexpr",
    "LWG2233": "bad_function_call::what() unhelpful",
    "LWG2234": "assert() should allow usage in constant expressions",
    "LWG2235": "Undefined behavior without proper requirements on basic_string constructors",
    "LWG2236": "kill_dependency unconditionally noexcept",
    "LWG2237": "<cuchar> macros",
    "LWG2238": "Problematic iterator-pair constructor of containers",
    "LWG2239": "min/max/minmax requirements",
    "LWG2240": "Probable misuse of term \"function scope\" in [thread.condition]",
    "LWG2241": "<cstdalign> and #define of alignof",
    "LWG2242": "[uninitialized_]copy_n() defect",
    "LWG2243": "istream::putback problem",
    "LWG2244": "Issue on basic_istream::seekg",
    "LWG2245": "packaged_task::reset() memory allocation",
    "LWG2246": "unique_ptr assignment effects w.r.t. deleter",
    "LWG2247": "Type traits and `std::nullptr_t`",
    "LWG2248": "numeric_limits::is_iec559 misnamed",
    "LWG2249": "[CD] Remove gets from <cstdio>",
    "LWG2250": "Follow-up On Library Issue 2207",
    "LWG2251": "C++ library should define ssize_t",
    "LWG2252": "Strong guarantee on vector::push_back() still broken with C++11?",
    "LWG2253": "[arrays.ts] dynarray should state which container requirements aren't met",
    "LWG2254": "[arrays.ts] Is dynarray an allocator-aware container?",
    "LWG2255": "[arrays.ts] dynarray constructor ambiguity",
    "LWG2256": "On vector iterator invalidation",
    "LWG2257": "Simplify container requirements with the new algorithms",
    "LWG2258": "a.erase(q1, q2) unable to directly return q2",
    "LWG2259": "Issues in 17.6.5.5 rules for member functions",
    "LWG2260": "Missing requirement for Allocator::pointer",
    "LWG2261": "Are containers required to use their 'pointer' type internally?",
    "LWG2262": "Requirement for unique_ptr<T>::get_deleter()(p) to be able to destroy the unique_ptr",
    "LWG2263": "Comparing iterators and allocator pointers with different const-character",
    "LWG2264": "[arrays.ts] std::dynarray defines its initializer-list constructor in terms of a non-existent constructor",
    "LWG2265": "29.3p9 appears to rule out some acceptable executions",
    "LWG2266": "vector and deque have incorrect insert requirements",
    "LWG2267": "partial_sort_copy underspecified for ranges of two different types",
    "LWG2268": "Setting a default argument in the declaration of a member function assign of std::basic_string",
    "LWG2269": "Container iterators and argument-dependent lookup",
    "LWG2270": "Inconsistent to_string overloads",
    "LWG2271": "regex_traits::lookup_classname specification unclear",
    "LWG2272": "quoted should use char_traits::eq for character comparison",
    "LWG2273": "regex_match ambiguity",
    "LWG2274": "Does map::operator[] value-initialize or default-insert a missing element?",
    "LWG2275": "[CD] Why is forward_as_tuple not constexpr?",
    "LWG2276": "Missing requirement on std::promise::set_exception",
    "LWG2277": "[arrays.ts] <dynarray> is missing in 24.7/1",
    "LWG2278": "User-defined literals for Standard Library types",
    "LWG2279": "Carefully state effects of list::splice function",
    "LWG2280": "begin/end for arrays should be constexpr and noexcept",
    "LWG2281": "C99 cross-reference typo in [using.linkage]",
    "LWG2282": "[fund.ts] Incorrect is_assignable constraint in optional::op=(U&&)",
    "LWG2283": "[fund.ts] optional declares and then does not define an operator<()",
    "LWG2284": "Inconsistency in allocator_traits::max_size",
    "LWG2285": "`make_reverse_iterator`",
    "LWG2286": "stringbuf::underflow() underspecified",
    "LWG2287": "[fund.ts] Incorrect exception safety for optional copy assignment operator",
    "LWG2288": "Inconsistent requirements for shared mutexes",
    "LWG2289": "constexpr guarantees of defaulted functions still insufficient",
    "LWG2290": "Top-level \"SFINAE\"-based constraints should get a separate definition in Clause 17",
    "LWG2291": "std::hash is vulnerable to collision DoS attack",
    "LWG2292": "Find a better phrasing for \"shall not participate in overload resolution\"",
    "LWG2293": "Wrong facet used by num_put::do_put",
    "LWG2294": "<cstdlib> should declare abs(double)",
    "LWG2295": "Locale name when the provided Facet is a nullptr",
    "LWG2296": "`std::addressof` should be `constexpr`",
    "LWG2297": "[CD] Missing type requirements for std::exchange",
    "LWG2298": "[CD] is_nothrow_constructible is always false because of create<>",
    "LWG2299": "[CD] Effects of inaccessible key_compare::is_transparent type are not clear",
    "LWG2300": "[CD] Redundant sections for map and multimap members should be removed",
    "LWG2301": "Why is std::tie not constexpr?",
    "LWG2302": "Passing null pointer to placement new",
    "LWG2303": "Explicit instantiation of std::vector<UserType> broken?",
    "LWG2304": "Complexity of count in unordered associative containers",
    "LWG2305": "[fund.ts] optional forwarding construction/assignment",
    "LWG2306": "match_results::reference should be value_type&, not const value_type&",
    "LWG2307": "Should the Standard Library use explicit only when necessary?",
    "LWG2308": "Clarify container destructor requirements w.r.t. std::array",
    "LWG2309": "mutex::lock() should not throw device_or_resource_busy",
    "LWG2310": "Public exposition only member in std::array",
    "LWG2311": "Allocator requirements should be further minimized",
    "LWG2312": "tuple's constructor constraints need to be phrased more precisely",
    "LWG2313": "tuple_size should always derive from integral_constant<size_t, N>",
    "LWG2314": "apply() should return decltype(auto) and use decay_t before tuple_size",
    "LWG2315": "weak_ptr should be movable",
    "LWG2316": "weak_ptr::lock() should be atomic",
    "LWG2317": "The type property queries should be UnaryTypeTraits returning size_t",
    "LWG2318": "basic_string's wording has confusing relics from the copy-on-write era",
    "LWG2319": "basic_string's move constructor should not be noexcept",
    "LWG2320": "select_on_container_copy_construction() takes allocators, not containers",
    "LWG2321": "Moving containers should (usually) be required to preserve iterators",
    "LWG2322": "Associative(initializer_list, stuff) constructors are underspecified",
    "LWG2323": "vector::resize(n, t)'s specification should be simplified",
    "LWG2324": "Insert iterator constructors should use addressof()",
    "LWG2325": "minmax_element()'s behavior differing from max_element()'s should be noted",
    "LWG2326": "uniform_int_distribution<unsigned char> should be permitted",
    "LWG2327": "Non-power-of-two URNGs should be forbidden",
    "LWG2328": "Rvalue stream extraction should use perfect forwarding",
    "LWG2329": "regex_match()/regex_search() with match_results should forbid temporary strings",
    "LWG2330": "regex(\"meow\", regex::icase) is technically forbidden but should be permitted",
    "LWG2331": "regex_constants::collate's effects are inaccurately summarized",
    "LWG2332": "regex_iterator/regex_token_iterator should forbid temporary regexes",
    "LWG2333": "[fund.ts] Hashing disengaged optional<T> objects",
    "LWG2334": "atomic's default constructor requires \"uninitialized\" state even for types with non-trivial default-constructor",
    "LWG2335": "array<array<int, 3>, 4> should be layout-compatible with int[4][3]",
    "LWG2336": "is_trivially_constructible/is_trivially_assignable traits are always false",
    "LWG2337": "shared_ptr operator*() should not be noexcept",
    "LWG2338": "\u00a7[re.traits]/7 expects of locale facets something not guaranteed by [locale.facet]/4",
    "LWG2339": "Wording issue in nth_element",
    "LWG2340": "Replacement allocation functions declared as inline",
    "LWG2341": "Inconsistency between basic_ostream::seekp(pos) and basic_ostream::seekp(off, dir)",
    "LWG2342": "User conversion to wchar_t const* or to wchar_t not invoked for operator<<",
    "LWG2343": "Is the value of the ECMA-262 RegExp object's multiline property really false?",
    "LWG2344": "quoted()'s interaction with padding is unclear",
    "LWG2345": "integer_sequence should have a self-typedef ::type",
    "LWG2346": "integral_constant's member functions should be marked noexcept",
    "LWG2347": "reverse_iterator::operator[] calls const version of current[]",
    "LWG2348": "charT('1') is not the wide equivalent of '1'",
    "LWG2349": "Clarify input/output function rethrow behavior",
    "LWG2350": "min, max, and minmax should be constexpr",
    "LWG2351": "Does .seed() completely reset state of engine?",
    "LWG2352": "Is a default-constructed std::seed_seq intended to produce a predictable .generate()?",
    "LWG2353": "std::next is over-constrained",
    "LWG2354": "Unnecessary copying when inserting into maps with braced-init syntax",
    "LWG2355": "\"s\" UDL suffix should be reserved for a compile-time string library type",
    "LWG2356": "Stability of erasure in unordered associative containers",
    "LWG2357": "Remaining \"Assignable\" requirement",
    "LWG2358": "Apparently-bogus definition of is_empty type trait",
    "LWG2359": "How does regex_constants::nosubs affect basic_regex::mark_count()?",
    "LWG2360": "reverse_iterator::operator*() is unimplementable",
    "LWG2361": "Apply 2299 resolution throughout library",
    "LWG2362": "unique, associative emplace() should not move/copy the mapped_type constructor arguments when no insertion happens",
    "LWG2363": "Defect in 30.4.1.4.1 [thread.sharedtimedmutex.class]",
    "LWG2364": "deque and vector pop_back don't specify iterator invalidation requirements",
    "LWG2365": "Missing noexcept in shared_ptr::shared_ptr(nullptr_t)",
    "LWG2366": "istreambuf_iterator end-of-stream equality",
    "LWG2367": "pair and tuple are not correctly implemented for is_constructible with no args",
    "LWG2368": "Replacing global operator new",
    "LWG2369": "constexpr max(initializer_list) vs max_element",
    "LWG2370": "Operations involving type-erased allocators should not be noexcept in std::function",
    "LWG2371": "[fund.ts] No template aliases defined for new type traits",
    "LWG2372": "Assignment from int to std::string",
    "LWG2373": "Make new entities and names in namespace std conforming extensions",
    "LWG2374": "[fund.ts] Remarks for optional::to_value are too restrictive",
    "LWG2375": "Is [iterator.requirements.general]/9 too broadly applied?",
    "LWG2376": "bad_weak_ptr::what() overspecified",
    "LWG2377": "std::align requirements overly strict",
    "LWG2378": "Behaviour of standard exception types",
    "LWG2379": "Obtaining native handle of the current thread",
    "LWG2380": "May <cstdlib> provide long ::abs(long) and long long ::abs(long long)?",
    "LWG2381": "Inconsistency in parsing floating point numbers",
    "LWG2382": "Unclear order of container update versus object destruction on removing an object",
    "LWG2383": "Overflow cannot be ill-formed for chrono::duration integer literals",
    "LWG2384": "Allocator's deallocate function needs better specification",
    "LWG2385": "function::assign allocator argument doesn't make sense",
    "LWG2386": "function::operator= handles allocators incorrectly",
    "LWG2387": "More nested types that must be accessible and unambiguous",
    "LWG2388": "Handling self-assignment in the proposed library function std::exchange",
    "LWG2389": "[fund.ts] function::operator= is over-specified and handles allocators incorrectly",
    "LWG2390": "[fund.ts] Invocation types and rvalues",
    "LWG2391": "basic_string is missing non-const data()",
    "LWG2392": "\"character type\" is used but not defined",
    "LWG2393": "std::function's Callable definition is broken",
    "LWG2394": "locale::name specification unclear \u2014 what is implementation-defined?",
    "LWG2395": "[fund.ts] Preconditions: is defined nowhere",
    "LWG2396": "underlying_type doesn't say what to do for an incomplete enumeration type",
    "LWG2397": "map<K, V>::emplace and explicit V constructors",
    "LWG2398": "type_info's destructor shouldn't be required to be virtual",
    "LWG2399": "shared_ptr's constructor from unique_ptr should be constrained",
    "LWG2400": "shared_ptr's get_deleter() should use addressof()",
    "LWG2401": "std::function needs more noexcept",
    "LWG2402": "basic_string(const basic_string& str, size_type pos, size_type n = npos) shouldn't use Allocator()",
    "LWG2403": "stof() should call strtof() and wcstof()",
    "LWG2404": "mismatch()'s complexity needs to be updated",
    "LWG2405": "rotate()'s return value is incorrect when middle == first",
    "LWG2406": "negative_binomial_distribution should reject p == 1",
    "LWG2407": "packaged_task(allocator_arg_t, const Allocator&, F&&) should neither be constrained nor explicit",
    "LWG2408": "SFINAE-friendly common_type/iterator_traits is missing in C++14",
    "LWG2409": "[fund.ts] SFINAE-friendly common_type/iterator_traits should be removed from the fundamental-ts",
    "LWG2410": "[fund.ts] shared_ptr<array>'s constructor from unique_ptr should be constrained",
    "LWG2411": "shared_ptr is only contextually convertible to bool",
    "LWG2412": "promise::set_value() and promise::get_future() should not race",
    "LWG2413": "assert macro is overconstrained",
    "LWG2414": "Member function reentrancy should be implementation-defined",
    "LWG2415": "Inconsistency between unique_ptr and shared_ptr",
    "LWG2416": "[fund.ts] std::experimental::any allocator support is unimplementable",
    "LWG2417": "[fund.ts.v2] std::experimental::optional::operator< and LessThanComparable requirement",
    "LWG2418": "[fund.ts] apply does not work with member pointers",
    "LWG2419": "Clang's libc++ extension to std::tuple",
    "LWG2420": "function<void(ArgTypes...)> does not discard the return value of the target object",
    "LWG2421": "Non-specification of handling zero size in std::align [ptr.align]",
    "LWG2422": "std::numeric_limits<T>::is_modulo description: \"most machines\" errata",
    "LWG2423": "Missing specification slice_array, gslice_array, mask_array, indirect_array copy constructor",
    "LWG2424": "29.5 should state that atomic types are not trivially copyable",
    "LWG2425": "operator delete(void*, size_t) doesn't invalidate pointers sufficiently",
    "LWG2426": "Issue about compare_exchange",
    "LWG2427": "Container adaptors as sequence containers, redux",
    "LWG2428": "\"External declaration\" used without being defined",
    "LWG2429": "std::basic_ostringstream is missing an allocator-extended constructor",
    "LWG2430": "Heterogeneous container lookup should be enabled using meta-function instead of nested type",
    "LWG2431": "Missing regular expression traits requirements",
    "LWG2432": "initializer_list assignability",
    "LWG2433": "uninitialized_copy()/etc. should tolerate overloaded operator&",
    "LWG2434": "shared_ptr::use_count() is efficient",
    "LWG2435": "reference_wrapper::operator()'s Remark should be deleted",
    "LWG2436": "Comparators for associative containers should always be CopyConstructible",
    "LWG2437": "iterator_traits<OutIt>::reference can and can't be void",
    "LWG2438": "std::iterator inheritance shouldn't be mandated",
    "LWG2439": "unique_copy() sometimes can't fall back to reading its output",
    "LWG2440": "seed_seq::size() should be noexcept",
    "LWG2441": "Exact-width atomic typedefs should be provided",
    "LWG2442": "call_once() shouldn't DECAY_COPY()",
    "LWG2443": "std::array member functions should be constexpr",
    "LWG2444": "Inconsistent complexity for std::sort_heap",
    "LWG2445": "\"Stronger\" memory ordering",
    "LWG2446": "Unspecialized std::tuple_size should be defined",
    "LWG2447": "Allocators and volatile-qualified value types",
    "LWG2448": "Non-normative Container destructor specification",
    "LWG2449": "vector::insert invalidates end()?",
    "LWG2450": "(greater|less|greater_equal|less_equal)<void> do not yield a total order for pointers",
    "LWG2451": "[fund.ts.v2] optional<T> should 'forward' T's implicit conversions",
    "LWG2452": "is_constructible, etc. and default arguments",
    "LWG2453": "\u00a7[iterator.range] and now [iterator.container] aren't available via <initializer_list>",
    "LWG2454": "Add raw_storage_iterator::base() member",
    "LWG2455": "Allocator default construction should be allowed to throw",
    "LWG2456": "Incorrect exception specifications for 'swap' throughout library",
    "LWG2457": "std::begin() and std::end() do not support multi-dimensional arrays correctly",
    "LWG2458": "N3778 and new library deallocation signatures",
    "LWG2459": "std::polar should require a non-negative rho",
    "LWG2460": "LWG issue 2408 and value categories",
    "LWG2461": "Interaction between allocators and container exception safety guarantees",
    "LWG2462": "std::ios_base::failure is overspecified",
    "LWG2463": "[fund.ts] Incorrect complexity for sample() algorithm",
    "LWG2464": "try_emplace and insert_or_assign misspecified",
    "LWG2465": "SFINAE-friendly common_type is nearly impossible to specialize correctly and regresses key functionality",
    "LWG2466": "allocator_traits::max_size() default behavior is incorrect",
    "LWG2467": "is_always_equal has slightly inconsistent default",
    "LWG2468": "Self-move-assignment of library types",
    "LWG2469": "Wrong specification of Requires clause of operator[] for map and unordered_map",
    "LWG2470": "Allocator's destroy function should be allowed to fail to instantiate",
    "LWG2471": "copy_n's number of InputIterator increments unspecified",
    "LWG2472": "Heterogeneous comparisons in the standard library can result in ambiguities",
    "LWG2473": "basic_filebuf's relation to C FILE semantics",
    "LWG2474": "<cmath> functions unfriendly to integral_constant arguments",
    "LWG2475": "Allow overwriting of std::basic_string terminator with charT() to allow cleaner interoperation with legacy APIs",
    "LWG2476": "scoped_allocator_adaptor is not assignable",
    "LWG2477": "Inconsistency of wordings in std::vector::erase() and std::deque::erase()",
    "LWG2478": "Unclear how wstring_convert uses cvtstate",
    "LWG2479": "Unclear how wbuffer_convert uses cvtstate",
    "LWG2480": "Error handling of wbuffer_convert unclear",
    "LWG2481": "wstring_convert should be more precise regarding \"byte-error string\" etc.",
    "LWG2482": "\u00a7[c.strings] Table 73 mentions nonexistent functions",
    "LWG2483": "throw_with_nested() should use is_final",
    "LWG2484": "rethrow_if_nested() is doubly unimplementable",
    "LWG2485": "get() should be overloaded for const tuple&&",
    "LWG2486": "mem_fn() should be required to use perfect forwarding",
    "LWG2487": "bind() should be const-overloaded, not cv-overloaded",
    "LWG2488": "Placeholders should be allowed and encouraged to be constexpr",
    "LWG2489": "mem_fn() should be noexcept",
    "LWG2490": "<regex> needs lots of noexcept",
    "LWG2491": "std::less<T*> in constant expression",
    "LWG2492": "Clarify requirements for comp",
    "LWG2493": "initializer_list supports incomplete classes",
    "LWG2494": "[fund.ts.v2] ostream_joiner needs noexcept",
    "LWG2495": "There is no such thing as an Exception Safety element",
    "LWG2496": "Certain hard-to-avoid errors not in the immediate context are not allowed to be triggered by the evaluation of type traits",
    "LWG2497": "Use of uncaught_exception()",
    "LWG2498": "operator>>(basic_istream&&, T&&) returns basic_istream&, but should probably return basic_istream&&",
    "LWG2499": "operator>>(basic_istream&, CharT*) makes it hard to avoid buffer overflows",
    "LWG2500": "[fund.ts.v2] fundts.memory.smartptr.shared.obs/6 should apply to cv-unqualified void",
    "LWG2501": "std::function requires POCMA/POCCA",
    "LWG2502": "std::function does not use allocator::construct",
    "LWG2503": "multiline option should be added to syntax_option_type",
    "LWG2504": "basic_streambuf is not an abstract class",
    "LWG2505": "auto_ptr_ref creation requirements underspecified",
    "LWG2506": "Underspecification of atomics",
    "LWG2507": "codecvt_mode should be a bitmask type",
    "LWG2508": "\u00a7[new.delete.dataraces] wording needs to be updated",
    "LWG2509": "[fund.ts.v2] any_cast doesn't work with rvalue reference targets and cannot move with a value target",
    "LWG2510": "Tag types should not be DefaultConstructible",
    "LWG2511": "scoped_allocator_adaptor piecewise construction does not require CopyConstructible",
    "LWG2512": "Y2K bites; what is an \"unambiguous year identifier\"?",
    "LWG2513": "Missing requirements for basic_string::value_type",
    "LWG2514": "Type traits must not be final",
    "LWG2515": "[fund.ts.v2] Certain comparison operators of observer_ptr do not match synopsis",
    "LWG2516": "[fund.ts.v2] Public \"exposition only\" members in observer_ptr",
    "LWG2517": "[fund.ts.v2] Two propagate_const assignment operators have incorrect return type",
    "LWG2518": "[fund.ts.v2] Non-member swap for propagate_const should call member swap",
    "LWG2519": "Iterator operator-= has gratuitous undefined behaviour",
    "LWG2520": "N4089 broke initializing unique_ptr<T[]> from a nullptr",
    "LWG2521": "[fund.ts.v2] weak_ptr's converting move constructor should be modified as well for array support",
    "LWG2522": "[fund.ts.v2] Contradiction in set_default_resource specification",
    "LWG2523": "std::promise synopsis shows two set_value_at_thread_exit()'s for no apparent reason",
    "LWG2524": "generate_canonical can occasionally return 1.0",
    "LWG2525": "[fund.ts.v2] get_memory_resource should be const and noexcept",
    "LWG2526": "[fund.ts.v2] Incorrect precondition for experimental::function::swap",
    "LWG2527": "[fund.ts.v2] ALLOCATOR_OF for function::operator= has incorrect default",
    "LWG2528": "Order of std::tuple construction unspecified",
    "LWG2529": "Assigning to enable_shared_from_this::__weak_this twice",
    "LWG2530": "Clarify observable side effects of releasing a shared state",
    "LWG2531": "future::get should explicitly state that the shared state is released",
    "LWG2532": "Satisfying a promise at thread exit",
    "LWG2533": "[concurr.ts] Constrain threads where future::then can run a continuation",
    "LWG2534": "Constrain rvalue stream operators",
    "LWG2535": "Inconsistency between ostream::write and ostream::operator<<",
    "LWG2536": "What should <complex.h> do?",
    "LWG2537": "Constructors for priority_queue taking allocators should call make_heap",
    "LWG2538": "[parallel.ts] Requirements on data race behavior of iterators and swap should be clarified",
    "LWG2539": "[fund.ts.v2] invocation_trait definition definition doesn't work for surrogate call functions",
    "LWG2540": "unordered_multimap::insert hint iterator",
    "LWG2541": "[parallel.ts] Headers for ExecutionPolicy algorithm overloads",
    "LWG2542": "Missing const requirements for associative containers",
    "LWG2543": "LWG 2148 (hash support for enum types) seems under-specified",
    "LWG2544": "istreambuf_iterator(basic_streambuf<charT, traits>* s) effects unclear when s is 0",
    "LWG2545": "Simplify wording for bind without explicitly specified return type",
    "LWG2546": "Implementability of locale-sensitive UnicodeEscapeSequence matching",
    "LWG2547": "Container requirements (and other library text) should say \"strict total order\", not just \"total order\"",
    "LWG2548": "Missing vfscanf from <cstdio>",
    "LWG2549": "Tuple EXPLICIT constructor templates that take tuple parameters end up taking references to temporaries and will create dangling references",
    "LWG2550": "Wording of unordered container's clear() method complexity",
    "LWG2551": "[fund.ts.v2] \"Exception safety\" cleanup in library fundamentals required",
    "LWG2552": "priority_queue doesn't work with move-only types",
    "LWG2553": "[fund.ts.v2] basic_string_view substring constructor",
    "LWG2554": "Swapping multidimensional arrays is never noexcept",
    "LWG2555": "[fund.ts.v2] No handling for over-aligned types in optional",
    "LWG2556": "Wide contract for future::share()",
    "LWG2557": "Logical operator traits are broken in the zero-argument case",
    "LWG2558": "[fund.ts.v2] Logical operator traits are broken in the zero-argument case",
    "LWG2559": "Error in LWG 2234's resolution",
    "LWG2560": "is_constructible underspecified when applied to a function type",
    "LWG2561": "[fund.ts.v2] Incorrect exception specifications for 'swap' in C++ Extensions for Library Fundamentals",
    "LWG2562": "Consistent total ordering of pointers by comparison functors",
    "LWG2563": "LWG 2259 relaxes requirements, perhaps unintentionally",
    "LWG2564": "[fund.ts.v2] std::experimental::function constructors taking allocator arguments may throw exceptions",
    "LWG2565": "std::function's move constructor should guarantee nothrow for reference_wrappers and function pointers",
    "LWG2566": "Requirements on the first template parameter of container adaptors",
    "LWG2567": "Specification of logical operator traits uses BaseCharacteristic, which is defined only for UnaryTypeTraits and BinaryTypeTraits",
    "LWG2568": "[fund.ts.v2] Specification of logical operator traits uses BaseCharacteristic, which is defined only for UnaryTypeTraits and BinaryTypeTraits",
    "LWG2569": "conjunction and disjunction requirements are too strict",
    "LWG2570": "[fund.ts.v2] conjunction and disjunction requirements are too strict",
    "LWG2571": "\u00a7[map.modifiers]/2 imposes nonsensical requirement on insert(InputIterator, InputIterator)",
    "LWG2572": "The remarks for shared_ptr::operator* should apply to cv-qualified void as well",
    "LWG2573": "[fund.ts.v2] std::hash<std::experimental::shared_ptr<T>> does not work for arrays",
    "LWG2574": "[fund.ts.v2] std::experimental::function::operator=(F&&) should be constrained",
    "LWG2575": "[fund.ts.v2] experimental::function::assign should be removed",
    "LWG2576": "istream_iterator and ostream_iterator should use std::addressof",
    "LWG2577": "{shared,unique}_lock should use std::addressof",
    "LWG2578": "Iterator requirements should reference iterator traits",
    "LWG2579": "Inconsistency wrt Allocators in basic_string assignment vs. basic_string::assign",
    "LWG2580": "Who is definitive: operator= or assign?",
    "LWG2581": "Specialization of <type_traits> variable templates should be prohibited",
    "LWG2582": "\u00a7[res.on.functions]/2's prohibition against incomplete types shouldn't apply to type traits",
    "LWG2583": "There is no way to supply an allocator for basic_string(str, pos)",
    "LWG2584": "<regex> ECMAScript IdentityEscape is ambiguous",
    "LWG2585": "forward_list::resize(size_type, const value_type&) effects incorrect",
    "LWG2586": "Wrong value category used in scoped_allocator_adaptor::construct()",
    "LWG2587": "\"Convertible to bool\" requirement in conjunction and disjunction",
    "LWG2588": "[fund.ts.v2] \"Convertible to bool\" requirement in conjunction and disjunction",
    "LWG2589": "match_results can't satisfy the requirements of a container",
    "LWG2590": "Aggregate initialization for std::array",
    "LWG2591": "std::function's member template target() should not lead to undefined behaviour",
    "LWG2592": "Require that chrono::duration_casts from smaller durations to larger durations do not overflow",
    "LWG2593": "Moved-from state of Allocators",
    "LWG2594": "Contradicting definition of empty shared_ptr on shared_ptr(nullptr, d)",
    "LWG2595": "reverse_iterator::operator[]'s return type revisited",
    "LWG2596": "vector::data() should use addressof",
    "LWG2597": "std::log misspecified for complex numbers",
    "LWG2598": "addressof works on temporaries",
    "LWG2599": "Library incomplete type permission phrase is unclear",
    "LWG2600": "ios_base must store inaccessible iostate flags",
    "LWG2601": "[filesys.ts] [PDTS] Make namespaces consistent with Library TS policy",
    "LWG2602": "[filesys.ts] [PDTS] Tighten specification when there is no reasonable behavior",
    "LWG2603": "[filesys.ts] [PDTS] Filename length needs bullet item",
    "LWG2604": "[filesys.ts] [PDTS] Need definition of dot and dot-dot",
    "LWG2605": "[filesys.ts] [PDTS] Parent of root directory unspecified",
    "LWG2606": "[filesys.ts] [PDTS] Path depth is underspecified",
    "LWG2607": "[filesys.ts] [PDTS] Unhelpful comment for struct space_info",
    "LWG2608": "[filesys.ts] [PDTS] file_time_type underspecified",
    "LWG2609": "[filesys.ts] [PDTS] Unclear why range-based-for functions return different types",
    "LWG2610": "[filesys.ts] [PDTS] Apparently inconsistent return types from several functions",
    "LWG2611": "[filesys.ts] [PDTS] Lack of relative() operation function",
    "LWG2612": "[filesys.ts] [PDTS] uintmax_t too small for large file sizes",
    "LWG2613": "[filesys.ts] [PDTS] Missing actual error conditions thrown",
    "LWG2614": "[filesys.ts] [PDTS] Incorrect postconditions for path copy/move constructor",
    "LWG2615": "[filesys.ts] [PDTS] Missing behavior for characters with no representation",
    "LWG2616": "[filesys.ts] [PDTS] Append behavior underspecified if target is empty",
    "LWG2617": "[filesys.ts] [PDTS] path member swap() unnecessary",
    "LWG2618": "[filesys.ts] [PDTS] is_absolute() return clause confusing",
    "LWG2619": "[filesys.ts] [PDTS] Consider using quoted manipulators",
    "LWG2621": "[filesys.ts] [PDTS] directory_entry operator== needs clarification",
    "LWG2622": "[filesys.ts] [PDTS] directory_iterator underspecified",
    "LWG2623": "[filesys.ts] [PDTS] Request for create_regular_file() and/or touch()",
    "LWG2624": "[filesys.ts] [PDTS] Incorrect effects clause for path copy",
    "LWG2625": "[filesys.ts] [PDTS] Copying equivalent paths effects not specified",
    "LWG2626": "[filesys.ts] [PDTS] Equivalence is a volatile property",
    "LWG2627": "[filesys.ts] [PDTS] Return value of uintmax_t on error?",
    "LWG2628": "[filesys.ts] [PDTS] Possible last_write_time() postcondition?",
    "LWG2629": "[filesys.ts] [PDTS] Unclear semantics of read_symlink on error",
    "LWG2630": "[filesys.ts] [PDTS] remove() must avoid race",
    "LWG2631": "[filesys.ts] [PDTS] POSIX guarantees atomicity for rename()",
    "LWG2632": "[filesys.ts] [PDTS] system_complete() example needs clarification",
    "LWG2633": "[filesys.ts] [PDTS] unique_path() is a security vulnerability",
    "LWG2634": "[filesys.ts] [PDTS] enum class directory_options has no summary",
    "LWG2635": "[filesys.ts] [PDTS] directory_options::skip_permission_denied is not used",
    "LWG2636": "[filesys.ts] [PDTS] copy_options::copy_symlinks is not used",
    "LWG2637": "[filesys.ts] [PDTS] All functions with error_code arguments should be noexcept",
    "LWG2638": "[filesys.ts] [PDTS] Make certain functions noexcept and drop error_code version",
    "LWG2639": "[filesys.ts] [PDTS] permissions() is missing from synopsis",
    "LWG2640": "[filesys.ts] [PDTS] class directory_entry should retain operator const path&() from V2",
    "LWG2641": "[filesys.ts] [PDTS] directory_iterator, recursive_directory_iterator, move construct/assign should be noexcept",
    "LWG2642": "[filesys.ts] [PDTS] class path should have defaulted constructors/destructor/assignments.",
    "LWG2643": "[filesys.ts] [PDTS] path::compare(const string&) should be path::compare(const string_type&)",
    "LWG2644": "[filesys.ts] [PDTS] enum classes copy_options and perms should be bitmask types",
    "LWG2645": "[filesys.ts] [PDTS] create_directory should refer to perms::all instead of Posix S_IRWXU|S_IRWXG|S_IRWXO",
    "LWG2646": "[filesys.ts] [PDTS] Do we really need generic*?",
    "LWG2647": "[filesys.ts] [PDTS] last_write_time() uses ill-formed cast",
    "LWG2648": "[filesys.ts] [PDTS] path::template<class charT>string() conversion rules",
    "LWG2649": "[filesys.ts] [PDTS] path and directory_entry move ctors should not be noexcept",
    "LWG2650": "[filesys.ts] [PDTS] path::compare(const string& s) wrong argument type",
    "LWG2651": "[filesys.ts] [PDTS] directory_iterator, recursive_directory_iterator, pointer/reference typedefs wrong",
    "LWG2652": "[filesys.ts] [PDTS] Better to avoid deriving from std::iterator",
    "LWG2653": "[filesys.ts] [PDTS] directory_entry multithreading concerns",
    "LWG2654": "[filesys.ts] [PDTS] Concerns with security and testability",
    "LWG2655": "[filesys.ts] [PDTS] Clarify Error reporting",
    "LWG2656": "[filesys.ts] [PDTS] Feature test macro for TS version",
    "LWG2657": "[filesys.ts] [PDTS] Inappropriate use of \"No diagnostic is required\"",
    "LWG2658": "[filesys.ts] [PDTS] POSIX utime() is obsolescent",
    "LWG2659": "[filesys.ts] [PDTS] Invalid expressions for bitmask types",
    "LWG2660": "[filesys.ts] [PDTS] Incorrect Throws specification for absolute()",
    "LWG2661": "[filesys.ts] Surprising equivalent() behavior if neither file exists",
    "LWG2662": "[filesys.ts] Allocator requirements unspecified",
    "LWG2663": "Enable efficient retrieval of file size from directory_entry",
    "LWG2664": "operator/ (and other append) semantics not useful if argument has root",
    "LWG2665": "remove_filename() post condition is incorrect",
    "LWG2666": "Bitmask operations should use bitmask terms",
    "LWG2667": "path::root_directory() description is confusing",
    "LWG2668": "path::operator+= is defined, but not operator+",
    "LWG2669": "recursive_directory_iterator effects refers to non-existent functions",
    "LWG2670": "system_complete refers to undefined variable 'base'",
    "LWG2671": "Errors in Copy",
    "LWG2672": "Should is_empty use error_code in its specification?",
    "LWG2673": "status() effects cannot be implemented as specified",
    "LWG2674": "Bidirectional iterator requirement on path::iterator is very expensive",
    "LWG2675": "register_callback can fail",
    "LWG2676": "Provide filesystem::path overloads for File-based streams",
    "LWG2677": "directory_entry::status is not allowed to be cached as a quality-of-implementation issue",
    "LWG2678": "std::filesystem enum classes overspecified",
    "LWG2679": "Inconsistent Use of Effects and Equivalent To",
    "LWG2680": "Add \"Equivalent to\" to filesystem",
    "LWG2681": "filesystem::copy() cannot copy symlinks",
    "LWG2682": "filesystem::copy() won't create a symlink to a directory",
    "LWG2683": "filesystem::copy() says \"no effects\"",
    "LWG2684": "priority_queue lacking comparator typedef",
    "LWG2685": "shared_ptr deleters must not not throw on move construction",
    "LWG2686": "Why is std::hash specialized for error_code, but not error_condition?",
    "LWG2687": "{inclusive,exclusive}_scan misspecified",
    "LWG2688": "clamp misses preconditions and has extraneous condition on result",
    "LWG2689": "Parallel versions of std::copy and std::move shouldn't be in order",
    "LWG2690": "invoke<R>",
    "LWG2691": "money_base::space and do_put: U+0020 versus fill",
    "LWG2692": "Overspecification of lvalueness of bitmask elements",
    "LWG2693": "constexpr for various std::complex arithmetic and value operators",
    "LWG2694": "Application of LWG 436 accidentally deleted definition of \"facet\"",
    "LWG2695": "\"As if\" unclear in [member.functions]",
    "LWG2696": "Interaction between make_shared and enable_shared_from_this is underspecified",
    "LWG2697": "[concurr.ts] Behavior of future/shared_future unwrapping constructor when given an invalid future",
    "LWG2698": "Effect of assign() on iterators/pointers/references",
    "LWG2699": "Missing restriction in [numeric.requirements]",
    "LWG2700": "resource_adaptor went missing",
    "LWG2701": "Unclear requirement in [memory.resource.private]",
    "LWG2702": "num_put::do_put(..., bool) performs ill-formed do_put call",
    "LWG2703": "No provision for fill-padding when boolalpha is set",
    "LWG2704": "recursive_directory_iterator's members should require '*this is dereferenceable'",
    "LWG2705": "Questionable precondition on Sequence containers a.assign(n, t)",
    "LWG2706": "Error reporting for recursive_directory_iterator::pop() is under-specified",
    "LWG2707": "path construction and assignment should have \"string_type&&\" overloads",
    "LWG2708": "recursive_directory_iterator::recursion_pending() is incorrectly specified",
    "LWG2709": "offsetof is unnecessarily imprecise",
    "LWG2710": "\"Effects: Equivalent to ...\" doesn't count \"Synchronization:\" as determined semantics",
    "LWG2711": "path is convertible from approximately everything under the sun",
    "LWG2712": "copy_file(from, to, ...) has a number of unspecified error conditions",
    "LWG2713": "More missing allocator-extended constructors for unordered containers",
    "LWG2714": "complex stream extraction underspecified",
    "LWG2715": "What is 'aggregate initialization syntax'?",
    "LWG2716": "Specification of shuffle and sample disallows lvalue URNGs",
    "LWG2717": "scoped_allocator_adaptor uses forward to do move's job",
    "LWG2718": "Parallelism bug in [algorithms.parallel.exec] p2",
    "LWG2719": "permissions function should not be noexcept due to narrow contract",
    "LWG2720": "permissions function incorrectly specified for symlinks",
    "LWG2721": "remove_all has incorrect post conditions",
    "LWG2722": "equivalent incorrectly specifies throws clause",
    "LWG2723": "Do directory_iterator and recursive_directory_iterator become the end iterator upon error?",
    "LWG2724": "The protected virtual member functions of memory_resource should be private",
    "LWG2725": "filesystem::exists(const path&, error_code&) error reporting",
    "LWG2726": "[recursive_]directory_iterator::increment(error_code&) is underspecified",
    "LWG2727": "Parallel algorithms with constexpr specifier",
    "LWG2728": "status(p).permissions() and symlink_status(p).permissions() are not specified",
    "LWG2729": "Missing SFINAE on std::pair::operator=",
    "LWG2730": "numeric_limits primary template definition",
    "LWG2731": "Existence of lock_guard<MutexTypes...>::mutex_type typedef unclear",
    "LWG2732": "Questionable specification of path::operator/= and path::append",
    "LWG2733": "[fund.ts.v2] gcd / lcm and bool",
    "LWG2734": "Questionable specification in [fs.path.concat]",
    "LWG2735": "std::abs(short), std::abs(signed char) and others should return int instead of double in order to be compatible with C++98 and C",
    "LWG2736": "nullopt_t insufficiently constrained",
    "LWG2737": "Consider relaxing object size restrictions for single-object allocation functions",
    "LWG2738": "is_constructible with void types",
    "LWG2739": "Issue with time_point non-member subtraction with an unsigned duration",
    "LWG2740": "constexpr optional<T>::operator->",
    "LWG2741": "is_partitioned requirements need updating",
    "LWG2742": "Inconsistent string interface taking string_view",
    "LWG2743": "p0083r3 node_handle private members missing \"exposition only\" comment",
    "LWG2744": "any's in_place constructors",
    "LWG2745": "[fund.ts.v2] Implementability of LWG 2451",
    "LWG2746": "Inconsistency between requirements for emplace between optional and variant",
    "LWG2747": "Possibly redundant std::move in [alg.foreach]",
    "LWG2748": "swappable traits for optionals",
    "LWG2749": "swappable traits for variants",
    "LWG2750": "[fund.ts.v2] LWG 2451 conversion constructor constraint",
    "LWG2751": "shared_ptr deleter not specified to observe expired weak_ptr instances",
    "LWG2752": "\"Throws:\" clauses of async and packaged_task are unimplementable",
    "LWG2753": "Optional's constructors and assignments need constraints",
    "LWG2754": "The in_place constructors and emplace functions added by P0032R3 don't require CopyConstructible",
    "LWG2755": "\u00a7[string.view.io] uses non-existent basic_string_view::to_string function",
    "LWG2756": "C++ WP optional<T> should 'forward' T's implicit conversions",
    "LWG2757": "std::string{}.insert(3, \"ABCDE\", 0, 1) is ambiguous",
    "LWG2758": "std::string{}.assign(\"ABCDE\", 0, 1) is ambiguous",
    "LWG2759": "gcd / lcm and bool for the WP",
    "LWG2760": "non-const basic_string::data should not invalidate iterators",
    "LWG2761": "directory_entry comparisons are members",
    "LWG2762": "unique_ptr operator*() should be noexcept",
    "LWG2763": "common_type_t<void, void> is undefined",
    "LWG2764": "Are <cstddint> macros optional?",
    "LWG2765": "Did LWG 1123 go too far?",
    "LWG2766": "Swapping non-swappable types",
    "LWG2767": "not_fn call_wrapper can form invalid types",
    "LWG2768": "any_cast and move semantics",
    "LWG2769": "Redundant const in the return type of any_cast(const any&)",
    "LWG2770": "tuple_size<const T> specialization is not SFINAE compatible and breaks decomposition declarations",
    "LWG2771": "Broken Effects of some basic_string::compare functions in terms of basic_string_view",
    "LWG2772": "Inconsistency in the insert(node) interface",
    "LWG2773": "Making std::ignore constexpr",
    "LWG2774": "std::function construction vs assignment",
    "LWG2775": "reverse_iterator is does not compile for fancy pointers",
    "LWG2776": "shared_ptr unique() and use_count()",
    "LWG2777": "basic_string_view::copy should use char_traits::copy",
    "LWG2778": "basic_string_view is missing constexpr",
    "LWG2779": "[networking.ts] Relax requirements on buffer sequence iterators",
    "LWG2780": "basic_string_view::copy is missing constexpr",
    "LWG2781": "Contradictory requirements for std::function and std::reference_wrapper",
    "LWG2782": "scoped_allocator_adaptor constructors must be constrained",
    "LWG2783": "stack::emplace() and queue::emplace() should return decltype(auto)",
    "LWG2784": "Resolution to LWG 2484 is missing \"otherwise, no effects\" and is hard to parse",
    "LWG2785": "quoted should work with basic_string_view",
    "LWG2786": "Annex C should mention shared_ptr changes for array support",
    "LWG2787": "\u00a7[fs.file_status.cons] doesn't match class definition",
    "LWG2788": "basic_string range mutators unintentionally require a default constructible allocator",
    "LWG2789": "Equivalence of contained objects",
    "LWG2790": "Missing specification of istreambuf_iterator::operator->",
    "LWG2791": "string_view objects and strings should yield the same hash values",
    "LWG2792": "[fund.ts.v2] gcd and lcm should support a wider range of input values",
    "LWG2793": "Awkward conflation of trivial special members of istream_iterator",
    "LWG2794": "Missing requirements for allocator pointers",
    "LWG2795": "\u00a7[global.functions] provides incorrect example of ADL use",
    "LWG2796": "tuple should be a literal type",
    "LWG2797": "Trait precondition violations",
    "LWG2798": "Definition of path in terms of a string",
    "LWG2799": "noexcept-specifications in shared_future",
    "LWG2800": "constexpr swap",
    "LWG2801": "Default-constructibility of unique_ptr",
    "LWG2802": "shared_ptr constructor requirements for a deleter",
    "LWG2803": "hash for arithmetic, pointer and standard library types should not throw",
    "LWG2804": "Unconditional constexpr default constructor for istream_iterator",
    "LWG2805": "void and reference type alternatives in variant, variant<> and index()",
    "LWG2806": "Base class of bad_optional_access",
    "LWG2807": "std::invoke should use std::is_nothrow_callable",
    "LWG2808": "Requirements for fpos and stateT",
    "LWG2809": "variant hash requirements",
    "LWG2810": "use_count and unique in shared_ptr",
    "LWG2811": "\"Selected constructor\" wording is incorrect for optional/variant/any",
    "LWG2812": "Range access is available with <string_view>",
    "LWG2813": "std::function should not return dangling references",
    "LWG2814": "[fund.ts.v2] to_array should take rvalue reference as well",
    "LWG2815": "quick_exit can deadlock",
    "LWG2816": "resize_file has impossible postcondition",
    "LWG2817": "std::hash for nullptr_t",
    "LWG2818": "\"::std::\" everywhere rule needs tweaking",
    "LWG2819": "Unspecified Return type: elements",
    "LWG2820": "Clarify <cstdint> macros",
    "LWG2821": "std::launder() should be marked as [[nodiscard]]",
    "LWG2822": "Resolution for LWG 2742 introduces ambiguities",
    "LWG2823": "std::array initialization is still not permissive enough",
    "LWG2824": "list::sort should say that the order of elements is unspecified if an exception is thrown",
    "LWG2825": "LWG 2756 breaks class template argument deduction for optional",
    "LWG2826": "string_view iterators use old wording",
    "LWG2827": "is_trivially_constructible and non-trivial destructors",
    "LWG2828": "Clarify <cstdalign> (following adoption of P0063r3)",
    "LWG2829": "LWG 2740 leaves behind vacuous words",
    "LWG2830": "insert_return_type is only defined for containers with unique keys",
    "LWG2831": "Equality can be defined when Hash function objects have different behaviour",
    "LWG2832": "\u00a7[fpos.operations] strange requirement for P(i)",
    "LWG2833": "Library needs to specify what it means when it declares a function constexpr",
    "LWG2834": "Resolution LWG 2223 is missing wording about end iterators",
    "LWG2835": "LWG 2536 seems to misspecify <tgmath.h>",
    "LWG2836": "More string operations should be noexcept",
    "LWG2837": "gcd and lcm should support a wider range of input values",
    "LWG2838": "is_literal_type specification needs a little cleanup",
    "LWG2839": "Self-move-assignment of library types, again",
    "LWG2840": "directory_iterator::increment is seemingly narrow-contract but marked noexcept",
    "LWG2841": "Use of \"Equivalent to\" in [strings]",
    "LWG2842": "in_place_t check for optional::optional(U&&) should decay U",
    "LWG2843": "Unclear behavior of std::pmr::memory_resource::do_allocate()",
    "LWG2844": "Stability of a_uniq.insert(i, j)",
    "LWG2845": "enable_if, result_of, common_type and aligned_storage do not meet the definition of TransformationTrait",
    "LWG2846": "Undefined phrase \"effectively cast\"",
    "LWG2847": "sin(float) should call sinf(float)",
    "LWG2848": "Pass-through threshold for pool allocator",
    "LWG2849": "Why does !is_regular_file(from) cause copy_file to report a \"file already exists\" error?",
    "LWG2850": "std::function move constructor does unnecessary work",
    "LWG2851": "std::filesystem enum classes are now underspecified",
    "LWG2852": "Specifications of operator== for std::basic_strings and std::basic_string_views are difficult to conform to",
    "LWG2853": "Possible inconsistency in specification of erase in [vector.modifiers]",
    "LWG2854": "wstring_convert provides no indication of incomplete input or output",
    "LWG2855": "std::throw_with_nested(\"string_literal\")",
    "LWG2856": "std::async should be marked as [[nodiscard]]",
    "LWG2857": "{variant,optional,any}::emplace should return the constructed value",
    "LWG2858": "LWG 2472: actually an incompatibility with C++03",
    "LWG2859": "Definition of reachable in [ptr.launder] misses pointer arithmetic from pointer-interconvertible object",
    "LWG2860": "launder and base class subobjects",
    "LWG2861": "basic_string should require that charT match traits::char_type",
    "LWG2862": "LWG 2756 should be accepted",
    "LWG2863": "Undo default_order changes of maps and sets",
    "LWG2864": "Merge shared_ptr changes from Library Fundamentals to C++17",
    "LWG2865": "Resolve all open Library issues for C++17",
    "LWG2866": "Incorrect derived classes constraints",
    "LWG2867": "Bad footnote about explicit exception-specification",
    "LWG2868": "Missing specification of bad_any_cast::what()",
    "LWG2869": "Deprecate sub-clause [locale.stdcvt]",
    "LWG2870": "Default value of parameter theta of polar should be dependent",
    "LWG2871": "User specializations of type traits should be ill-formed",
    "LWG2872": "Add definition for direct-non-list-initialization",
    "LWG2873": "Add noexcept to several shared_ptr related functions",
    "LWG2874": "Constructor shared_ptr::shared_ptr(Y*) should be constrained",
    "LWG2875": "shared_ptr::shared_ptr(Y*, D, [\u2026]) constructors should be constrained",
    "LWG2876": "shared_ptr::shared_ptr(const weak_ptr<Y>&) constructor should be constrained",
    "LWG2877": "Strengthen meaning of \"empty shared_ptr<T>\" in dynamic_pointer_cast",
    "LWG2878": "Missing DefaultConstructible requirement for istream_iterator default constructor",
    "LWG2879": "Removing C dependencies from signal handler wording",
    "LWG2880": "Relax complexity specifications for non-sequenced policies",
    "LWG2881": "Adopt section III of P0308R0",
    "LWG2882": "Clarify variant construction",
    "LWG2883": "The standard library should provide string_view parameters instead or in addition for functions defined with char const * or string const & as parameter types.",
    "LWG2884": "Relational operators for containers should sfinae; if the underlying type is not comparable, neither should the container be",
    "LWG2885": "The relational operators of optional and variant completely reflect the semantics of the element types \u2014 this is inconsistent with other types in the library",
    "LWG2886": "Keep the empty() functions in any",
    "LWG2887": "Revert the changes from P0156R0: variadic lock_guard",
    "LWG2888": "Variables of library tag types need to be inline variables",
    "LWG2889": "Mark constexpr global variables as inline",
    "LWG2890": "The definition of 'object state' applies only to class types",
    "LWG2891": "Relax library requirements on volatile types",
    "LWG2892": "Relax the prohibition on libraries adding constexpr",
    "LWG2893": "Parsing Hexadecimally in P0067R4",
    "LWG2894": "The function template std::apply() is required to be constexpr, but std::invoke() isn't",
    "LWG2895": "Passing function types to result_of and is_callable",
    "LWG2896": "The contents of <codecvt> are underspecified",
    "LWG2897": "array::iterator and array::const_iterator should be literal types",
    "LWG2898": "Prefer not to use member typedefs as constructor parameters",
    "LWG2899": "is_(nothrow_)move_constructible and tuple, optional and unique_ptr",
    "LWG2900": "The copy and move constructors of optional are not constexpr",
    "LWG2901": "Variants cannot properly support allocators",
    "LWG2902": "variant should only support complete types",
    "LWG2903": "The form of initialization for the emplace-constructors is not specified",
    "LWG2904": "Make variant move-assignment more exception safe",
    "LWG2905": "is_constructible_v<unique_ptr<P, D>, P, D const &> should be false when D is not copy constructible",
    "LWG2906": "There is no ability to supply an allocator for the control block when constructing a shared_ptr from a unique_ptr",
    "LWG2907": "Semantics for destroying the deleter and the control-block of a shared_ptr are unclear",
    "LWG2908": "The less-than operator for shared pointers could do more",
    "LWG2909": "User specializations of is_execution_policy should be ill-formed",
    "LWG2910": "Template deduction and integral_constant",
    "LWG2911": "An `is_aggregate` type trait is needed",
    "LWG2912": "Add a deduction guide for class template duration",
    "LWG2913": "Containers need deduction guides",
    "LWG2914": "std::array does not support class-template deduction from initializers",
    "LWG2915": "The three container adapters should each have a deduction guide",
    "LWG2916": "Insert iterators should each have an instantiation guide to initialize from a container",
    "LWG2917": "Parallel algorithms cannot easily work with InputIterators",
    "LWG2918": "Possible need for extra storage in inner_product",
    "LWG2919": "The specification for adjacent_difference has baked-in sequential semantics",
    "LWG2920": "Add a deduction guide for creating a shared_future from a future rvalue",
    "LWG2921": "packaged_task and type-erased allocators",
    "LWG2922": "The *_constant<> templates do not make use of template<auto>",
    "LWG2923": "noexcept is inconsistently applied across headers which import components of the C standard library",
    "LWG2924": "An ExecutionPolicy overload for inner_product() seems impractical",
    "LWG2925": "Template argument deduction is not used in the standard library",
    "LWG2926": "INVOKE(f, t1, t2,... tN) and INVOKE(f, t1, t2,... tN, R) are too similar",
    "LWG2927": "Encoding a functor and argument types as a function signature for is_callable and result_of is fragile",
    "LWG2928": "is_callable is not a good name",
    "LWG2929": "basic_string misuses \"Effects: Equivalent to\"",
    "LWG2930": "Are implementations allowed to split non-member functions into several overloads?",
    "LWG2931": "Missed optimization opportunity with single-argument std::next",
    "LWG2932": "Constraints on parallel algorithm implementations are underspecified",
    "LWG2933": "PR for LWG 2773 could be clearer",
    "LWG2934": "optional<const T> doesn't compare with T",
    "LWG2935": "What should create_directories do when p already exists but is not a directory?",
    "LWG2936": "Path comparison is defined in terms of the generic format",
    "LWG2937": "Is equivalent(\"existing_thing\", \"not_existing_thing\") an error?",
    "LWG2938": "basic_string_view::const_iterator should be literal types",
    "LWG2939": "Some type-completeness constraints of traits are overspecified",
    "LWG2940": "result_of specification also needs a little cleanup",
    "LWG2941": "\u00a7[thread.req.timing] wording should apply to both member and namespace-level functions",
    "LWG2942": "LWG 2873's resolution missed weak_ptr::owner_before",
    "LWG2943": "Problematic specification of the wide version of basic_filebuf::open",
    "LWG2944": "LWG 2905 accidentally removed requirement that construction of the deleter doesn't throw an exception",
    "LWG2945": "Order of template parameters in optional comparisons",
    "LWG2946": "LWG 2758's resolution missed further corrections",
    "LWG2947": "Clarify several filesystem terms",
    "LWG2948": "unique_ptr does not define operator<< for stream output",
    "LWG2949": "Unclear complexity requirements: space vs. time",
    "LWG2950": "std::byte operations are misspecified",
    "LWG2951": "iterator_traits should SFINAE for void* and function pointers",
    "LWG2952": "iterator_traits should work for pointers to cv T",
    "LWG2953": "LWG 2853 should apply to deque::erase too",
    "LWG2954": "Specialization of the convenience variable templates should be prohibited",
    "LWG2955": "to_chars / from_chars depend on std::string",
    "LWG2956": "filesystem::canonical() still defined in terms of absolute(p, base)",
    "LWG2957": "bind's specification doesn't apply the cv-qualification of the call wrapper to the callable object",
    "LWG2958": "Moves improperly defined as deleted",
    "LWG2959": "char_traits<char16_t>::eof is a valid UTF-16 code unit",
    "LWG2960": "[fund.ts.v3] nonesuch is insufficiently useless",
    "LWG2961": "Bad postcondition for set_default_resource",
    "LWG2962": "Iterators of Containers of move-only types do not model InputIterator",
    "LWG2963": "Algorithms with underspecified iterator requirements",
    "LWG2964": "Apparently redundant requirement for dynamic_pointer_cast",
    "LWG2965": "Non-existing path::native_string() in filesystem_error::what() specification",
    "LWG2966": "Incomplete resolution of US 74",
    "LWG2967": "std::equal on empty ranges",
    "LWG2968": "Inconsistencies between basic_string reserve and vector/unordered_map/unordered_set reserve functions",
    "LWG2969": "polymorphic_allocator::construct() shouldn't pass resource()",
    "LWG2970": "Return type of std::visit misspecified",
    "LWG2971": "variant should require Destructible types",
    "LWG2972": "What is is_trivially_destructible_v<int>?",
    "LWG2973": "inplace_merge exact comparison count complexity prohibits useful real-world optimizations",
    "LWG2974": "Diagnose out of bounds tuple_element/variant_alternative",
    "LWG2975": "Missing case for pair construction in scoped and polymorphic allocators",
    "LWG2976": "Dangling uses_allocator specialization for packaged_task",
    "LWG2977": "unordered_meow::merge() has incorrect Throws: clause",
    "LWG2978": "Hash support for pmr::string and friends",
    "LWG2979": "aligned_union should require complete object types",
    "LWG2980": "Cannot compare_exchange empty pointers",
    "LWG2981": "Remove redundant deduction guides from standard library",
    "LWG2982": "Making size_type consistent in associative container deduction guides",
    "LWG2983": "money_put::do_put underspecified",
    "LWG2984": "put_money(99) is unnecessarily undefined",
    "LWG2985": "std::reverse should be permitted to be vectorized",
    "LWG2986": "Handling of multi-character collating elements by the regex FSM is underspecified",
    "LWG2987": "Relationship between traits_inst.lookup_collatename and the regex FSM is underspecified with regards to ClassAtomCollatingElement",
    "LWG2988": "Clause 32 cleanup missed one typename",
    "LWG2989": "path's stream insertion operator lets you insert everything under the sun",
    "LWG2990": "optional::value_type is not always a value type",
    "LWG2991": "variant copy constructor missing noexcept(see below)",
    "LWG2992": "system_category() and error_code::error_code() should be constexpr",
    "LWG2993": "reference_wrapper<T> conversion from T&&",
    "LWG2994": "Needless UB for basic_string and basic_string_view",
    "LWG2995": "basic_stringbuf default constructor forbids it from using SSO capacity",
    "LWG2996": "Missing rvalue overloads for shared_ptr operations",
    "LWG2997": "LWG 491 and the specification of {forward_,}list::unique",
    "LWG2998": "Requirements on function objects passed to {forward_,}list-specific algorithms",
    "LWG2999": "\u00a7[thread.decaycopy] issue",
    "LWG3000": "monotonic_memory_resource::do_is_equal uses dynamic_cast unnecessarily",
    "LWG3001": "weak_ptr::element_type needs remove_extent_t",
    "LWG3002": "[networking.ts] basic_socket_acceptor::is_open() isn't noexcept",
    "LWG3003": "<future> still has type-erased allocators in promise",
    "LWG3004": "\u00a7[string.capacity] and \u00a7[vector.capacity] should specify time complexity for capacity()",
    "LWG3005": "Destruction order of arrays by make_shared/allocate_shared only recommended?",
    "LWG3006": "Constructing a basic_stringbuf from a string \u2014 where does the allocator come from?",
    "LWG3007": "allocate_shared should rebind allocator to cv-unqualified value_type for construction",
    "LWG3008": "make_shared (sub)object destruction semantics are not specified",
    "LWG3009": "Including <string_view> doesn't provide std::size/empty/data",
    "LWG3010": "[networking.ts] uses_executor says \"if a type T::executor_type exists\"",
    "LWG3011": "Requirements for assert(E) inconsistent with C",
    "LWG3012": "atomic<T> is unimplementable for non-is_trivially_copy_constructible T",
    "LWG3013": "(recursive_)directory_iterator construction and traversal should not be noexcept",
    "LWG3014": "More noexcept issues with filesystem operations",
    "LWG3015": "copy_options::unspecified underspecified",
    "LWG3016": "optional and over-aligned types",
    "LWG3017": "list splice functions should use addressof",
    "LWG3018": "shared_ptr of function type",
    "LWG3019": "Presentation of \"program defined classes derived from error_category\" [syserr.errcat.derived] unclear and contains mistakes",
    "LWG3020": "[networking.ts] Remove spurious nested value_type buffer sequence requirement",
    "LWG3021": "[networking.ts] Relax pointer equivalence requirement for ConstBufferSequence",
    "LWG3022": "is_convertible<derived*, base*> may lead to ODR",
    "LWG3023": "Clarify unspecified call wrappers",
    "LWG3024": "variant's copies must be deleted instead of disabled via SFINAE",
    "LWG3025": "Map-like container deduction guides should use pair<Key, T>, not pair<const Key, T>",
    "LWG3026": "filesystem::weakly_canonical still defined in terms of canonical(p, base)",
    "LWG3027": "[networking.ts] DynamicBuffer prepare exception specification",
    "LWG3028": "Container requirements tables should distinguish const and non-const variables",
    "LWG3029": "pop_heap over-constrains input",
    "LWG3030": "Who shall meet the requirements of try_lock?",
    "LWG3031": "Algorithms and predicates with non-const reference arguments",
    "LWG3032": "ValueSwappable requirement missing for push_heap and make_heap",
    "LWG3033": "basic_string move ctor is underspecified",
    "LWG3034": "P0767R1 breaks previously-standard-layout types",
    "LWG3035": "std::allocator's constructors should be constexpr",
    "LWG3036": "polymorphic_allocator::destroy is extraneous",
    "LWG3037": "polymorphic_allocator and incomplete types",
    "LWG3038": "polymorphic_allocator::allocate should not allow integer overflow to create vulnerabilities",
    "LWG3039": "Unnecessary decay in thread and packaged_task",
    "LWG3040": "basic_string_view::starts_with Effects are incorrect",
    "LWG3041": "Unnecessary decay in reference_wrapper",
    "LWG3042": "is_literal_type_v should be inline",
    "LWG3043": "Bogus postcondition for filesystem_error constructor",
    "LWG3044": "Strange specification of max_size() for an allocator",
    "LWG3045": "atomic<floating-point> doesn't have value_type or difference_type",
    "LWG3046": "Do not require reference_wrapper to support non-referenceable function types",
    "LWG3047": "atomic compound assignment operators can cause undefined behavior when corresponding fetch_meow members don't",
    "LWG3048": "transform_reduce(exec, first1, last1, first2, init) discards execution policy",
    "LWG3049": "Missing wording allowing algorithms to use copies of function objects as substitutes for their parameters",
    "LWG3050": "Conversion specification problem in chrono::duration constructor",
    "LWG3051": "Floating point classifications were inadvertently changed in P0175",
    "LWG3052": "visit is underconstrained",
    "LWG3053": "Prohibit error_code construction from rvalues of error_category",
    "LWG3054": "uninitialized_copy appears to not be able to meet its exception-safety guarantee",
    "LWG3055": "path::operator+=(single-character) misspecified",
    "LWG3056": "copy_file() copies which attributes?",
    "LWG3057": "Correct copy_options handling",
    "LWG3058": "Parallel adjacent_difference shouldn't require creating temporaries",
    "LWG3059": "Wrong requirements for map-like associative container assignment?",
    "LWG3060": "XXX_scan algorithms are specified to work with move-only T, but are specified to make N copies of T into the destination range",
    "LWG3061": "What is the return type of compare_3way?",
    "LWG3062": "Unnecessary decay_t in is_execution_policy_v should be remove_cvref_t",
    "LWG3063": "Parallel algorithms in <memory> are underspecified",
    "LWG3064": "How do uninitialized memory algorithms obtain pointer without undefined behavior?",
    "LWG3065": "LWG 2989 missed that all path's other operators should be hidden friends as well",
    "LWG3066": "\"report a domain error\" in [sf.cmath]/1 is underspecified",
    "LWG3067": "recursive_directory_iterator::pop must invalidate",
    "LWG3068": "Forbid assigning an rvalue basic_string to basic_string_view",
    "LWG3069": "Move assigning variant's subobject corrupts data",
    "LWG3070": "path::lexically_relative causes surprising results if a filename can also be a root-name",
    "LWG3071": "[networking.ts] read_until still refers to \"input sequence\"",
    "LWG3072": "[networking.ts] DynamicBuffer object lifetimes underspecified",
    "LWG3073": "[networking.ts] (async_)read and (async_)write don't support DynamicBuffer lvalues",
    "LWG3074": "Non-member functions for valarray should only deduce from the valarray",
    "LWG3075": "basic_string needs deduction guides from basic_string_view",
    "LWG3076": "basic_string CTAD ambiguity",
    "LWG3077": "(push|emplace)_back should invalidate the end iterator",
    "LWG3078": "directory_entry, directory_iterator and recursive_directory_iterator perform needless path copies",
    "LWG3079": "LWG 2935 forgot to fix the existing_p overloads of create_directory",
    "LWG3080": "Floating point from_chars pattern specification breaks round-tripping",
    "LWG3081": "Floating point from_chars API does not distinguish between overflow and underflow",
    "LWG3082": "from_chars specification regarding floating point rounding is inconsistent",
    "LWG3083": "What should ios::iword(-1) do?",
    "LWG3084": "Termination in C++ is unclear",
    "LWG3085": "char_traits::copy precondition too weak",
    "LWG3086": "Possible problem in \u00a7[new.delete.single]",
    "LWG3087": "One final &x in \u00a7[list.ops]",
    "LWG3088": "forward_list::merge behavior unclear when passed *this",
    "LWG3089": "copy_n should require non-overlapping ranges",
    "LWG3090": "What is \u00a7[time.duration.cons]p4's \"no overflow is induced in the conversion\" intended to mean?",
    "LWG3091": "subsecond-precision time_of_day and durations that seconds cannot convert to",
    "LWG3092": "Unclear semantics of enum class bitmask types",
    "LWG3093": "LWG 2294/2192 missed a std::abs overload",
    "LWG3094": "\u00a7[time.duration.io]p4 makes surprising claims about encoding",
    "LWG3095": "strstreambuf refers to nonexistent member of fpos, fpos::offset",
    "LWG3096": "path::lexically_relative is confused by trailing slashes",
    "LWG3097": "basic_stringbuf seekoff effects trigger undefined behavior and have contradictory returns",
    "LWG3098": "Misleading example for filesystem::path::filename()",
    "LWG3099": "is_assignable<Incomplete&, Incomplete&>",
    "LWG3100": "Unnecessary and confusing \"empty span\" wording",
    "LWG3101": "span's Container constructors need another constraint",
    "LWG3102": "Clarify span iterator and const_iterator behavior",
    "LWG3103": "Errors in taking subview of span should be ill-formed where possible",
    "LWG3104": "Fixing duration division",
    "LWG3105": "T1 is convertible to T2",
    "LWG3106": "nothrow should be inline constexpr rather that extern const",
    "LWG3107": "istreambuf_iterator has public exposition-only member",
    "LWG3108": "istreambuf_iterator::proxy::operator* should be const",
    "LWG3109": "strstreambuf is copyable",
    "LWG3110": "Contiguous Iterators should always be Random-Access",
    "LWG3111": "Too strong precondition on basic_string constructor",
    "LWG3112": "system_error and filesystem_error constructors taking a string may not be able to meet their postconditions",
    "LWG3113": "polymorphic_allocator::construct() should more closely match scoped_allocator_adaptor::construct()",
    "LWG3114": "[networking.ts] Permit efficient composition when using DynamicBuffer",
    "LWG3115": "Unclear description for algorithm includes",
    "LWG3116": "OUTERMOST_ALLOC_TRAITS needs remove_reference_t",
    "LWG3117": "Missing packaged_task deduction guides",
    "LWG3118": "fpos equality comparison unspecified",
    "LWG3119": "Program-definedness of closure types",
    "LWG3120": "Unclear behavior of monotonic_buffer_resource::release()",
    "LWG3121": "tuple constructor constraints for UTypes&&... overloads",
    "LWG3122": "__cpp_lib_chrono_udls was accidentally dropped",
    "LWG3123": "duration constructor from representation shouldn't be effectively non-throwing",
    "LWG3124": "[networking.ts] Unclear how execution_context is intended to store services",
    "LWG3125": "duration streaming precondition should be a SFINAE condition",
    "LWG3126": "There's no std::sub_match::compare(string_view) overload",
    "LWG3127": "basic_osyncstream::rdbuf needs a const_cast",
    "LWG3128": "strstream::rdbuf needs a const_cast",
    "LWG3129": "regex_token_iterator constructor uses wrong pointer arithmetic",
    "LWG3130": "\u00a7[input.output] needs many addressof",
    "LWG3131": "addressof all the things",
    "LWG3132": "Library needs to ban macros named expects or ensures",
    "LWG3133": "Modernizing numeric type requirements",
    "LWG3134": "[fund.ts.v3] LFTSv3 contains extraneous [meta] variable templates that should have been deleted by P09961",
    "LWG3135": "[fund.ts.v3] LFTSv3 contains two redundant alias templates",
    "LWG3136": "[fund.ts.v3] LFTSv3 awkward wording in propagate_const requirements",
    "LWG3137": "Header for `__cpp_lib_to_chars`",
    "LWG3138": "There is no such thing as assertion-level",
    "LWG3139": "contract_violation's special member functions",
    "LWG3140": "COMMON_REF is unimplementable as specified",
    "LWG3141": "CopyConstructible doesn't preserve source values",
    "LWG3142": "std::foo<incomplete> should be ill-formed NDR",
    "LWG3143": "monotonic_buffer_resource growth policy is unclear",
    "LWG3144": "span does not have a const_pointer typedef",
    "LWG3145": "file_clock breaks ABI for C++17 implementations",
    "LWG3146": "Excessive unwrapping in std::ref/cref",
    "LWG3147": "Definitions of \"likely\" and \"unlikely\" are likely to cause problems",
    "LWG3148": "<concepts> should be freestanding",
    "LWG3149": "DefaultConstructible should require default initialization",
    "LWG3150": "UniformRandomBitGenerator should validate min and max",
    "LWG3151": "ConvertibleTo rejects conversions from array and function types",
    "LWG3152": "common_type and common_reference have flaws in common",
    "LWG3153": "Common and common_type have too little in common",
    "LWG3154": "Common and CommonReference have a common defect",
    "LWG3155": "tuple<any, any>{allocator_arg_t, an_allocator}",
    "LWG3156": "ForwardIterator should only mean forward iterator",
    "LWG3157": "Allocator destroy and fancy pointer operations must be non-throwing",
    "LWG3158": "tuple(allocator_arg_t, const Alloc&) should be conditionally explicit",
    "LWG3159": "\u00a7[unique.ptr.single] requirements on deleter may be too strict",
    "LWG3160": "atomic_ref() = delete; should be deleted",
    "LWG3161": "Container adapters mandate use of emplace_back but don't require it",
    "LWG3162": "system_error::system_error(error_code ec) not explicit",
    "LWG3163": "[networking.ts] Buffer sequence iterator equivalency",
    "LWG3164": "Unhelpful \"shall not participate\" constraints for unique_ptr with reference deleter",
    "LWG3165": "All starts_with() overloads should be called \"begins_with\"",
    "LWG3166": "No such descriptive element as Value:",
    "LWG3167": "[fund.ts.v3] Does observer_ptr support function types?",
    "LWG3168": "Expects: element should be specified in one place",
    "LWG3169": "ranges permutation generators discard useful information",
    "LWG3170": "is_always_equal added to std::allocator makes the standard library treat derived types as always equal",
    "LWG3171": "LWG 2989 breaks directory_entry stream insertion",
    "LWG3172": "3-arg std::hypot is underspecified compared to the 2-arg overload",
    "LWG3173": "Enable CTAD for ref-view",
    "LWG3174": "Precondition on is_convertible is too strong",
    "LWG3175": "The CommonReference requirement of concept SwappableWith is not satisfied in the example",
    "LWG3176": "Underspecified behavior of unordered containers when Container::key_equal differs from Pred",
    "LWG3177": "Limit permission to specialize variable templates to program-defined types",
    "LWG3178": "std::mismatch is missing an upper bound",
    "LWG3179": "subrange should always model Range",
    "LWG3180": "Inconsistently named return type for ranges::minmax_element",
    "LWG3181": "split_view::outer_iterator converting constructor is misconstrained",
    "LWG3182": "Specification of Same could be clearer",
    "LWG3183": "Normative permission to specialize Ranges variable templates",
    "LWG3184": "Inconsistencies in bind_front wording",
    "LWG3185": "Uses-allocator construction functions missing constexpr and noexcept",
    "LWG3186": "ranges removal, partition, and partial_sort_copy algorithms discard useful information",
    "LWG3187": "P0591R4 reverted DR 2586 fixes to scoped_allocator_adaptor::construct()",
    "LWG3188": "istreambuf_iterator::pointer should not be unspecified",
    "LWG3189": "Missing requirement for std::priority_queue",
    "LWG3190": "std::allocator::allocate sometimes returns too little storage",
    "LWG3191": "std::ranges::shuffle synopsis does not match algorithm definition",
    "LWG3192": "\u00a7[allocator.uses.construction] functions misbehave for const types",
    "LWG3193": "Mandates: and Expects: elements are not defined for types",
    "LWG3194": "ConvertibleTo prose does not match code",
    "LWG3195": "What is the stored pointer value of an empty weak_ptr?",
    "LWG3196": "std::optional<T> is ill-formed is T is an array",
    "LWG3197": "std::prev should not require BidirectionalIterator",
    "LWG3198": "Bad constraint on std::span::span()",
    "LWG3199": "istream >> bitset<0> fails",
    "LWG3200": "midpoint should not constrain T is complete",
    "LWG3201": "lerp should be marked as noexcept",
    "LWG3202": "P0318R1 was supposed to be revised",
    "LWG3203": "span element access invalidation",
    "LWG3204": "sub_match::swap only swaps the base class",
    "LWG3205": "decay_t in the new common_type fallback should be remove_cvref_t",
    "LWG3206": "year_month_day conversion to sys_days uses not-existing member function",
    "LWG3207": "N in ssize(const T (&)[N]) should be size_t",
    "LWG3208": "Boolean's expression requirements are ordered inconsistently",
    "LWG3209": "Expression in year::ok() returns clause is ill-formed",
    "LWG3210": "allocate_shared is inconsistent about removing const from the pointer passed to allocator construct and destroy",
    "LWG3211": "std::tuple<> should be trivially constructible",
    "LWG3212": "tuple_element_t<1, const span<int, 42>> is const int",
    "LWG3213": "for_each_n and copy_n missing requirements for Size",
    "LWG3214": "\u00a7[facet.num.get.virtuals] doesn't say what it means for digit grouping to be consistent",
    "LWG3215": "variant default constructor has vague constexpr requirements",
    "LWG3216": "Rebinding the allocator before calling construct/destroy in allocate_shared",
    "LWG3217": "<memory> and <execution> should define __cpp_lib_parallel_algorithm",
    "LWG3218": "Modifier for %d parse flag does not match POSIX and format specification",
    "LWG3219": "std::array overview container requirements are incorrect",
    "LWG3220": "P0558 broke conforming C++14 uses of atomic shared_ptr",
    "LWG3221": "Result of year_month arithmetic with months is ambiguous",
    "LWG3222": "P0574R1 introduced preconditions on non-existent parameters",
    "LWG3223": "lerp should not add the \"sufficient additional overloads\"",
    "LWG3224": "zoned_time constructor from TimeZonePtr does not specify initialization of tp_",
    "LWG3225": "zoned_time converting constructor shall not be noexcept",
    "LWG3226": "zoned_time constructor from string_view should accept zoned_time<Duration2, TimeZonePtr2>",
    "LWG3227": "Ambiguity issue for extract in ordered and unordered associative containers",
    "LWG3228": "Surprising variant construction",
    "LWG3229": "\u00a7[res.on.exception.handling]#3 cannot apply to types with implicitly declared destructors",
    "LWG3230": "Format specifier %y/%Y is missing locale alternative versions",
    "LWG3231": "year_month_day_last::day specification does not cover !ok() values",
    "LWG3232": "Inconsistency in zoned_time deduction guides",
    "LWG3233": "Broken requirements for shared_ptr converting constructors",
    "LWG3234": "Sufficient Additional Special Math Overloads",
    "LWG3235": "parse manipulator without abbreviation is not callable",
    "LWG3236": "Random access iterator requirements lack limiting relational operators domain to comparing those from the same range",
    "LWG3237": "LWG 3038 and 3190 have inconsistent PRs",
    "LWG3238": "Insufficiently-defined behavior of std::function deduction guides",
    "LWG3239": "Hidden friends should be specified more narrowly",
    "LWG3240": "Headers declare more than entities",
    "LWG3241": "chrono-spec grammar ambiguity in \u00a7[time.format]",
    "LWG3242": "std::format: missing rules for arg-id in width and precision",
    "LWG3243": "std::format and negative zeroes",
    "LWG3244": "Constraints for Source in \u00a7[fs.path.req] insufficiently constrainty",
    "LWG3245": "Unnecessary restriction on '%p' parse specifier",
    "LWG3246": "What are the constraints on the template parameter of basic_format_arg?",
    "LWG3247": "ranges::iter_move should perform ADL-only lookup of iter_move",
    "LWG3248": "std::format #b, #B, #o, #x, and #X presentation types misformat negative numbers",
    "LWG3249": "There are no 'pointers' in \u00a7[atomics.lockfree]",
    "LWG3250": "std::format: # (alternate form) for NaN and inf",
    "LWG3251": "Are std::format alignment specifiers applied to string arguments?",
    "LWG3252": "Parse locale's aware modifiers for commands are not consistent with POSIX spec",
    "LWG3253": "basic_syncbuf::basic_syncbuf() should not be explicit",
    "LWG3254": "Strike stop_token's operator!=",
    "LWG3255": "span's array constructor is too strict",
    "LWG3256": "Feature testing macro for constexpr algorithms",
    "LWG3257": "Missing feature testing macro update from P0858",
    "LWG3258": "Range access and initializer_list",
    "LWG3259": "The definition of constexpr iterators should be adjusted",
    "LWG3260": "year_month* arithmetic rejects durations convertible to years",
    "LWG3261": "regex components' noexcept annotations appear broken for POCMA or throwing BidirectionalIterator",
    "LWG3262": "Formatting of negative durations is not specified",
    "LWG3263": "Atomic waiting function calls should only be unblocked once",
    "LWG3264": "sized_range and ranges::size redundantly use disable_sized_range",
    "LWG3265": "move_iterator's conversions are more broken after P1207",
    "LWG3266": "to_chars(bool) should be deleted",
    "LWG3267": "Rebound allocators and is_always_equal",
    "LWG3268": "memory_order::memory_order_foo broken in C++20",
    "LWG3269": "Parse manipulators do not specify the result of the extraction from stream",
    "LWG3270": "Parsing and formatting %j with durations",
    "LWG3271": "Parsing functions should save and restore stream format state",
    "LWG3272": "%I%p should parse/format duration since midnight",
    "LWG3273": "Specify weekday_indexed to range of [0, 7]",
    "LWG3274": "Missing feature test macro for `<span>`",
    "LWG3275": "Why does time_get::do_get require a valid pointer when none of the others do?",
    "LWG3276": "Class split_view::outer_iterator::value_type should inherit from view_interface",
    "LWG3277": "Pre-increment on prvalues is not a requirement of weakly_incrementable",
    "LWG3278": "join_view<V>::iterator<true> tries to write through const join_view ptr",
    "LWG3279": "shared_ptr<int>& does not not satisfy readable",
    "LWG3280": "View converting constructors can cause constraint recursion and are unneeded",
    "LWG3281": "Conversion from pair-like types to subrange is a silent semantic promotion",
    "LWG3282": "subrange converting constructor should disallow derived to base conversions",
    "LWG3283": "Types satisfying input_iterator but not equality_comparable look like C++17 output iterators",
    "LWG3284": "random_access_iterator semantic constraints accidentally promote difference type using unary negate",
    "LWG3285": "The type of a customization point object shall satisfy semiregular",
    "LWG3286": "ranges::size is not required to be valid after a call to ranges::begin on an input range",
    "LWG3287": "Exposition-only cpp17-input-iterator concept is needlessly complex",
    "LWG3288": "atomic<T>::notify_one is unimplementable",
    "LWG3289": "Cannot opt out of C++17 iterator-ness without also opting out of C++20 iterator-ness",
    "LWG3290": "Are std::format field widths code units, code points, or something else?",
    "LWG3291": "iota_view::iterator has the wrong iterator_category",
    "LWG3292": "iota_view is under-constrained",
    "LWG3293": "move_iterator operator+() has incorrect constraints",
    "LWG3294": "zoned_time deduction guides misinterprets string/char*",
    "LWG3295": "Comparison category operator== are mis-specified",
    "LWG3296": "Inconsistent default argument for basic_regex<>::assign",
    "LWG3297": "Useless sequence container requirement",
    "LWG3298": "Range adaptors introduced by P1035 do not require viewable_range",
    "LWG3299": "Pointers don't need customized iterator behavior",
    "LWG3300": "Non-array ssize overload is underconstrained",
    "LWG3301": "transform_view::iterator has incorrect iterator_category",
    "LWG3302": "Range adaptor objects keys and values are unspecified",
    "LWG3303": "Bad \"constexpr\" marker for destroy/destroy_n",
    "LWG3304": "Allocate functions of std::polymorphic_allocator should require [[nodiscard]]",
    "LWG3305": "any_cast<void>",
    "LWG3306": "ranges::advance violates its preconditions",
    "LWG3307": "std::allocator<void>().allocate(n)",
    "LWG3308": "vector and deque iterator erase invalidates elements even when no change occurs",
    "LWG3309": "Is <ios> implicitly #included by <sstream>, <fstream> etc.?",
    "LWG3310": "Replace SIZE_MAX with numeric_limits<size_t>::max()",
    "LWG3311": "basic_string::operator=(charT c) should be constrained",
    "LWG3312": "polymorphic_allocator::allocate_object and new_object should be [[nodiscard]]",
    "LWG3313": "join_view::iterator::operator-- is incorrectly constrained",
    "LWG3314": "Is stream insertion behavior locale dependent when Period::type is micro?",
    "LWG3315": "Correct Allocator Default Behavior",
    "LWG3316": "Correctly define epoch for utc_clock / utc_timepoint",
    "LWG3317": "Incorrect operator<< for floating-point durations",
    "LWG3318": "Clarify whether clocks can represent time before their epoch",
    "LWG3319": "Properly reference specification of IANA time zone database",
    "LWG3320": "span::cbegin/cend methods produce different results than std::[ranges::]cbegin/cend",
    "LWG3321": "uninitialized_construct_using_allocator should use construct_at",
    "LWG3322": "Add join_view::base() member function",
    "LWG3323": "has-tuple-element helper concept needs convertible_to",
    "LWG3324": "Special-case std::strong/weak/partial_order for pointers",
    "LWG3325": "Constrain return type of transformation function for transform_view",
    "LWG3326": "enable_view has false positives",
    "LWG3327": "Format alignment specifiers vs. text direction",
    "LWG3328": "Clarify that std::string is not good for UTF-8",
    "LWG3329": "totally_ordered_with both directly and indirectly requires common_reference_with",
    "LWG3330": "Include <compare> from most library headers",
    "LWG3331": "Define totally_ordered/_with in terms of partially-ordered-with",
    "LWG3332": "Issue in \u00a7[time.format]",
    "LWG3333": "ranges::cbegin/ranges::cend, (and maybe ranges::crbegin/ranges::crend) are under-specified to allow rvalue-arrays",
    "LWG3334": "basic_osyncstream move assignment and destruction calls basic_syncbuf::emit() twice",
    "LWG3335": "Resolve C++20 NB comments US 273 and GB 274",
    "LWG3336": "How does std::vformat handle exception thrown by formatters?",
    "LWG3337": "What is \"is initialized\" supposed to mean?",
    "LWG3338": "Rename default_constructible to default_initializable",
    "LWG3339": "Move-constructed empty-container capacity",
    "LWG3340": "Formatting functions should throw on argument/format string mismatch in \u00a7[format.functions]",
    "LWG3341": "basic_regex range constructor: Missing requirements for iterator types",
    "LWG3342": "Library wording uses \"initializes x with y\", which is underspecified",
    "LWG3343": "Ordering of calls to unlock() and notify_all() in Effects element of notify_all_at_thread_exit() should be reversed",
    "LWG3344": "advance(i, most-negative) and prev(i, most-negative)",
    "LWG3345": "Incorrect usages of \"models\" versus \"satisfies\"",
    "LWG3346": "pair and tuple copy and move constructor have backwards specification",
    "LWG3347": "std::pair<T, U> now requires T and U to be less-than-comparable",
    "LWG3348": "__cpp_lib_unwrap_ref in wrong header",
    "LWG3349": "Missing __cpp_lib_constexpr_complex for P0415R1",
    "LWG3350": "Simplify return type of lexicographical_compare_three_way",
    "LWG3351": "ranges::enable_safe_range should not be constrained",
    "LWG3352": "strong_equality isn't a thing",
    "LWG3353": "locale's copy assignment operator should return locale&",
    "LWG3354": "has_strong_structural_equality has a meaningless definition",
    "LWG3355": "The memory algorithms should support move-only input iterators introduced by P1207",
    "LWG3356": "__cpp_lib_nothrow_convertible should be __cpp_lib_is_nothrow_convertible",
    "LWG3357": "[fund.ts.v3] default_random_engine is overspecified for per-thread engine",
    "LWG3358": "\u00a7[span.cons] is mistaken that to_address can throw",
    "LWG3359": "<chrono> leap second support should allow for negative leap seconds",
    "LWG3360": "three_way_comparable_with is inconsistent with similar concepts",
    "LWG3361": "safe_range<SomeRange&> case",
    "LWG3362": "Strike stop_source's operator!=",
    "LWG3363": "drop_while_view should opt-out of sized_range",
    "LWG3364": "Initialize data members of ranges and their iterators",
    "LWG3365": "Rename ref-is-glvalue to deref-is-ref",
    "LWG3366": "Narrowing conversions between integer and integer-class types",
    "LWG3367": "Integer-class conversions should not throw",
    "LWG3368": "Exactly when does size return end - begin?",
    "LWG3369": "span's deduction-guide for built-in arrays doesn't work",
    "LWG3370": "\u00a7[cstdint.syn]p2 and \u00a7[headers]p5 are not sufficiently clear",
    "LWG3371": "visit_format_arg and make_format_args are not hidden friends",
    "LWG3372": "vformat_to should not try to deduce Out twice",
    "LWG3373": "{to,from}_chars_result and format_to_n_result need the \"we really mean what we say\" wording",
    "LWG3374": "P0653 + P1006 should have made the other std::to_address overload constexpr",
    "LWG3375": "decay in viewable_range should be remove_cvref",
    "LWG3376": "\"integer-like class type\" is too restrictive",
    "LWG3377": "elements_view::iterator befriends a specialization of itself",
    "LWG3378": "tuple_size_v/tuple_element_t should be available when tuple_size/tuple_element are",
    "LWG3379": "\"safe\" in several library names is misleading",
    "LWG3380": "common_type and comparison categories",
    "LWG3381": "begin and data must agree for contiguous_range",
    "LWG3382": "NTTP for pair and array",
    "LWG3383": "\u00a7[time.zone.leap.nonmembers] sys_seconds should be replaced with seconds",
    "LWG3384": "transform_view::sentinel has an incorrect operator-",
    "LWG3385": "common_iterator is not sufficiently constrained for non-copyable iterators",
    "LWG3386": "elements_view needs its own sentinel type",
    "LWG3387": "\u00a7[range.reverse.view] reverse_view<V> unintentionally requires range<const V>",
    "LWG3388": "view iterator types have ill-formed <=> operators",
    "LWG3389": "A move-only iterator still does not have a counted_iterator",
    "LWG3390": "make_move_iterator() cannot be used to construct a move_iterator for a move-only iterator",
    "LWG3391": "Problems with counted_iterator/move_iterator::base() const &",
    "LWG3392": "ranges::distance() cannot be used on a move-only iterator with a sized sentinel",
    "LWG3393": "Missing/incorrect feature test macro for coroutines",
    "LWG3394": "ranges::basic_istream_view::iterator has an empty iterator_traits",
    "LWG3395": "Definition for three-way comparison needs to be updated (US 152)",
    "LWG3396": "Clarify point of reference for source_location::current() (DE 169)",
    "LWG3397": "ranges::basic_istream_view::iterator should not provide iterator_category",
    "LWG3398": "tuple_element_t is also wrong for const subrange",
    "LWG3399": "basic_syncbuf::emit() + Qt's #define emit = Big Bada-Boom",
    "LWG3400": "Does is_nothrow_convertible consider destruction of the destination type?",
    "LWG3401": "Is \"as if by\" equivalent to \"equivalent to\"?",
    "LWG3402": "Wording for negative_binomial_distribution is unclear as a consequence of LWG 2406 resolution",
    "LWG3403": "Domain of ranges::ssize(E) doesn't match ranges::size(E)",
    "LWG3404": "Finish removing subrange's conversions from pair-like",
    "LWG3405": "common_view's converting constructor is bad, too",
    "LWG3406": "elements_view::begin() and elements_view::end() have incompatible constraints",
    "LWG3407": "Some problems with the wording changes of P1739R4",
    "LWG3408": "LWG 3291 reveals deficiencies in counted_iterator",
    "LWG3409": "Too lax description of atomic_ref<T>::required_alignment",
    "LWG3410": "lexicographical_compare_three_way is overspecified",
    "LWG3411": "[fund.ts.v3] Contradictory namespace rules in the Library Fundamentals TS",
    "LWG3412": "\u00a7[format.string.std] references to \"Unicode encoding\" unclear",
    "LWG3413": "[fund.ts.v3] propagate_const's swap's noexcept specification needs to be constrained and use a trait",
    "LWG3414": "[networking.ts] service_already_exists has no usable constructors",
    "LWG3415": "back_insert_iterator fails when a container is also its value type",
    "LWG3416": "The Throws: specification of std::any does not mention allocation",
    "LWG3417": "Missing volatile atomic deprecations",
    "LWG3418": "Deprecated free functions in <atomic>",
    "LWG3419": "\u00a7[algorithms.requirements]/15 doesn't reserve as many rights as it intends to",
    "LWG3420": "cpp17-iterator should check that the type looks like an iterator first",
    "LWG3421": "Imperfect ADL emulation for boolean-testable",
    "LWG3422": "Issues of seed_seq's constructors",
    "LWG3423": "std::any_cast should never return a cv-qualified type",
    "LWG3424": "optional::value_or should never return a cv-qualified type",
    "LWG3425": "condition_variable_any fails to constrain its Lock parameters",
    "LWG3426": "operator<=>(const unique_ptr<T, D>&, nullptr_t) can't get no satisfaction",
    "LWG3427": "operator<=>(const shared_ptr<T>&, nullptr_t) definition ill-formed",
    "LWG3428": "single_view's in place constructor should be explicit",
    "LWG3429": "\"models\" should subsume like \"satisfies\"",
    "LWG3430": "std::fstream & co. should be constructible from string_view",
    "LWG3431": "<=> for containers should require three_way_comparable<T> instead of <=>",
    "LWG3432": "Missing requirement for comparison_category",
    "LWG3433": "subrange::advance(n) has UB when n < 0",
    "LWG3434": "ios_base never reclaims memory for iarray and parray",
    "LWG3435": "three_way_comparable_with<reverse_iterator<int*>, reverse_iterator<const int*>>",
    "LWG3436": "std::construct_at should support arrays",
    "LWG3437": "__cpp_lib_polymorphic_allocator is in the wrong header",
    "LWG3438": "\u00a7[container.node.overview] missing multiset/map cases",
    "LWG3439": "\"Distance\" template parameter is underspecified",
    "LWG3440": "Aggregate-paren-init breaks direct-initializing a tuple or optional from {aggregate-member-value}",
    "LWG3441": "Misleading note about calls to customization points",
    "LWG3442": "Unsatisfiable suggested implementation of customization points",
    "LWG3443": "[networking.ts] net::basic_socket_iostream should use addressof",
    "LWG3444": "[networking.ts] net::basic_socket_streambuf::connect(Args&&...) effects are wrong",
    "LWG3445": "[networking.ts] net::basic_socket_istream::connect should be constrained",
    "LWG3446": "indirectly_readable_traits ambiguity for types with both value_type and element_type",
    "LWG3447": "Deduction guides for take_view and drop_view have different constraints",
    "LWG3448": "transform_view's sentinel<false> not comparable with iterator<true>",
    "LWG3449": "take_view and take_while_view's sentinel<false> not comparable with their const iterator",
    "LWG3450": "The const overloads of take_while_view::begin/end are underconstrained",
    "LWG3451": "Inconsistently explicit deduction guides",
    "LWG3452": "Are views really supposed to have strict \ud835\udcaa(1) destruction?",
    "LWG3453": "Generic code cannot call ranges::advance(i, s)",
    "LWG3454": "pointer_traits::pointer_to should be constexpr",
    "LWG3455": "Incorrect Postconditions on unique_ptr move assignment",
    "LWG3456": "Pattern used by std::from_chars is underspecified",
    "LWG3457": "*this is not invalidated",
    "LWG3458": "Is shared_future intended to work with arrays or function types?",
    "LWG3459": "Why doesn't std::convertible_to have semantic requirement when To is reference-to-function type?",
    "LWG3460": "Unimplementable noop_coroutine_handle guarantees",
    "LWG3461": "convertible_to's description mishandles cv-qualified void",
    "LWG3462": "\u00a7[formatter.requirements]: Formatter requirements forbid use of fc.arg()",
    "LWG3463": "Incorrect requirements for transform_inclusive_scan without initial value",
    "LWG3464": "istream::gcount() can overflow",
    "LWG3465": "compare_partial_order_fallback requires F < E",
    "LWG3466": "Specify the requirements for promise/future/shared_future consistently",
    "LWG3467": "bool can't be an integer-like type",
    "LWG3468": "Transparent lookups in unordered containers are inconsistent",
    "LWG3469": "Precondition of coroutine_handle::promise may be insufficient",
    "LWG3470": "convertible-to-non-slicing seems to reject valid case",
    "LWG3471": "polymorphic_allocator::allocate does not satisfy Cpp17Allocator requirements",
    "LWG3472": "counted_iterator is missing preconditions",
    "LWG3473": "Normative encouragement in non-normative note",
    "LWG3474": "Nesting join_views is broken because of CTAD",
    "LWG3475": "std::thread's constructor needs to be able to report general memory allocation failures",
    "LWG3476": "thread and jthread constructors require that the parameters be move-constructible but never move construct the parameters",
    "LWG3477": "Simplify constraints for semiregular-box",
    "LWG3478": "views::split drops trailing empty range",
    "LWG3479": "semiregular-box mishandles self-assignment",
    "LWG3480": "directory_iterator and recursive_directory_iterator are not C++20 ranges",
    "LWG3481": "viewable_range mishandles lvalue move-only views",
    "LWG3482": "drop_view's const begin should additionally require sized_range",
    "LWG3483": "transform_view::iterator's difference is overconstrained",
    "LWG3484": "Should <stddef.h> declare ::nullptr_t?",
    "LWG3485": "atomic_ref safety should be based on operations that \"potentially conflict\" rather than lifetime",
    "LWG3486": "is_constructible<T[], T...> may be misleading in C++20",
    "LWG3487": "Missing precondition on input and output aliasing of [numeric.ops]",
    "LWG3488": "Is array<const int, 0> swappable or not?",
    "LWG3489": "Improve istream_view wording",
    "LWG3490": "ranges::drop_while_view::begin() is missing a precondition",
    "LWG3491": "What is a \"decayed type\"?",
    "LWG3492": "Minimal improvements to elements_view::iterator",
    "LWG3493": "The constructor of std::function taking an F is missing a constraint",
    "LWG3494": "Allow ranges to be conditionally borrowed",
    "LWG3495": "constexpr launder makes pointers to inactive members of unions usable",
    "LWG3496": "What does \"uniquely associated\" mean for basic_syncbuf::emit()?",
    "LWG3497": "Postconditions for basic_syncbuf::emit()",
    "LWG3498": "Inconsistent noexcept-specifiers for basic_syncbuf",
    "LWG3499": "Timed lockable and mutex requirements are imprecise about duration and time_point",
    "LWG3500": "join_view::iterator::operator->() is bogus",
    "LWG3501": "basic_syncbuf-related manipulators refer to some Allocator without defining it",
    "LWG3502": "elements_view should not be allowed to return dangling references",
    "LWG3503": "chrono::ceil has surprising requirement",
    "LWG3504": "condition_variable::wait_for is overspecified",
    "LWG3505": "split_view::outer-iterator::operator++ misspecified",
    "LWG3506": "Missing allocator-extended constructors for priority_queue",
    "LWG3507": "P0881R7 (\"stacktrace\") does not define \"actual file name\", \"actual line number\"",
    "LWG3508": "atomic_ref<cv T> is not well-specified",
    "LWG3509": "Range adaptor objects are underspecified",
    "LWG3510": "Customization point objects should be invocable as non-const too",
    "LWG3511": "Clarify global permission to move",
    "LWG3512": "Incorrect exception safety guarantee for unordered containers",
    "LWG3513": "Fix definition of program-defined based on its uses",
    "LWG3514": "stacktrace should add type alias pmr::stacktrace",
    "LWG3515": "\u00a7[stacktrace.basic.nonmem]: operator<< should be less templatized",
    "LWG3516": "thread::id spaceship may be inconsistent with equality",
    "LWG3517": "join_view::iterator's iter_swap is underconstrained",
    "LWG3518": "Exception requirements on char trait operations unclear",
    "LWG3519": "Incomplete synopses for <random> classes",
    "LWG3520": "iter_move and iter_swap are inconsistent for transform_view::iterator",
    "LWG3521": "Overly strict requirements on qsort and bsearch",
    "LWG3522": "Missing requirement on InputIterator template parameter for priority_queue constructors",
    "LWG3523": "iota_view::sentinel is not always iota_view's sentinel",
    "LWG3524": "Unimplementable narrowing and evaluation order requirements for range adaptors",
    "LWG3525": "uses_allocator_construction_args fails to handle types convertible to pair",
    "LWG3526": "Return types of uses_allocator_construction_args unspecified",
    "LWG3527": "uses_allocator_construction_args handles rvalue pairs of rvalue references incorrectly",
    "LWG3528": "make_from_tuple can perform (the equivalent of) a C-style cast",
    "LWG3529": "priority_queue(first, last) should construct c with (first, last)",
    "LWG3530": "BUILTIN-PTR-MEOW should not opt the type out of syntactic checks",
    "LWG3531": "LWG 3025 broke previous valid code",
    "LWG3532": "split_view<V, P>::inner-iterator<true>::operator++(int) should depend on Base",
    "LWG3533": "Make base() const & consistent across iterator wrappers that supports input_iterators",
    "LWG3534": "ranges::set_intersection and ranges::set_difference algorithm requirements are too strict",
    "LWG3535": "join_view::iterator::iterator_category and ::iterator_concept lie",
    "LWG3536": "Should chrono::from_stream() assign zero to duration for failure?",
    "LWG3537": "\u00a7[iterator.range] Missing noexcept for std::rbegin/rend for arrays and initializer_list",
    "LWG3538": "\u00a7[library.c] C library functions are not addressable",
    "LWG3539": "format_to must not copy models of output_iterator<const charT&>",
    "LWG3540": "\u00a7[format.arg] There should be no const in basic_format_arg(const T* p)",
    "LWG3541": "indirectly_readable_traits should be SFINAE-friendly for all types",
    "LWG3542": "basic_format_arg mis-handles basic_string_view with custom traits",
    "LWG3543": "Definition of when counted_iterators refer to the same sequence isn't quite right",
    "LWG3544": "format-arg-store::args is unintentionally not exposition-only",
    "LWG3545": "std::pointer_traits should be SFINAE-friendly",
    "LWG3546": "common_iterator's postfix-proxy is not quite right",
    "LWG3547": "Time formatters should not be locale sensitive by default",
    "LWG3548": "shared_ptr construction from unique_ptr should move (not copy) the deleter",
    "LWG3549": "view_interface is overspecified to derive from view_base",
    "LWG3550": "Names reserved by C for standard library not reserved by C++",
    "LWG3551": "borrowed_{iterator,subrange}_t are overspecified",
    "LWG3552": "Parallel specialized memory algorithms should require forward iterators",
    "LWG3553": "Useless constraint in split_view::outer-iterator::value_type::begin()",
    "LWG3554": "chrono::parse needs const charT* and basic_string_view<charT> overloads",
    "LWG3555": "{transform,elements}_view::iterator::iterator_concept should consider const-qualification of the underlying range",
    "LWG3556": "Specification of when semantic constraints are imposed by use of concepts is unclear",
    "LWG3557": "The static_cast expression in convertible_to has the wrong operand",
    "LWG3558": "elements_view::sentinel's first operator- has wrong return type",
    "LWG3559": "Semantic requirements of sized_range is circular",
    "LWG3560": "ranges::equal and ranges::is_permutation should short-circuit for sized_ranges",
    "LWG3561": "Issue with internal counter in discard_block_engine",
    "LWG3562": "Superseding nullopt_t's requirement to not be DefaultConstructible",
    "LWG3563": "keys_view example is broken",
    "LWG3564": "transform_view::iterator<true>::value_type and iterator_category should use const F&",
    "LWG3565": "Handling of encodings in localized formatting of chrono types is underspecified",
    "LWG3566": "Constraint recursion for operator<=>(optional<T>, U)",
    "LWG3567": "Formatting move-only iterators take two",
    "LWG3568": "basic_istream_view needs to initialize value_",
    "LWG3569": "join_view fails to support ranges of ranges with non-default_initializable iterators",
    "LWG3570": "basic_osyncstream::emit should be an unformatted output function",
    "LWG3571": "flush_emit should set badbit if the emit call fails",
    "LWG3572": "copyable-box should be fully constexpr",
    "LWG3573": "Missing Throws element for basic_string_view(It begin, End end)",
    "LWG3574": "common_iterator should be completely constexpr-able",
    "LWG3575": "<=> for integer-class types isn't consistently specified",
    "LWG3576": "Clarifying fill character in std::format",
    "LWG3577": "Merging an (unordered) associative container with itself",
    "LWG3578": "Iterator SCARYness in the context of associative container merging",
    "LWG3579": "Complexity guarantees for resize() and append() functions across the library",
    "LWG3580": "iota_view's iterator's binary operator+ should be improved",
    "LWG3581": "The range constructor makes basic_string_view not trivially move constructible",
    "LWG3582": "Unclear where std::async exceptions are handled",
    "LWG3583": "Clarify if/when short circuiting applies to conditions in Constraints: elements",
    "LWG3584": "Clarify common comparison category conversions",
    "LWG3585": "Variant converting assignment with immovable alternative",
    "LWG3586": "Formatting character alignment inconsistencies",
    "LWG3587": "std::three_way_comparable_with<T, U, void> can be satisfied but can't be modeled",
    "LWG3588": "Strike out purposeless UB involving the deleter in members functions of unique_ptr",
    "LWG3589": "The const lvalue reference overload of get for subrange does not constrain I to be copyable when N == 0",
    "LWG3590": "split_view::base() const & is overconstrained",
    "LWG3591": "lazy_split_view<input_view>::inner-iterator::base() && invalidates outer iterators",
    "LWG3592": "lazy_split_view needs to check the simpleness of Pattern",
    "LWG3593": "Several iterators' base() const & and lazy_split_view::outer-iterator::value_type::end() missing noexcept",
    "LWG3594": "inout_ptr \u2014 inconsistent release() in destructor",
    "LWG3595": "Exposition-only classes proxy and postfix-proxy for common_iterator should be fully constexpr",
    "LWG3596": "ranges::starts_with and ranges::ends_with are underspecified",
    "LWG3597": "Unsigned integer types don't model advanceable",
    "LWG3598": "system_category().default_error_condition(0) is underspecified",
    "LWG3599": "The const overload of lazy_split_view::begin should be constrained by const Pattern",
    "LWG3600": "Making istream_iterator copy constructor trivial is an ABI break",
    "LWG3601": "common_iterator's postfix-proxy needs indirectly_readable",
    "LWG3602": "reverse_iterator's converting assignment is overconstrained",
    "LWG3603": "Matching of null characters by regular expressions is underspecified",
    "LWG3604": "What is the effect of an invalid value of type syntax_option_type?",
    "LWG3605": "regex_constants::match_prev_avail is underspecified",
    "LWG3606": "Missing regex_traits::locale_type requirements",
    "LWG3607": "contiguous_iterator should not be allowed to have custom iter_move and iter_swap behavior",
    "LWG3608": "convertible_to and temporary-bound references",
    "LWG3609": "std::ranges::iota_view<int, long> has non-subtractable iterator and sentinel types",
    "LWG3610": "iota_view::size sometimes rejects integer-class types",
    "LWG3611": "Should compare_exchange be allowed to modify the expected value on success?",
    "LWG3612": "Inconsistent pointer alignment in std::format",
    "LWG3613": "Specify that nullopt_t is copyable",
    "LWG3614": "iota_view::size and the most negative signed integer values",
    "LWG3615": "The last specialization of incrementable_traits has wrong operand types",
    "LWG3616": "LWG 3498 seems to miss the non-member swap for basic_syncbuf",
    "LWG3617": "function/packaged_task deduction guides and deducing this",
    "LWG3618": "Unnecessary iter_move for transform_view::iterator",
    "LWG3619": "Specification of vformat_to contains ill-formed formatted_size calls",
    "LWG3620": "What are execution character sets and execution wide-character sets (after P2314R4)?",
    "LWG3621": "Remove feature-test macro __cpp_lib_monadic_optional",
    "LWG3622": "Misspecified transitivity of equivalence in \u00a7[unord.req.general]",
    "LWG3623": "Uses of std::reverse_iterator with containers should not require manually including <iterator>",
    "LWG3624": "Inconsistency of <typeinfo>, <initializer_list>, and <compare> in the standard library",
    "LWG3625": "Should <stacktrace> provide range access function templates?",
    "LWG3626": "Is std::basic_stacktrace required to use contiguous storage?",
    "LWG3627": "Inconsistent specifications for std::make_optional overloads",
    "LWG3628": "\"Effects: Equivalent to:\" and uninitialized memory algorithms",
    "LWG3629": "make_error_code and make_error_condition are customization points",
    "LWG3630": "Inconsistent basic_regex construction and assignment from iterator range",
    "LWG3631": "basic_format_arg(T&&) should use remove_cvref_t<T> throughout",
    "LWG3632": "unique_ptr \"Mandates: This constructor is not selected by class template argument deduction\"",
    "LWG3633": "Atomics are copy constructible and copy assignable from volatile atomics",
    "LWG3634": "When are static-duration memory_resource objects destroyed?",
    "LWG3635": "Add __cpp_lib_deduction_guides to feature test macros",
    "LWG3636": "formatter<T>::format should be const-qualified",
    "LWG3637": "pmr::memory_resource::do_allocate needs clarification",
    "LWG3638": "vector<bool>::swap(reference, reference) is useless",
    "LWG3639": "Handling of fill character width is underspecified in std::format",
    "LWG3640": "Clarify which exceptions are propagated",
    "LWG3641": "Add operator== to format_to_n_result",
    "LWG3642": "move_only_function assignment operators seem to be defined suboptimal",
    "LWG3643": "Missing constexpr in std::counted_iterator",
    "LWG3644": "std::format does not define \"integer presentation type\"",
    "LWG3645": "resize_and_overwrite is overspecified to call its callback with lvalues",
    "LWG3646": "std::ranges::view_interface::size returns a signed type",
    "LWG3647": "nothrow-input-iterator constraints should not mention copying",
    "LWG3648": "format should not print bool with 'c'",
    "LWG3649": "[fund.ts.v3] Reinstate and bump __cpp_lib_experimental_memory_resource feature test macro",
    "LWG3650": "Are std::basic_string's iterator and const_iterator constexpr iterators?",
    "LWG3651": "Unspecified lifetime guarantees for the format string",
    "LWG3652": "Can we relax the preconditions of longjmp?",
    "LWG3653": "<coroutine> is freestanding, but uses std::hash which is not",
    "LWG3654": "basic_format_context::arg(size_t) should be noexcept",
    "LWG3655": "The INVOKE operation and union types",
    "LWG3656": "Inconsistent bit operations returning a count",
    "LWG3657": "std::hash<std::filesystem::path> is not enabled",
    "LWG3658": "basic_streambuf::sputn is both overspecified and underspecified",
    "LWG3659": "Consider ATOMIC_FLAG_INIT undeprecation",
    "LWG3660": "iterator_traits<common_iterator>::pointer should conform to \u00a7[iterator.traits]",
    "LWG3661": "constinit atomic<shared_ptr<T>> a(nullptr); should work",
    "LWG3662": "basic_string::append/assign(NTBS, pos, n) suboptimal",
    "LWG3663": "basic_string(const T&, const Alloc&) turns moves into copies",
    "LWG3664": "LWG 3392 broke std::ranges::distance(a, a+3)",
    "LWG3665": "Is std::allocator_traits<Alloc>::rebind_alloc SFINAE-friendly?",
    "LWG3666": "join_view's difference type is too small",
    "LWG3667": "std::cout << &X::f prints 1",
    "LWG3668": "[recursive_]directory_iterator constructors refer to undefined options",
    "LWG3669": "std::filesystem operations should be observable behaviour",
    "LWG3670": "Cpp17InputIterators don't have integer-class difference types",
    "LWG3671": "atomic_fetch_xor missing from stdatomic.h",
    "LWG3672": "common_iterator::operator->() should return by value",
    "LWG3673": "\u00a7[locale.cons] Ambiguous argument in Throws for locale+name+category constructor",
    "LWG3674": "Removal of requirement for locale names for construction of locales not explained",
    "LWG3675": "std::ios_base::iword/pword might be misspecified",
    "LWG3676": "Name of locale composed using std::locale::none",
    "LWG3677": "Is a cv-qualified pair specially handled in uses-allocator construction?",
    "LWG3678": "Constructors of std::chrono::time_zone might be overly unspecified",
    "LWG3679": "Is <ranges> sufficient for istream_view?",
    "LWG3680": "Constructor of move_only_function with empty ref-qualifier is over-constrained",
    "LWG3681": "Further considerations on LWG 3679",
    "LWG3682": "A Cpp17Allocator type can't silently ignore an unsupported alignment",
    "LWG3683": "operator== for polymorphic_allocator cannot deduce template argument in common cases",
    "LWG3684": "std::allocator<T>::allocate_at_least in constant evaluation",
    "LWG3685": "In lazy_split_view, CTAD doesn't work when given an input_range input and a tiny-range pattern",
    "LWG3686": "In lazy_split_view, comparing a default-constructed outer-iterator or inner-iterator with std::default_sentinel results in null pointer dereference",
    "LWG3687": "expected<cv void, E> move constructor should move",
    "LWG3688": "Exception specifications of copy/move member functions of std::bad_expected_access",
    "LWG3689": "num_get overflow determination unclear and incorrect",
    "LWG3690": "std::make_from_tuple etc. should find all tuple-like std::get overloads",
    "LWG3691": "Replacement of keys in associative containers",
    "LWG3692": "zip_view::iterator's operator<=> is overconstrained",
    "LWG3693": "\u00a7[c.math] Can any of float/double/long double overloads be fused into template overloads?",
    "LWG3694": "Should traits_type::length be customizable?",
    "LWG3695": "The standard-layout property of char-like types serves for nothing",
    "LWG3696": "\"Basic integral types\" should not be used",
    "LWG3697": "Preconditions of reference_constructs_from_temporary/reference_converts_from_temporary seem wrong",
    "LWG3698": "regex_iterator and join_view don't work together very well",
    "LWG3699": "lexically_relative on UNC drive paths (\\\\?\\C:\\...) results in a default-constructed value",
    "LWG3700": "The const begin of the join_view family does not require InnerRng to be a range",
    "LWG3701": "Make formatter<remove_cvref_t<const charT[N]>, charT> requirement explicit",
    "LWG3702": "Should zip_transform_view::iterator remove operator<?",
    "LWG3703": "Missing requirements for expected<T, E> requires is_void<T>",
    "LWG3704": "LWG 2059 added overloads that might be ill-formed for sets",
    "LWG3705": "Hashability shouldn't depend on basic_string's allocator",
    "LWG3706": "How does std::format work with character arrays of unknown bound?",
    "LWG3707": "chunk_view::outer-iterator::value_type::size should return unsigned type",
    "LWG3708": "take_while_view::sentinel's conversion constructor should move",
    "LWG3709": "LWG-3703 was underly ambitious",
    "LWG3710": "The end of chunk_view for input ranges can be const",
    "LWG3711": "Missing preconditions for slide_view constructor",
    "LWG3712": "chunk_view and slide_view should not be default_initializable",
    "LWG3713": "Sorted with respect to comparator (only)",
    "LWG3714": "Non-single-argument constructors for range adaptors should not be explicit",
    "LWG3715": "view_interface::empty is overconstrained",
    "LWG3716": "\u00a7[iterator.concept.forward][forward.iterators] Two different definitions of multi-pass guarantee",
    "LWG3717": "common_view::end should improve random_access_range case",
    "LWG3718": "P2418R2 broke the overload resolution for std::basic_format_arg",
    "LWG3719": "Directory iterators should be usable with default sentinel",
    "LWG3720": "Restrict the valid types of arg-id for width and precision in std-format-spec",
    "LWG3721": "Allow an arg-id with a value of zero for width in std-format-spec",
    "LWG3722": "ranges::to reserves the wrong size",
    "LWG3723": "priority_queue::push_range needs to append_range",
    "LWG3724": "decay-copy should be constrained",
    "LWG3725": "reverse_iterator::operator-> should not use prev for non-pointer iterators",
    "LWG3726": "reverse_iterator::operator-> is underconstrained for non-pointer iterators",
    "LWG3727": "reverse_iterator/common_iterator's operator-> should not require the underlying iterator's operator-> to be a const member function",
    "LWG3728": "Can't make neither head nor tail of the description of operator<=>(tuple, tuple)",
    "LWG3729": "std::tuple_element_t<std::ranges::subrange<I, S, K>> should remove top-level cv-qualifiers",
    "LWG3730": "std::ranges::drop_view may have different size type from its underlying view",
    "LWG3731": "zip_view and adjacent_view are underconstrained",
    "LWG3732": "prepend_range and append_range can't be amortized constant time",
    "LWG3733": "ranges::to misuses cpp17-input-iterator",
    "LWG3734": "Inconsistency in inout_ptr and out_ptr for empty case",
    "LWG3735": "views::adjacent<0> should be prohibited",
    "LWG3736": "move_iterator missing disable_sized_sentinel_for specialization",
    "LWG3737": "take_view::sentinel should provide operator-",
    "LWG3738": "Missing preconditions for take_view constructor",
    "LWG3739": "chunk_view::size should preserve the signedness of the size of the underlying range",
    "LWG3740": "slide_view::size should preserve the signedness of underlying range's size",
    "LWG3741": "std::chrono::abs(duration) is ill-formed with non-reduced periods",
    "LWG3742": "deque::prepend_range needs to permute",
    "LWG3743": "ranges::to's reserve may be ill-formed",
    "LWG3744": "copy_symlink(junction, new_symlink)'s behavior is unclear",
    "LWG3745": "std::atomic_wait and its friends lack noexcept",
    "LWG3746": "optional's spaceship with U with a type derived from optional causes infinite constraint meta-recursion",
    "LWG3747": "ranges::uninitialized_copy_n, ranges::uninitialized_move_n, and ranges::destroy_n should use std::move",
    "LWG3748": "common_iterator and counted_iterator' operator- are missing cast to return type",
    "LWG3749": "common_iterator should handle integer-class difference types",
    "LWG3750": "Too many papers bump __cpp_lib_format",
    "LWG3751": "Missing feature macro for flat_set",
    "LWG3752": "Should string::substr forward the allocator to the newly created string?",
    "LWG3753": "Clarify entity vs. freestanding entity",
    "LWG3754": "Class template expected synopsis contains declarations that do not match the detailed description",
    "LWG3755": "tuple-for-each can call user-defined operator,",
    "LWG3756": "Is the std::atomic_flag class signal-safe?",
    "LWG3757": "What's the effect of std::forward_like<void>(x)?",
    "LWG3758": "Element-relocating operations of std::vector and std::deque should conditionally require Cpp17CopyInsertable in their preconditions",
    "LWG3759": "ranges::rotate_copy should use std::move",
    "LWG3760": "cartesian_product_view::iterator's parent_ is never valid",
    "LWG3761": "cartesian_product_view::iterator::operator- should pass by reference",
    "LWG3762": "generator::iterator::operator== should pass by reference",
    "LWG3763": "Should range adaptor iterators only provide iterator_category when its difference_type is not an integer-class type?",
    "LWG3764": "reference_wrapper::operator() should propagate noexcept",
    "LWG3765": "const_sentinel should be constrained",
    "LWG3766": "view_interface::cbegin is underconstrained",
    "LWG3767": "codecvt<charN_t, char8_t, mbstate_t> incorrectly added to locale",
    "LWG3768": "possibly-const-range is overconstrained",
    "LWG3769": "basic_const_iterator::operator== causes infinite constraint recursion",
    "LWG3770": "const_sentinel_t is missing",
    "LWG3771": "[fund.ts.v3] remove binders typedefs from function",
    "LWG3772": "repeat_view's piecewise constructor is missing Postconditions",
    "LWG3773": "views::zip_transform still requires F to be copy_constructible when empty pack",
    "LWG3774": "<flat_set> should include <compare>",
    "LWG3775": "Broken dependencies in the Cpp17Allocator requirements",
    "LWG3776": "Avoid parsing format-spec if it is not present or empty",
    "LWG3777": "Common cartesian_product_view produces an invalid range if the first range is input and one of the ranges is empty",
    "LWG3778": "vector<bool> missing exception specifications",
    "LWG3779": "ranges::fold_* can unintentionally const_cast and reinterpret_cast",
    "LWG3780": "format's width estimation is too approximate and not forward compatible",
    "LWG3781": "The exposition-only alias templates cont-key-type and cont-mapped-type should be removed",
    "LWG3782": "Should <math.h> declare ::lerp?",
    "LWG3783": "views::common may not be a range adaptor object",
    "LWG3784": "std.compat should not provide ::byte and its friends",
    "LWG3785": "ranges::to is over-constrained on the destination type being a range",
    "LWG3786": "Flat maps' deduction guide needs to default Allocator to be useful",
    "LWG3787": "ranges::to's template parameter C should not be a reference type",
    "LWG3788": "jthread::operator=(jthread&&) postconditions are unimplementable under self-assignment",
    "LWG3789": "Precondition of (not replaced) operator delete[]",
    "LWG3790": "P1467 accidentally changed nexttoward's signature",
    "LWG3791": "join_view::iterator::operator-- may be ill-formed",
    "LWG3792": "__cpp_lib_constexpr_algorithms should also be defined in <utility>",
    "LWG3793": "Requirements for some algorithms' Size template parameters are unclear",
    "LWG3794": "std::filesystem::path::iterator::reference should be allowed to be std::filesystem::path",
    "LWG3795": "Self-move-assignment of std::future and std::shared_future have unimplementable postconditions",
    "LWG3796": "movable-box as member should use default-initialization instead of copy-initialization",
    "LWG3797": "elements_view insufficiently constrained",
    "LWG3798": "Rvalue reference and iterator_category",
    "LWG3799": "Should <math.h> provide 3-argument ::hypot overloads?",
    "LWG3800": "No deduction guide for std::match_results",
    "LWG3801": "cartesian_product_view::iterator::distance-from ignores the size of last underlying range",
    "LWG3802": "flat_foo allocator-extended constructors lack move semantics",
    "LWG3803": "flat_foo constructors taking KeyContainer lack KeyCompare parameter",
    "LWG3804": "flat_foo missing some allocator-extended deduction guides",
    "LWG3805": "Expression evaluating to a call wrapper is a prvalue, not an object",
    "LWG3806": "Should concept formattable<T, charT> default to char?",
    "LWG3807": "The feature test macro for ranges::find_last should be renamed",
    "LWG3808": "Inconsistent feature test macros for ranges algorithms",
    "LWG3809": "Is std::subtract_with_carry_engine<uint16_t> supposed to work?",
    "LWG3810": "CTAD for std::basic_format_args",
    "LWG3811": "views::as_const on ref_view<T> should return ref_view<const T>",
    "LWG3812": "[fund.ts.v3] Incorrect constraint on propagate_const conversion function",
    "LWG3813": "std::span<volatile T, E> is made ill-formed by P2278R4 when T is a normal class type",
    "LWG3814": "Add freestanding items requested by NB comments",
    "LWG3815": "Freestanding enumerators specification is lacking",
    "LWG3816": "flat_map and flat_multimap should impose sequence container requirements",
    "LWG3817": "Missing preconditions on forward_list modifiers",
    "LWG3818": "Exposition-only concepts are not described in library intro",
    "LWG3819": "reference_meows_from_temporary should not use is_meowible",
    "LWG3820": "cartesian_product_view::iterator::prev is not quite right",
    "LWG3821": "uses_allocator_construction_args should have overload for pair-like",
    "LWG3822": "Avoiding normalization in filesystem::weakly_canonical",
    "LWG3823": "Unnecessary precondition for is_aggregate",
    "LWG3824": "Number of bind placeholders is underspecified",
    "LWG3825": "Missing compile-time argument id check in basic_format_parse_context::next_arg_id",
    "LWG3826": "Redundant specification [for overload of yield_value]",
    "LWG3827": "Deprecate <stdalign.h> and <stdbool.h> macros",
    "LWG3828": "Sync intmax_t and uintmax_t with C2x",
    "LWG3829": "as_rvalue_view::end should improve non-common case",
    "LWG3830": "reverse_view should not cache when ranges::next has constant time complexity",
    "LWG3831": "Two-digit formatting of negative year is ambiguous",
    "LWG3832": "Missing change for element_view::iterator in LWG 3798",
    "LWG3833": "Remove specialization template<size_t N> struct formatter<const charT[N], charT>",
    "LWG3834": "Missing constexpr for std::intmax_t math functions in <cinttypes>",
    "LWG3835": "Requirements for CharT in the regex library",
    "LWG3836": "std::expected<bool, E1> conversion constructor expected(const expected<U, G>&) should take precedence over expected(U&&) with operator bool",
    "LWG3837": "std::erase_if overloads for non-associative containers should move (and not copy) their predicate object",
    "LWG3838": "The last specialization of incrementable_traits is under-constrained",
    "LWG3839": "range_formatter's set_separator, set_brackets, and underlying functions should be noexcept",
    "LWG3840": "filesystem::u8path should be undeprecated",
    "LWG3841": "<version> should not be \"all freestanding\"",
    "LWG3842": "Unclear wording for precision in chrono-format-spec",
    "LWG3843": "std::expected<T,E>::value() & assumes E is copy constructible",
    "LWG3844": "Non-numeric formats for negative durations",
    "LWG3845": "ranges::to's from_range_t tag branch has the wrong constraint",
    "LWG3846": "iota_view::iterator::operator- is overconstrained",
    "LWG3847": "ranges::to can still return views",
    "LWG3848": "adjacent_view, adjacent_transform_view and slide_view missing base accessor",
    "LWG3849": "cartesian_product_view::iterator's default constructor is overconstrained",
    "LWG3850": "views::as_const on empty_view<T> should return empty_view<const T>",
    "LWG3851": "chunk_view::inner-iterator missing custom iter_move and iter_swap",
    "LWG3852": "join_with_view::iterator's iter_move and iter_swap should be conditionally noexcept",
    "LWG3853": "basic_const_iterator<volatile int*>::operator-> is ill-formed",
    "LWG3854": "\u00a7[res.on.exception.handling]/3 should not be applied to all standard library types",
    "LWG3855": "tiny-range is not quite right",
    "LWG3856": "Unclear which conversion specifiers are valid for each chrono type",
    "LWG3857": "basic_string_view should allow explicit conversion when only traits vary",
    "LWG3858": "basic_const_iterator is too strict to provide iterator_category",
    "LWG3859": "std::projected cannot handle proxy iterator",
    "LWG3860": "range_common_reference_t is missing",
    "LWG3861": "mdspan layout_stride::mapping default constructor problem",
    "LWG3862": "basic_const_iterator's common_type specialization is underconstrained",
    "LWG3863": "Is input_iterator guaranteed to have iter_const_reference_t?",
    "LWG3864": "zip over range of reference to an abstract type",
    "LWG3865": "Sorting a range of pairs",
    "LWG3866": "Bad Mandates for expected::transform_error overloads",
    "LWG3867": "Should std::basic_osyncstream's move assignment operator be noexcept?",
    "LWG3868": "Constrained algorithms should not require output_iterator",
    "LWG3869": "Deprecate std::errc constants related to UNIX STREAMS",
    "LWG3870": "Remove voidify",
    "LWG3871": "Adjust note about terminate",
    "LWG3872": "basic_const_iterator should have custom iter_move",
    "LWG3873": "join_with_view's const begin is underconstrained",
    "LWG3874": "Rename __cpp_lib_ranges_to_container to __cpp_lib_ranges_to",
    "LWG3875": "std::ranges::repeat_view<T, IntegerClass>::iterator may be ill-formed",
    "LWG3876": "Default constructor of std::layout_XX::mapping misses precondition",
    "LWG3877": "Incorrect constraints on const-qualified monadic overloads for std::expected",
    "LWG3878": "import std; should guarantee initialization of standard iostreams objects",
    "LWG3879": "erase_if for flat_{,multi}set is incorrectly specified",
    "LWG3880": "Clarify operator+= complexity for {chunk,stride}_view::iterator",
    "LWG3881": "Incorrect formatting of container adapters backed by std::string",
    "LWG3882": "tuple relational operators have confused friendships",
    "LWG3883": "\u00a7[support.c.headers.other] Ambiguity in the requirements for includes",
    "LWG3884": "flat_foo is missing allocator-extended copy/move constructors",
    "LWG3885": "'op' should be in [zombie.names]",
    "LWG3886": "Monad mo' problems",
    "LWG3887": "Version macro for allocate_at_least",
    "LWG3888": "Most ranges uninitialized memory algorithms are underconstrained",
    "LWG3889": "std::(ranges::)destroy_at should destroy array elements in the decreasing index order",
    "LWG3890": "ABI issue for integer-class types",
    "LWG3891": "LWG 3870 breaks std::expected<cv T, E>",
    "LWG3892": "Incorrect formatting of nested ranges and tuples",
    "LWG3893": "LWG 3661 broke atomic<shared_ptr<T>> a; a = nullptr;",
    "LWG3894": "generator::promise_type::yield_value(ranges::elements_of<Rng, Alloc>) should not be noexcept",
    "LWG3895": "Various relation concepts are missing default values of the second template parameters",
    "LWG3896": "The definition of viewable_range is not quite right",
    "LWG3897": "inout_ptr will not update raw pointer to 0",
    "LWG3898": "Possibly unintended preconditions for completion functions of std::barrier",
    "LWG3899": "co_yielding elements of an lvalue generator is unnecessarily inefficient",
    "LWG3900": "The allocator_arg_t overloads of generator::promise_type::operator new should not be constrained",
    "LWG3901": "Is uses-allocator construction of a cv-qualified object type still well-formed after LWG 3870?",
    "LWG3902": "Return type of std::declval<cv void> should be (cv-unqualified) void",
    "LWG3903": "span destructor is redundantly noexcept",
    "LWG3904": "lazy_split_view::outer-iterator's const-converting constructor isn't setting trailing_empty_",
    "LWG3905": "Type of std::fexcept_t",
    "LWG3906": "\"Undefined address\" is undefined",
    "LWG3907": "Can iterator types of range adaptors and range factories be SCARY?",
    "LWG3908": "enumerate_view::iterator constructor is explicit",
    "LWG3909": "Issues about viewable_range",
    "LWG3910": "The effects of including <iostream> on initialization are not yet precisely specified",
    "LWG3911": "unique_ptr's operator* is missing a mandate",
    "LWG3912": "enumerate_view::iterator::operator- should be noexcept",
    "LWG3913": "ranges::const_iterator_t<range R> fails to accept arrays of unknown bound",
    "LWG3914": "Inconsistent template-head of ranges::enumerate_view",
    "LWG3915": "Redundant paragraph about expression variations",
    "LWG3916": "allocator, polymorphic_allocator, and containers should forbid cv-qualified types",
    "LWG3917": "Validity of allocator<void> and possibly polymorphic_allocator<void> should be clarified",
    "LWG3918": "std::uninitialized_move/_n and guaranteed copy elision",
    "LWG3919": "enumerate_view may invoke UB for sized common non-forward underlying ranges",
    "LWG3920": "Bad footnotes claiming external linkage for entities defined as macros",
    "LWG3921": "Is std::chrono::duration<std::int64_t, std::ratio<INT64_MAX - 1, INT64_MAX>>{40} required to be correctly formatted?",
    "LWG3922": "It's unclear whether numeric_limits can be specialized by users",
    "LWG3923": "The specification of numeric_limits doesn't clearly distinguish between implementation requirements and user requirements",
    "LWG3924": "Stop token data race avoidance requirements unclear",
    "LWG3925": "Concept formattable's definition is incorrect",
    "LWG3926": "Which namespace std is the mentioned one?",
    "LWG3927": "Unclear preconditions for operator[] for sequence containers",
    "LWG3928": "Non-top-level namespace posix shouldn't be reserved",
    "LWG3929": "Preconditions for type traits should be Mandates",
    "LWG3930": "Simplify type trait wording",
    "LWG3931": "Too many paper bump __cpp_lib_ranges",
    "LWG3932": "Expression-equivalence is sometimes unimplementable when passing prvalue expressions to comparison CPOs",
    "LWG3933": "P1467R9 accidentally changed the signatures of certain constructors of std::complex",
    "LWG3934": "std::complex<T>::operator=(const T&) has no specification",
    "LWG3935": "template<class X> constexpr complex& operator=(const complex<X>&) has no specification",
    "LWG3936": "Are implementations allowed to deprecate components not in [depr]?",
    "LWG3937": "I/O manipulators should be specified in terms of base classes",
    "LWG3938": "Cannot use std::expected monadic ops with move-only error_type",
    "LWG3939": "\u00a7[format.string.std] char is not formatted as a character when charT is wchar_t",
    "LWG3940": "std::expected<void, E>::value() also needs E to be copy constructible",
    "LWG3941": "\u00a7[atomics.order] inadvertently prohibits widespread implementation techniques",
    "LWG3942": "Inconsistent use of const char_type& in standard specializations of std::char_traits",
    "LWG3943": "Clarify lifetime requirements of BasicFormatter and Formatter",
    "LWG3944": "Formatters converting sequences of char to sequences of wchar_t",
    "LWG3945": "\u00a7[cstdarg.syn] 'Compatible types' are undefined",
    "LWG3946": "The definition of const_iterator_t should be reworked",
    "LWG3947": "Unexpected constraints on adjacent_transform_view::base()",
    "LWG3948": "possibly-const-range and as-const-pointer should be noexcept",
    "LWG3949": "std::atomic<bool>'s trivial destructor dropped in C++17 spec wording",
    "LWG3950": "std::basic_string_view comparison operators are overspecified",
    "LWG3951": "\u00a7[expected.object.swap]: Using value() instead of has_value()",
    "LWG3952": "iter_common_reference_t does not conform to the definition of indirectly_readable",
    "LWG3953": "iter_move for common_iterator and counted_iterator should return decltype(auto)",
    "LWG3954": "Feature-test macros in C headers (<stddef.h> etc.)",
    "LWG3955": "Add noexcept to several repeat_view[::iterator] member functions",
    "LWG3956": "chrono::parse uses from_stream as a customization point",
    "LWG3957": "\u00a7[container.alloc.reqmts] The value category of v should be claimed",
    "LWG3958": "ranges::to should prioritize the \"reserve\" branch",
    "LWG3959": "Should the comparator of std::flat_map/std::flat_multimap be copied twice in some operations?",
    "LWG3960": "How does chrono::parse handle duplicated data?",
    "LWG3961": "Does chrono::parse check format strings?",
    "LWG3962": "What is the \"decimal precision of the input\"?",
    "LWG3963": "Different std::flat_map/std::flat_multimap specializations should be able to share same nested classes",
    "LWG3964": "std::atan2 and std::pow overloads that take two std::valarray parameters should require the arguments to have the same length",
    "LWG3965": "Incorrect example in [format.string.escaped] p3 for formatting of combining characters",
    "LWG3966": "The value_type and reference members of std::flat_(multi)map::(const_)iterator are unclear",
    "LWG3967": "The specification for std::is_nothrow_* traits may be ambiguous in some cases involving noexcept(false)",
    "LWG3968": "std::endian::native value should be more specific about object representations",
    "LWG3969": "std::ranges::fold_left_first_with_iter should be more ADL-proof",
    "LWG3970": "\u00a7[mdspan.syn] Missing definition of full_extent_t and full_extent",
    "LWG3971": "Join ranges of rvalue references with ranges of prvalues",
    "LWG3972": "Issues with join_with_view::iterator's iter_swap",
    "LWG3973": "Monadic operations should be ADL-proof",
    "LWG3974": "mdspan::operator[] should not copy OtherIndexTypes",
    "LWG3975": "Specializations of basic_format_context should not be permitted",
    "LWG3976": "What does it mean for a type to be \"allocator aware\"?",
    "LWG3977": "constexpr and noexcept for operators for bitmask types",
    "LWG3978": "The \"no effect\" requirement for std::ignore is unimplementable for volatile bit-fields",
    "LWG3979": "Should we reject std::bind_front<42>() and its friends?",
    "LWG3980": "The read exclusive ownership of an atomic read-modify-write operation and whether its read and write are two operations are unclear",
    "LWG3981": "Range adaptor closure object is underspecified for its return type",
    "LWG3982": "is-derived-from-view-interface should require that T is derived from view_interface<T>",
    "LWG3983": "ranges::to adaptors are underconstrained",
    "LWG3984": "ranges::to's recursion branch may be ill-formed",
    "LWG3985": "ranges::to should Mandates C not to be view",
    "LWG3986": "basic_const_iterator doesn't work with optional",
    "LWG3987": "Including <flat_foo> doesn't provide std::begin/end",
    "LWG3988": "Should as_const_view and basic_const_iterator provide base()?",
    "LWG3989": "The whole range for an iterator obtained from a std::span or std::basic_string_view is not clear",
    "LWG3990": "Program-defined specializations of std::tuple and std::variant can't be properly supported",
    "LWG3991": "variant's move assignment should not be guaranteed to produce a valueless by exception state",
    "LWG3992": "basic_stringbuf::str()&& should enforce \ud835\udcaa(1)",
    "LWG3993": "The parse function of a BasicFormatter type needs to be constexpr",
    "LWG3994": "adaptor(args...)(r) is not equivalent to std::bind_back(adaptor, args...)(r)",
    "LWG3995": "Issue with custom index conversion in <mdspan>",
    "LWG3996": "projected<I, identity> should just be I",
    "LWG3997": "std::formatter specializations should be consistently restricted to supported character types",
    "LWG3998": "Constants in std::regex_constants should be allowed to be enumerators",
    "LWG3999": "P0439R0 changed the value category of memory order constants",
    "LWG4000": "flat_map::insert_range's Effects is not quite right",
    "LWG4001": "iota_view should provide empty",
    "LWG4002": "The definition of iota_view::iterator::iterator_concept should be improved",
    "LWG4003": "view_interface::back is overconstrained",
    "LWG4004": "The load and store operation in \u00a7[atomics.order] p1 is ambiguous",
    "LWG4005": "\"Required behavior\" too narrowly defined",
    "LWG4006": "chunk_view::outer-iterator::value_type should provide empty",
    "LWG4007": "Mystic prohibition of calling a volatile-qualified perfect forwarding call wrapper",
    "LWG4008": "\u00a7[range.utility.conv.to] ranges::to may cause infinite recursion if range_value_t<C> is a non-move-constructible range",
    "LWG4009": "drop_view::begin const may have \ud835\udcaa(n) complexity",
    "LWG4010": "subrange::advance should be improved",
    "LWG4011": "\"Effects: Equivalent to return\" in [span.elem]",
    "LWG4012": "common_view::begin/end are missing the simple-view check",
    "LWG4013": "lazy_split_view::outer-iterator::value_type should not provide default constructor",
    "LWG4014": "LWG 3809 changes behavior of some existing std::subtract_with_carry_engine code",
    "LWG4015": "LWG 3973 broke const overloads of std::optional monadic operations",
    "LWG4016": "container-insertable checks do not match what container-inserter does",
    "LWG4017": "Behavior of std::views::split on an empty range",
    "LWG4018": "ranges::to's copy branch is underconstrained",
    "LWG4019": "Reversing an infinite range leads to an infinite loop",
    "LWG4020": "extents::index-cast weirdness",
    "LWG4021": "mdspan::is_always_meow() should be noexcept",
    "LWG4022": "Ambiguity in the formatting of negative years with format specifier %C",
    "LWG4023": "Preconditions of std::basic_streambuf::setg/setp",
    "LWG4024": "Underspecified destruction of objects created in std::make_shared_for_overwrite/std::allocate_shared_for_overwrite",
    "LWG4025": "Move assignment operator of std::expected<cv void, E> should not be conditionally deleted",
    "LWG4026": "Assignment operators of std::expected should propagate triviality",
    "LWG4027": "possibly-const-range should prefer returning const R&",
    "LWG4028": "std::is_(nothrow_)convertible should be reworded to avoid dependence on the return statement",
    "LWG4029": "basic_string accidentally fails to meet the reversible container requirements",
    "LWG4030": "Clarify whether arithmetic expressions in [numeric.sat.func] are mathematical or C++",
    "LWG4031": "bad_expected_access<void> member functions should be noexcept",
    "LWG4032": "Possibly invalid types in the constraints of constructors of std::shared_ptr",
    "LWG4033": "\u00a7[macro.names] defining macros after importing the standard library",
    "LWG4034": "Clarify specification of std::min and std::max",
    "LWG4035": "single_view should provide empty",
    "LWG4036": "__alignof_is_defined is only implicitly specified in C++ and not yet deprecated",
    "LWG4037": "Static data members of ctype_base are not yet required to be usable in constant expressions",
    "LWG4038": "std::text_encoding::aliases_view should have constexpr iterators",
    "LWG4039": "\u00a7[ostream.formatted.print]: Inappropriate usage of badbit in definition of vprint_unicode/vprint_nonunicode",
    "LWG4040": "Contradictory specification of std::tuple_size",
    "LWG4041": "The requirements on literal type in [concept.swappable] should be removed",
    "LWG4042": "std::print should permit an efficient implementation",
    "LWG4043": "\"ASCII\" is not a registered character encoding",
    "LWG4044": "Confusing requirements for std::print on POSIX platforms",
    "LWG4045": "tuple can create dangling references from tuple-like",
    "LWG4046": "Effects of inserting into or erasing from flat container adaptors when an exception is thrown need to be more permissive",
    "LWG4047": "Explicitly specifying template arguments for std::swap should not be supported",
    "LWG4048": "Inconsistent preconditions for transparent insertion of std::flat_map/std::flat_set",
    "LWG4049": "C <foo.h> headers not in freestanding",
    "LWG4050": "Should views::iota(0) | views::take(5) be views::iota(0, 5)?",
    "N1208": "Core Language Issues List (Revision 9)",
    "N1212": "J16 Record of Discussion",
    "N1213": "WG21 Formal Minutes",
    "N1214": "J16 Formal Minutes",
    "N1215": "Exit Processing Order",
    "N1216": "Allocating Zero Bytes or Objects",
    "N1217": "Core WG Defect Resolutions",
    "N1218": "Clarifying the Definition of Accessible Base Class (Rev. 3)",
    "N1219": "Proposed Resolution to Library Issue 60",
    "N1220": "Library Motion for Kona",
    "N1221": "Minutes of US TAG Meeting",
    "N1222": "C++ Standard Library Defect Report List (Revision 11)",
    "N1223": "C++ Standard Library Closed Issues List (Revision 11)",
    "N1224": "C++ Standard Library Active Issues List (Revision 11)",
    "N1225": "Agenda, SC22/WG21, C++, Tokyo, Japan",
    "N1226": "C++ Standard Library Active Issues List (Revision 12)",
    "N1227": "C++ Standard Library Defect Report List (Revision 12)",
    "N1228": "C++ Standard Library Closed Issues List (Revision 12)",
    "N1229": "Friend Declaration Issues",
    "N1230": "Agenda, J16 Meeting No. 30, WG21 Meeting No. 25",
    "N1231": "Miscellaneous Template Issues for Tokyo Meeting",
    "N1232": "The core language auto_ptr problem",
    "N1233": "Technical Report on Basic I/O Hardware Addressing",
    "N1234": "Proposed Resolution for Core Issue 73",
    "N1235": "October 2000 Meeting of WG21/J16 Travel Information",
    "N1236": "C++ Standard Core Language Active Issues, Revision 10",
    "N1237": "C++ Standard Core Language Defect Reports, Revision 10",
    "N1238": "C++ Standard Core Language Closed Issues, Revision 10",
    "N1239": "C++ Standard Core Language Active Issues, Revision 12",
    "N1240": "C++ Standard Core Language Defect Reports, Revision 12",
    "N1241": "C++ Standard Core Language Closed Issues, Revision 12",
    "N1242": "C++ Standard Library Active Issues List (Revision 14)",
    "N1243": "C++ Standard Library Closed Issues List (Revision 14)",
    "N1244": "C++ Standard Library Defect Report List (Revision 14)",
    "N1245": "Binder Problem and Reference Proposal (Revised)",
    "N1246": "Fixing valarray for Real-World Use",
    "N1247": "Programmer-directed Optimizations",
    "N1248": "Draft Technical Report on Performance Issues",
    "N1249": "Drafting from Tokyo Meeting \u2014 Revision 2",
    "N1250": "Library Motions for Tokyo",
    "N1251": "Definition of Dependent Name",
    "N1252": "Shades of Namespace std Functions",
    "N1253": "Minutes, SC22/WG21, C++, Tokyo, Japan",
    "N1254": "Member Access Control \u2014 Proposed Revisions",
    "N1255": "Minutes, J16 + WG21 Meeting, Tokyo",
    "N1256": "Agenda, SC22/WG21, C++, Toronto, Canada",
    "N1257": "Business Plan and Convener's Report, ISO/IEC JTCI/SC22/WG21(C++)",
    "N1258": "ROM-ability (Performance Group)",
    "N1259": "C++ Standard Library Active Issues List (Revision 15)",
    "N1260": "C++ Standard Library Closed Issues List (Revision 15)",
    "N1261": "C++ Standard Library Defect Report List (Revision 15)",
    "N1262": "Agenda, J16 Meeting No. 31, WG21 Meeting No. 26",
    "N1263": "Default Arguments and Friend Declarations",
    "N1265": "C++ Standard Core Language Active Issues, Revision 13",
    "N1266": "C++ Standard Core Language Defect Reports, Revision 13",
    "N1267": "C++ Standard Core Language Closed Issues, Revision 13",
    "N1268": "Member Access Control and Nested Classes",
    "N1269": "C++ Standard Library Active Issues List (Revision 16)",
    "N1270": "C++ Standard Library Closed Issues List (Revision 16)",
    "N1271": "C++ Standard Library Defect Report List (Revision 16)",
    "N1272": "C++ Standard Core Language Active Issues, Revision 15",
    "N1273": "C++ Standard Core Language Defect Reports, Revision 15",
    "N1274": "C++ Standard Core Language Closed Issues, Revision 15",
    "N1275": "Minutes of ISO WG21 Meeting, October 22, 2000",
    "N1276": "Minutes of ANSI J16 and ISO WG21 Co-located Meeting, October 23-27, 2000",
    "N1278": "October 2001 WG14/WG21 Meeting",
    "N1279": "Definition of Dependent Name - Revision 2",
    "N1280": "Formal Motions",
    "N1281": "Performance TR - Working Paper",
    "N1282": "Request for Library TR",
    "N1283": "A New Work Item Proposal: Technical Report for Library Issues",
    "N1285": "Minutes of U.S. TAG Meeting, October 27, 2000",
    "N1286": "The point of destruction of a call argument temporary",
    "N1287": "Agenda, SC22/WG21, C++, Copenhagen, Denmark",
    "N1288": "Agenda, J16 Meeting No.32, WG21 Meeting No. 27, April 30-May 4, 2001",
    "N1289": "Library issues 225 and 229",
    "N1290": "Extensions for the programming language C to support embedded proces",
    "N1291": "C++ Standard Library Active Issues List (Revision 17)",
    "N1292": "C++ Standard Library Defect Report List (Revision 17)",
    "N1293": "C++ Standard Library Closed Issues List (Revision 17)",
    "N1294": "October 2001 WG14/WG21 Meeting",
    "N1295": "Partial Specialization of Function Templates",
    "N1296": "User-supplied Specializations of Standard Library Algorithms",
    "N1297": "Improved Iterator Categories and Requirements",
    "N1298": "C++ Core Language Active Issues, Revision 16",
    "N1299": "C++ Core Language Defect Reports, Revision 16",
    "N1300": "C++ Core Language Closed Issues, Revision 16",
    "N1301": "DTR 14652: Specification Method for Cultural Conventions",
    "N1302": "Core WG Defect Resolutions",
    "N1303": "Minutes of ISO WG21 Meeting, April 29, 2001",
    "N1304": "Minutes of ANSI J16 and ISO WG21 Co-located Meeting, April 30-May 4,",
    "N1305": "Agenda, SC22/WG21, C++, Redmond, Washington, USA",
    "N1306": "C++ Core Language Active Issues, Revision 18",
    "N1307": "C++ Core Language Defect Reports, Revision 18",
    "N1308": "C++ Core Language Closed Issues, Revision 18",
    "N1309": "Technical Report on C++ Performance (DRAFT)",
    "N1310": "C++ Standard Library Active Issues List (Revision 18)",
    "N1311": "C++ Standard Library Defect Report List (Revision 18)",
    "N1312": "C++ Standard Library Closed Issues List (Revision 18)",
    "N1313": "Binary Search with Heterogeneous Comparison",
    "N1314": "Notes on standard library extensions",
    "N1315": "Business Plan and Convenor's Report",
    "N1316": "Draft Expanded Technical Corrigendum",
    "N1317": "C++ Standard Library Active Issues List (Revision 19)",
    "N1318": "C++ Standard Library Defect Report List (Revision 19)",
    "N1319": "C++ Standard Library Closed Issues List (Revision 19)",
    "N1320": "Agenda, J16 Meeting No.33, WG21 Meeting No. 28, October 22-26, 2001",
    "N1321": "C++ Core Language Active Issues, Revision 19",
    "N1322": "C++ Core Language Defect Reports, Revision 19",
    "N1323": "C++ Core Language Closed Issues, Revision 19",
    "N1324": "Issue 273: POD classes and operator&",
    "N1325": "Library Technical Report Proposals List Trial Balloon",
    "N1326": "A Proposal to Add Hashtables to the Standard Library",
    "N1327": "Minutes of ISO WG21 Meeting, October 21, 2001",
    "N1328": "Minutes of ANSI J16 and ISO WG21 Co-located Meeting, 22-26 October 2001",
    "N1329": "Minutes of J16 TAG Meeting, 26 October 2001",
    "N1330": "Spring 2002 Meeting",
    "N1331": "ISO WG21 Meeting, October 21, 2001 Record of Discussion",
    "N1332": "ANSI J16 and ISO WG21 Co-located Meeting, 22-26 October 2001 Record of Discussion",
    "N1333": "J16 TAG Meeting, 26 October 2001 Record of Discussion",
    "N1334": "Draft Consolidated Technical Corrigendum",
    "N1335": "Agenda, SC22/WG21, C++, Curacao",
    "N1336": "Technical Report on C++ Performance (DRAFT)",
    "N1337": "C++ Standard Library Active Issues List (Revision 20)",
    "N1338": "C++ Standard Library Defect Report List (Revision 20)",
    "N1339": "C++ Standard Library Closed Issues List (Revision 20)",
    "N1340": "WG21 and J16 (C++) Joint Mailing and Meeting Information",
    "N1341": "C++ Standard Core Language Active Issues, Revision 20",
    "N1342": "C++ Standard Core Language Defect Reports, Revision 20",
    "N1343": "C++ Standard Core Language Closed Issues, Revision 20",
    "N1344": "Namespaces and Library Versioning",
    "N1345": "Type Traits Proposal",
    "N1346": "Agenda: J16 Meeting No. 34, WG21 Meeting No. 29, April 22-26, 2002",
    "N1347": "C++ Standard Core Language Active Issues, Revision 21",
    "N1348": "C++ Standard Core Language Defect Reports, Revision 21",
    "N1349": "C++ Standard Core Language Closed Issues, Revision 21",
    "N1350": "C++ Standard Library Active Issuess List (Revision 21)",
    "N1351": "C++ Standard Library Defect Report List (Revision 21)",
    "N1352": "C++ Standard Library Closed Issues List (Revision 21)",
    "N1353": "Local Classes and Linkage",
    "N1354": "Proposed C99 Library Additions to C++",
    "N1355": "Technical Report on C++ Performance (DRAFT)",
    "N1356": "Predictable data layout for certain non-POD types",
    "N1357": "Minutes of ISO WG21 Meeting, April 21, 2002",
    "N1358": "Minutes of ANSI J16 and ISO WG21 Co-located Meeting, 22-26 April 2002",
    "N1359": "Technical Report on C++ Performance (DRAFT)",
    "N1360": "const-correctness and other safety issues in clause 27: input/output library",
    "N1361": "Library Technical Report Proposals and Issues List (Revision 3)",
    "N1362": "Agenda for October 2002 Meeting of WG21",
    "N1363": "C++ Support for Delegation",
    "N1364": "Evolution WG Proposal Skeleton",
    "N1365": "October 2002 meeting information in Santa Cruz CA",
    "N1366": "C++ Standard Core Language Active Issues, Revision 22",
    "N1367": "C++ Standard Core Language Defect Reports, Revision 22",
    "N1368": "C++ Standard Core Language Closed Issues, Revision 22",
    "N1369": "C++ Standard Library Active Issuess List (Revision 22)",
    "N1370": "C++ Standard Library Defect Report List (Revision 22)",
    "N1371": "C++ Standard Library Closed Issues List (Revision 22)",
    "N1372": "Proposed C99 Library Additions to C++ (Revised)",
    "N1374": "WG21 Business Plan and Convener's Report",
    "N1375": "A Proposal to add a Polymorphic Function Object Wrapper to the Standard Library",
    "N1376": "Consolidated edits for core issues 245, 254, et al.",
    "N1377": "A Proposal to Add Move Semantics Support to the C++ Language",
    "N1378": "C++ Standard Core Language Active Issues, Revision 23",
    "N1379": "C++ Standard Core Language Defect Reports, Revision 23",
    "N1380": "C++ Standard Core Language Closed Issues, Revision 23",
    "N1381": "Proposal to Add Static Assertions to the Core Language",
    "N1382": "Proposal for adding tuple type into the standard library",
    "N1383": "Agenda: J16 Meeting No. 35, WG21 Meeting No. 30, October 21-25, 2002",
    "N1384": "PME: Properties, methods and events",
    "N1385": "The Forwarding Problem: Arguments",
    "N1386": "A Proposal to add Regular Expressions to the Standard Library",
    "N1387": "Proposed Resolution to LWG Issues 225, 226, 229",
    "N1388": "Enhancing numerical support",
    "N1390": "C++ Standard Library Active Issuess List (Revision 23)",
    "N1391": "C++ Standard Library Defect Report List (Revision 23)",
    "N1392": "C++ Standard Library Closed Issues List (Revision 23)",
    "N1393": "Revisions to Partial Ordering Rules",
    "N1394": "Some proposed extensions to C++ language",
    "N1395": "Aspects of Forwarding (was C++ Support For Delegation)",
    "N1396": "Technical Report on C++ Performance",
    "N1397": "Library Technical Report Proposals and Issues List (Revision 4)",
    "N1398": "A Proposal to Add an Extensible Random Number Facility to the Standard Library",
    "N1399": "A proposal to add Hash Tables to the Standard Library (revision 2)",
    "N1400": "Toward standardization of dynamic libraries",
    "N1401": "Atomic operations with multi-threaded environments",
    "N1402": "A Proposal to add a Polymorphic Function Object Wrapper to the Standard Library",
    "N1403": "Proposal for adding tuple types into the standard library",
    "N1404": "Evolution Working Group Record of Discussion",
    "N1405": "Minutes of ANSI J16 and ISO WG21 Co-located Meeting, 21-25 October 2002",
    "N1406": "Proposed Addition to C++: Typedef Templates",
    "N1408": "Qualified Namespaces",
    "N1409": "Minutes of ISO WG21 meeting, October 20, 2002",
    "N1411": "C++ Standard Library Active Issuess List (Revision 24)",
    "N1412": "C++ Standard Library Defect Report List (Revision 24)",
    "N1413": "C++ Standard Library Closed Issues List (Revision 24)",
    "N1414": "C++ Standard Core Language Active Issues, Revision 24",
    "N1415": "C++ Standard Core Language Defect Reports, Revision 24",
    "N1416": "C++ Standard Core Language Closed Issues, Revision 24",
    "N1417": "Oxford meeting information",
    "N1418": "Dynamic Libraries in C++",
    "N1419": "WG21 Agenda",
    "N1420": "Proposed Addition to C++: Class Namespaces",
    "N1421": "Agenda: J16 Meeting No. 36, WG21 Meeting No. 31, April 7-11, 2003",
    "N1422": "A Proposal to Add Mathematical Special Functions to the C++ Standard Library",
    "N1423": "2003 Five-Year Maintenance Review",
    "N1424": "A Proposal to add Type Traits to the Standard Library",
    "N1425": "Proposal for Technical Report on C++ Standard Library Security",
    "N1426": "Why We Can't Afford Export",
    "N1427": "Making Local Templates more Useful",
    "N1428": "Proposal for Dynamic Library Support in C++",
    "N1429": "A Proposal to add Regular Expression to the Standard Library",
    "N1430": "Technical Report on C++ Performance",
    "N1431": "A Proposal to Add General Purpose Smart Pointers to the Library Technical Report",
    "N1432": "A Proposal to Add an Enhanced Member Pointer Adaptor to the Library Technical Report",
    "N1433": "C++ Standard Core Language Active Issues, Revision 25",
    "N1434": "C++ Standard Core Language Defect Reports, Revision 25",
    "N1435": "C++ Standard Core Language Closed Issues, Revision 25",
    "N1436": "A proposal to add a reference wrapper to the standard library",
    "N1437": "A uniform method for computing function object return types",
    "N1438": "A Proposal to Add an Enhanced Binder to the Library Technical Report",
    "N1439": "Proposed Resolution to LWG issues 225, 226, 229",
    "N1440": "C++ Standard Library Active Issuess List (Revision 25)",
    "N1441": "C++ Standard Library Defect Report List (Revision 25)",
    "N1442": "C++ Standard Library Closed Issues List (Revision 25)",
    "N1443": "A Proposal to Add Hash Tables to the Standard Library (revision 3)",
    "N1444": "Library Technical Report Proposals and Issues List (Revision 5)",
    "N1445": "Class defaults",
    "N1448": "Controling Implicit Template Instantiation",
    "N1449": "Proposal to add template aliases to C++",
    "N1450": "A Proposal to Add General Purpose Smart Pointers to the Library Technical Report",
    "N1451": "A Case for Template Aliasing",
    "N1452": "A Proposal to Add an Extensible Random Number Facility to the Standard Library (Revision 2)",
    "N1453": "A proposal to add a reference wrapper to the standard library (revision 1)",
    "N1454": "A uniform method for computing function object return types (revision 1)",
    "N1455": "A Proposal to Add an Enhanced Binder to the Library Technical Report (revision 1)",
    "N1456": "A Proposal to Add Hash Tables to the Standard Library (revision 4)",
    "N1457": "Technical Report on C++ Performance",
    "N1458": "Minutes of ISO WG21 Meeting, April 6, 2003",
    "N1459": "Minutes of J16 Meeting No. 36/WG21 Meeting No. 31, April 7-11, 2003",
    "N1460": "WG21 agenda",
    "N1461": "Security and Standard C Libraries",
    "N1462": "Safe Exceptions and Compiler Security Checks",
    "N1463": "Draft proposal for adding Multimethods to C++",
    "N1464": "Anonymous array members",
    "N1465": "Constant inheritance",
    "N1466": "Expliciting default parameters",
    "N1467": "Non default constructors for arrays",
    "N1468": "Self methods",
    "N1469": "Inline Constants",
    "N1470": "Enum Type checking for SWITCH statements",
    "N1471": "Reflective Metaprogramming in C++",
    "N1472": "C++ Standard Core Language Active Issues, Revision 26",
    "N1473": "C++ Standard Core Language Defect Reports, Revision 26",
    "N1474": "C++ Standard Core Language Closed Issues, Revision 26",
    "N1475": "Library Technical Report Proposals and Issues List (Revision 6)",
    "N1476": "Iterator Facade and Adaptor",
    "N1477": "New Iterator Concepts",
    "N1478": "Decltype and auto",
    "N1479": "A Proposal to Add a Fixed Size Array Wrapper to the Standard Library Technical Report",
    "N1480": "C++ Standard Library Active Issues List (Revision 26)",
    "N1481": "C++ Standard Library Defect Report List (Revision 26)",
    "N1482": "C++ Standard Library Closed Issues List (Revision 26)",
    "N1483": "Typesafe Variable-length Function and Template Argument Lists",
    "N1486": "Business Plan and Convener's Report",
    "N1487": "Technical Report on C++ Performance",
    "N1488": "A name for the null pointer: nullptr",
    "N1489": "Template aliases for C++",
    "N1490": "Proposed resolution of core issue 301",
    "N1491": "AGENDA, J16 Meeting No. 37, WG21 Meeting No. 32, October 27-31, 2003, Kona, Hawaii",
    "N1492": "Exclusive Inheritance",
    "N1493": "Braces Initialization Overloading",
    "N1494": "Pure implementation method declaration",
    "N1496": "Draft Proposal for Dynamic Libraries in C++ (Revision 1)",
    "N1499": "Simplifying Interfaces in basic_regex",
    "N1500": "Regular Expressions: Internationalization and Customization",
    "N1501": "Information for March-April 2004 WG21/WG14 Meetings in Sydney, NSW Australia",
    "N1502": "Proposed Signature Changes for Special Math Functions in TR-1",
    "N1503": "Proposed Additions to TR-1 to Improve Compatibility with C99",
    "N1504": "C++ Standard Core Language Active Issues, Revision 27",
    "N1505": "C++ Standard Core Language Defect Reports, Revision 27",
    "N1506": "C++ Standard Core Language Closed Issues, Revision 27",
    "N1507": "Errata to the Regular Expression Proposal",
    "N1508": "Proposal to add Deletion Traits to the Standard Library",
    "N1509": "Generalized Initializer Lists",
    "N1510": "Concept checking - A more abstract complement to type checking",
    "N1511": "Literals for user-defined types",
    "N1512": "Evolution WG issues list",
    "N1513": "Improving Enumeration Types",
    "N1514": "A Proposal to Add Mathematical Special Functions to the C++ Standard Library (version 2)",
    "N1515": "C++ Standard Library Active Issuess List (Revision 27)",
    "N1516": "C++ Standard Library Defect Report List (Revision 27)",
    "N1517": "C++ Standard Library Closed Issues List (Revision 27)",
    "N1518": "(Draft) Technical Report on Standard Library Extensions",
    "N1519": "Type Traits Issue List",
    "N1520": "Extended friend Declarations",
    "N1521": "Generalized Constant Expressions",
    "N1522": "Concepts - Design choices for template argument checking",
    "N1523": "Proposed Resolution To LWG issues 225, 226, 229 (revision 1)",
    "N1524": "Nested Namespace Definition Proposal",
    "N1526": "Proposal to add namespace references to C++",
    "N1527": "Mechanisms for querying types of expressions: decltype and auto revisited",
    "N1528": "Syntactic Disambiguation Using the Template Keyword",
    "N1529": "Draft proposal for adding Multimethods to C++",
    "N1530": "Iterator Facade and Adaptor",
    "N1531": "New Iterator Concepts",
    "N1532": "WG20 liaison report",
    "N1534": "Proposed addition of __func__ predefined identifier from C99",
    "N1535": "Random Number Generators Issues List",
    "N1536": "Concepts - syntax and composition",
    "N1537": "C++ Standard Library Active Issues List (Revision 28)",
    "N1538": "C++ Standard Library Defect Report List (Revision 28)",
    "N1539": "C++ Standard Library Closed Issues List (Revision 28)",
    "N1540": "(Draft) Technical Report on Standard Library Extensions",
    "N1541": "Library Extension Technical Report - Issues List",
    "N1542": "A Proposal to Add Mathematical Special Functions to the C++ Standard Library (version 3)",
    "N1543": "Analysis and Proposed Resolution for Core Issue 39",
    "N1544": "Comments about Issues with Random Number Generators",
    "N1545": "Variadic Macros and Placemarkers",
    "N1546": "Alignment Proposal",
    "N1547": "Comments on the Initialization of Random Engines",
    "N1548": "A Proposal to Add a Fixed Size Array Wrapper to the Standard Library Technical Report",
    "N1549": "Const correctness in unordered associative containers",
    "N1550": "New Iterator Concepts",
    "N1551": "Changes to N1540 to Implement N1499 Parts 1 and 2",
    "N1552": "Minutes of ISO WG21 Meeting, October 26, 2003",
    "N1553": "Minutes of J16 Meeting No. 37/WG21 Meeting No. 32, October 27-31, 2003",
    "N1554": "C++ Standard Core Language Active Issues, Revision 28",
    "N1555": "C++ Standard Core Language Defect Reports, Revision 28",
    "N1556": "C++ Standard Core Language Closed Issues, Revision 28",
    "N1557": "C++/CLI Overview",
    "N1558": "Library Technical Report Component Detection",
    "N1559": "WG21 Agenda",
    "N1563": "TG5 Liaison Report to WG21",
    "N1564": "Core Issue 195 and \"Conditionally-Supported Behavior\"",
    "N1565": "Adding the long long type to C++",
    "N1566": "Synchronizing the C++ preprocessor with C99",
    "N1567": "Critique of WG14/N1016 decimal floating-point arithmetic",
    "N1568": "Proposed additions to TR-1 to improve compatibility with C99",
    "N1569": "Proposed fixes to library inconsistencies",
    "N1570": "Corrections to domain-error reporting for TR1 chapter on special math functions",
    "N1571": "C++ Standard Core Language Active Issues, Revision 29",
    "N1572": "C++ Standard Core Language Defect Reports, Revision 29",
    "N1573": "C++ Standard Core Language Closed Issues, Revision 29",
    "N1575": "Library Technical Report Component Detection (Revision 1)",
    "N1576": "Filesystem library query",
    "N1577": "Working Draft, Standard for Programming Language C++",
    "N1578": "Editor's report",
    "N1579": "Strongly Typed Enums",
    "N1580": "AGENDA J16 Meeting No. 38 WG21 Meeting No. 33 March 22-26, 2004, Sydney Australia",
    "N1581": "Delegating Constructors",
    "N1582": "Compiler Generated Defaults",
    "N1583": "Inheriting Constructors",
    "N1584": "Regularizing Initialization Syntax",
    "N1585": "Uniform Calling Syntax (Re-opening public interfaces)",
    "N1588": "On Random-Number Distributions for C++0x",
    "N1589": "complex and issue 387",
    "N1590": "Smart Pointer Comparison Operators",
    "N1591": "October 2004 Meeting Information",
    "N1592": "Explicit Conversion Operators",
    "N1593": "C++ Standard Library Active Issues List (Revision 29)",
    "N1594": "C++ Standard Library Defect Report List (Revision 29)",
    "N1595": "C++ Standard Library Closed Issues List (Revision 29)",
    "N1596": "(Draft) Technical Report on Standard Library Extensions",
    "N1597": "Library Extension Technical Report - Issues List",
    "N1598": "Evolution WG issues list",
    "N1599": "Issue 431: Swapping containers with unequal allocators",
    "N1600": "C++/CLI Properties",
    "N1601": "A name for the null pointer: nullptr (revision 2)",
    "N1602": "Class Scope Using Declarations & private Members",
    "N1603": "Variadic Templates",
    "N1604": "Proposal to Add Static Assertions to the Core Language (Revision 1)",
    "N1605": "Extending Template Type Parameters I: Namespace and scope",
    "N1607": "Decltype and auto (revision 3)",
    "N1608": "TG5 Liaison Report #2",
    "N1609": "More on Issues with Random Number Generators in the Library TR Proposal",
    "N1610": "Clarification of Initialization of Class Objects by rvalues",
    "N1611": "Implicitly-Callable Functions in C++0x",
    "N1612": "How we might remove the remaining shortcomings of std::complex<T>",
    "N1613": "Proposal to add Design by Contract to C++",
    "N1614": "#scope: A simple scoping mechanism for the C/C++ preprocessor",
    "N1615": "C++ Properties \u2014 a Library Solution",
    "N1616": "Extended friend Declarations (Rev. 1)",
    "N1617": "Proposal to Add Static Assertions to the Core Language (Revision 2)",
    "N1618": "Delegating Constructors (revision 1)",
    "N1619": "Library Extension Technical Report \u2014 Issues List",
    "N1620": "Dimension and Rank",
    "N1621": "Resolution to TR issue 4.37",
    "N1622": "Resolutions to unordered associative container issues",
    "N1623": "Resolutions to regular expression issues",
    "N1624": "Resolutions to fixed-size array issues",
    "N1625": "#scope for C/C++",
    "N1626": "Proposed Resolution for Core Issue 39 (Rev. 1)",
    "N1627": "\"Conditionally-Supported Behavior\" (Rev. 1)",
    "N1628": "Extensions for the Programming Language C++ to Support New Character Data Types",
    "N1629": "Minutes of J16 Meeting No. 38/WG21 Meeting No. 33, March 22-26, 2004",
    "N1630": "Minutes of ISO WG21 Meeting, March 21, 2004",
    "N1631": "Electronic review process",
    "N1632": "C++ Standard Core Language Active Issues, Revision 30",
    "N1633": "C++ Standard Core Language Defect Reports, Revision 30",
    "N1634": "C++ Standard Core Language Closed Issues, Revision 30",
    "N1635": "C++ Standard Library Active Issues List (Revision 30)",
    "N1636": "C++ Standard Library Defect Report List (Revision 30)",
    "N1637": "C++ Standard Library Closed Issues List (Revision 30)",
    "N1638": "Working Draft, Standard for Programming Language C++",
    "N1639": "Editor's Report",
    "N1640": "New Iterator Concepts",
    "N1641": "Iterator Facade and Adaptor",
    "N1642": "Adoption of C99's __func__ predefined identifier and improved default argument behavior",
    "N1647": "(Draft) Technical Report on Standard Library Extensions",
    "N1648": "Motivation, Objectives and Design Decisions",
    "N1649": "Right Angle Brackets",
    "N1650": "C++ Evolution Working Group \u2014 Active Proposals, Revision 1",
    "N1651": "WG21 agenda",
    "N1652": "WG21 Agenda",
    "N1653": "Working draft changes for C99 preprocessor synchronization",
    "N1654": "TG5 Liaison Report #3",
    "N1655": "Unofficial Working Draft, Standard for Programming Language C++",
    "N1656": "Editor's report",
    "N1657": "C++ Standard Library Active Issues List (Revision 31)",
    "N1658": "C++ Standard Library Defect Report List (Revision 31)",
    "N1659": "C++ Standard Library Closed Issues List (Revision 31)",
    "N1660": "(Draft) Technical Report on Standard Library Extensions",
    "N1661": "Library Extension Technical Report - Issues List",
    "N1662": "WG21 Business Plan and Convener's Report",
    "N1663": "TG5 Liaison Report #4",
    "N1664": "Toward Improved Optimization Opportunities in C++0x",
    "N1665": "Guidelines for Domain Errors in Mathematical Special Functions",
    "N1666": "Technical Report on C++ Performance",
    "N1667": "Accessing the target of a tr1::function object",
    "N1668": "A Proposal to add Mathematical Functions for Statistics to the C++ Standard Library",
    "N1669": "Proposal to add Contract Programming to C++ (revision 1)",
    "N1671": "Overloading Operator.() & Operator.*()",
    "N1672": "Adapting N1640=04-0080 To C++0x",
    "N1673": "Unifying TR1 Function Object Type Specifications",
    "N1674": "A Proposal to Improve const_iterator Use from C++0X Containers",
    "N1675": "TG5 Liaison Report #5",
    "N1676": "Non-member overloaded copy assignment operator",
    "N1677": "C++ Standard Core Language Active Issues, Revision 31",
    "N1678": "C++ Standard Core Language Defect Reports, Revision 31",
    "N1679": "C++ Standard Core Language Closed Issues, Revision 31",
    "N1680": "Memory Model for multithreaded C++",
    "N1681": "A Proposal to Add a Policy-Based Smart Pointer Framework to the Standard Library",
    "N1682": "A Multi-threading Library for Standard C++",
    "N1683": "Proposed Library Additions for Code Conversions",
    "N1684": "C++ Standard Library Active Issues List (Revision 32)",
    "N1685": "C++ Standard Library Defect Report List (Revision 32)",
    "N1686": "C++ Standard Library Closed Issues List (Revision 32)",
    "N1687": "(Draft) Technical Report on Standard Library Extensions",
    "N1688": "Library Extension Technical Report - Issues List (Revision 5)",
    "N1689": "C++0x Standard Library wishlist",
    "N1690": "A Proposal to Add an Rvalue Reference to the C++ Language",
    "N1691": "Explicit Namespaces",
    "N1692": "A Proposal to add the Infinite Precision Integer to the C++ Standard Library",
    "N1693": "Adding the long long type to C++ (Revision 1)",
    "N1694": "A Proposal to Extend the Function Call Operator",
    "N1695": "A Proposal to Make Pointers to Members Callable",
    "N1696": "Language Support for Restricted Templates",
    "N1697": "Restrictions on Order Parameters for Bessels and Other Function Families",
    "N1698": "AGENDA J16 Meeting No. 39 WG21 Meeting No. 34 Oct 17-22, 2004, Redmond, Washington",
    "N1700": "C++ Evolution Working Group \u2014 Active Proposals, Revision 1b",
    "N1701": "Regularizing Initialization Syntax (revision 1)",
    "N1702": "explicit class and default definitions",
    "N1703": "Function Qualifiers",
    "N1704": "Variadic Templates: Exploring the Design Space",
    "N1705": "Decltype and Auto (revision 4)",
    "N1706": "Toward Opaque typedefs in C++0X",
    "N1707": "Invitation April 2005 meeting",
    "N1708": "C++ Standard Library Active Issues List (Revision 33)",
    "N1709": "C++ Standard Library Defect Report List (Revision 33)",
    "N1710": "C++ Standard Library Closed Issues List (Revision 33)",
    "N1711": "(Draft) Technical Report on Standard Library Extensions",
    "N1712": "Library Extension Technical Report - Issues List",
    "N1713": "Proposed Resolution to TR1 Issues 3.12, 3.14, and 3.15",
    "N1714": "Minutes of ISO WG21 Meeting, October 17, 2004",
    "N1715": "Minutes of J16 Meeting No. 39/WG21 Meeting No. 34, October 17-22, 2004",
    "N1717": "Explicit class and default definitions",
    "N1718": "A Proposal to add the Infinite Precision Integer and Rational to the C++ Standard Library",
    "N1719": "Strongly Typed Enums (revision 1)",
    "N1720": "Proposal to Add Static Assertions to the Core Language (Revision 3)",
    "N1721": "Deducing the type of variable from its initializer expression",
    "N1722": "Extended friend Declarations (Rev. 2)",
    "N1723": "Proposed Resolutions to Library TR Issues",
    "N1724": "A Library Approach to Initialization",
    "N1725": "Copy Elision in Exception Handling",
    "N1726": "Macro scopes",
    "N1727": "Changing Undefined Behavior into Diagnosable Errors",
    "N1729": "C++ Standard Core Language Active Issues, Revision 32",
    "N1730": "C++ Standard Core Language Defect Reports, Revision 32",
    "N1731": "C++ Standard Core Language Closed Issues, Revision 32",
    "N1732": "C++0x Standard Library wishlist (revision 2)",
    "N1733": "Working Draft, Standard for Programming Language C++",
    "N1734": "Editor's report",
    "N1735": "Adding the long long type to C++ (Revision 2)",
    "N1736": "Modules in C++ (Revision 1)",
    "N1737": "A Proposal to Restore Multi-declarator auto Declarations",
    "N1738": "Memory Model for Multithreaded C++",
    "N1739": "Adding a Policy-Based Smart Pointer Framework to the Standard Library",
    "N1740": "The \"scope\" extension for the C/C++ preprocessor",
    "N1741": "Proposal for Extending the switch statement",
    "N1742": "Auxiliary class interfaces",
    "N1743": "Agenda",
    "N1744": "Big Integer Library Proposal for C++0x",
    "N1745": "Proposed Draft Technical Report on C++ Library Extensions",
    "N1746": "Adding extended integer types to C++",
    "N1747": "C++ Standard Core Language Active Issues, Revision 33",
    "N1748": "C++ Standard Core Language Defect Reports, Revision 33",
    "N1749": "C++ Standard Core Language Closed Issues, Revision 33",
    "N1750": "Critique of Code Conversion Proposal (N1683)",
    "N1751": "Aspects of Reflection in C++",
    "N1752": "C++0x Standard Library wishlist (revision 3)",
    "N1753": "C++ Standard Library Active Issues List (Revision 34)",
    "N1754": "C++ Standard Library Defect Report List (Revision 34)",
    "N1755": "C++ Standard Library Closed Issues List (Revision 34)",
    "N1756": "Library Extension Technical Report - Issues List",
    "N1757": "Right Angle Brackets (Revision 1)",
    "N1758": "Concepts for C++0x",
    "N1759": "TG5 Liaison Report #6",
    "N1760": "TG5 Liaison Report #7",
    "N1761": "TG5 Liaison Report #8",
    "N1762": "C++ Standard Library Active Issues List (Revision 35)",
    "N1763": "C++ Standard Library Defect Report List (Revision 35)",
    "N1764": "C++ Standard Library Closed Issues List (Revision 35)",
    "N1765": "Library Extension Technical Report - Issues List",
    "N1766": "C++0x Standard Library wishlist (revision 4)",
    "N1767": "C++ Standard Core Language Active Issues, Revision 34",
    "N1768": "C++ Standard Core Language Defect Reports, Revision 34",
    "N1769": "C++ Standard Core Language Closed Issues, Revision 34",
    "N1770": "A Proposal to Add an Rvalue Reference to the C++ Language: Proposed Wording",
    "N1771": "Impact of the rvalue reference on the Standard Library",
    "N1772": "Agenda",
    "N1773": "Proposal to add Contract Programming to C++ (revision 2)",
    "N1774": "On the Future Evolution of C++",
    "N1775": "A Case for Reflection",
    "N1776": "Decimal Types for C++",
    "N1777": "Memory model for multithreaded C++: Issues",
    "N1778": "Modules in C++ (Revision 1)",
    "N1780": "Comments on LWG issue 233: Insertion hints in associative containers",
    "N1781": "Rules of thumb for the design of C++0x",
    "N1782": "A concept design (Rev. 1)",
    "N1783": "TG5 Liaison Report #9",
    "N1784": "A proposal to add l-value member function qualifier",
    "N1785": "Toward a Proposal for Object Templates in C++0x",
    "N1786": "C++ Standard Core Language Active Issues, Revision 35",
    "N1787": "C++ Standard Core Language Defect Reports, Revision 35",
    "N1788": "C++ Standard Core Language Closed Issues, Revision 35",
    "N1789": "Minutes of J16 Meeting No. 40/WG21 Meeting No. 34, April 11-15, 2005",
    "N1790": "Minutes of ISO WG21 Meeting, April 10, 2005",
    "N1791": "Extended friend Declarations (Rev. 3)",
    "N1792": "A Modest Proposal: Fixing ADL",
    "N1794": "Deducing the type of variable from its initializer expression (revision 2)",
    "N1796": "Proposal for new for-loop",
    "N1798": "Explicit model definitions are necessary",
    "N1799": "C++ Language Support for Generic Programming",
    "N1800": "Contract Programming For C++0x",
    "N1801": "Proposed resolution of core issue 301",
    "N1802": "Uniform Use of std::string",
    "N1803": "Simple Numeric Access",
    "N1804": "Working Draft, Standard for Programming Language C++",
    "N1805": "Editor's Report",
    "N1806": "C++ Standard Library Active Issues List (Revision R36)",
    "N1807": "C++ Standard Library Defect Report List (Revision R36)",
    "N1808": "C++ Standard Library Closed Issues List (Revision R36)",
    "N1809": "Library Extension Technical Report - Issues List",
    "N1810": "Library Extension TR2 Call for Proposals",
    "N1811": "Adding the long long type to C++ (Revision 3)",
    "N1814": "October 2005 Meeting Information (Revision 1)",
    "N1815": "ISO C++ Strategic Plan for Multithreading",
    "N1816": "Business Plan and Convener's Report",
    "N1817": "Agenda",
    "N1818": "C++ Standard Core Language Active Issues, Revision 36",
    "N1819": "C++ Standard Core Language Defect Reports, Revision 36",
    "N1820": "C++ Standard Core Language Closed Issues, Revision 36",
    "N1821": "Extending Move Semantics To *this (Revision 2)",
    "N1822": "A Proposal to add a max significant decimal digits value to the C++ Standard Library Numeric limits",
    "N1823": "New Character Types in C++",
    "N1824": "Extending Aggregate Initialization",
    "N1825": "Addressing Exception Specifications for Next Generation of C++",
    "N1827": "An Explicit Override Syntax for C++",
    "N1830": "C++ Standard Library Active Issues List (Revision R37)",
    "N1831": "C++ Standard Library Defect Report List (Revision R37)",
    "N1832": "C++ Standard Library Closed Issues List (Revision R37)",
    "N1833": "Transparent Garbage Collection for C++",
    "N1834": "A Pleading for Reasonable Parallel Processing Support in C++",
    "N1835": "<stdint.h> for C++",
    "N1836": "Draft Technical Report on C++ Library Extensions",
    "N1837": "Library Extension Technical Report - Issues List",
    "N1838": "A Proposal to Add Sockets to the Standard Library",
    "N1839": "Decimal Types for C++: Second Draft",
    "N1840": "C++0x Proposal: Function template std::minmax and / or algorithm std::minmax_element",
    "N1841": "Filesystem Library Proposal",
    "N1842": "A Proposal to add two iostream manipulators to the C++ Standard Library",
    "N1843": "A Proposal to add Interval Arithmetic to the C++ Standard Library",
    "N1844": "C++ Standard Core Language Active Issues, Revision 37",
    "N1845": "C++ Standard Core Language Defect Reports, Revision 37",
    "N1846": "C++ Standard Core Language Closed Issues, Revision 37",
    "N1847": "vector<bool>: More Problems, Better Solutions",
    "N1848": "Implementing Concepts",
    "N1849": "Concepts for C++0x Revision 1",
    "N1850": "Towards a Better Allocator Model",
    "N1851": "Improving Usability and Performance of TR1 Smart Pointers",
    "N1852": "C++ Standard Library Active Issues List (Revision R38)",
    "N1853": "C++ Standard Library Defect Report List (Revision R38)",
    "N1854": "C++ Standard Library Closed Issues List (Revision R38)",
    "N1855": "A Proposal to Add an Rvalue Reference to the C++ Language: Proposed Wording",
    "N1856": "Rvalue Reference Recommendations for Chapter 20",
    "N1857": "Rvalue Reference Recommendations for Chapter 21",
    "N1858": "Rvalue Reference Recommendations for Chapter 23",
    "N1859": "Rvalue Reference Recommendations for Chapter 24",
    "N1860": "Rvalue Reference Recommendations for Chapter 25",
    "N1861": "Rvalue Reference Recommendations for Chapter 26",
    "N1862": "Rvalue Reference Recommendations for Chapter 27",
    "N1864": "TG4 liaison report",
    "N1865": "A Proposal to Improve const_iterator Use (version 2)",
    "N1866": "Proposal to add Contract Programming to C++ (revision 3)",
    "N1867": "Synergies between Contract Programming, Concepts and Static Assertions",
    "N1868": "Proposal for new for-loop (revision 1)",
    "N1869": "Wording for imaginary numbers",
    "N1870": "14 crazy ideas for the standard library in C++0x",
    "N1871": "Range Library Proposal",
    "N1872": "Proposal for new string algorithms in C++0x",
    "N1873": "The Cursor/Property Map Abstraction",
    "N1874": "Thread-Local Storage",
    "N1875": "C++ Threads",
    "N1876": "Memory model for multithreaded C++: August 2005 status update",
    "N1877": "Adding Alignment Support to the C++ Programming Language",
    "N1878": "A proposal to add an utility class to represent optional objects (Revision 1)",
    "N1879": "A proposal to add a general purpose ranged-checked numeric_cast<> (Revision 1)",
    "N1880": "A proposal to extend numeric_limits for consistent range query (Revision 1)",
    "N1882": "AGENDA",
    "N1883": "Preliminary Threading Library Proposal for TR2",
    "N1884": "Further Restrictions on Special Math Functions",
    "N1885": "A formalism for C++",
    "N1886": "Specifying C++ concepts",
    "N1887": "Meeting information for SC 22/WG 21 Meetings in Berlin",
    "N1888": "Defining Members of Explicit Specializations",
    "N1889": "Filesystem Library Proposal for TR2 (Revision 1)",
    "N1890": "Initialization and initializers",
    "N1891": "Progress toward Opaque Typedefs for C++0X",
    "N1892": "Extensible Literals",
    "N1893": "A Modest Proposal: Fixing ADL (revision 1)",
    "N1894": "Deducing the type of variable from its initializer expression (revision 3)",
    "N1895": "Delegating Constructors (revision 2)",
    "N1896": "Proposed resolution of core issue 301 (revision 1)",
    "N1898": "Forwarding and inherited constructors",
    "N1899": "Concept proposal comparison",
    "N1900": "Proposal to Add Date-Time to the C++ Standard Library",
    "N1901": "C++0x Standard Library wishlist (revision 5)",
    "N1902": "C++ Standard Core Language Active Issues, Revision 38",
    "N1903": "C++ Standard Core Language Defect Reports, Revision 38",
    "N1904": "C++ Standard Core Language Closed Issues, Revision 38",
    "N1905": "Working Draft, Standard for Programming Language C++",
    "N1906": "Editor's Report",
    "N1907": "A Multi-threading Library for Standard C++, Revision 1",
    "N1908": "C++ Standard Library Active Issues List (Revision R39)",
    "N1909": "C++ Standard Library Defect Report List (Revision R39)",
    "N1910": "C++ Standard Library Closed Issues List (Revision R39)",
    "N1911": "Memory Model for C++: Status update",
    "N1912": "A sketch for a namespace() operator",
    "N1913": "A Proposal to Improve const_iterator Use (version 3)",
    "N1914": "A Proposal to Add Random-Number Distributions to C++0x",
    "N1915": "Minutes of J16 Meeting No. 41/WG21 Meeting No. 35, October 3-8, 2005",
    "N1916": "Minutes of ISO WG21 Meeting, October 2, 2005",
    "N1917": "Agenda",
    "N1919": "Initializer lists",
    "N1924": "TG5 Liaison Report #11",
    "N1925": "Networking proposal for TR2 (rev. 1)",
    "N1926": "C++ Standard Library Active Issues List (Revision R40)",
    "N1927": "C++ Standard Library Defect Report List (Revision R40)",
    "N1928": "C++ Standard Library Closed Issues List (Revision R40)",
    "N1929": "C++ Standard Core Language Active Issues, Revision 39",
    "N1930": "C++ Standard Core Language Defect Reports, Revision 39",
    "N1931": "C++ Standard Core Language Closed Issues, Revision 39",
    "N1932": "Random Number Generation in C++0X: A Comprehensive Proposal",
    "N1933": "Improvements to TR1's Facility for Random Number Generation",
    "N1934": "Filesystem Library Proposal for TR2 (Revision 2)",
    "N1935": "C++ Standard Core Language Active Issues, Revision 40",
    "N1936": "C++ Standard Core Language Defect Reports, Revision 40",
    "N1937": "C++ Standard Core Language Closed Issues, Revision 40",
    "N1938": "Lookup Issues in Destructor and Pseudo-Destructor References",
    "N1939": "Any Library Proposal for TR2",
    "N1940": "Why POSIX Threads Are Unsuitable for C++",
    "N1941": "Agenda: J16 Meeting No. 42, WG21 Meeting No. 37",
    "N1942": "A Memory Model for C++: Strawman Proposal",
    "N1943": "Transparent Garbage Collection for C++",
    "N1944": "A finer-grained alternative to sequence points",
    "N1945": "Names, Linkage, and Templates",
    "N1946": "Portland meeting information",
    "N1947": "The Memory Model and the C++ Library, Non-Memory Actions etc.",
    "N1949": "C++ Standard Library Active Issues List (Revision R41)",
    "N1950": "C++ Standard Library Defect Report List (Revision R41)",
    "N1951": "C++ Standard Library Closed Issues List (Revision R41)",
    "N1952": "A Proposal to Add an Rvalue Reference to the C++ Language: Proposed Wording Revision 2",
    "N1953": "Upgrading the Interface of Allocators using API Versioning",
    "N1954": "LWG Paper Summary",
    "N1955": "New Character Types in C++",
    "N1956": "A Design Rationale for C++/CLI Version 1.1",
    "N1957": "Proposed Library Additions for Code Conversion",
    "N1958": "A proposal to add lambda functions to the C++ standard",
    "N1959": "Class member initializers",
    "N1960": "Adding \"extern template\"",
    "N1961": "Wording for range-based for-loop",
    "N1962": "Proposal to add Contract Programming to C++ (revision 4)",
    "N1963": "Generic Support for Threading Models",
    "N1964": "Modules in C++ (Revision 3)",
    "N1965": "Decimal Types for C++: Draft 3",
    "N1966": "Thread-Local Storage",
    "N1968": "Lambda expressions and closures for C++",
    "N1969": "State of C++ Evolution (before Berlin 2006 Meeting)",
    "N1970": "C99 Compatibility : __func__ and predeclared identifiers",
    "N1971": "Adding Alignment Support to the C++ Programming Language",
    "N1972": "Generalized Constant Expressions \u2014 Revision 2",
    "N1973": "Lexical Conversion Library Proposal for TR2",
    "N1974": "Boost Network Library Query",
    "N1975": "Filesystem Library Proposal for TR2 (Revision 3)",
    "N1976": "Dynamic Shared Objects: Survey and Issues",
    "N1977": "Decimal Types for C++: Draft 4",
    "N1978": "Decltype (revision 5)",
    "N1980": "Generalized Constant Expressions\u2014 Revision 3",
    "N1981": "Uniform Use of std::string Revision 1",
    "N1982": "Simple Numeric Access Revision 1",
    "N1983": "long long, size t and compatibility",
    "N1984": "Deducing the type of variable from its initializer expression (revision 4)",
    "N1985": "Request the Standard Provide Explicit Specialization of char_traits For All Built-in Character Types",
    "N1986": "Delegating Constructors (revision 3)",
    "N1987": "Adding \"extern template\" (version 2)",
    "N1988": "Adding extended integer types to C++ (Revision 1)",
    "N1990": "Proposed Text for minmax (N1840)",
    "N1991": "Proposed Text for defaultfloat (N1842)",
    "N1992": "Minutes of ISO WG21 Meeting, April 2, 2006",
    "N1993": "Minutes of J16 Meeting No. 42/WG21 Meeting No. 37, April 3-7, 2006",
    "N1997": "C++ Standard Core Language Active Issues, Revision 41",
    "N1998": "C++ Standard Core Language Defect Reports, Revision 41",
    "N1999": "C++ Standard Core Language Closed Issues, Revision 41",
    "N2000": "C++ Standard Library Active Issues List (Revision R42)",
    "N2001": "C++ Standard Library Defect Report List (Revision R42)",
    "N2002": "C++ Standard Library Closed Issues List (Revision R42)",
    "N2003": "LWG Paper Summary",
    "N2004": "Impact of Language Changes on LWG Schedule",
    "N2005": "A maximum significant decimal digits value for the C++0x Standard Library Numeric limits",
    "N2006": "Accessibility and Visibility in C++ Modules",
    "N2007": "Proposed Library Additions for Code Conversion",
    "N2008": "Editor's Report",
    "N2009": "Working Draft, Standard for Programming Language C++",
    "N2010": "Memory Model Overview",
    "N2011": "State of C++ Evolution (after Berlin 2006 Meeting)",
    "N2012": "Thread Subcommittee Minutes from Berlin",
    "N2013": "Versioning with Namespaces",
    "N2014": "C99 and POSIX(2001) Compatibility",
    "N2015": "Plugins in C++",
    "N2016": "Should volatile Acquire Atomicity and Thread Visibility Semantics?",
    "N2018": "New Character Types in C++",
    "N2019": "Agenda",
    "N2020": "Proposal for an Infinite Precision Integer for Library Technical Report 2, Revision 1",
    "N2021": "Business plan and convenor's report",
    "N2022": "Input & Output of NaN and infinity for the C++ Standard Library",
    "N2023": "erase(iterator) for unordered containers should not return an iterator",
    "N2024": "C++ Standard Library Active Issues List (Revision R43)",
    "N2025": "C++ Standard Library Defect Report List (Revision R43)",
    "N2026": "C++ Standard Library Closed Issues List (Revision R43)",
    "N2027": "A Brief Introduction to Rvalue References",
    "N2028": "Minor Modifications to the type traits Wording",
    "N2029": "C++ Standard Core Language Active Issues, Revision 42",
    "N2030": "C++ Standard Core Language Defect Reports, Revision 42",
    "N2031": "C++ Standard Core Language Closed Issues, Revision 42",
    "N2032": "Random Number Generation in C++0X: A Comprehensive Proposal, version 2",
    "N2033": "Proposal to Consolidate the Subtract-with-Carry Engines",
    "N2034": "C++0x Standard Library wishlist (revision 6)",
    "N2035": "Minimal Unicode support for the standard library",
    "N2036": "Concepts for the C++0x Standard Library: Approach",
    "N2037": "Concepts for the C++0x Standard Library: Introduction",
    "N2038": "Concepts for the C++0x Standard Library: Utilities",
    "N2039": "Concepts for the C++0x Standard Library: Iterators",
    "N2040": "Concepts for the C++0x Standard Library: Algorithms",
    "N2041": "Concepts for the C++0x Standard Library: Numerics",
    "N2042": "Concepts",
    "N2043": "Simplifying And Extending Mutex and Scoped Lock Types For C++ Multi-Threading Library",
    "N2044": "Memory Mapped Files And Shared Memory For C++",
    "N2045": "Improving STL Allocators",
    "N2046": "Bool_set: multi-valued logic",
    "N2047": "An Atomic Operations Library for C++",
    "N2049": "Conceptualizing the Range-Based for Loop",
    "N2050": "Proposal to Add a Dynamically Sizeable Bitset to the Standard Library Technical Report Revision 1",
    "N2051": "Evolution of the C++ Standard Library",
    "N2052": "Sequencing and the concurrency memory model",
    "N2053": "Raw String Literals",
    "N2054": "Networking Library Proposal for TR2",
    "N2055": "C++ Standard Core Language Active Issues, Revision 43",
    "N2056": "C++ Standard Core Language Defect Reports, Revision 43",
    "N2057": "C++ Standard Core Language Closed Issues, Revision 43",
    "N2058": "Proposed Text for Proposal to add Date-Time to the Standard Library 1.0",
    "N2059": "Proposal for new string algorithms in TR2",
    "N2061": "Library Exception Propagation Support",
    "N2062": "POD's Revisited",
    "N2063": "AGENDA: J16 Meeting No. 43, WG21 Meeting No. 38",
    "N2065": "A proposal to add stream objects based on fixed memory buffers",
    "N2066": "TR2 Diagnostics Enhancements",
    "N2067": "A Proposal to add Interval Arithmetic to the C++ Standard Library",
    "N2068": "Range Library Core",
    "N2069": "Yet another type-trait: decay",
    "N2070": "Enhancing the time_get facet for POSIX\ufffd compatibility",
    "N2071": "Iostream manipulators for convenient extraction and insertion of struct tm objects",
    "N2072": "Iostream manipulators for convenient extraction and insertion of monetary values",
    "N2073": "Modules in C++ (Revision 4)",
    "N2074": "Plugins in C++",
    "N2075": "Prism: A Principle-Based Sequential Memory Model for Microsoft Native Code Platforms",
    "N2076": "Oxford meeting invitation",
    "N2079": "Random Number Generation in C++0X: A Comprehensive Proposal, version 3",
    "N2080": "Variadic Templates (Revision 3)",
    "N2081": "Concepts (Revision 1)",
    "N2082": "Concepts for the C++0x Standard Library: Utilities (Revision 1)",
    "N2083": "Concepts for the C++0x Standard Library: Iterators (Revision 1)",
    "N2084": "Concepts for the C++0x Standard Library: Algorithms (Revision 1)",
    "N2085": "Concepts for the C++0x Standard Library: Containers",
    "N2086": "Signals and Slots for Library TR2",
    "N2087": "A Brief Introduction to Variadic Templates",
    "N2088": "IEEE 754R Support and Threading (and Decimal)",
    "N2089": "Asynchronous Exceptions for Threads",
    "N2090": "A Threading API for C++",
    "N2091": "C++ Standard Library Active Issues List (Revision R44)",
    "N2092": "C++ Standard Library Defect Report List (Revision R44)",
    "N2093": "C++ Standard Library Closed Issues List (Revision R44)",
    "N2094": "Multithreading API for C++0X - A Layered Approach",
    "N2095": "long long Goes to the Library",
    "N2096": "Transporting Values and Exceptions between Threads",
    "N2098": "Scoped Concept Maps",
    "N2099": "3 of the least crazy ideas for the standard library in C++0x",
    "N2100": "Initializer lists",
    "N2101": "Hierarchical Data Structures and Related Concepts for the C++ Standard Library",
    "N2102": "POD's Revisited; Resolving Core Issue 568 (Revision 1)",
    "N2103": "A Modest Proposal: Fixing ADL (revision 2)",
    "N2104": "A Proposal to Add Parallel Iteration to the Standard Library",
    "N2105": "Proposed C++0x Keywords Considered",
    "N2106": "Cloning and Throwing Dynamically Typed Exceptions",
    "N2107": "Exception Propagation across Threads",
    "N2108": "Explicit Virtual Overides",
    "N2109": "Minutes of ISO WG21 Meeting, October 15, 2006",
    "N2110": "Minutes of J16 Meeting No. 43/WG21 Meeting No. 38, October 16-20, 2006",
    "N2111": "Random Number Generation in C++0X: A Comprehensive Proposal, version 4",
    "N2112": "Templates Aliases",
    "N2114": "long long Goes to the Library, Revision 1",
    "N2115": "Decltype (revision 6): proposed wording",
    "N2116": "Generalized Constant Expressions\u2014 Revision 4",
    "N2117": "Minimal Dynamic Library Support",
    "N2118": "A Proposal to Add an Rvalue Reference to the C++ Language: Proposed Wording: Revision 3",
    "N2119": "Inheriting Constructors",
    "N2120": "April 2007 Meeting",
    "N2121": "Proposed Improvements to the Presentation of Requirements for Functions",
    "N2122": "State of C++ Evolution (after Portland 2006 Meeting)",
    "N2123": "Adding the prohibited access specifier to C++09",
    "N2125": "C++ Standard Core Language Active Issues, Revision 44",
    "N2126": "C++ Standard Core Language Defect Reports, Revision 44",
    "N2127": "C++ Standard Core Language Closed Issues, Revision 44",
    "N2128": "Transparent Programmer-Directed Garbage Collection for C++",
    "N2129": "Transparent Garbage Collection for C++ (Revised)",
    "N2130": "C++ Standard Library Active Issues List (Revision R45)",
    "N2131": "C++ Standard Library Defect Report List (Revision R45)",
    "N2132": "C++ Standard Library Closed Issues List (Revision R45)",
    "N2133": "Editor's Report",
    "N2134": "Working Draft, Standard for Programming Language C++",
    "N2135": "Programming Languages \u2014C++",
    "N2136": "Bool_set: multi-valued logic (revision 1)",
    "N2137": "A Proposal to add Interval Arithmetic to the C++ Standard Library (revision 2)",
    "N2138": "A Less Formal Explanation of the Proposed C++ Concurrency Memory Model",
    "N2139": "Thoughts on a Thread Library for C++",
    "N2140": "Adding Alignment Support to the C++ Programming Language / Consolidated",
    "N2141": "Strong Typedefs in C++09(Revisited)",
    "N2142": "State of C++ Evolution (between Portland and Oxford 2007 Meetings)",
    "N2143": "Proposal for an Infinite Precision Integer for Library Technical Report 2, Revision 2",
    "N2144": "Proposal for exact specification of is modulo",
    "N2145": "C++ Atomic Types and Operations",
    "N2146": "Raw String Literals (Revision 1)",
    "N2147": "Thread-Local Storage",
    "N2148": "Dynamic Initialization and Destruction with Concurrency",
    "N2149": "New Character Types in C++",
    "N2150": "Extending sizeof to apply to non-static data members without an object",
    "N2151": "Variadic Templates for the C++0x Standard Library",
    "N2152": "Proposed Wording for Variadic Templates",
    "N2153": "A simple and efficient memory model for weakly-ordered architectures",
    "N2154": "C++ Standard Library Active Issues List (Revision R46)",
    "N2155": "C++ Standard Library Defect Report List (Revision R46)",
    "N2156": "C++ Standard Library Closed Issues List (Revision R46)",
    "N2157": "Minor Modifications to the type traits Wording Revision 1",
    "N2158": "LWG Issue 206: Linking new/delete operators",
    "N2159": "UTF-8 String Literals",
    "N2160": "Library Issue 96: Fixing vector<bool>",
    "N2161": "Considering Concept Constraint Combinators",
    "N2162": "C++ Standard Core Language Active Issues, Revision 45",
    "N2163": "C++ Standard Core Language Defect Reports, Revision 45",
    "N2164": "C++ Standard Core Language Closed Issues, Revision 45",
    "N2165": "Adding Alignment Support to the C++ Programming Language / Wording",
    "N2166": "Agenda",
    "N2167": "Overview of Linux-Kernel Reference Counting",
    "N2168": "July 2007 Meeting of WG21/J16 Travel Information",
    "N2169": "State of C++ Evolution (pre-Oxford 2007 Meeting)",
    "N2170": "Universal Character Names in Literals",
    "N2171": "Sequencing and the concurrency memory model (revised)",
    "N2172": "POD's Revisited; Resolving Core Issue 568 (Revision 2)",
    "N2173": "Core Extensions for Evolution",
    "N2174": "Diagnostics Enhancements for C++0x",
    "N2175": "Networking Library Proposal for TR2 (Revision 1)",
    "N2176": "Memory Model Rationales",
    "N2177": "Sequential Consistency for Atomics",
    "N2178": "Proposed Text for Chapter 30, Thread Support Library [threads]",
    "N2179": "Language Support for Transporting Exceptions between Threads",
    "N2180": "C++ Standard Library Active Issues List (Revision R47)",
    "N2181": "C++ Standard Library Defect Report List (Revision R47)",
    "N2182": "C++ Standard Library Closed Issues List (Revision R47)",
    "N2183": "Issues From Batavia",
    "N2184": "Thread Launching for C++0X",
    "N2185": "Proposed Text for Parallel Task Execution",
    "N2186": "Some Small Additions to iostream",
    "N2187": "Names, Linkage, and Templates (rev 1)",
    "N2188": "C++ Standard Core Language Defect Reports, Revision 46",
    "N2189": "C++ Standard Core Language Active Issues, Revision 46",
    "N2190": "C++ Standard Core Language Closed Issues, Revision 46",
    "N2191": "Proposed Wording for Variadic Templates (Revision 1)",
    "N2192": "Variadic Templates for the C++0x Standard Library (Revision 1)",
    "N2193": "Proposed Wording for Concepts",
    "N2194": "decltype for the C++0x Standard Library",
    "N2195": "Proposed Text for Chapter 29, Atomic Operations Library [atomics]",
    "N2196": "Wording for range-based for-loop (revision 1)",
    "N2197": "Prism: A Principle-Based Sequential Memory Model for Microsoft Native Code Platforms",
    "N2198": "Extension for the programming language C++ to support decimal floating-point arithmetic",
    "N2199": "Improved min/max",
    "N2200": "Operator Overloading",
    "N2201": "AGENDA J16 Meeting No. 44 WG21 Meeting No. 39 April 16-20, 2006, Oxford, UK",
    "N2202": "C99 Compatibility : __func__ and predeclared identifiers",
    "N2203": "Inheriting Constructors",
    "N2204": "A Specification to deprecate vector<bool>",
    "N2206": "Consistent Insertion into Standard Containers",
    "N2207": "Minimal Unicode support for the standard library (revision 2)",
    "N2209": "UTF-8 String Literals",
    "N2210": "Defaulted and Deleted Functions",
    "N2211": "Enhancing the time_get facet for POSIX\ufffd compatibility, Revision 1",
    "N2212": "Support for sequence in-place construction",
    "N2213": "Strongly Typed Enums (revision 2)",
    "N2214": "A name for the null pointer: nullptr (revision 3)",
    "N2215": "Initializer lists (Rev. 3)",
    "N2216": "Report on language support for Multi-Methods and Open-Methods for C++",
    "N2217": "Placement Insert for Containers",
    "N2219": "Constant Expressions in the Standard Library",
    "N2220": "Initializer Lists for Standard Containers",
    "N2221": "An analysis of concept intersection",
    "N2222": "Toronto Agenda",
    "N2223": "Explicit Conversion Operator Draft Working Paper",
    "N2224": "Seeking a Syntax for Attributes in C++09",
    "N2225": "Improved integration with C arrays and strings",
    "N2228": "State of C++ Evolution (pre-Oxford 2007 Meeting)",
    "N2229": "Cloning and Throwing Dynamically Typed Exceptions (Rev 1)",
    "N2230": "POD's Revisited; Resolving Core Issue 568 (Revision 3)",
    "N2231": "STL singly linked lists",
    "N2232": "Improving shared_ptr for C++0x",
    "N2233": "basic_string operator <<",
    "N2234": "French Panel (AFNOR) Position",
    "N2235": "Generalized Constant Expressions\u2014Revision 5",
    "N2236": "Towards support for attributes in C++",
    "N2237": "A simple and efficient memory model for weakly-ordered architectures",
    "N2238": "Minimal Unicode support for the standard library (revision 3)",
    "N2239": "A finer-grained alternative to sequence points (revised)",
    "N2240": "Two missing traits: enable_if and conditional",
    "N2241": "Diagnostics Enhancements for C++0x (Rev. 1)",
    "N2242": "Proposed Wording for Variadic Templates (Revision 2)",
    "N2243": "Wording for range-based for-loop (revision 2)",
    "N2244": "Wording for decay, make_pair and make_tuple",
    "N2245": "Range Utilities for C++0x",
    "N2246": "2 of the least crazy ideas for the standard library in C++0x",
    "N2248": "Toward a More Perfect Union",
    "N2249": "New Character Types in C++",
    "N2251": "C99 Compatibility : __func__ and predeclared identifiers (revision 1)",
    "N2252": "Adding Alignment Support to the C++ Programming Language / Wording",
    "N2253": "Extending sizeof to apply to non-static data members without an object (revision 1)",
    "N2254": "Inheriting Constructors (revision 1)",
    "N2255": "Minor Modifications to the type traits Wording Revision 2",
    "N2256": "Container insert/erase and iterator constness",
    "N2257": "Removing unused allocator functions",
    "N2258": "Templates Aliases",
    "N2259": "Specify header dependency for <iostream>",
    "N2260": "C++ Data-Dependency Ordering",
    "N2261": "Optimization-robust finalization",
    "N2262": "Explicit Memory Fences",
    "N2263": "C++ Standard Core Language Active Issues, Revision 47",
    "N2264": "C++ Standard Core Language Defect Reports, Revision 47",
    "N2265": "C++ Standard Core Language Closed Issues, Revision 47",
    "N2266": "Minutes of J16 Meeting No. 44/WG21 Meeting No. 39, April 16-20, 2007",
    "N2267": "Minutes of ISO WG21 Meeting, April 15, 2007",
    "N2268": "Placement Insert for Containers (Revision 1)",
    "N2269": "AGENDA July 16-20, 2007, Toronto, Ontario, Canada",
    "N2270": "Incompatible changes in C++0x",
    "N2271": "EASTL \u2014 Electronic Arts Standard Template Library",
    "N2272": "Optional Sequential Consistency",
    "N2273": "Non-Memory Actions (Core Aspects)",
    "N2274": "Object Aliasing and Threads",
    "N2275": "Non-Memory Actions (Library)",
    "N2276": "Thread Pools and Futures",
    "N2277": "C++ Standard Library Active Issues List (Revision R48)",
    "N2278": "C++ Standard Library Defect Report List (Revision R48)",
    "N2279": "C++ Standard Library Closed Issues List (Revision R48)",
    "N2280": "Thread-Local Storage",
    "N2281": "Digit Separators",
    "N2282": "Extensible Literals (revision 2)",
    "N2283": "Editor's report",
    "N2284": "Working Draft, Standard for Programming Language C++",
    "N2285": "A Multi-threading Library for Standard C++, Revision 2",
    "N2286": "Programmer Directed GC for C++",
    "N2287": "Transparent Programmer-Directed Garbage Collection for C++",
    "N2288": "Constant Expressions in the Standard Library \u2014Revision 1",
    "N2289": "October 2007 Meeting",
    "N2290": "Business plan and convenor's report",
    "N2291": "State of C++ Evolution (Toronto 2007 Meeting)",
    "N2292": "Standard Library Applications for Deleted Functions",
    "N2293": "Standard Library Applications for Explicit Conversion Operators",
    "N2294": "POD's Revisited; Resolving Core Issue 568 (Revision 4)",
    "N2295": "Raw and Unicode String Literals; Unified Proposal",
    "N2296": "Diagnostics Enhancements; Resolution of Small Issues",
    "N2297": "Improving shared_ptr for C++0x, Revision 1",
    "N2298": "Thread-Safety in the Standard Library",
    "N2299": "Concatenating tuples",
    "N2300": "Concurrency memory model (revised)",
    "N2301": "Adding Alignment Support to the C++ Programming Language / Wording",
    "N2303": "Revised system_error",
    "N2304": "C++ Standard Core Language Active Issues, Revision 48",
    "N2305": "C++ Standard Core Language Defect Reports, Revision 48",
    "N2306": "C++ Standard Core Language Closed Issues, Revision 48",
    "N2307": "Proposed Wording for Concepts (Revision 1)",
    "N2308": "Adding allocator support to std::function for C++0x",
    "N2309": "Error-handling and Exception-related library changes for C++0x",
    "N2310": "Transparent Programmer-Directed Garbage Collection for C++",
    "N2311": "2008 Fees for Participation on INCITS Technical Committees and Task Groups",
    "N2312": "Namespace Regions",
    "N2314": "Editor's report",
    "N2315": "Working Draft, Standard for Programming Language C++",
    "N2316": "Modules in C++ (Revision 5)",
    "N2317": "C++ Standard Library Active Issues List (Revision R49)",
    "N2318": "C++ Standard Library Defect Report List (Revision R49)",
    "N2319": "C++ Standard Library Closed Issues List (Revision R49)",
    "N2320": "Multi-threading Library for Standard C++",
    "N2321": "Enhancing the time_get facet for POSIX\ufffd compatibility, Revision 2",
    "N2322": "Concepts for the C++0x Standard Library: Utilities (Revision 2)",
    "N2323": "Concepts for the C++0x Standard Library: Iterators (Revision 2)",
    "N2324": "C++ Atomic Types and Operations",
    "N2325": "Dynamic Initialization and Destruction with Concurrency",
    "N2326": "Defaulted and Deleted Functions",
    "N2327": "Inconsistencies in IOStreams Numeric Extraction",
    "N2328": "Proposal for Date-Time Types in C++0x To Support Threading APIs",
    "N2329": "Lambda expressions and closures for C++ (Revision 1)",
    "N2331": "Namespace Association (\"strong\" using)",
    "N2332": "Argument Deduction for Constructors",
    "N2333": "Explicit Conversion Operator Draft Working Paper Revision 1",
    "N2334": "Concurrency memory model (revised again)",
    "N2336": "State of C++ Evolution (Toronto 2007 Meeting)",
    "N2337": "The Syntax of auto Declarations",
    "N2338": "Concurrency memory model compiler consequences",
    "N2339": "Response to N2257=07-0117 \"Removing unused allocator functions\"",
    "N2340": "C99 Compatibility : __func__ and predeclared identifiers (revision 2)",
    "N2341": "Adding Alignment Support to the C++ Programming Language / Wording",
    "N2342": "POD's Revisited; Resolving Core Issue 568 (Revision 5)",
    "N2343": "Decltype (revision 7): proposed wording",
    "N2345": "Placement Insert for Containers (Revision 2)",
    "N2346": "Defaulted and Deleted Functions",
    "N2347": "Strongly Typed Enums (revision 3)",
    "N2348": "Wording for std::numeric_limits<T>::lowest()",
    "N2349": "Constant Expressions in the Standard Library \u2014Revision 2",
    "N2350": "Container insert/erase and iterator constness (Revision 1)",
    "N2351": "Improving shared_ptr for C++0x, Revision 2",
    "N2353": "A Specification for vector<bool>",
    "N2354": "Class member initializers",
    "N2355": "Minutes of J16 Meeting No. 45/WG21 Meeting No. 40, July 16-20, 2007",
    "N2356": "Minutes of ISO WG21 Meeting, July 15, 2007",
    "N2359": "C++ Data-Dependency Ordering: Atomics",
    "N2360": "C++ Data-Dependency Ordering: Memory Model",
    "N2361": "C++ Data-Dependency Ordering: Function Annotation",
    "N2362": "Converting Memory Fences to N2324 Form",
    "N2363": "C++ Library Working Group Status Report (post-Toronto 2007 Meeting)",
    "N2364": "Development of C++ Standard C++ Library Technical Report no. 1",
    "N2365": "Explicit Virtual Overides",
    "N2366": "C++ Standard Core Language Active Issues, Revision 49",
    "N2367": "C++ Standard Core Language Defect Reports, Revision 49",
    "N2368": "C++ Standard Core Language Closed Issues, Revision 49",
    "N2369": "Working Draft, Standard for Programming Language C++",
    "N2370": "Editor\u2019s Report",
    "N2371": "C++ Standard Library Active Issues List (Revision R50)",
    "N2372": "C++ Standard Library Defect Report List (Revision R50)",
    "N2373": "C++ Standard Library Closed Issues List (Revision R50)",
    "N2374": "WG21 agenda",
    "N2375": "AGENDA J16 Meeting No. 46 WG21 Meeting No. 41 October 1-6, 2007, Kona, Hawaii",
    "N2376": "Inheriting Constructors (revision 2)",
    "N2377": "Extending move semantics to *this (revised wording)",
    "N2378": "User-defined Literals (aka. Extensible Literals (revision 3))",
    "N2379": "Towards support for attributes in C++ (Revision 2)",
    "N2380": "Explicit Conversion Operator Draft Working Paper (revision 2)",
    "N2381": "C++ Atomic Types and Operations",
    "N2382": "Dynamic Initialization and Destruction with Concurrency",
    "N2383": "Abandoning a Process",
    "N2384": "Raw and Unicode String Literals; Unified Proposal (Rev. 1)",
    "N2385": "Initializer lists WP wording",
    "N2386": "Namespace Regions",
    "N2387": "Omnibus Allocator Fix-up Proposals",
    "N2388": "Pointer Arithmetic for shared_ptr",
    "N2389": "State of C++ Evolution (pre-Kona 2007 Meeting)",
    "N2390": "C++ Library Working Group Status Report (pre-Kona 2007 Meeting)",
    "N2391": "Recommendations for Resolving Issues re [rand]",
    "N2392": "A Memory Model for C++: Sequential Consistency for Race-Free Programs",
    "N2393": "C++ Atomic Types and Operations",
    "N2394": "Wording for range-based for-loop (revision 3)",
    "N2395": "C++ Standard Core Language Active Issues, Revision 50",
    "N2396": "C++ Standard Core Language Defect Reports, Revision 50",
    "N2397": "C++ Standard Core Language Closed Issues, Revision 50",
    "N2398": "Proposed Wording for Concepts (Revision 2)",
    "N2399": "A Tour of the Concepts Wording",
    "N2400": "February 2008 Meeting",
    "N2401": "Code Conversion Facets for the Standard C++ Library",
    "N2402": "Names, Linkage, and Templates (rev 2)",
    "N2403": "C++ Standard Library Active Issues List (Revision R51)",
    "N2404": "C++ Standard Library Defect Report List (Revision R51)",
    "N2405": "C++ Standard Library Closed Issues List (Revision R51)",
    "N2406": "Mutex, Lock, Condition Variable Rationale",
    "N2407": "C++ Dynamic Library Support",
    "N2408": "Simple Numeric Access Revision 2",
    "N2409": "Proposed Resolutions for the Outstanding Issues in Chapter 28: Regular expressions library",
    "N2410": "Thread-Safety in the Standard Library (Rev 1)",
    "N2411": "Proposal for Date-Time Types in C++0x To Support Threading APIs v2",
    "N2412": "Unrestricted Unions",
    "N2413": "Lambda Expressions and Closures: Wording for Monomorphic Lambdas",
    "N2414": "Proposed Wording for Scoped Concept Maps",
    "N2415": "Diagnostics Issues (Rev. 1)",
    "N2416": "Agenda",
    "N2417": "C++0x Timing Options for Kona Discussion",
    "N2418": "Towards support for attributes in C++ (Revision 3)",
    "N2420": "POSIX/C++ Liaison Report",
    "N2421": "Proposed Wording for Concepts (Revision 3)",
    "N2422": "Diagnostics Issues (Rev. 2)",
    "N2423": "Recommendations for Resolving Issues re [rand], Version 2",
    "N2424": "Recommendations for Resolving the 2007-09-21 Issues re [rand]",
    "N2425": "DRAFT C++ Dynamic Library Support",
    "N2426": "Class member initializers",
    "N2427": "C++ Atomic Types and Operations",
    "N2429": "Concurrency memory model (final revision)",
    "N2430": "Unrestricted Unions (Revision 1)",
    "N2431": "A name for the null pointer: nullptr (revision 4)",
    "N2432": "State of C++ Evolution (post-Kona 2007 Meeting)",
    "N2433": "C++ Library Working Group Status Report (post-Kona 2007 Meeting)",
    "N2434": "Standard Library Applications for Explicit Conversion Operators",
    "N2435": "Explicit bool for Smart Pointers",
    "N2436": "Small Allocator Fix-ups",
    "N2437": "Explicit Conversion Operator Draft Working Paper (revision 3)",
    "N2438": "Inheriting Constructors (revision 3)",
    "N2439": "Extending move semantics to `*this` (revised wording)",
    "N2440": "Abandoning a Process",
    "N2442": "Raw and Unicode String Literals; Unified Proposal (Rev. 2)",
    "N2444": "Dynamic Initialization and Destruction with Concurrency",
    "N2445": "New Function Declarator Syntax Wording",
    "N2446": "The Scoped Allocator Model",
    "N2447": "Multi-threading Library for Standard C++",
    "N2448": "STL singly linked lists (revision 2)",
    "N2449": "C++ Standard Core Language Active Issues, Revision 51",
    "N2450": "C++ Standard Core Language Defect Reports, Revision 51",
    "N2451": "C++ Standard Core Language Closed Issues, Revision 51",
    "N2452": "Minutes of WG21 Meeting No. 41, October 1-6, 2007",
    "N2453": "Minutes of J16 Meeting No. 46, October 1-6, 2007",
    "N2454": "Minutes of ISO WG21 Meeting, October 1, 2007",
    "N2455": "Thread Cancellation",
    "N2456": "C++ Standard Library Active Issues List (Revision R52)",
    "N2457": "C++ Standard Library Defect Report List (Revision R52)",
    "N2458": "C++ Standard Library Closed Issues List (Revision R52)",
    "N2459": "Allow atomics use in signal handlers",
    "N2461": "Working Draft, Standard for Programming Language C++",
    "N2462": "Editor\u2019s Report",
    "N2464": "Agenda",
    "N2465": "Winter 2008 Meeting (Version 2)",
    "N2466": "WG 14: Towards Attributes for C",
    "N2472": "June 2008 Meeting",
    "N2473": "C++ Standard Core Language Active Issues, Revision 52",
    "N2474": "C++ Standard Core Language Defect Reports, Revision 52",
    "N2475": "C++ Standard Core Language Closed Issues, Revision 52",
    "N2476": "AGENDA J16 Meeting No. 47 February 25 - Mar 1, 2008, Bellevue, WA",
    "N2477": "Uniform initialization design choices",
    "N2478": "A Proposal to Add typedef default_random_engine to C++0X",
    "N2479": "Normative Language to Describe Value Copy Semantics",
    "N2480": "A Less Formal Explanation of the Proposed C++ Concurrency Memory Model",
    "N2481": "Minimal Support for Garbage Collection and Reachability-Based Leak Detection",
    "N2482": "C++ Standard Library Active Issues List (Revision R53)",
    "N2483": "C++ Standard Library Defect Report List (Revision R53)",
    "N2484": "C++ Standard Library Closed Issues List (Revision R53)",
    "N2485": "A variadic std::min(T, ...) for the C++ Standard Library",
    "N2486": "Alternative Allocators and Standard Containers",
    "N2487": "Lambda Expressions and Closures: Wording for Monomorphic Lambdas (Revision 2)",
    "N2488": "Extending Variadic Template Template Parameters",
    "N2492": "C++ Data-Dependency Ordering: Atomics and Memory Model",
    "N2493": "C++ Data-Dependency Ordering: Function Annotation",
    "N2494": "C++ Standard Library Active Issues List (Revision R54)",
    "N2495": "C++ Standard Library Defect Report List (Revision R54)",
    "N2496": "C++ Standard Library Closed Issues List (Revision R54)",
    "N2497": "Multi-threading Library for Standard C++ (Revision 1)",
    "N2498": "Custom Time Duration Support",
    "N2499": "Forward declaration of enumerations",
    "N2500": "Iterator Concepts for the C++0x Standard Library",
    "N2501": "Proposed Wording for Concepts (Revision 4)",
    "N2502": "Core Concepts for the C++0x Standard Library",
    "N2503": "Indicating iostream failures with system_error",
    "N2504": "C++ Standard Core Language Active Issues, Revision 53",
    "N2505": "C++ Standard Core Language Defect Reports, Revision 53",
    "N2506": "C++ Standard Core Language Closed Issues, Revision 53",
    "N2507": "State of C++ Evolution (Pre-Bellevue 2008 Mailing)",
    "N2508": "C++ Library Working Group Status Report (Belleuve 2008 Mailing)",
    "N2509": "Nesting Exceptions",
    "N2510": "BSI Position on Lambda Functions",
    "N2511": "Named Lambdas and Local Functions",
    "N2512": "Inheriting Constructors (revision 4)",
    "N2513": "Dynamic Initialization and Destruction with Concurrency",
    "N2514": "Implicit Conversion Operators for Atomics",
    "N2516": "Threads API Review Committee Report",
    "N2517": "June 2008 Meeting",
    "N2518": "Compiler Support for type_traits",
    "N2519": "Library thread-safety from a user's point of view, with wording",
    "N2520": "Proposed Wording for Concepts (Changes from Revision 3 to Revision 4)",
    "N2521": "Working Draft, Standard for Programming Language C++",
    "N2522": "Editor\u2019s Report",
    "N2523": "The Scoped Allocator Model (Rev 1)",
    "N2524": "Conservative Swap and Move with Stateful Allocators",
    "N2525": "Allocator-specific Swap and Move Behavior",
    "N2526": "Why duration Should Be a Type in C++0X",
    "N2527": "Minimal Support for Garbage Collection and Reachability-Based Leak Detection (revised)",
    "N2528": "Timed_mutex in C++0x",
    "N2529": "Lambda Expressions and Closures: Wording for Monomorphic Lambdas (Revision 3)",
    "N2530": "Making It Easier to Use std::type_info as an Index in an Associative Container",
    "N2531": "Initializer lists WP wording",
    "N2532": "Uniform initialization design choices (Revision 2)",
    "N2533": "Tuples and Pairs",
    "N2534": "Concurrency Modifications to Basic String",
    "N2535": "Namespace Association (\"inline namespace\")",
    "N2536": "POSIX Liaison Report",
    "N2537": "Fall 2008 meeting",
    "N2538": "Removal of System error support",
    "N2539": "A New Interface for C++ std::duration Type",
    "N2540": "Inheriting Constructors (revision 5)",
    "N2541": "New Function Declarator Syntax Wording",
    "N2542": "Reserved namespaces for POSIX",
    "N2543": "STL singly linked lists (revision 3)",
    "N2544": "Unrestricted Unions (Revision 2)",
    "N2545": "Thread-Local Storage",
    "N2546": "Removal of auto as a storage-class specifier",
    "N2547": "Allow atomics use in signal handlers",
    "N2549": "Excision of Clause 31",
    "N2550": "Lambda Expressions and Closures: Wording for Monomorphic Lambdas (Revision 4)",
    "N2551": "A variadic std::min(T, ...) for the C++ Standard Library (Revision 2)",
    "N2552": "Using ytime for Times in the Thread Support Library",
    "N2553": "Towards support for attributes in C++ (Revision 4)",
    "N2554": "The Scoped Allocator Model (Rev 2)",
    "N2555": "Extending Variadic Template Template Parameters (Revision 1)",
    "N2556": "C++ Data-Dependency Ordering: Atomics and Memory Model",
    "N2559": "Nesting Exception Objects (Revision 1)",
    "N2561": "An Asynchronous Future Value",
    "N2562": "C++ Standard Core Language Active Issues, Revision 54",
    "N2563": "C++ Standard Core Language Defect Reports, Revision 54",
    "N2564": "C++ Standard Core Language Closed Issues, Revision 54",
    "N2565": "State of C++ Evolution (Post-Bellevue 2008 Mailing)",
    "N2566": "C++ Library Working Group Status Report (Post-Bellevue 2008 Mailing)",
    "N2568": "Forward declaration of enumerations (rev. 1)",
    "N2569": "More STL algorithms",
    "N2570": "Iterator Concepts for the C++0x Standard Library (Revision 1)",
    "N2572": "Core Concepts for the C++0x Standard Library (Revision 1)",
    "N2573": "Concepts for the C++0x Standard Library: Algorithms (Revision 2)",
    "N2574": "Concepts for the C++0x Standard Library: Numerics (Revision 1)",
    "N2575": "Initializer Lists \u2014 Alternative Mechanism and Rationale",
    "N2576": "Type-Soundness and Optimization in the Concepts Proposal",
    "N2577": "C++ Standard Library Active Issues List (Revision R55)",
    "N2578": "C++ Standard Library Defect Report List (Revision R55)",
    "N2579": "C++ Standard Library Closed Issues List (Revision R55)",
    "N2580": "Some More Small Additions to iostream",
    "N2581": "Named Requirements for C++0X Concepts",
    "N2582": "Unified Function Syntax",
    "N2583": "Default Move Functions",
    "N2584": "Default Swap Functions",
    "N2585": "Minimal Support for Garbage Collection and Reachability-Based Leak Detection",
    "N2586": "Minimal Support for Garbage Collection and Reachability-Based Leak Detection (revised)",
    "N2587": "Minimal Garbage Collection Status API",
    "N2588": "Working Draft, Standard for Programming Language C++",
    "N2589": "Editor\u2019s Report",
    "N2590": "Simplifying swap overloads",
    "N2591": "Refactoring numeric_limits",
    "N2592": "Minutes of J16 Meeting No. 47, February 25-March 1, 2008",
    "N2593": "Minutes of ISO WG21 Meeting, February 23, 2008",
    "N2595": "WG21 Agenda",
    "N2596": "Unofficial Record of Discussion: J16 Meeting No. 47, February 25-March 1, 2008",
    "N2597": "State of C++ Evolution (Pre-Antipolis 2008 Mailing)",
    "N2598": "C++ Library Working Group Status Report (Pre-Antipolis 2008 Mailing)",
    "N2600": "noncopyable utility class",
    "N2601": "Sexagesimal Numbers in C++",
    "N2602": "BSI Requirements for a system-time library in C++0x",
    "N2604": "Thoughts on Implementing errno as a Macro",
    "N2605": "Changing some \"undefined behavior\" into \"ill-formed\"",
    "N2606": "Working Draft, Standard for Programming Language C++",
    "N2607": "Editor's Report",
    "N2608": "C++ Standard Core Language Active Issues, Revision 55",
    "N2609": "C++ Standard Core Language Defect Reports, Revision 55",
    "N2610": "C++ Standard Core Language Closed Issues, Revision 55",
    "N2611": "AGENDA J16 Meeting No. 48 June 9-14, 2008, Sophia Antipolis, France",
    "N2612": "C++ Standard Library Active Issues List (Revision R56)",
    "N2613": "C++ Standard Library Defect Report List (Revision R56)",
    "N2614": "C++ Standard Library Closed Issues List (Revision R56)",
    "N2615": "A Foundation to Sleep On",
    "N2617": "Proposed Wording for Concepts (Revision 5)",
    "N2618": "Concepts for the C++0x Standard Library: Chapter 17 -Introduction (Revision 1)",
    "N2619": "CONCEPTS FOR CLAUSE 18",
    "N2620": "Concepts for the C++0x Standard Library: Diagnostics library",
    "N2621": "Core Concepts for the C++0x Standard Library (Revision 2)",
    "N2622": "Concepts for the C++0x Standard Library: Utilities (Revision 3)",
    "N2623": "Concepts for the C++0x Standard Library: Containers (Revision 1)",
    "N2624": "Iterator Concepts for the C++0x Standard Library (Revision 2)",
    "N2625": "Concepts for the C++0x Standard Library: Algorithms (Revision 2)",
    "N2626": "Concepts for the C++0x Standard Library: Numerics (Revision 2)",
    "N2627": "An Asynchronous Future Value (revised)",
    "N2628": "Non-static data member initializers",
    "N2629": "Detailed Reporting for Input/Output Library Errors",
    "N2631": "Resolving the difference between C and C++ with regards to object representation of integers",
    "N2632": "Shared_ptr atomic access",
    "N2633": "Improved support for bidirectional fences",
    "N2634": "Solving the SFINAE problem for expressions",
    "N2635": "Local and Unnamed Types as Template Arguments",
    "N2636": "Error Handling Specification for Chapter 30 (Threads)",
    "N2637": "Revisiting std::shared_ptr comparison",
    "N2638": "Improving the wording of std::shared_ptr",
    "N2639": "Algorithms for permutations and combinations, with and without repetitions",
    "N2640": "Initializer Lists \u2014 Alternative Mechanism and Rationale (v. 2)",
    "N2641": "Allocator Concepts",
    "N2642": "Proposed Wording for Placement Insert",
    "N2643": "C++ Data-Dependency Ordering: Function Annotation",
    "N2644": "Agenda",
    "N2645": "Fundamental Mathematical Concepts for the STL in C++0x",
    "N2646": "Concept Implication and Requirement Propagation",
    "N2647": "Concurrency Modifications to Basic String",
    "N2648": "C++ Dynamic Arrays",
    "N2649": "Proposed Resolution for Valarray Constructors",
    "N2650": "Toward a More Complete Taxonomy of Algebraic Properties for Numeric Libraries in TR2",
    "N2651": "Constness of Lambda Functions",
    "N2652": "State of C++ Evolution (Post-Antipolis 2008 Mailing)",
    "N2653": "C++ Library Working Group Status Report (Post-Antipolis 2008 Mailing)",
    "N2654": "Allocator Concepts (revision 1)",
    "N2655": "Detailed Reporting for Input/Output Library Errors (Revision 1)",
    "N2656": "Core issue 654 wording",
    "N2657": "Local and Unnamed Types as Template Arguments",
    "N2658": "Constness of Lambda Functions (Revision 1)",
    "N2659": "Thread-Local Storage",
    "N2660": "Dynamic Initialization and Destruction with Concurrency",
    "N2661": "A Foundation to Sleep On",
    "N2664": "C++ Data-Dependency Ordering: Atomics and Memory Model",
    "N2666": "More STL algorithms (revision 2)",
    "N2667": "Reserved namespaces for POSIX",
    "N2668": "Concurrency Modifications to Basic String",
    "N2669": "Thread-Safety in the Standard Library (Rev 2)",
    "N2670": "Minimal Support for Garbage Collection and Reachability-Based Leak Detection (revised)",
    "N2671": "An Asynchronous Future Value: Proposed Wording",
    "N2672": "Initializer List proposed wording",
    "N2673": "Non-static data member initializers with draft of initializer list wording",
    "N2674": "Shared_ptr atomic access, revision 1",
    "N2675": "noncopyable utility class (revision 1)",
    "N2676": "Proposed Wording for Concepts (Revision 6)",
    "N2677": "Foundational Concepts for the C++0x Standard Library (Revision 3)",
    "N2678": "Error Handling Specification for Chapter 30 (Threads)",
    "N2679": "Initializer Lists for Standard Containers (Revision 1)",
    "N2680": "Proposed Wording for Placement Insert (Revision 1)",
    "N2681": "Minutes of PL22.16 Meeting No. 48, June 8-15, 2008",
    "N2682": "Minutes of ISO WG21 Meeting, June 8, 2008",
    "N2683": "issue 454: problems and solutions",
    "N2684": "C++ Standard Library Active Issues List (Revision R57)",
    "N2685": "C++ Standard Library Defect Report List (Revision R57)",
    "N2686": "C++ Standard Library Closed Issues List (Revision R57)",
    "N2687": "Forward declaration of enumerations (rev. 2)",
    "N2688": "C++ Standard Core Language Active Issues, Revision 56",
    "N2689": "C++ Standard Core Language Defect Reports, Revision 56",
    "N2690": "C++ Standard Core Language Closed Issues, Revision 56",
    "N2691": "Working Draft, Standard for Programming Language C++",
    "N2692": "Editor's Report",
    "N2693": "Requirements on programs and backwards compatibility",
    "N2694": "Concepts for the C++0x Standard Library: Containers (Revision 2)",
    "N2695": "Iterator Concepts for the C++0x Standard Library (Revision 3)",
    "N2696": "Concepts for the C++0x Standard Library: Algorithms (Revision 3)",
    "N2697": "Minutes of WG21 Meeting, June 8-15, 2008",
    "N2698": "Additional type traits: has_trivial_destructor_after_move and has_trivial_reallocation",
    "N2699": "C++ Standard Core Language Active Issues, Revision 57",
    "N2700": "C++ Standard Core Language Defect Reports, Revision 57",
    "N2701": "C++ Standard Core Language Closed Issues, Revision 57",
    "N2702": "C++ Standard Library Active Issues List (Revision R58)",
    "N2703": "C++ Standard Library Defect Report List (Revision R58)",
    "N2704": "C++ Standard Library Closed Issues List (Revision R58)",
    "N2705": "State of C++ Evolution (Mid-term 2008 Mailing)",
    "N2706": "C++ Library Working Group Status Report (Mid-term 2008 Mailing)",
    "N2707": "Expedited core issues handling",
    "N2708": "Business Plan and Convener's Report",
    "N2709": "Packaging Tasks for Asynchronous Execution",
    "N2710": "Proposed Wording for Concepts (Revision 7)",
    "N2711": "WG21 July 2009 Meeting",
    "N2712": "Non-static data member initializers",
    "N2713": "Allow auto for non-static data members",
    "N2714": "C++ Standard Core Language Active Issues, Revision 58",
    "N2715": "C++ Standard Core Language Defect Reports, Revision 58",
    "N2716": "C++ Standard Core Language Closed Issues, Revision 58",
    "N2717": "Extensions to the C++ Library to Support Mathematical Special Functions",
    "N2718": "Additional type traits: has_trivial_destructor_after_move and has_trivial_reallocation (rev1)",
    "N2719": "Initializer lists and move semantics",
    "N2720": "AGENDA PL22.16 Meeting No. 49 September 15-20, 2008, San Francisco, California",
    "N2722": "Variadic functions: Variadic templates or initializer lists?",
    "N2723": "Working Draft, Standard for Programming Language C++",
    "N2724": "Editor's Report",
    "N2727": "C++ Standard Library Active Issues List (Revision R59)",
    "N2728": "C++ Standard Library Defect Report List (Revision R59)",
    "N2729": "C++ Standard Library Closed Issues List (Revision R59)",
    "N2730": "Expedited core issues handling (revision 1)",
    "N2731": "Proposed Text for Bidirectional Fences",
    "N2732": "Extension for the programming language C++ to support decimal floating-point arithmetic",
    "N2733": "Appendix C: ISO C++ 2003 Compatibility",
    "N2734": "Concepts for the C++0x Standard Library: Iterators (Revision 3)",
    "N2735": "Concepts for the C++0x Standard Library: Utilities (Revision 4)",
    "N2736": "Concepts for the C++0x Standard Library: Numerics (Revision 3)",
    "N2737": "Foundational Concepts for the C++0x Standard Library (Revision 4)",
    "N2738": "Concepts for the C++0x Standard Library: Containers (Revision 3)",
    "N2739": "Iterator Concepts for the C++0x Standard Library (Revision 4)",
    "N2740": "Concepts for the C++0x Standard Library: Algorithms (Revision 4)",
    "N2741": "Proposed Wording for Concepts (Revision 8)",
    "N2742": "Simplifying unique copy",
    "N2743": "Unifying Operator and Function-Object Variants of Standard Library Algorithms",
    "N2744": "Comments on Asynchronous Future Value Proposal",
    "N2745": "Example POWER Implementation for C/C++ Memory Model",
    "N2746": "Rationale for the C++ working paper definition of \"memory location\"",
    "N2747": "Ambiguity and Insecurity with User-Defined Literals",
    "N2748": "Strong Compare and Exchange",
    "N2749": "Not so Trivial Issues with Trivial",
    "N2750": "User-defined Literals (aka. Extensible Literals (revision 4))",
    "N2751": "Towards support for attributes in C++ (Revision 5)",
    "N2752": "Proposed Text for Bidirectional Fences",
    "N2753": "March 2009 meeting information",
    "N2754": "Additional concepts: TriviallyDestructibleAfterMove and TriviallyReallocatable",
    "N2755": "Concepts for the C++0x Standard Library: Chapter 17 -Introduction (Revision 2)",
    "N2756": "Non-static data member initializers",
    "N2757": "Expedited core issues handling (revision 2)",
    "N2758": "Iterator Concepts for the C++0x Standard Library (Revision 5)",
    "N2759": "Concepts for the C++0x Standard Library: Algorithms (Revision 5)",
    "N2760": "Input/Output Library Thread Safety",
    "N2761": "Towards support for attributes in C++ (Revision 6)",
    "N2762": "Not so Trivial Issues with Trivial",
    "N2763": "Unified Function Syntax",
    "N2764": "Forward declaration of enumerations (rev. 3)",
    "N2765": "User-defined Literals (aka. Extensible Literals (revision 5))",
    "N2768": "Allocator Concepts, part 1 (revision 2)",
    "N2769": "Detailed Reporting for Input/Output Library Errors (Revision 2)",
    "N2770": "Concepts for the C++0x Standard Library: Utilities (Revision 5)",
    "N2771": "LWG Issues",
    "N2772": "Variadic functions: Variadic templates or initializer lists? \u2014 Revision 1",
    "N2773": "Proposed Wording for Concepts (Revision 9)",
    "N2774": "Foundational Concepts for the C++0x Standard Library (Revision 5)",
    "N2775": "Small library thread-safety revisions",
    "N2776": "Concepts for the C++0x Standard Library: Containers (Revision 4)",
    "N2777": "Concepts for the C++0x Standard Library: Iterators (Revision 4)",
    "N2778": "Wording for range-based for-loop (revision 4)",
    "N2779": "Concepts for Clause 18: Part 2",
    "N2780": "Named Requirements for C++0X Concepts, version 2",
    "N2781": "Concepts for Random Number Generation in C++0X",
    "N2782": "C++ Data-Dependency Ordering: Function Annotation",
    "N2783": "Collected Issues with Atomics",
    "N2784": "Minutes of WG21 Meeting, September 15-20, 2008",
    "N2785": "Minutes of PL22.16 Meeting, September 15-20, 2008",
    "N2786": "Simplifying unique copy (Revision 1)",
    "N2791": "C++ Standard Core Language Active Issues, Revision 59",
    "N2792": "C++ Standard Core Language Defect Reports, Revision 59",
    "N2793": "C++ Standard Core Language Closed Issues, Revision 59",
    "N2794": "C++ Standard Library Active Issues List (Revision R60)",
    "N2795": "C++ Standard Library Defect Report List (Revision R60)",
    "N2796": "C++ Standard Library Closed Issues List (Revision R60)",
    "N2797": "AGENDA PL22.16 Meeting No. 50 WG21 Meeting No. 45 March 1-6, 2009, Summit, NJ",
    "N2798": "Working Draft, Standard for Programming Language C++",
    "N2799": "Editor's Report",
    "N2800": "Programming Languages \u2014 C++",
    "N2801": "Initializer lists and move semantics",
    "N2802": "A plea to reconsider detach-on-destruction for thread objects",
    "N2803": "C++ Standard Core Language Active Issues, Revision 60",
    "N2804": "C++ Standard Core Language Defect Reports, Revision 60",
    "N2805": "C++ Standard Core Language Closed Issues, Revision 60",
    "N2806": "C++ Standard Library Active Issues List (Revision R61)",
    "N2807": "C++ Standard Library Defect Report List (Revision R61)",
    "N2808": "C++ Standard Library Closed Issues List (Revision R61)",
    "N2809": "Library Support for hybrid error handling",
    "N2810": "Defects and Proposed Resolutions for Allocator Concepts",
    "N2811": "Directed Rounding Arithmetic Operations",
    "N2812": "A Safety Problem with RValue References (and what to do about it)",
    "N2813": "Issue Resolutions for Concept-enabled Random Number Generation in C++0X",
    "N2814": "Fixing freestanding",
    "N2815": "Improving the standard library's exception specifications",
    "N2816": "C++ Standard Core Language Active Issues, Revision 61",
    "N2817": "C++ Standard Core Language Defect Reports, Revision 61",
    "N2818": "C++ Standard Core Language Closed Issues, Revision 61",
    "N2819": "Ref-qualifiers for assignment operators of the Standard Library",
    "N2820": "Adding heterogeneous comparison lookup to associative containers",
    "N2821": "C++ Standard Library Active Issues List (Revision R62)",
    "N2822": "C++ Standard Library Defect Report List (Revision R62)",
    "N2823": "C++ Standard Library Closed Issues List (Revision R62)",
    "N2824": "AGENDA, PL22.16 Meeting No. 51, WG21 Meeting No. 46, July 13-18, 2009, Frankfurt, Germany",
    "N2825": "Unified Function Syntax",
    "N2826": "Issues with Constexpr",
    "N2827": "Thread Unsafe Standard Functions",
    "N2828": "Library Support for Hybrid Error Handling (Rev 1)",
    "N2829": "Defects and Proposed Resolutions for Allocator Concepts (Rev 1)",
    "N2830": "Problems with reference_closure",
    "N2831": "Fixing a Safety Problem with Rvalue References: Proposed Wording",
    "N2832": "Concepts and Ref-qualifiers",
    "N2834": "Several Proposals to Simplify pair",
    "N2835": "forward",
    "N2836": "Wording Tweaks for Concept-enabled Random Number Generation in C++0X",
    "N2837": "C++0X, CD 1, National Body Comments",
    "N2838": "Library Support for Hybrid Error Handling (Rev 2)",
    "N2839": "Response to \"Problems with reference_closure\"",
    "N2840": "Defects and Proposed Resolutions for Allocator Concepts (Rev 2)",
    "N2841": "Consolidated Quasi-Editorial Changes for National Body Comments Concerning the Core Language",
    "N2842": "Another numeric facet",
    "N2843": "Pack Expansion and Attributes",
    "N2844": "Fixing a Safety Problem with Rvalue References: Proposed Wording (Revision 1)",
    "N2845": "Remove std::reference_closure",
    "N2847": "Minutes of PL22.16 Meeting, March 2, 2009",
    "N2848": "Minutes of WG21 Meeting, March 2, 2009",
    "N2849": "Extension for the programming language C++ to support decimal floating-point arithmetic",
    "N2850": "Extensions to the C++ Library to Support Mathematical Special Functions",
    "N2851": "Changes to the Decimal TR since the PDTR Ballot",
    "N2852": "Explicit Virtual Overrides",
    "N2853": "Constraining unique_ptr",
    "N2855": "Rvalue References and Exception Safety",
    "N2857": "Working Draft, Standard for Programming Language C++",
    "N2858": "Editor's Report",
    "N2859": "New wording for C++0x Lambdas",
    "N2860": "C++ Standard Core Language Active Issues, Revision 62",
    "N2861": "C++ Standard Core Language Defect Reports, Revision 62",
    "N2862": "C++ Standard Core Language Closed Issues, Revision 62",
    "N2863": "C++ CD1 Comment Status",
    "N2864": "Thread Unsafe Standard Functions",
    "N2866": "C++ Standard Library Active Issues List (Revision R63)",
    "N2867": "C++ Standard Library Defect Report List (Revision R63)",
    "N2868": "C++ Standard Library Closed Issues List (Revision R63)",
    "N2869": "State of C++ Evolution (Post San Francisco 2008)",
    "N2870": "C++ Library Working Group Status Report (Post San Francisco 2008)",
    "N2871": "Summary of C++0x Standard : CD 1",
    "N2872": "Ensuring Certain C++0x Features \"just work\"",
    "N2873": "C++ Standard Library Active Issues List (Revision R64)",
    "N2874": "C++ Standard Library Defect Report List (Revision R64)",
    "N2875": "C++ Standard Library Closed Issues List (Revision R64)",
    "N2876": "Directed Rounding Arithmetic Operations (Revision 1)",
    "N2877": "C++ Standard Core Language Active Issues, Revision 64",
    "N2878": "C++ Standard Core Language Defect Reports, Revision 64",
    "N2879": "C++ Standard Core Language Closed Issues, Revision 64",
    "N2880": "C++ object lifetime interactions with the threads API",
    "N2881": "Base Class Aliases for The-C++-After-0x",
    "N2882": "Adding heterogeneous comparison lookup to associative containers for TR2 (Rev 1)",
    "N2883": "Report of the 2009-05.htm\">2009-05.htm\">2009-05.htm\">2009-05 Batavia Meeting",
    "N2884": "C++0x Stream Positioning",
    "N2886": "Fixing freestanding: iteration 2",
    "N2887": "Axioms: Semantics Aspects of C++ Concepts",
    "N2888": "Moving Futures - Proposed Wording for UK comments 335, 336, 337 and 338",
    "N2889": "An Asynchronous Call for C++",
    "N2890": "Unified Function Syntax",
    "N2891": "AGENDA, PL22.16 Meeting No. 52, WG21 Meeting No. 47, October 19-24, 2009, Santa Cruz, California",
    "N2892": "Some Concerns About Axioms",
    "N2893": "The long pole gets longer",
    "N2894": "C++ Standard Library Active Issues List (Revision R65)",
    "N2895": "C++ Standard Library Defect Report List (Revision R65)",
    "N2896": "C++ Standard Library Closed Issues List (Revision R65)",
    "N2898": "C++ CD1 Comment Status",
    "N2899": "Directed Rounding Arithmetic Operations (Revision 2)",
    "N2900": "Ensuring Certain C++0x Features \"just work\" - Revision 1",
    "N2901": "A simple async()",
    "N2902": "Business Plan and Convener's Report",
    "N2903": "New wording for C++0x Lambdas",
    "N2904": "Defining default copy and move",
    "N2905": "Aggregation headers",
    "N2906": "Simplifying the use of concepts",
    "N2907": "Managing the lifetime of thread_local variables with contexts",
    "N2908": "Several Proposals to Simplify pair (Rev 1)",
    "N2909": "Specifying the complexity of size()",
    "N2910": "Comment on Proposed Trigraph Deprecation",
    "N2911": "Minimizing Dependencies within Generic Classes for Faster and Smaller Programs",
    "N2913": "SCARY Iterator Assignment and Initialization",
    "N2914": "Working Draft, Standard for Programming Language C++",
    "N2915": "Editor's Report",
    "N2916": "Intentional Concept Mapping",
    "N2917": "N2880 Distilled, and a New Issue With Function Statics",
    "N2918": "Exported Concept Maps",
    "N2919": "Concept mapping unconstrained templates",
    "N2920": "Minutes of WG21 Meeting, July 13, 2009",
    "N2921": "Minutes of PL22.16 Meeting, July 13, 2009",
    "N2923": "Specifying the complexity of size()(Revision 1)",
    "N2924": "Implicitly-Deleted Special Member Functions",
    "N2925": "More Collected Issues with Atomics",
    "N2926": "C++0x Stream Positioning - Revision 1",
    "N2927": "New wording for C++0x Lambdas (rev. 2)",
    "N2928": "Explicit Virtual Overrides",
    "N2929": "LWG Papers to Re-Merge into C++0x After Removing Concepts",
    "N2930": "Range-Based For Loop Wording (Without Concepts)",
    "N2931": "Unified Function Syntax",
    "N2932": "Fixing freestanding: iteration 2.2",
    "N2933": "Pack Expansion and Attributes",
    "N2935": "Fall 2009 WG21 Meeting Information",
    "N2936": "C++ Standard Core Language Active Issues, Revision 65",
    "N2937": "C++ Standard Core Language Defect Reports, Revision 65",
    "N2938": "C++ Standard Core Language Closed Issues, Revision 65",
    "N2939": "C++ CD1 Comment Status, Rev. 2",
    "N2940": "C++ Standard Library Active Issues List (Revision R66)",
    "N2941": "C++ Standard Library Defect Report List (Revision R66)",
    "N2942": "C++ Standard Library Closed Issues List (Revision R66)",
    "N2943": "Allocators without Concepts (preview)",
    "N2944": "Equality Comparison for Unordered Containers",
    "N2945": "Proposal to Simplify pair (rev 2)",
    "N2946": "Allocators post Removal of C++ Concepts",
    "N2947": "Additional Type Traits for C++0x",
    "N2948": "C++ Standard Library Active Issues List (Revision R67)",
    "N2949": "C++ Standard Library Defect Report List (Revision R67)",
    "N2950": "C++ Standard Library Closed Issues List (Revision R67)",
    "N2951": "forward",
    "N2952": "Accessing current exception during unwinding",
    "N2953": "Defining Move Special Member Functions",
    "N2954": "Unified Function Syntax",
    "N2955": "Comments on the C++ Memory Model Following a Partial Formalization Attempt",
    "N2956": "Spring 2010 JTC1/SC22/WG21 C++ Standards Committee Meeting",
    "N2957": "Reaching Scope of Lambda Expressions",
    "N2958": "Moving Swap Forward",
    "N2959": "Managing the lifetime of thread_local variables with contexts (Revision 1)",
    "N2960": "Working Draft, Standard for Programming Language C++",
    "N2961": "Editor's Report",
    "N2962": "C++ Standard Core Language Active Issues, Revision 66",
    "N2963": "C++ Standard Core Language Defect Reports, Revision 66",
    "N2964": "C++ Standard Core Language Closed Issues, Revision 66",
    "N2965": "Type traits and base classes",
    "N2967": "Issues on Futures",
    "N2969": "Background for issue 887: Clocks and Condition Variables",
    "N2970": "A simple async() (revision 1)",
    "N2971": "Core issue 743: decltype(...) name qualifiers",
    "N2972": "Core issue 814: Attribute [[nothrow]]",
    "N2973": "An Asynchronous Call for C++",
    "N2974": "An Analysis of Async and Futures",
    "N2975": "Collected Issues for Tuples",
    "N2976": "constexpr in the library: take 2",
    "N2977": "Pairs do not make good ranges",
    "N2978": "Core issue 789: Replacing Trigraphs",
    "N2979": "Moving Swap Forward (revision 1)",
    "N2980": "SCARY Iterator Assignment and Initialization Revision 1",
    "N2981": "Proposal to Simplify pair (rev 3)",
    "N2982": "Allocators post Removal of C++ Concepts (Rev 1)",
    "N2983": "Allowing Move Constructors to Throw",
    "N2984": "Additional Type Traits for C++0x (Revision 1)",
    "N2985": "C and C++ Thread Compatibility",
    "N2986": "Equality Comparison for Unordered Containers",
    "N2987": "Defining Move Special Member Functions",
    "N2988": "LWG Issue 897 and other small changes to forward_list",
    "N2989": "Unified Function Syntax",
    "N2990": "Core issue 789: Fixing Raw Strings wrt. Trigraphs",
    "N2991": "Core issue 743: decltype(...) name qualifiers",
    "N2992": "More Collected Issues with Atomics",
    "N2993": "Expanding the meaning of variable",
    "N2994": "constexpr in the library: take 2",
    "N2995": "Pairs do not make good ranges",
    "N2996": "A Simple Asynchronous Call",
    "N2997": "Issues on Futures (Rev. 1)",
    "N2998": "Reaching Scope of Lambda Expressions",
    "N2999": "Background for issue 887: Clocks and Condition Variables (Rev. 1)",
    "N3000": "Working Draft, Standard for Programming Language C++",
    "N3001": "Editor's Report",
    "N3002": "Gaussian Integers in the Standard Library",
    "N3003": "Minutes of WG21 Meeting, October 19, 2009",
    "N3004": "Minutes of PL22.16 Meeting, October 19, 2009",
    "N3006": "C++ Standard Core Language Active Issues, Revision 67",
    "N3007": "C++ Standard Core Language Defect Reports, Revision 67",
    "N3008": "C++ Standard Core Language Closed Issues, Revision 67",
    "N3009": "C++ CD1 Comment Status, Rev. 3",
    "N3010": "Rvalue References as \"Funny\" Lvalues",
    "N3011": "C++ Standard Library Active Issues List (Revision R68)",
    "N3012": "C++ Standard Library Defect Report List (Revision R68)",
    "N3013": "C++ Standard Library Closed Issues List (Revision R68)",
    "N3014": "AGENDA, PL22.16 Meeting No. 53, WG21 Meeting No. 48, March 8-13, 2010, Pittsburgh, PA",
    "N3015": "Fall 2010 WG21 Meeting Information",
    "N3016": "SUMMER 2010 JTC1/SC22/WG21 C++ STANDARDS COMMITTEE MEETING",
    "N3017": "Agenda and Meeting Notice for WG21 Telecon Meeting, 2010-06-18",
    "N3018": "C++ Standard Library Active Issues List (Revision R69)",
    "N3019": "C++ Standard Library Defect Report List (Revision R69)",
    "N3020": "C++ Standard Library Closed Issues List (Revision R69)",
    "N3021": "Harmonizing Effects and Returns Elements in Clause 21",
    "N3023": "Defaulting non-public special member functions on first declaration",
    "N3024": "Proposal to Simplify pair (rev 4)",
    "N3025": "Specifying Pointer-Like Requirements",
    "N3026": "C++ Standard Core Language Active Issues, Revision 68",
    "N3027": "C++ Standard Core Language Defect Reports, Revision 68",
    "N3028": "C++ Standard Core Language Closed Issues, Revision 68",
    "N3029": "C++ CD1 Comment Status, Rev. 4",
    "N3030": "Rvalue References as \"Funny\" Lvalues",
    "N3031": "Core issues 743 and 950: Additional decltype(...) uses",
    "N3032": "Core issue 374: Explicit specialization outside a template's parent",
    "N3033": "Core issue 951: Various Attribute Issues",
    "N3034": "Core issue 968: Disambiguating [[",
    "N3035": "Working Draft, Standard for Programming Language C++",
    "N3036": "Editor's Report",
    "N3037": "Conceptless Random Number Generation in C++0X",
    "N3038": "Managing the lifetime of thread_local variables with contexts (Revision 2)",
    "N3039": "Constexpr functions with const reference parameters (a summary)",
    "N3040": "Various threads issues in the library (LWG 1151)",
    "N3041": "Futures and Async Cleanup",
    "N3042": "Renaming launch::any and what asyncs really might be",
    "N3043": "Converting Lambdas to Function Pointers",
    "N3044": "Defining Move Special Member Functions",
    "N3045": "Updates to C++ Memory Model Based on Formalization",
    "N3046": "Iterators in C++0x",
    "N3047": "Fixing is_constructible and is_explicitly_convertible",
    "N3048": "Defining Swappable Requirements",
    "N3049": "Core issues 743 and 950: Additional decltype(...) uses (revision 1)",
    "N3050": "Allowing Move Constructors to Throw (Rev. 1)",
    "N3051": "Deprecating Exception Specifications",
    "N3052": "Converting Lambdas to Function Pointers",
    "N3053": "Defining Move Special Member Functions",
    "N3054": "C++ Standard Library Active Issues List (Revision D70)",
    "N3055": "A Taxonomy of Expression Value Categories",
    "N3056": "Conceptless Random Number Generation in C++0X, version 2",
    "N3057": "Explicit Initializers for Atomics",
    "N3058": "Futures and Async Cleanup (Rev.)",
    "N3059": "Proposal to Simplify pair (rev 5.2)",
    "N3060": "Extensions to the C++ Library to Support Mathematical Special Functions",
    "N3061": "Record of Response",
    "N3062": "Core issue 789: Fixing Raw Strings wrt. Trigraphs (revision 1)",
    "N3063": "Core issue 968: Disambiguating [[ (revision 1)",
    "N3064": "Core issue 374: Explicit specialization outside a template's parent (revision 1)",
    "N3065": "Removing Export",
    "N3066": "Iterators in C++0x",
    "N3067": "Core issue 951: Various Attribute Issues (revision 1)",
    "N3068": "Equality Comparison for Unordered Containers (Rev 2)",
    "N3069": "Various threads issues in the library (LWG 1151)",
    "N3070": "Handling Detached Threads and thread_local Variables",
    "N3071": "Renaming launch::any and what asyncs really might be (Rev.)",
    "N3072": "Harmonizing Effects and Returns Elements in Clause 21",
    "N3073": "Specifying Pointer-Like Requirements (Revision 1)",
    "N3074": "Updates to C++ Memory Model Based on Formalization",
    "N3075": "C++0X, CD 14882, National Body Comments and Responses",
    "N3076": "SUMMER 2010 JTC1/SC22/WG21 C++ STANDARDS COMMITTEE MEETING (REVISION 1.1)",
    "N3077": "Alternative approach to Raw String issues",
    "N3078": "Constexpr functions with reference parameters",
    "N3079": "Redrafting: issues 667, 861, 990, 818",
    "N3080": "Minutes of PL22.16 Meeting, March 08, 2010",
    "N3081": "Minutes of WG21 Meeting, March 08, 2010",
    "N3082": "C++0x Meeting Schedule",
    "N3083": "C++ Standard Core Language Active Issues, Revision 69",
    "N3084": "C++ Standard Core Language Defect Reports, Revision 69",
    "N3085": "C++ Standard Core Language Closed Issues, Revision 69",
    "N3086": "C++ CD1 Comment Status Rev. 7",
    "N3087": "C++ Standard Library Active Issues List (Revision R70)",
    "N3088": "C++ Standard Library Defect Report List (Revision R70)",
    "N3089": "C++ Standard Library Closed Issues List (Revision R70)",
    "N3090": "Working Draft, Standard for Programming Language C++",
    "N3091": "Editor's Report",
    "N3092": "Programming Languages - C++",
    "N3093": "C and C++ Alignment Compatibility",
    "N3094": "Minutes of PL22.16 Meeting, March 08, 2010 (Revision 2 )",
    "N3095": "Minutes of WG21 Meeting, March 08, 2010 (Revision 2)",
    "N3096": "AGENDA, PL22.16 Meeting No. 54, WG21 Meeting No. 49, August 2-7, 2010, Rapperswil, Switzerland",
    "N3097": "Minutes, WG21 Teleconference 2010-06-18",
    "N3101": "Spring 2011 JTC1/SC22/WG21 C++ Standards Committee Meeting",
    "N3102": "ISO/IEC FCD 14882, C++0X, National Body Comments",
    "N3103": "Security impact of noexcept",
    "N3104": "Agenda and Meeting Notice for Upcoming WG21 Telecon Meetings",
    "N3105": "Business Plan and Convener's Report, ISO/IEC JTC1/SC22/WG21 (C++)",
    "N3106": "Proposed Resolution for US 122: Revision of N2772 and Issue 915 to adopt it into the Standard",
    "N3108": "Proposed Resolution for US 114: Small-string optimization not possible with current swap() specification",
    "N3109": "US 108",
    "N3110": "Problems with bitmask types in the library",
    "N3111": "C++ Standard Core Language Active Issues, Revision 70",
    "N3112": "Proposed Resolution for CH 15: Double check copy and move semantics of classes due to new rules for default move constructors and assignment operators",
    "N3113": "Async Launch Policies (CH 36)",
    "N3114": "throw() becomes noexcept",
    "N3115": "C++ Standard Core Language Active Issues, Revision 72",
    "N3116": "C++ Standard Core Language Defect Reports, Revision 72",
    "N3117": "C++ Standard Core Language Closed Issues, Revision 72",
    "N3118": "C++ FCD Comment Status",
    "N3119": "Minutes of WG21 Meeting, August 2, 2010",
    "N3120": "Minutes of PL22.16 Meeting, August 2, 2010",
    "N3121": "Minutes, WG21 Teleconference 2010-07-23",
    "N3122": "Observers for the three handler functions",
    "N3123": "Bringing result_of near to INVOKE",
    "N3124": "C and C++ Alignment Compatibility",
    "N3125": "Omnibus Memory Model and Atomics Paper",
    "N3126": "Working Draft, Standard for Programming Language C++",
    "N3127": "Editor's Report",
    "N3128": "C++ Timeout Specification",
    "N3129": "Managing C++ Associated Asynchronous State",
    "N3130": "Lockable requirements for C++0x",
    "N3131": "Compile-time rational arithmetic and overflow",
    "N3132": "Mathematizing C++ Concurrency: The Post-Rapperswil Model",
    "N3133": "C++ Standard Library Active Issues List (Revision R71)",
    "N3134": "C++ Standard Library Defect Report List (Revision R71)",
    "N3135": "C++ Standard Library Closed Issues List (Revision R71)",
    "N3136": "Coherence Requirements Detailed",
    "N3137": "C and C++ Liaison: Compatibility for Atomics",
    "N3138": "AGENDA: PL22.16 Meeting No. 55, WG21 Meeting No. 50, Novermber 8-13, 2010, Batavia, IL",
    "N3139": "An Incomplete Language Feature",
    "N3140": "Cleanup of pair and tuple",
    "N3141": "ISO/IEC FCD 14882, C++0X, National Body Comments",
    "N3142": "Adjustments to constructor and assignment traits",
    "N3143": "Proposed wording for US 90",
    "N3144": "Wording for US 84",
    "N3145": "Deprecating unary_function and binary_function",
    "N3146": "Recommendations for extended identifier characters for C and C++",
    "N3148": "throw() becomes noexcept (Version 2)",
    "N3149": "From Throws: Nothing to noexcept",
    "N3150": "Removing non-empty dynamic exception specifications from the library",
    "N3151": "Keywords for override control",
    "N3152": "Progress guarantees for C++0x (US 3 and US 186)",
    "N3153": "Implicit Move Must Go",
    "N3154": "US 19: Ambiguous use of \"use\"",
    "N3155": "More on noexcept for the language support library",
    "N3156": "More on noexcept for the diagnostics library",
    "N3157": "More on noexcept for the General Utilities Library",
    "N3158": "Missing preconditions for default-constructed match_result objects",
    "N3159": "C++ Standard Core Language Active Issues, Revision 73",
    "N3160": "C++ Standard Core Language Defect Reports, Revision 73",
    "N3161": "C++ Standard Core Language Closed Issues, Revision 73",
    "N3162": "C++ FCD Comment Status, Rev. 1",
    "N3163": "Override Control Using Contextual Keywords",
    "N3164": "Adjusting C++ Atomics for C Compatibility",
    "N3165": "Allocator Requirements: Alternatives to US88",
    "N3166": "Destructors default to noexcept",
    "N3167": "Delete operators default to noexcept",
    "N3168": "Problems with Iostreams Member Functions (Amended from US 137)",
    "N3169": "A Few Small Library Issues",
    "N3170": "Clarifying C++ Futures",
    "N3171": "Proposed resolution for US104: Allocator-aware regular expressions",
    "N3172": "Allocators for stringstream (US140)",
    "N3173": "Terminology for constructing container elements (US115)",
    "N3174": "To move or not to move",
    "N3175": "C++ Standard Library Active Issues List (Revision R72)",
    "N3176": "C++ Standard Library Defect Report List (Revision R72)",
    "N3177": "C++ Standard Library Closed Issues List (Revision R72)",
    "N3178": "emplace Broken for Associative Containers",
    "N3179": "Move and swap for I/O streams (US138)",
    "N3180": "More on noexcept for the Strings Library",
    "N3181": "C++ Standard Library Active Issues List (Revision R73)",
    "N3182": "C++ Standard Library Defect Report List (Revision R73)",
    "N3183": "C++ Standard Library Closed Issues List (Revision R73)",
    "N3186": "Appendix C: ISO C++ 2003 Compatibility, Revision 1",
    "N3187": "More on noexcept for the Containers Library",
    "N3188": "Revision to N3113: Async Launch Policies (CH 36)",
    "N3189": "Observers for the three handler functions",
    "N3190": "C and C++ Alignment Compatibility",
    "N3191": "C++ Timeout Specification",
    "N3192": "Managing C++ Associated Asynchronous State",
    "N3193": "Adjusting C++ Atomics for C Compatibility",
    "N3194": "Clarifying C++ Futures",
    "N3195": "From Throws: Nothing to noexcept (version 2)",
    "N3196": "Omnibus Memory Model and Atomics Paper",
    "N3197": "Lockable requirements for C++0x",
    "N3198": "Deprecating unary_function and binary_function (Revision 1)",
    "N3199": "More on noexcept for the General Utilities Library (version 2)",
    "N3201": "Moving right along",
    "N3202": "To which extent can noexcept be deduced?",
    "N3203": "Tightening the conditions for generating implicit moves",
    "N3204": "Deducing \"noexcept\" for destructors",
    "N3205": "Delete operators default to noexcept",
    "N3206": "Override control: Eliminating Attributes",
    "N3207": "noexcept(auto)",
    "N3208": "Library Working group Issues resolved in Batavia",
    "N3209": "Progress guarantees for C++0x (US 3 and US 186)(revised)",
    "N3210": "New wording for arithmetic on ratios",
    "N3211": "Minutes, WG21 Teleconference 2010-10-29",
    "N3212": "Minutes of WG21 Meeting, November 8, 2010",
    "N3213": "Minutes of PL22.16 Meeting, November 8, 2010",
    "N3214": "US 19: Ambiguous use of \"use\" (version 2)",
    "N3215": "Fixing LWG 1322, Explicit CopyConstructible requirements are insufficient",
    "N3216": "Removing Implicit Move Constructors and Move Assignment Operators",
    "N3217": "Wording for brace-initializers as default arguments",
    "N3218": "Core Issue 1125: Unclear definition of \"potential constant expression\" (DE 8, GB 26)",
    "N3220": "AGENDA, PL22.16 Meeting No. 56, WG21 Meeting No. 51, March 21-26, 2011, Madrid, Spain",
    "N3221": "C++ Standard Core Language Active Issues, Revision 74",
    "N3222": "C++ Standard Core Language Defect Reports, Revision 74",
    "N3223": "C++ Standard Core Language Closed Issues, Revision 74",
    "N3224": "C++ FCD Comment Status, Rev. 4",
    "N3225": "Working Draft, Standard for Programming Language C++",
    "N3226": "Editor's Report",
    "N3227": "Please reconsider noexcept",
    "N3228": "Constexpr Library Additions: complex",
    "N3229": "Constexpr Library Additions: chrono",
    "N3230": "Constexpr Library Additions: future",
    "N3231": "Constexpr Library Additions: support/utilities",
    "N3232": "Spring 2011 JTC1/SC22/WG21 C++ Standards Committee Meeting",
    "N3233": "US22/DE9 Revisited: Decltype and Call Expressions",
    "N3234": "Remove explicit from class-head",
    "N3235": "Generalized pointer casts",
    "N3236": "C++ Standard Core Language Active Issues, Revision 75",
    "N3237": "C++ Standard Core Language Defect Reports, Revision 75",
    "N3238": "C++ Standard Core Language Closed Issues, Revision 75",
    "N3239": "Filesystem Library Update for TR2 (Preliminary)",
    "N3240": "Agenda and Meeting Notice for Upcoming WG21 Telecon Meetings",
    "N3241": "CH-18 and US-85: Clarifying the state of moved-from objects",
    "N3242": "Working Draft, Standard for Programming Language C++",
    "N3243": "Editor's Report",
    "N3244": "WG21 C++ Standards Committee Meeting Summer 2011",
    "N3245": "C++ Standard Library Active Issues List (Revision R74)",
    "N3246": "C++ Standard Library Defect Report List (Revision R74)",
    "N3247": "C++ Standard Library Closed Issues List (Revision R74)",
    "N3248": "noexcept Prevents Library Validation",
    "N3249": "C++ FCD Comment Status Rev. 5",
    "N3250": "US-18: Removing User-Defined Literals",
    "N3251": "noexcept for the Atomics Library",
    "N3252": "A review of noexcept in the threads library",
    "N3253": "A Proposal to Tweak Certain C++ Contextual Conversions",
    "N3254": "Proposed resolution for US104: Allocator-aware regular expressions (rev 2)",
    "N3255": "C++ Decay Copy",
    "N3256": "C++ Freestanding and Conditionally Supported",
    "N3257": "Range-based for statements and ADL",
    "N3258": "US-65: Removing Inheriting Constructors",
    "N3259": "Core Issue 355: Global-scope :: in elaborated-type-specifier",
    "N3260": "Consolidated corrections for a cluster of constexpr concerns",
    "N3261": "Agenda and Meeting Notice for Upcoming WG21 Telecon Meetings",
    "N3262": "Additional Core Language Issue Resolutions for Madrid",
    "N3263": "More on noexcept for the Containers Library (revision)",
    "N3264": "CH-18 and US-85: Clarifying the state of moved-from objects (Revision 1)",
    "N3265": "AGENDA, PL22.16 Meeting No. 57, WG21 Meeting No. 52, August 15-19, 2011, Bloomington, IN",
    "N3266": "Revision 2 of: Proposed Resolution for CH 15: Double check copy and move semantics of classes due to new rules for default move constructors and assignment operators",
    "N3267": "A review of noexcept in the threads library (revised)",
    "N3268": "static_assert and list-initialization in constexpr functions",
    "N3269": "shared_future(future<R>&& rhs) should be allowed to throw",
    "N3270": "Variadic Templates: Wording for Core Issues 778, 1182, and 1183",
    "N3271": "Wording for Range-Based For Loop (Option #5)",
    "N3272": "Follow-up on override control",
    "N3273": "Minutes, WG21 Teleconference 2011-03-04",
    "N3274": "Minutes of WG21 Meeting, March 21, 2011",
    "N3275": "Minutes of PL22.16 Meeting, March 21, 2011",
    "N3276": "US22/DE9 Revisited: Decltype and Call Expressions",
    "N3277": "Core issues 1194/1195/1199: References and constexpr",
    "N3278": "Recent Concurrency Issue Resolutions",
    "N3279": "Conservative use of noexcept in the Library",
    "N3280": "C++ Freestanding and Conditionally Supported",
    "N3281": "692. Partial ordering of variadic class template partial specializations",
    "N3282": "Resolution for core issues 1207 and 1017",
    "N3283": "Dependent Bases and the Current Instantiation: Wording for Core Issue 1043",
    "N3284": "C++ Standard Library Active Issues List (Madrid Resolutions)",
    "N3285": "C++ Standard Library Active Issues List (Revision R75)",
    "N3286": "C++ Standard Library Closed Issues List (Revision R75)",
    "N3287": "C++ Standard Library Closed Issues List (Revision R75)",
    "N3288": "Appendix C: ISO C++ 2003 Compatibility, Revision 7",
    "N3289": "ISO/IEC FCD 14882, C++0X Responses to National Body Comments",
    "N3290": "Programming Languages \u2014 C++",
    "N3291": "Working Draft, Standard for Programming Language C++",
    "N3292": "Editor's report",
    "N3293": "C++ Standard Core Language Active Issues, Revision 76",
    "N3294": "C++ Standard Core Language Defect Reports, Revision 76",
    "N3295": "C++ Standard Core Language Closed Issues, Revision 76",
    "N3296": "C++ FCD Comment Status Rev. 6",
    "N3297": "ISO/IEC FCD 14882, C++0X, Responses to National Body Comments, Rev. 1",
    "N3298": "Convener's report",
    "N3299": "February 2012 Meeting",
    "N3300": "Minutes, WG21 Teleconference 2011-08-05",
    "N3301": "Defect Report: Terminology for Container Element Requirements",
    "N3302": "Constexpr Library Additions: complex, v2",
    "N3303": "Constexpr Library Additions: chrono, v2",
    "N3304": "Constexpr Library Additions: containers",
    "N3305": "Constexpr Library Additions: utilities, v2",
    "N3306": "A Proposal to Tweak Certain C++ Contextual Conversions, v2",
    "N3307": "Issues Found Implementing C++0x",
    "N3308": "constexpr consternation",
    "N3309": "C++ Standard Core Language Active Issues, Revision 77",
    "N3310": "C++ Standard Core Language Defect Reports, Revision 77",
    "N3311": "C++ Standard Core Language Closed Issues, Revision 77",
    "N3312": "C++ Standard Library Active Issues List (Revision R76)",
    "N3313": "C++ Standard Library Defect Report List (Revision R76)",
    "N3314": "C++ Standard Library Closed Issues List (Revision R76)",
    "N3315": "Minutes, PL22.16 Meeting No. 57, WG21 Meeting No. 52, 15-19 August 2011 Bloomington, Indiana, USA",
    "N3316": "Minutes, PL22.16 Meeting No. 57, WG21 Meeting No. 52, 15-19 August 2011 Bloomington, Indiana, USA",
    "N3317": "AGENDA, PL22.16 Meeting No. 58, WG21 Meeting No. 53, February 6-10, 2012, Kona Hawaii",
    "N3318": "C++ Standard Library Active Issues List (Revision R77)",
    "N3319": "C++ Standard Library Defect Report List (Revision R77)",
    "N3320": "C++ Standard Library Closed Issues List (Revision R77)",
    "N3321": "Agenda and Meeting Notice for Upcoming WG21 Telecon Meetings",
    "N3322": "A Preliminary Proposal for a Static if",
    "N3323": "A Proposal to Tweak Certain C++ Contextual Conversions, v3",
    "N3324": "Terminology: \"indirection\" versus \"dereference\"",
    "N3325": "HTML for C++ Standards Documents",
    "N3326": "Sequential access to data members and base sub-objects",
    "N3327": "A Standard Programmatic Interface for Asynchronous Operations",
    "N3328": "Resumable Functions",
    "N3329": "Proposal: static if declaration",
    "N3330": "C++ Standard Core Language Active Issues, Revision 78",
    "N3331": "C++ Standard Core Language Defect Reports, Revision 78",
    "N3332": "C++ Standard Core Language Closed Issues, Revision 78",
    "N3333": "Hashing User-Defined Types in C++1y",
    "N3334": "Proposing array_ref<T> and string_ref",
    "N3335": "Filesystem Library for C++11/TR2 (Revision 1)",
    "N3336": "Adapting Standard Library Strings and I/O to a Unicode World",
    "N3337": "Working Draft, Standard for Programming Language C++",
    "N3338": "Editor's Report",
    "N3339": "A Preliminary Proposal for a Deep-Copying Smart Pointer",
    "N3340": "Rich Pointers",
    "N3341": "Transactional Language Constructs for C++",
    "N3342": "Digit Separators coming back",
    "N3343": "Portland meeting information",
    "N3344": "Toward a Standard C++ 'Date' Class",
    "N3345": "C++ Language Constructs for Parallel Programming",
    "N3346": "Defect Report: Terminology for Container Element Requirements - Rev 1",
    "N3347": "Modules in C++ (Revision 6)",
    "N3348": "Scoping of operator new",
    "N3349": "Ease of using namespaces",
    "N3350": "A minimal std::range<Iter>",
    "N3351": "A Concept Design for the STL",
    "N3352": "C++ Binary Fixed-Point Arithmetic",
    "N3353": "C++ Concurrent Queues",
    "N3354": "C++ Stream Mutexes",
    "N3355": "C++ Distributed Counters",
    "N3356": "C++ Mutable Threads",
    "N3357": "C++ Standard Library Active Issues List (Revision R78)",
    "N3358": "C++ Standard Library Defect Report List (Revision R78)",
    "N3359": "C++ Standard Library Closed Issues List (Revision R78)",
    "N3360": "Networking Library Status Report",
    "N3361": "C++ Language Constructs for Parallel Programming",
    "N3362": "Terminology: \"indirection\" versus \"dereference\" (revision 2)",
    "N3363": "A Rational Number Library for C++",
    "N3365": "Filesystem Library Proposal (Revision 2)",
    "N3366": "Runtime-sized arrays with automatic storage duration",
    "N3367": "C++ Standard Core Language Active Issues, Revision 79",
    "N3368": "C++ Standard Core Language Defect Reports, Revision 79",
    "N3369": "C++ Standard Core Language Closed Issues, Revision 79",
    "N3370": "Call for Library Proposals",
    "N3371": "Status List for Library Proposals",
    "N3373": "AGENDA, PL22.16 Meeting No. 59, WG21 Meeting No. 54, October 15-19, 2012 - Portland, Oregon",
    "N3374": "SG4: Networking",
    "N3375": "Proposal for Unbounded-Precision Integer Types",
    "N3376": "Working Draft, Standard for Programming Language C++",
    "N3377": "C++ Editor's Report, February 2012",
    "N3378": "A preliminary proposal for work executors",
    "N3379": "Minutes, WG21 Teleconference 2012-01-27",
    "N3380": "Minutes, WG21 Meeting No. 53, 6-10 February 2012 Kona, Hawaii, USA",
    "N3381": "Minutes, PL22.16 Meeting No. 58, 6-10 February 2012 Kona, Hawaii, USA",
    "N3382": "C++ Standard Core Language Active Issues, Revision 80",
    "N3383": "C++ Standard Core Language Defect Reports, Revision 80",
    "N3384": "C++ Standard Core Language Closed Issues, Revision 80",
    "N3386": "Return type deduction for normal functions",
    "N3387": "Overload resolution tiebreakers for integer types",
    "N3388": "Using Asio with C++11",
    "N3389": "Urdl: a simple library for accessing web content",
    "N3390": "Any Library Proposal (Revision 1)",
    "N3391": "ISO C++ SG1 Meeting Minutes for May 2012",
    "N3392": "Minutes, WG21/SG4 Meeting 8 May 2012 Redmond, Washington, USA",
    "N3393": "Business Plan and Convener's Report",
    "N3394": "[[deprecated]] attribute",
    "N3395": "C++ Stream Mutexes",
    "N3396": "Dynamic memory allocation for over-aligned data",
    "N3397": "Spring 2013 JTC1/SC22/WG21 C++ Standards Committee Meeting",
    "N3398": "String Interoperation Library",
    "N3399": "Filesystem Library Proposal (Revision 3)",
    "N3400": "A proposal for eliminating the underscore madness that library writers have to suffer",
    "N3401": "Generating move operations (elaborating on Core 1402)",
    "N3402": "User-defined Literals for Standard Library Types",
    "N3403": "Use Cases for Compile-Time Reflection",
    "N3404": "Tuple Tidbits",
    "N3405": "Template Tidbits",
    "N3406": "A proposal to add a utility class to represent optional objects (Revision 2)",
    "N3407": "Proposal to Add Decimal Floating Point Support to C++",
    "N3408": "Parallelizing The Standard Algorithms Library",
    "N3409": "Strict Fork-Join Parallelism",
    "N3410": "Rich Pointers with Dynamic and Static Introspection",
    "N3411": "Additional Searching Algorithms",
    "N3412": "Runtime-sized arrays with automatic storage duration (revision 2)",
    "N3413": "Allowing arbitrary literal types for non-type template parameters",
    "N3414": "A Rational Number Library for C++",
    "N3415": "A Database Access Library",
    "N3416": "Packaging Parameter Packs",
    "N3417": "Proposal for Unbounded-Precision Integer Types",
    "N3418": "Proposal for Generic (Polymorphic) Lambda Expressions",
    "N3419": "Vector loops and Parallel Loops",
    "N3420": "A URI Library for C++",
    "N3421": "Making Operator Functors `greater<>`",
    "N3422": "SG5: Software Transactional Memory (TM) Status Report",
    "N3423": "SG5: Software Transactional Memory (TM) Meeting Minutes",
    "N3424": "Lambda Correctness and Usability Issues",
    "N3425": "Concurrent Unordered Associative Containers for C++",
    "N3426": "Experience with Pre-Parsed Headers",
    "N3427": "Shared locking in C++",
    "N3428": "A Standard Programmatic Interface for Asynchronous Operations",
    "N3429": "A C++ Library Solution To Parallelism",
    "N3430": "Proposing std::split()",
    "N3431": "Quoted Strings Library Proposal",
    "N3432": "C++ Sized Deallocation",
    "N3433": "Clarifying Memory Allocation",
    "N3434": "C++ Concurrent Queues",
    "N3435": "Standardized feature-test macros",
    "N3436": "std::result_of and SFINAE",
    "N3437": "Type Name Strings For C++",
    "N3438": "C++ Standard Library Active Issues List (Revision R79)",
    "N3439": "C++ Standard Library Defect Report List (Revision R79)",
    "N3440": "C++ Standard Library Closed Issues List (Revision R79)",
    "N3441": "Call Stack Utilities and std::exception Extension Proposal",
    "N3442": "string_ref: a non-owning reference to a string",
    "N3443": "Priority Queue Changes and Additions",
    "N3444": "Relaxing syntactic constraints on constexpr function definitions",
    "N3445": "Pass by Const Reference or Value",
    "N3446": "C++ Mapreduce",
    "N3448": "Painless Digit Separation",
    "N3449": "Open and Efficient Type Switch for C++",
    "N3450": "Iterator-Related Improvements to Containers",
    "N3451": "async and ~future",
    "N3453": "Minutes, WG21 Teleconference 2012-10-5",
    "N3454": "Minutes, WG21 Meeting No. 54, 15-19 October 2012 Portland, Oregon, USA",
    "N3455": "Minutes, PL22.16 Meeting No. 59, 15-19 October 2012 Portland, Oregon, USA",
    "N3456": "Range arguments for container constructors and methods, with wording",
    "N3457": "Algorithm std::iota and its modifications.",
    "N3458": "Simple Database Integration in C++11",
    "N3459": "Comparison of Two Database Access Methodologies",
    "N3462": "`std::result_of` and SFINAE",
    "N3463": "Portable Program Source Files",
    "N3465": "Adding heterogeneous comparison lookup to associative containers for TR2 (Rev 2)",
    "N3466": "More Perfect Forwarding",
    "N3467": "Runtime-sized arrays with automatic storage duration (revision 3)",
    "N3468": "User-defined Literals for Standard Library Types (version 2)",
    "N3469": "Constexpr Library Additions: chrono, v3",
    "N3470": "Constexpr Library Additions: containers, v2",
    "N3471": "Constexpr Library Additions: utilities, v3",
    "N3472": "Binary Literals in the C++ Core Language",
    "N3473": "C++ Standard Library Active Issues List (Revision R80)",
    "N3474": "C++ Standard Library Defect Report List (Revision R80)",
    "N3475": "C++ Standard Library Closed Issues List (Revision R80)",
    "N3477": "C++ Internet Protocol Classes",
    "N3478": "Core Issue 1512: Pointer comparison vs qualification conversions",
    "N3479": "Priority Queue, Queue and Stack: Changes and Additions",
    "N3480": "C++ Standard Core Language Active Issues, Revision 81",
    "N3481": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 81",
    "N3482": "C++ Standard Core Language Closed Issues, Revision 81",
    "N3484": "A URI Library for C++",
    "N3485": "Working Draft, Standard for Programming Language C++",
    "N3486": "C++ Editor's Report, October 2012",
    "N3487": "TLS and Parallelism",
    "N3488": "Evolution Working Group paper status",
    "N3489": "A Rational Number Library for C++",
    "N3490": "ADL Control for C++",
    "N3491": "Minutes: SG4 Networking, October 2012",
    "N3492": "Use Cases for Compile-Time Reflection (Rev. 2)",
    "N3493": "Compile-time integer sequences",
    "N3494": "A proposal to add special mathematical functions according to the ISO/IEC 80000-2:2009 standard",
    "N3495": "inplace realloc",
    "N3496": "AGENDA, PL22.16 Meeting No. 60, WG21 Meeting No. 55, April 15-20, 2013 \u2014 Bristol, UK",
    "N3497": "Runtime-sized arrays with automatic storage duration (revision 4)",
    "N3498": "Core Issue 1512: Pointer comparison vs qualification conversions (revision 2)",
    "N3499": "Digit Separators",
    "N3500": "New assert variants",
    "N3501": "C++ Standard Core Language Active Issues, Revision 82",
    "N3502": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 82",
    "N3503": "C++ Standard Core Language Closed Issues, Revision 82",
    "N3505": "Filesystem Library Proposal (Revision 4)",
    "N3506": "A printf-like Interface for the Streams Library",
    "N3507": "A URI Library for C++",
    "N3508": "Any Library Proposal (Revision 2)",
    "N3509": "Operator Bool for Ranges",
    "N3510": "std::split(): An algorithm for splitting strings",
    "N3511": "exchange() utility function",
    "N3512": "string_ref: a non-owning reference to a string, revision 2",
    "N3513": "Range arguments for container constructors and methods, wording revision 2",
    "N3514": "A Proposal for the World's Dumbest Smart Pointer",
    "N3515": "Toward Opaque Typedefs for C++1Y",
    "N3516": "C++ Standard Library Active Issues List (Revision R81)",
    "N3517": "C++ Standard Library Defect Report List (Revision R81)",
    "N3518": "C++ Standard Library Closed Issues List (Revision R81)",
    "N3519": "Feb 5, 2013 SG1 Teleconference Announcement and Agenda",
    "N3520": "Critical sections in vector loops",
    "N3521": "convert() utility function",
    "N3522": "C++ Standard Library Active Issues List (Revision R82)",
    "N3523": "C++ Standard Library Defect Report List (Revision R82)",
    "N3524": "C++ Standard Library Closed Issues List (Revision R82)",
    "N3525": "Polymorphic Allocators",
    "N3526": "Uniform initialization for arrays and class aggregate types",
    "N3527": "A proposal to add a utility class to represent optional objects (Revision 2)",
    "N3528": "Minutes of Feb 5 2013 SG1 Phone Call",
    "N3529": "SG5: Transactional Memory (TM) Meeting Minutes 2012/10/30-2013/02/04",
    "N3530": "Leveraging OpenMP infrastructure for language level parallelisation",
    "N3531": "User-defined Literals for Standard Library Types (version 3)",
    "N3532": "C++ Dynamic Arrays",
    "N3533": "C++ Concurrent Queues",
    "N3534": "C++ Pipelines",
    "N3535": "C++ Stream Mutexes",
    "N3536": "C++ Sized Deallocation",
    "N3537": "Clarifying Memory Allocation",
    "N3538": "Pass by Const Reference or Value",
    "N3539": "C++ Standard Core Language Active Issues, Revision 83",
    "N3540": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 83",
    "N3541": "C++ Standard Core Language Closed Issues, Revision 83",
    "N3542": "Proposal for Unbounded-Precision Integer Types",
    "N3543": "Priority Queue, Queue and Stack: Changes and Additions",
    "N3544": "SG5: Transactional Memory (TM) Meeting Minutes 2013/02/25-2013/03/04",
    "N3545": "An Incremental Improvement to `integral_constant`",
    "N3546": "TransformationTraits Redux",
    "N3547": "Three <random>-related Proposals",
    "N3548": "Conditionally-supported Special Math Functions for C++14",
    "N3549": "s/bound/extent/",
    "N3550": "Proposed C++14 Value Classification",
    "N3551": "Random Number Generation in C++11",
    "N3552": "Introducing Object Aliases",
    "N3553": "Proposing a C++1Y Swap Operator",
    "N3554": "A Parallel Algorithms Library",
    "N3556": "Thread-Local Storage in X-Parallel Computations",
    "N3557": "Considering a Fork-Join Parallelism Library",
    "N3558": "A Standardized Representation of Asynchronous Operations",
    "N3559": "Proposal for Generic (Polymorphic) Lambda Expressions",
    "N3560": "Proposal for Assorted Extensions to Lambda Expressions",
    "N3561": "Semantics of Vector Loops",
    "N3562": "Executors and schedulers, revision 1",
    "N3563": "C++ Mapreduce",
    "N3564": "Resumable Functions",
    "N3565": "IP Address Design Constraints",
    "N3566": "Evolution Open Issues",
    "N3567": "Evolution Closed Issues",
    "N3568": "Shared locking in C++",
    "N3569": "SPRING 2014 JTC1/SC22/WG21 C++ STANDARDS COMMITTEE MEETING: Preliminary Information",
    "N3570": "Quoted Strings Library Proposal (Revision 1)",
    "N3571": "A Proposal to add Single Instruction Multiple Data Computation to the Standard Library",
    "N3572": "Unicode Support in the Standard Library",
    "N3573": "Heterogenous extensions to unordered containers",
    "N3574": "Binding stateful functions as function pointers",
    "N3575": "Additional Standard allocation schemes",
    "N3576": "SG8 Concepts Teleconference Minutes - 2013-03-12",
    "N3577": "Fall 2013 JTC1/SC22/WG21 C++ Standards Committee Meeting",
    "N3578": "Proposing the Rule of Five",
    "N3579": "A type trait for signatures",
    "N3580": "Concepts Lite: Constraining Templates with Predicates",
    "N3581": "Delimited iterators",
    "N3582": "Return type deduction for normal functions",
    "N3583": "Exploring constexpr at Runtime",
    "N3584": "Wording for Accessing Tuple Fields by Type",
    "N3585": "Iterator-Related Improvements to Containers (Revision 2)",
    "N3586": "Splicing Maps and Sets",
    "N3587": "For Loop Exit Strategies",
    "N3588": "make_unique",
    "N3589": "Summary of Progress Since Portland towards Transactional Language Constructs for C++",
    "N3591": "Summary of Discussions on Explicit Cancellation in Transactional Language Constructs for C++",
    "N3592": "Alternative cancellation and data escape mechanisms for transactions",
    "N3593": "std::split(): An algorithm for splitting strings",
    "N3594": "std::join(): An algorithm for joining a range of elements",
    "N3595": "Simplifying Argument-Dependent Lookup Rules",
    "N3596": "Code Reuse in Class Template Specialization",
    "N3597": "Relaxing constraints on constexpr functions",
    "N3598": "constexpr member functions and implicit const",
    "N3599": "Literal operator templates for strings",
    "N3600": "C++ Latches and Barriers",
    "N3601": "Implicit template parameters",
    "N3602": "Template parameter deduction for constructors",
    "N3603": "A Three-Class IP Address Proposal",
    "N3604": "Centralized Defensive-Programming Support for Narrow Contracts",
    "N3605": "Member initializers and aggregates",
    "N3606": "Extending std::search to use Additional Searching Algorithms",
    "N3607": "Making non-modifying sequence operations more robust",
    "N3608": "exchange() utility function, revision 2",
    "N3609": "string_view: a non-owning reference to a string, revision 3",
    "N3610": "Generic lambda-capture initializers, supporting capture-by-move",
    "N3611": "A Rational Number Library for C++",
    "N3612": "Desiderata of a C++11 Database Interface",
    "N3613": "\"Static If\" Considered",
    "N3614": "unwinding_exception",
    "N3615": "Constexpr Variable Templates",
    "N3617": "Lifting overload sets into function objects",
    "N3618": "What can signal handlers do? (CWG 1441)",
    "N3619": "A proposal to add swappability traits to the standard library",
    "N3620": "Network byte order conversion",
    "N3621": "Minutes, WG21 Teleconference 2013-03-29",
    "N3622": "Minutes: WG21 Meeting No. 55, 15-20 April 2013 - Bristol, UK",
    "N3623": "Minutes: PL22.16 Meeting No. 60, 15-20 April 2013 - Bristol, UK",
    "N3624": "Core Issue 1512: Pointer comparison vs qualification conversions (revision 3)",
    "N3625": "A URI Library for C++",
    "N3626": "Floating-Point Typedefs Having Specified Widths",
    "N3627": "Relaxed switch statement",
    "N3628": "C and C++ Compatibility",
    "N3629": "Simplifying C++0x Concepts",
    "N3630": "async, ~future, and ~thread (Revision 1)",
    "N3631": "C11: The New C Standard",
    "N3632": "Additional std::async Launch Policies",
    "N3633": "What can signal handlers do? (CWG 1441)",
    "N3634": "Improvements to std::future<T> and Related APIs",
    "N3635": "Towards restrict-like semantics for C++",
    "N3636": "~thread should join",
    "N3637": "async and ~future (Revision 3)",
    "N3638": "Return type deduction for normal functions",
    "N3639": "Runtime-sized arrays with automatic storage duration (revision 5)",
    "N3640": "Extending shared_ptr to Support Arrays",
    "N3641": "Extending make_shared to Support Arrays",
    "N3642": "User-defined Literals for Standard Library Types (part 1 - version 4)",
    "N3643": "Range Adaptor for Selecting from Pair or Tuple",
    "N3644": "Null Forward Iterators",
    "N3645": "Splicing Maps and Sets (Revision 1)",
    "N3646": "Network byte order conversion",
    "N3647": "Minutes: PL22.16 Meeting No. 59, 15-19 October 2012 Portland, Oregon, USA",
    "N3648": "Wording Changes for Generalized Lambda-capture",
    "N3649": "Generic (Polymorphic) Lambda Expressions (Revision 3)",
    "N3650": "Resumable Functions",
    "N3651": "Variable Templates (Revision 1)",
    "N3652": "Relaxing constraints on constexpr functions / constexpr member functions and implicit const",
    "N3653": "Member initializers and aggregates",
    "N3654": "Quoted Strings Library Proposal (Revision 2)",
    "N3655": "TransformationTraits Redux, v2",
    "N3656": "`make_unique` (Revision 1)",
    "N3657": "Adding heterogeneous comparison lookup to associative containers (rev 4)",
    "N3658": "Compile-time integer sequences",
    "N3659": "Shared locking in C++",
    "N3660": "User-defined Literals for std::complex, part 2 of UDL for Standard Library Types (version 4)",
    "N3661": "Digit Separators",
    "N3662": "C++ Dynamic Arrays",
    "N3663": "C++ Sized Deallocation",
    "N3664": "Clarifying Memory Allocation",
    "N3665": "Uninterleaved String Output Streaming",
    "N3666": "C++ Latches and Barriers",
    "N3667": "Drafting for Core 1402",
    "N3668": "`exchange()` utility function, revision 3",
    "N3669": "Fixing constexpr member functions without const",
    "N3670": "Wording for Addressing Tuples by Type: Revision 2",
    "N3671": "Making non-modifying sequence operations more robust: Revision 2",
    "N3672": "A proposal to add a utility class to represent optional objects (Revision 4)",
    "N3673": "C++ Library Working Group Ready Issues Bristol 2013",
    "N3674": "C++ Standard Core Language Active Issues, Revision 84",
    "N3675": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 84",
    "N3676": "C++ Standard Core Language Closed Issues, Revision 84",
    "N3677": "A Proposal to Add additional RAII Wrappers to the Standard Library",
    "N3678": "C++ Stream Guards",
    "N3679": "Async() future destructors must wait",
    "N3680": "Improving pair and tuple",
    "N3681": "Auto and braced-init lists",
    "N3682": "C++ Standard Evolution Active Issues List (Revision R02)",
    "N3683": "C++ Standard Evolution Completed Issues List (Revision R02)",
    "N3684": "C++ Standard Evolution Closed Issues List (Revision R02)",
    "N3685": "string_view: a non-owning reference to a string, revision 4",
    "N3686": "Traversable arguments for container constructors and methods, wording revision 3",
    "N3687": "C++ Standard Library Active Issues List (Revision R83)",
    "N3688": "C++ Standard Library Defect Report List (Revision R83)",
    "N3689": "C++ Standard Library Closed Issues List (Revision R83)",
    "N3690": "Programming Languages - C++",
    "N3691": "Working Draft, Standard for Programming Language C++",
    "N3692": "C++ Editor's Report, October 2012",
    "N3693": "Working Draft, Technical Specification \u2014 File System",
    "N3694": "Feature-testing recommendations for C++",
    "N3695": "SG5: Transactional Memory (TM) Meeting Minutes 2013/03/11-2013/06/10",
    "N3696": "Proposal to extend atomic with priority update functions",
    "N3697": "Business Plan and Convener's Report",
    "N3698": "July 25-26 Santa Clara SG1 Meeting Announcement and Agenda",
    "N3699": "A proposal to add a generalized callable negator",
    "N3700": "Hierarchical Data Structures and Related Concepts for the C++ Standard Library",
    "N3701": "Concepts Lite",
    "N3702": "Introducing an optional parameter for mem_fn, which allows to bind an object to its member function",
    "N3703": "Extending std::search to use Additional Searching Algorithms (Version 3)",
    "N3704": "AGENDA, PL22.16 Meeting No. 61, WG21 Meeting No. 56, September 23-28, 2013 - Chicago, IL, USA",
    "N3705": "Agenda and Meeting Notice for WG21 Telecon Meeting",
    "N3706": "C++ Distributed Counters",
    "N3707": "2014-02 Meeting Invitation and Information",
    "N3708": "A proposal to add coroutines to the C++ standard library",
    "N3709": "Minutes for July 2013 Santa Clara SG1 Meeting",
    "N3710": "Specifying the absence of \"out of thin air\" results (LWG2265)",
    "N3711": "Task Groups As a Lower Level C++ Library Solution To Fork-Join Parallelism",
    "N3712": "Policy-Based Design for Safe Destruction in Concurrent Containers",
    "N3713": "C++ Standard Core Language Active Issues, Revision 85",
    "N3714": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 85",
    "N3715": "C++ Standard Core Language Closed Issues, Revision 85",
    "N3716": "A printf-like Interface for the Streams Library",
    "N3717": "SG5: Transactional Memory (TM) Meeting Minutes 2013/06/24-2013/08/26",
    "N3718": "Transactional Memory Support for C++",
    "N3719": "Extend INVOKE to support types convertible to target class",
    "N3720": "Working Draft Technical Specification - URI",
    "N3721": "Improvements to std::future<T> and Related APIs",
    "N3722": "Resumable Functions",
    "N3723": "Extend operator-> to support rvalues",
    "N3724": "A Parallel Algorithms Library",
    "N3725": "Original Draft Specification of Transactional Language Constructs for C++ Version 1.1 (February 3, 2012)",
    "N3726": "Polymorphic Memory Resources",
    "N3727": "A proposal to add invoke function template",
    "N3728": "Packaging Parameter Packs (Rev. 2)",
    "N3729": "Invocation type traits",
    "N3730": "Specializations and namespaces",
    "N3731": "Executors and schedulers, revision 2",
    "N3732": "Value-Oriented Concurrent Unordered Containers",
    "N3733": "ISO/IEC CD 14882, C++ 2014, National Body Comments",
    "N3734": "Vector Programming: A proposal for WG21",
    "N3735": "On the difference between parallel loops and vector loops",
    "N3736": "C++ Standard Evolution Active Issues List (Revision R03)",
    "N3737": "C++ Standard Evolution Completed Issues List (Revision R03)",
    "N3738": "C++ Standard Evolution Closed Issues List (Revision R03)",
    "N3739": "Improving pair and tuple, revision 1",
    "N3740": "A Proposal for the World's Dumbest Smart Pointer, v2",
    "N3741": "Toward Opaque Typedefs for C++1Y, v2",
    "N3742": "Three <random>-related Proposals, v2",
    "N3743": "Conditionally-supported Special Math Functions for C++14, v2",
    "N3744": "Proposing [[pure]]",
    "N3745": "Feature-testing recommendations for C++",
    "N3746": "Proposing a C++1Y Swap Operator, v2",
    "N3747": "A Universal Model for Asynchronous Operations",
    "N3748": "Implicit Evaluation of \"auto\" Variables and Arguments",
    "N3749": "Constexpr Library Additions: functional",
    "N3750": "C++ Ostream Buffers",
    "N3751": "Object Lifetime, Low-level Programming, and memcpy",
    "N3752": "Index Based Ranges",
    "N3753": "Centralized Defensive-Programming Support for Narrow Contracts (Revision 1)",
    "N3754": "C++ Standard Library Active Issues List (Revision R84)",
    "N3755": "C++ Standard Library Defect Report List (Revision R84)",
    "N3756": "C++ Standard Library Closed Issues List (Revision R84)",
    "N3757": "Support for user-defined exception information and diagnostic information in std::exception",
    "N3758": "Standard exception information types for std::exception",
    "N3759": "SIMD Vector Types",
    "N3760": "`[[deprecated]]` attribute",
    "N3761": "Proposing type_at<>",
    "N3762": "string_view: a non-owning reference to a string, revision 5",
    "N3763": "Traversable arguments for container constructors and methods, wording revision 4",
    "N3764": "Ruminations on relational operators",
    "N3765": "On Optional",
    "N3766": "The identity type transformation",
    "N3767": "Teleconference Minutes (September 2013)",
    "N3768": "Minutes (September 2013)",
    "N3769": "Minutes: PL22.16 Meeting No. 61, 2013-09 Chicago Minutes",
    "N3770": "C++ CD Comment Status, Rev. 1",
    "N3771": "Canadian C++14 Comments",
    "N3772": "Changing the type of address-of-member expression",
    "N3773": "async and ~future (Revision 4)",
    "N3774": "C++ Needs Language Support For Vectorization",
    "N3775": "Deprecating rand() and Friends",
    "N3776": "Wording for ~future",
    "N3777": "Wording for deprecating async",
    "N3778": "C++ Sized Deallocation",
    "N3779": "User-defined Literals for `std::complex`",
    "N3780": "Why Deprecating async() is the Worst of all Options",
    "N3781": "Single-Quotation-Mark as a Digit Separator",
    "N3782": "Index Based Ranges (Rev. 1)",
    "N3783": "Network Byte Order Conversion",
    "N3784": "Improvements to std::future<T> and Related APIs",
    "N3785": "Executors and schedulers, revision 3",
    "N3786": "Prohibiting \"out of thin air\" results in C++14",
    "N3787": "What can signal handlers do? (CWG 1441)",
    "N3788": "Immediate issues",
    "N3789": "Constexpr Library Additions: functional",
    "N3790": "Working Draft, Technical Specification \u2014 File System",
    "N3791": "Lightweight Drawing Library - Objectives, Requirements, Strategies",
    "N3792": "Working Draft Technical Specification - URI",
    "N3793": "A proposal to add a utility class to represent optional objects (Revision 5)",
    "N3794": "Proposal to Add Multi-Dimensional Support to std::array",
    "N3795": "A more common version of algorithm std::partition_copy",
    "N3796": "std::rand replacement",
    "N3797": "Working Draft, Standard for Programming Language C++",
    "N3798": "C++ Editor's Report, October 2013",
    "N3799": "AGENDA: PL22.16 Meeting No. 62, WG21 Meeting No. 57, February 10-15, 2014 - Issaquah, WA, USA",
    "N3800": "A proposal to add a generalized callable negator (Revision 1)",
    "N3801": "Removing Undefined Behavior from the Preprocessor",
    "N3802": "apply() call a function with arguments from a tuple",
    "N3803": "Programming Languages \u2014 C++ Standard Library \u2014 File System Technical Specification",
    "N3804": "Any Library Proposal (Revision 3)",
    "N3805": "SPRING 2014 JTC1/SC22/WG21 C++ STANDARDS COMMITTEE MEETING: Preliminary Information",
    "N3806": "C++ Standard Core Language Active Issues, Revision 86",
    "N3807": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 86",
    "N3808": "C++ Standard Core Language Closed Issues, Revision 86",
    "N3810": "Alternatives for Array Extensions",
    "N3811": "C++ Standard Evolution Active Issues List (Revision R04)",
    "N3812": "C++ Standard Evolution Completed Issues List (Revision R04)",
    "N3813": "C++ Standard Evolution Closed Issues List (Revision R04)",
    "N3814": "Call for Compile-Time Reflection Proposals",
    "N3815": "Enumerator List Property Queries",
    "N3816": "Polymorphic Memory Resources - r1",
    "N3817": "C++ Latches and Barriers",
    "N3818": "Centralized Defensive-Programming Support for Narrow Contracts (Revision 2)",
    "N3819": "Concepts Lite Specification",
    "N3820": "Working Draft, Technical Specification \u2014 Array Extensions",
    "N3821": "C++ Standard Library Active Issues List (Revision R85)",
    "N3822": "C++ Standard Library Defect Report List (Revision R85)",
    "N3823": "C++ Standard Library Closed Issues List (Revision R85)",
    "N3824": "make_array",
    "N3825": "SG13 Graphics Discussion",
    "N3826": "Agenda and Meeting Notice for WG21 Telecon Meeting",
    "N3827": "Working Draft Technical Specification - URI",
    "N3828": "FALL 2014 JTC1/SC22/WG21 C++ Standards Committee Meeting",
    "N3829": "apply() call a function with arguments from a tuple (V2)",
    "N3830": "Scoped Resource - Generic RAII Wrapper for the Standard Library",
    "N3831": "Language Extensions for Vector level parallelism",
    "N3832": "Task Region",
    "N3833": "C++ Standard Core Language Active Issues, Revision 87",
    "N3834": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 87",
    "N3835": "C++ Standard Core Language Closed Issues, Revision 87",
    "N3836": "C++ Standard Evolution Active Issues List (Revision R05)",
    "N3837": "C++ Standard Evolution Completed Issues List (Revision R05)",
    "N3838": "C++ Standard Evolution Closed Issues List (Revision R05)",
    "N3839": "Proposing the Rule of Five, v2",
    "N3840": "A Proposal for the World's Dumbest Smart Pointer, v3",
    "N3841": "Discouraging rand() in C++14",
    "N3842": "A sample Proposal",
    "N3843": "A SFINAE-Friendly std::common_type",
    "N3844": "A SFINAE-Friendly std::iterator_traits",
    "N3845": "Greatest Common Divisor and Least Common Multiple",
    "N3846": "Extending static_assert",
    "N3847": "Random Number Generation is Not Simple!",
    "N3848": "Working Draft, Technical Specification on C++ Extensions for Library Fundamentals",
    "N3849": "string_view: a non-owning reference to a string, revision 6",
    "N3850": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N3851": "Multidimensional bounds, index and array_view",
    "N3852": "C++ CD Status, Rev. 1",
    "N3853": "Range-Based For-Loops: The Next Generation",
    "N3854": "Variable Templates For Type Traits",
    "N3856": "Unforgetting standard functions min/max as constexpr",
    "N3857": "Improvements to std::future<T> and Related APIs",
    "N3858": "Resumable Functions",
    "N3859": "Transactional Memory Support for C++",
    "N3861": "Transactional Memory (TM) Meeting Minutes 2013/09/09-2014/01/20",
    "N3862": "Towards a Transaction-safe C++ Standard Library: std::list",
    "N3863": "Private Extension Methods",
    "N3864": "A constexpr bitwise operations library for C++",
    "N3865": "More Improvements to std::future<T>",
    "N3866": "Invocation type traits (Rev. 2)",
    "N3867": "Specializations and namespaces (Rev. 2)",
    "N3869": "Extending shared_ptr to Support Arrays, Revision 1",
    "N3870": "Extending make_shared to Support Arrays, Revision 1",
    "N3871": "Proposal to Add Decimal Floating Point Support to C++ (revision 2)",
    "N3872": "A Primer on Scheduling Fork-Join Parallelism with Work Stealing",
    "N3873": "Improved insertion interface for unique-key maps",
    "N3874": "Light-Weight Execution Agents",
    "N3875": "Run-time bound array data members",
    "N3876": "Convenience Functions to Combine Hash Values",
    "N3877": "Centralized Defensive-Programming Support for Narrow Contracts (Revision 3)",
    "N3878": "Extensions to the Concept Introduction Syntax in Concepts Lite",
    "N3879": "Explicit Flow Control: break label, goto case and explicit switch",
    "N3880": "Improving the Verification of C++ Programs",
    "N3881": "Fixing the specification of universal-character-names",
    "N3882": "An update to the preprocessor specification",
    "N3883": "Code checkers & generators",
    "N3884": "Contiguous Iterators: A Refinement of Random Access Iterators",
    "N3886": "A Proposal to add a Database Access Layer to the Standard Library",
    "N3887": "Consistent Metafunction Aliases",
    "N3888": "A Proposal to Add 2D Graphics Rendering and Display to C++",
    "N3889": "Concepts Lite Specification",
    "N3890": "Container<Incomplete Type>",
    "N3891": "A proposal to rename `shared_mutex` to `shared_timed_mutex`",
    "N3892": "C++ Ostream Buffers",
    "N3893": "C++ Standard Library Active Issues List (Revision R86)",
    "N3894": "C++ Standard Library Defect Report List (Revision R86)",
    "N3895": "C++ Standard Library Closed Issues List (Revision R86)",
    "N3896": "LIBRARY FOUNDATIONS FOR ASYNCHRONOUS OPERATIONS",
    "N3897": "Auto-type members",
    "N3898": "HASHING AND FINGERPRINTING",
    "N3899": "Nested Allocation",
    "N3900": "WG21 2014-01-31 Telecon Minutes",
    "N3901": "Minutes (February 2014) WG21 Meeting No. 57",
    "N3902": "Minutes (February 2014) PL22.16 Meeting No. 62",
    "N3903": "C++ CD Comment Status Rev. 6",
    "N3905": "Extending std::search to use Additional Searching Algorithms (Version 4)",
    "N3906": "ISO/IEC PDTS 18822, File System, National Body Comments",
    "N3908": "Working Draft, Information technology \u2013 Programming languages, their environments and system software interfaces \u2013 C++ Extensions for Library Fundamentals",
    "N3909": "A SFINAE-Friendly std::iterator_traits, v2",
    "N3910": "What can signal handlers do? (CWG 1441)",
    "N3911": "TransformationTrait Alias `void_t`",
    "N3912": "Auto and braced-init-lists, continued",
    "N3913": "Greatest Common Divisor and Least Common Multiple, v2",
    "N3914": "Additional Core Language Issue Resolutions for Issaquah",
    "N3915": "apply() call a function with arguments from a tuple (V3)",
    "N3916": "Polymorphic Memory Resources - r2",
    "N3918": "Core Issue 1299: Temporary objects vs temporary expressions",
    "N3919": "Transactional Memory Support for C++",
    "N3920": "Extending shared_ptr to Support Arrays, Revision 2",
    "N3921": "string_view: a non-owning reference to a string, revision 7",
    "N3922": "New Rules for auto deduction from braced-init-list",
    "N3923": "A SFINAE-Friendly std::iterator_traits, v3",
    "N3924": "Discouraging rand() in C++14, v2",
    "N3925": "A sample Proposal, v4",
    "N3926": "LWG Issue 2168 is NAD",
    "N3927": "Definition of Lock-Free",
    "N3928": "Extending static_assert, v2",
    "N3929": "Concepts Lite Specification",
    "N3930": "Immediate Issues",
    "N3931": "Immediate Issues",
    "N3932": "Variable Templates For Type Traits (Revision 1)",
    "N3936": "Working Draft, Standard for Programming Language C++",
    "N3937": "Programming Languages \u2014 C++",
    "N3938": "Editor's Report",
    "N3939": "Extending make_shared to Support Arrays, Revision 2",
    "N3940": "Working Draft, Technical Specification \u2013 File System",
    "N3941": "Filesystem Study Group (SG3) Active Issues List (Revision R0)",
    "N3942": "Filesystem Study Group (SG3) Closed Issues List (Revision R0)",
    "N3943": "Filesystem Study Group (SG3) Defect Report List (Revision R0)",
    "N3944": "C++ Standard Library Active Issues List (Revision R87)",
    "N3945": "C++ Standard Library Defect Report List (Revision R87)",
    "N3946": "C++ Standard Library Closed Issues List (Revision R87)",
    "N3947": "URI - Proposed Wording (Revision 4)",
    "N3948": "Feature-testing for C++ Technical Specifications",
    "N3949": "Scoped Resource - Generic RAII Wrapper for the Standard Library",
    "N3950": "Defaulted comparison operators",
    "N3951": "C++ type reflection via variadic template expansion",
    "N3952": "C++ Standard Core Language Active Issues, Revision 88",
    "N3953": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 88",
    "N3954": "C++ Standard Core Language Closed Issues, Revision 88",
    "N3955": "Group Member Specifiers",
    "N3956": "ISO/IEC CD 14882, C++ 2014 Responses to National Body Comments",
    "N3957": "C++ Standard Evolution Active Issues List (Revision R06)",
    "N3958": "C++ Standard Evolution Completed Issues List (Revision R06)",
    "N3959": "C++ Standard Evolution Closed Issues List (Revision R06)",
    "N3960": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N3961": "A proposal to add shared_mutex (untimed)",
    "N3962": "File System TS Editor's Report, February 2014 - Post-Issaquah",
    "N3963": "Centralized Defensive-Programming Support for Narrow Contracts (Revision 4)",
    "N3964": "Library Foundations for Asynchronous Operations, Revision 1",
    "N3965": "Proposal for Unbounded-Precision Integer Types",
    "N3966": "Fixes for optional objects",
    "N3967": "C++ Standard Library Active Issues List (Revision R88)",
    "N3968": "C++ Standard Library Defect Report List (Revision R88)",
    "N3969": "C++ Standard Library Closed Issues List (Revision R88)",
    "N3970": "Working Draft, Technical Specification for C++ Extensions for Concurrency",
    "N3971": "Concurrency TS Editor's Report, May 2014",
    "N3972": "Source-Code Information Capture",
    "N3973": "A Proposal to Add a Logical Const Wrapper to the Standard Library Technical Report",
    "N3974": "Polymorphic Deleter for Unique Pointers",
    "N3975": "URI - Proposed Wording (Revision 5)",
    "N3976": "Multidimensional bounds, index and array_view, revision 2",
    "N3977": "Resumable Functions",
    "N3978": "C++ Ostream Buffers",
    "N3979": "AGENDA, PL22.16 Meeting No. 63, WG21 Meeting No. 58, June 16-21, 2014 \u2014 Rapperswil, Switzerland",
    "N3980": "Types don't know #",
    "N3981": "Removing trigraphs??!",
    "N3982": "Rvalue reference overloads for optional",
    "N3983": "Hashing tuple-like types",
    "N3984": "Adding attribute reflection to C++.",
    "N3985": "A proposal to add coroutines to the C++ standard library (Revision 1)",
    "N3986": "Adding Standard support to avoid padding within structures",
    "N3987": "Yet another set of C++ type traits.",
    "N3988": "Towards restrict-like aliasing semantics for C++",
    "N3989": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N3990": "Adding Standard Circular Shift operators for computer integers",
    "N3991": "Task Region R2",
    "N3992": "Agenda and Meeting Notice for WG21 Telecon Meeting",
    "N3993": "On Parallel Invocations of Functions in Parallelism TS",
    "N3994": "Range-Based For-Loops: The Next Generation (Revision 1)",
    "N3995": "A proposal to add shared_mutex (untimed) (Revision 2)",
    "N3996": "Static reflection",
    "N3997": "Centralized Defensive-Programming Support for Narrow Contracts (Revision 5)",
    "N3998": "C++ Latches and Barriers",
    "N3999": "Standard Wording for Transactional Memory Support for C++",
    "N4000": "Towards a Transaction-safe C++ Standard Library: std::list",
    "N4001": "SG5: Transactional Memory (TM) Meeting Minutes 2014/02/03-2014/05/19",
    "N4002": "Cleaning-up noexcept in the Library",
    "N4003": "File System TS Active Issues List (Revision R1)",
    "N4004": "File System TS Closed Issues List (Revision R1)",
    "N4005": "File System TS Defect Report List (Revision R1)",
    "N4006": "An improved emplace() for unique-key maps",
    "N4007": "Delimited iterators (Rev. 2)",
    "N4008": "SIMD polymorphism",
    "N4009": "Uniform Container Erasure",
    "N4010": "C++ Standard Evolution Active Issues List (Revision R07)",
    "N4011": "C++ Standard Evolution Completed Issues List (Revision R07)",
    "N4012": "C++ Standard Evolution Closed Issues List (Revision R07)",
    "N4013": "Atomic operations on non-atomic data",
    "N4014": "Uniform Copy Initialization",
    "N4015": "A proposal to add a utility class to represent expected monad",
    "N4016": "Light-Weight Execution Agents Revision 2",
    "N4017": "Non-member size() and more",
    "N4018": "C++ Standard Core Language Active Issues, Revision 89",
    "N4019": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 89",
    "N4020": "C++ Standard Core Language Closed Issues, Revision 89",
    "N4021": "A Proposal to Add 2D Graphics Rendering and Display to C++",
    "N4022": "A proposal to add a generalized callable negator (Revision 2)",
    "N4023": "Working Draft, C++ Extensions for Library Fundamentals",
    "N4024": "Distinguishing coroutines and fibers",
    "N4025": "Exploring classes of runtime size",
    "N4026": "Nested namespace definition",
    "N4027": "Type Member Property Queries (rev 2)",
    "N4028": "Defining a Portable C++ ABI",
    "N4029": "Let return Be Direct and explicit",
    "N4030": "Feature-testing recommendations for C++",
    "N4031": "make_array, revision 1",
    "N4032": "Comments on continuations and executors",
    "N4033": "synchronized_value<T> for associating a mutex with a value",
    "N4034": "Destructive Move",
    "N4035": "Implicit Evaluation of \"auto\" Variables and Arguments",
    "N4036": "Towards Implementation and Use of memory_order_consume",
    "N4037": "Non-Transactional Implementation of Atomic Tree Move",
    "N4038": "Proposal for Unbounded-Precision Integer Types",
    "N4039": "Default executor",
    "N4040": "Working Draft, C++ Extensions for Concepts",
    "N4041": "Concerns with changing existing types in Technical Specifications",
    "N4042": "Safe conversions in unique_ptr<T[]>",
    "N4043": "Dynarray Allocation Context",
    "N4044": "A Three-Class IP Address Proposal, Revision 1",
    "N4045": "Library Foundations for Asynchronous Operations, Revision 2",
    "N4046": "Executors and Asynchronous Operations",
    "N4047": "A Module System for C++",
    "N4048": "More Improvements to std::future<T> - Revision 1",
    "N4049": "0-overhead-principle violations in exception handling",
    "N4050": "Dynarray Semi-Editorial Issues",
    "N4051": "Allow typename in a template template parameter",
    "N4052": "WG21 2014-06-06 Telecon Minutes",
    "N4053": "WG21 2014-06 Rapperswil Minutes",
    "N4054": "PL22.16 2014-06 Rapperswil Minutes",
    "N4055": "Ruminations on (node-based) containers and noexcept",
    "N4056": "Minimal incomplete type support for standard containers",
    "N4057": "A Proposal to Add a Const-Propagating Wrapper to the Standard Library",
    "N4058": "Atomic Smart Pointers",
    "N4059": "Spring 2015 C++ Standards Committee Meeting",
    "N4060": "Changes to vector_execution_policy",
    "N4061": "Greatest Common Divisor and Least Common Multiple, v3",
    "N4063": "On Parallel Invocations of Functions in Parallelism TS",
    "N4064": "Improving pair and tuple, revision 2",
    "N4065": "make_array, revision 2",
    "N4066": "Delimited iterators (Rev. 3)",
    "N4067": "Experimental std::function etc.",
    "N4068": "Toward More Expressive Iterator Tags",
    "N4069": "C++ Ostream Buffers",
    "N4070": "Improving the specification of the vector execution policy in Parallelism TS",
    "N4071": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N4072": "Fixed Size Parameter Packs",
    "N4073": "A Proposal to Add 2D Graphics Rendering and Display to C++",
    "N4074": "Let return {expr} Be Explicit, Revision 2",
    "N4075": "Centralized Defensive-Programming Support for Narrow Contracts (Revision 5)",
    "N4076": "A proposal to add a generalized callable negator (Revision 2)",
    "N4077": "Experimental shared_ptr for Library Fundamentals TS",
    "N4078": "Fixes for optional objects",
    "N4079": "C++ Standard Library Issues Resolved Directly In Rapperswil, 2014",
    "N4080": "File System TS Immediate Issues for Rapperswil",
    "N4081": "Working Draft, C++ Extensions for Library Fundamentals",
    "N4082": "Programming Languages \u2014 C++ Extensions for Library Fundamentals",
    "N4083": "Editor's Report for Version 1 of the Library Fundamentals TS",
    "N4084": "Working Draft, C++ Extensions for Library Fundamentals, Version 2",
    "N4085": "Editor's Report for Version 2 of the Library Fundamentals TS",
    "N4086": "Removing trigraphs??!",
    "N4087": "Multidimensional bounds, index and array_view, revision 3",
    "N4088": "Task Region R3",
    "N4089": "Safe conversions in unique_ptr<T[]>, revision 2",
    "N4090": "The Maladies of All Member Templates: An Incomplete Biography of Specialization (DR727 + DR1755)",
    "N4091": "C++ Standard Core Language Active Issues, Revision 90",
    "N4092": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 90",
    "N4093": "C++ Standard Core Language Closed Issues, Revision 90",
    "N4094": "Response To: Let return {expr} Be Explicit",
    "N4095": "File System TS Active Issues List (Revision R2)",
    "N4096": "File System TS Closed Issues List (Revision R2)",
    "N4097": "File System TS Defect Report List (Revision R2)",
    "N4098": "File System TS Editor's Report, Post-Rapperswil",
    "N4099": "Working Draft, Technical Specification \u2014 File System",
    "N4100": "Programming Languages \u2014 C++ \u2014 File System Technical Specification",
    "N4101": "C++ Standard Evolution Active Issues List (Revision R08)",
    "N4102": "C++ Standard Evolution Completed Issues List (Revision R08)",
    "N4103": "C++ Standard Evolution Closed Issues List (Revision R08)",
    "N4104": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N4105": "Information technology \u2013 Programming languages, their environments and system software interfaces \u2013 Technical Specification for C++ Extensions for Parallelism",
    "N4106": "Parallelism TS Editor's Report, post-Rapperswil",
    "N4107": "Working Draft, Technical Specification for C++ Extensions for Concurrency",
    "N4108": "Concurrency TS Editor's Report, July 2014",
    "N4109": "A proposal to add a utility class to represent expected monad - Revision 1",
    "N4110": "Exploring the design space of contract specifications for C++",
    "N4111": "Static reflection (rev. 2)",
    "N4112": "File System PDTS National Body Comments Record of Response",
    "N4113": "Reflection Type Traits For Classes, Unions and Enumerations (rev 3)",
    "N4114": "Defaulted comparison operators",
    "N4115": "Searching for Types in Parameter Packs",
    "N4116": "Nested Namespace Definition (rev 1)",
    "N4117": "C++ Standard Library Active Issues List (Revision R89)",
    "N4118": "C++ Standard Library Defect Report List (Revision R89)",
    "N4119": "C++ Standard Library Closed Issues List (Revision R89)",
    "N4120": "Null Coalescing Conditional Operator",
    "N4121": "Compile-Time String: std::string_literal<n>",
    "N4122": "AGENDA, PL22.16 Meeting No. 64, WG21 Meeting No. 59, November 3-8, 2014 \u2013 Urbana-Champaign, IL",
    "N4123": "Improvements to the Concurrency Technical Specification",
    "N4124": "Toward More Expressive Iterator Tags",
    "N4125": "2014-09 WG21/SG1 Meeting Information",
    "N4126": "Explicitly defaulted comparison operators",
    "N4127": "Checked-dereference conditions",
    "N4128": "Ranges for the Standard Library, Revision 1",
    "N4129": "Source-Code Information Capture",
    "N4130": "Pad Thy Atomics",
    "N4131": "explicit should never be implicit",
    "N4132": "Contiguous Iterators",
    "N4133": "Cleanup for exception-specification and throw-expression",
    "N4134": "Resumable Functions v.2",
    "N4135": "Language Support for Runtime Contract Validation (Revision 8)",
    "N4136": "C Concurrency Challenges Draft",
    "N4137": "Business Plan and Convener's Report",
    "N4138": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4139": "Editor's Report \u2014 Programming Languages \u2014 C++",
    "N4140": "Working Draft, Standard for Programming Language C++",
    "N4141": "Programming Languages \u2014 C++",
    "N4142": "Atomic Operations on a Very Large Array",
    "N4143": "Executors and schedulers, revision 4",
    "N4144": "Searching and Manipulation of Parameter Packs",
    "N4145": "Data-Invariant Functions",
    "N4146": "Disposition of Comments, ISO/IEC DIS 14882 C++ 2014",
    "N4147": "Inline variables, or encapsulated expressions",
    "N4148": "Disallowing Inaccessible Operators From Trivially Copyable",
    "N4149": "Categorically qualified classes",
    "N4150": "Alias-Set Attributes: Toward restrict-like aliasing semantics for C++",
    "N4151": "TriviallyCopyable reference_wrapper",
    "N4152": "uncaught_exceptions",
    "N4153": "2015-02 LWG Meeting Invitation and Information",
    "N4154": "Operator assert",
    "N4155": "Non-member size() and more (Revision 1)",
    "N4156": "Light-Weight Execution Agents Revision 3",
    "N4157": "Relaxing Packaging Rules for Exceptions Thrown by Parallel Algorithms",
    "N4158": "Destructive Move (Rev 1)",
    "N4159": "std::function and Beyond",
    "N4160": "Value constraints",
    "N4161": "Uniform Container Erasure (Revision 1)",
    "N4162": "Atomic Smart Pointers, rev. 1",
    "N4163": "Agenda and Meeting Notice for WG21 Telecon Meeting",
    "N4164": "Forwarding References",
    "N4165": "Unified Call Syntax",
    "N4166": "Movable initializer lists",
    "N4167": "Transform Reduce, an Additional Algorithm for C++ Extensions for Parallelism",
    "N4168": "Removing auto_ptr",
    "N4169": "A proposal to add `invoke` function template (Revision 1)",
    "N4170": "Extend INVOKE to support types convertible to target class (Revision 1)",
    "N4171": "Parameter group placeholders for bind",
    "N4172": "Named arguments",
    "N4173": "Operator Dot",
    "N4174": "Call syntax: x.f(y) vs. f(x,y)",
    "N4175": "Default comparisons",
    "N4176": "Thoughts about Comparisons",
    "N4177": "Multidimensional bounds, index and array_view, revision 4",
    "N4178": "Proposed resolution for Core Issue 330: Qualification conversions and pointers to arrays of pointers",
    "N4179": "Transactional Memory Support for C++: Wording (revision 2)",
    "N4180": "SG5 Transactional Memory Support for C++ Update",
    "N4182": "SG5: Transactional Memory (TM) Meeting Minutes 2014/07/14-2014/10/06",
    "N4183": "Contiguous Iterators: Pointer Conversion & Type Trait",
    "N4184": "SIMD Types: The Vector Type & Operations",
    "N4185": "SIMD Types: The Mask Type & Write-Masking",
    "N4186": "Supporting Custom Diagnostics and SFINAE",
    "N4187": "C++ Ostream Buffers",
    "N4188": "Proposal for classes with runtime size",
    "N4189": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "N4190": "Removing auto_ptr, random_shuffle(), And Old <functional> Stuff",
    "N4191": "Folding expressions",
    "N4192": "C++ Standard Core Language Active Issues, Revision 91",
    "N4193": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 91",
    "N4194": "C++ Standard Core Language Closed Issues, Revision 91",
    "N4195": "std::synchronic<T>",
    "N4196": "Attributes for namespaces and enumerators",
    "N4197": "Adding u8 character literals",
    "N4198": "Allow constant evaluation for all non-type template arguments",
    "N4199": "Minutes of Sept. 4-5, 2014 SG1 meeting in Redmond, WA",
    "N4200": "Feature-testing recommendations for C++",
    "N4201": "Alignment Helpers for C++",
    "N4202": "Strongly Typed Bitset",
    "N4203": "Fast ASCII Character Manipulation",
    "N4204": "C++ Latches and Barriers",
    "N4205": "Working Draft, C++ Extensions for Concepts",
    "N4206": "C++ Standard Evolution Active Issues List (Revision R09)",
    "N4207": "C++ Standard Evolution Completed Issues List (Revision R09)",
    "N4208": "C++ Standard Evolution Closed Issues List (Revision R09)",
    "N4209": "A Proposal to Add a Const-Propagating Wrapper to the Standard Library",
    "N4210": "IBM comment on preparing for a Trigraph-adverse future in C++17",
    "N4211": "File System TS Active Issues List (Revision R3)",
    "N4212": "File System TS Closed Issues List (Revision R3)",
    "N4213": "File System TS Defect Report List (Revision R3)",
    "N4214": "A Module System for C++ (Revision 2)",
    "N4215": "Towards Implementation and Use of memory_order_consume",
    "N4216": "Out-of-Thin-Air Execution is Vacuous",
    "N4217": "std::rand replacement",
    "N4218": "Variant: a typesafe union",
    "N4219": "Fixing the specification of universal-character-names (rev. 2)",
    "N4220": "An update to the preprocessor specification (rev. 2)",
    "N4221": "Generalized lifetime extension",
    "N4222": "Minimal Additions to the Array View Library for Performance and Interoperability",
    "N4223": "Response To: Let return {expr} Be Explicit",
    "N4224": "Supplements to C++ Latches",
    "N4225": "Towards uniform handling of subobjects",
    "N4226": "Apply the [[noreturn]] attribute to main as a hint to eliminate global object destructor calls",
    "N4227": "Cleaning-up noexcept in the Library (Rev 2)",
    "N4228": "Refining Expression Evaluation Order for Idiomatic C++",
    "N4229": "Pointer Ordering",
    "N4230": "Nested namespace definition (revision 2)",
    "N4231": "Terms and definitions related to \"threads\"",
    "N4232": "Stackful Coroutines and Stackless Resumable Functions",
    "N4233": "A Class for Status and Optional Value",
    "N4234": "0-overhead-principle violations in exception handling - part 2",
    "N4235": "Selecting from Parameter Packs",
    "N4236": "A compile-time string library template with UDL operator templates",
    "N4237": "Language Extensions for Vector loop level parallelism",
    "N4238": "An Abstract Model of Vector Parallelism",
    "N4239": "Defaulted Comparison Using Reflection",
    "N4240": "Improved insertion interface for unique-key maps (Revision 2)",
    "N4241": "A proposal to add shared_mutex (untimed) (Revision 3)",
    "N4242": "Executors and Asynchronous Operations, Revision 1",
    "N4243": "Networking Library Proposal (Revision 2)",
    "N4244": "Resumable Lambdas: A language extension for generators and coroutines",
    "N4245": "C++ Standard Library Active Issues List (Revision R90)",
    "N4246": "C++ Standard Library Defect Report List (Revision R90)",
    "N4247": "C++ Standard Library Closed Issues List (Revision R90)",
    "N4248": "Library Preconditions are a Language Feature",
    "N4249": "Networking Primitives: std::experimental::network::htonl Considered Harmful",
    "N4250": "WG21 2014-10-24 Telecon Minutes",
    "N4251": "WG21 2014-11 Urbana Minutes",
    "N4252": "PL22.16 2014-11 Urbana Minutes",
    "N4253": "Language Support for Runtime Contract Validation (Revision 9)",
    "N4254": "User-defined Literals for size_t and ptrdiff_t",
    "N4255": "Proposed resolution for US104: Allocator-aware regular expressions (rev 3)",
    "N4257": "Delimited iterators (rev 4)",
    "N4258": "Cleaning up `noexcept` in the Library (Rev 3)",
    "N4259": "Wording for `std::uncaught_exceptions`",
    "N4260": "Wording for Atomic Smart Pointers",
    "N4261": "Proposed resolution for Core Issue 330: Qualification conversions and pointers to arrays of pointers",
    "N4262": "Wording for Forwarding References",
    "N4263": "Toward a concept-enabled standard library",
    "N4265": "Transactional Memory Support for C++: Wording (revision 3)",
    "N4266": "Attributes for namespaces and enumerators",
    "N4267": "Adding u8 character literals",
    "N4268": "Allow constant evaluation for all non-type template arguments",
    "N4270": "Consolidated Revisions to C++ Extensions for Library Fundamentals",
    "N4272": "Working Draft, Technical Specification for C++ Extensions for Transactional Memory",
    "N4273": "Uniform Container Erasure (Revision 2)",
    "N4274": "Relaxing Packaging Rules for Exceptions Thrown by Parallel Algorithms - Proposed Wording (Revision 1)",
    "N4275": "Parallelism PDTS Comment Responses",
    "N4276": "Adding Fused Transform Algorithms to the Parallelism TS",
    "N4277": "TriviallyCopyable reference_wrapper (Revision 1)",
    "N4279": "Improved insertion interface for unique-key maps (Revision 2.3)",
    "N4280": "Non-member size() and more (Revison 2)",
    "N4282": "A Proposal for the World's Dumbest Smart Pointer, v4",
    "N4284": "Contiguous Iterators",
    "N4285": "Cleanup for exception-specification and throw-expression",
    "N4286": "Resumable Functions (revision 3)",
    "N4287": "Threads, Fibers and Couroutines (slides deck)",
    "N4288": "Strike string_view::clear from Library Fundamentals",
    "N4293": "C++ language support for contract programming",
    "N4294": "Arrays of run-time bounds as data members",
    "N4295": "Folding Expressions",
    "N4296": "Working Draft, Standard for Programming Language C++",
    "N4297": "Editor's Report \u2014 Programming Languages \u2014 C++",
    "N4298": "Agenda and Meeting Notice for WG21 Ballot Resolution Telecon Meeting",
    "N4301": "Working Draft, Technical Specification for C++ Extensions for Transactional Memory",
    "N4302": "Technical Specification for C++ Extensions for Technical Specification for C++ Extensions for Transactional Memory",
    "N4303": "Pointer Safety and Placement New",
    "N4304": "C++ Standard Core Language Active Issues, Revision 92",
    "N4305": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 92",
    "N4306": "C++ Standard Core Language Closed Issues, Revision 92",
    "N4307": "National Body Comment \u2014 ISO/IEC PDTS 19568 \u2014 Technical Specification: C++ Extensions for Library Fundamentals",
    "N4308": "National Body Comment \u2014 ISO/IEC PDTS 19570 \u2014 Technical Specification: C++ Extensions for Parallelism",
    "N4309": "Return type deduction for explicitly-defaulted and deleted special member functions",
    "N4310": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N4311": "Parallelism TS Editor's Report",
    "N4312": "Programming Languages \u2014 Technical Specification for C++ Extensions for Parallelism",
    "N4313": "Improvements to the Concurrency Technical Specification, revision 1",
    "N4314": "Data-Invariant Functions (revision 2)",
    "N4315": "make_array, revision 3",
    "N4316": "std::rand replacement, revision 2",
    "N4317": "New Safer Functions to Advance Iterators",
    "N4318": "Proposal to add an absolute difference function to the C++ Standard Library",
    "N4319": "Contracts for C++: What are the Choices",
    "N4320": "Make exception specifications be part of the type system",
    "N4321": "Towards Implementation and Use of memory_order_consume",
    "N4322": "Linux-Kernel Memory Model",
    "N4323": "Out-of-Thin-Air Execution is Vacuous",
    "N4324": "Use Cases for Thread-Local Storage",
    "N4325": "C++ Standard Evolution Active Issues List (Revision R10)",
    "N4326": "C++ Standard Evolution Completed Issues List (Revision R10)",
    "N4327": "C++ Standard Evolution Closed Issues List (Revision R10)",
    "N4328": "C++ Standard Library Issues History for C++14",
    "N4329": "C++ Standard Library Active Issues List (Revision R91)",
    "N4330": "C++ Standard Library Defect Report List (Revision R91)",
    "N4331": "C++ Standard Library Closed Issues List (Revision R91)",
    "N4332": "Networking Library Proposal (Revision 3)",
    "N4333": "Concepts Lite",
    "N4334": "Wording for bool_constant",
    "N4335": "Working Draft, C++ Extensions for Library Fundamentals",
    "N4336": "Working Draft, C++ Extensions for Library Fundamentals, Version 2",
    "N4337": "Editor's Report for the Library Fundamentals TS",
    "N4338": "Editor's Report: Technical Specification for C++ Extensions for Transactional Memory",
    "N4339": "Agenda and Meeting Notice for WG21 Concepts Meeting",
    "N4340": "Remove Deprecated Use of the register Keyword",
    "N4346": "Multidimensional bounds, index and array_view, revision 5",
    "N4348": "Making std::function thread-safe",
    "N4349": "Minutes of WG21 Telecon",
    "N4350": "Agenda and Meeting Notice for WG21 Concepts Meeting Notice (revision 1)",
    "N4351": "Responses to National Body Comments, PDTS 19570, C++ Extensions for Parallelism",
    "N4352": "Parallelism TS",
    "N4353": "Parallelism TS - Editor's Report",
    "N4354": "Parallelism TS - DTS Ballot Document",
    "N4355": "Shared Multidimensional Arrays with Polymorphic Layout",
    "N4356": "Relaxed Array Type Declarator",
    "N4357": "Introduce the [[noexit]] attribute for main as a hint to eliminate destructor calls for objects with static storage duration",
    "N4358": "Unary Folds and Empty Parameter Packs",
    "N4359": "A Proposal to Add vector release method just like unique_ptr release method to the Standard Library",
    "N4360": "Delayed Evaluation Parameters",
    "N4361": "Concepts Lite TS",
    "N4362": "WG21 2015-01 Skillman Minutes",
    "N4365": "Responses to National Body Comments, ISO/IEC PDTS 19568, C++ Extensions for Library Fundamentals",
    "N4366": "LWG 2228: Missing SFINAE rule in unique_ptr templated assignment",
    "N4367": "Comparison in C++",
    "N4368": "Introducing alias size_type for type size_t in class std::bitset",
    "N4369": "Default argument for second parameter of std::advance",
    "N4370": "Networking Library Proposal (Revision 4)",
    "N4371": "Minimal incomplete type support for standard containers, revision 2",
    "N4372": "A Proposal to Add a Const-Propagating Wrapper to the Standard Library",
    "N4373": "Atomic View",
    "N4374": "Linux-Kernel Memory Mode",
    "N4375": "Out-of-Thin-Air Execution is Vacuous",
    "N4376": "Use Cases for Thread-Local Storage",
    "N4377": "C++ Extensions for Concepts PDTS",
    "N4378": "Language Support for Contract Assertions",
    "N4379": "FAQ about N4378, Language Support for Contract Assertions",
    "N4380": "Constant View: A proposal for a std::as_const helper function template",
    "N4381": "Suggested Design for Customization Points",
    "N4382": "Working Draft, C++ extensions for Ranges",
    "N4383": "C++ Standard Library Active Issues List (Revision R92)",
    "N4384": "C++ Standard Library Defect Report List (Revision R92)",
    "N4385": "C++ Standard Library Closed Issues List (Revision R92)",
    "N4386": "Unspecialized std::tuple_size should be defined",
    "N4387": "Improving pair and tuple, revision 3",
    "N4388": "A Proposal to Add a Const-Propagating Wrapper to the Standard Library",
    "N4389": "Wording for `bool_constant`, revision 1",
    "N4390": "Minimal incomplete type support for standard containers, revision 3",
    "N4391": "make_array, revision 4",
    "N4392": "C++ Latches and Barriers",
    "N4393": "Noop Constructors and Destructors",
    "N4394": "Agenda for Lenexa Meeting",
    "N4395": "SIMD Types: ABI Considerations",
    "N4396": "National Body Comments: PDTS 19841, Transactional Memory",
    "N4397": "A low-level API for stackful coroutines",
    "N4398": "A unified syntax for stackless and stackful coroutines",
    "N4399": "Proposed Working Draft, Technical Specification for C++ Extensions for Concurrency",
    "N4400": "Concurrency TS Editor's Report, May 2015",
    "N4401": "Defaulted comparison operator semantics should be uniform",
    "N4402": "Resumable Functions (revision 4)",
    "N4403": "Draft wording for Resumable Functions",
    "N4404": "Extension to aggregate initialization",
    "N4405": "Type of the accumulaters of standard algorithms std::accumulate and std::inner_product",
    "N4406": "Integrating Executors with Parallel Algorithm Execution",
    "N4407": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N4408": "Parallelism TS Editor's Report",
    "N4409": "Programming Languages \u2014 Technical Specification for C++ Extensions for Parallelism",
    "N4410": "Responses to PDTS comments on Transactional Memory",
    "N4411": "Task Block (formerly Task Region) R4",
    "N4412": "Shortcomings of iostreams",
    "N4414": "Executors and Schedulers Revision 5",
    "N4415": "Simple Contracts for C++",
    "N4416": "Don't Move: Vector Can Have Your Non-Moveable Types Covered",
    "N4417": "Source-Code Information Capture",
    "N4418": "Parameter Stringization",
    "N4419": "Potential extensions to Source-Code Information Capture",
    "N4420": "Defining Test Code",
    "N4421": "Evolution Active Issues List (Revision R11)",
    "N4422": "Evolution Completed Issues List (Revision R11)",
    "N4423": "Evolution Closed Issues List (Revision R11)",
    "N4424": "Inline Variables",
    "N4425": "Generalized Dynamic Assumptions",
    "N4426": "Adding [nothrow-] swappable traits",
    "N4427": "Agenda and Meeting Notice for WG21 Pre-Lenexa Telecon Meeting",
    "N4428": "Type Property Queries (rev 4)",
    "N4429": "Core issue 1941 - rewording inherited constructors",
    "N4430": "Core issue 1776 - replacement of class objects containing reference members",
    "N4431": "Working Draft, Standard for Programming Language C++",
    "N4432": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4433": "Flexible static_assert messages",
    "N4434": "Tweaks to Streamline Concepts Lite Syntax",
    "N4435": "Proposing Contract Attributes",
    "N4436": "Proposing Standard Library Support for the C++ Detection Idiom",
    "N4437": "Conditionally-supported Special Math Functions, v3",
    "N4438": "Industrial Experience with Transactional Memory at Wyatt Technologies.",
    "N4439": "Light-Weight Execution Agents Revision 3",
    "N4440": "Feature-testing recommendations for C++",
    "N4441": "SG5: Transactional Memory (TM) Meeting Minutes 2015-03-23 and 2015-04-06",
    "N4442": "Default argument for second parameter of std::advance (Rev. 1)",
    "N4443": "Introducing alias size_type for type size_t in class std::bitset (Rev. 1 )",
    "N4444": "Linux-Kernel Memory Model",
    "N4445": "Overly attached promise",
    "N4446": "The missing INVOKE related trait",
    "N4447": "From a type T, gather members name and type information, via variadic template expansion",
    "N4448": "Rounding and Overflow in C++",
    "N4449": "Message Digest Library for C++",
    "N4450": "Variant: a typesafe union (v2)",
    "N4451": "Static reflection",
    "N4452": "Use cases of reflection",
    "N4453": "Resumable Expressions",
    "N4454": "SIMD Types Example: Matrix Multiplication",
    "N4455": "No Sane Compiler Would Optimize Atomics",
    "N4456": "Towards improved support for games, graphics, real-time, low latency, embedded systems",
    "N4457": "C++ Standard Core Language Active Issues, Revision 93",
    "N4458": "C++ Standard Core Language Defect Reports and Accepted Issues, Revision 93",
    "N4459": "C++ Standard Core Language Closed Issues, Revision 93",
    "N4460": "LWG 2424: Atomics, mutexes and condition variables should not be trivially copyable",
    "N4461": "Static if resurrected",
    "N4462": "LWG 2089, Towards more perfect forwarding",
    "N4463": "IO device requirements for C++",
    "N4464": "Pi-calculus syntax for C++ executors",
    "N4465": "A Module System for C++ (Revision 3)",
    "N4466": "Wording for Modules",
    "N4468": "On Quantifying Memory-Allocation Strategies",
    "N4469": "Template Argument Type Deduction",
    "N4470": "Variadic lock_guard",
    "N4471": "Template parameter deduction for constructors (Rev 2)",
    "N4472": "consexpr goto",
    "N4473": "noexcept(auto), again",
    "N4474": "Unified Call Syntax: x.f(y) and f(x,y)",
    "N4475": "Default comparisons (R2)",
    "N4476": "Thoughts about Comparisons (R2)",
    "N4477": "Operator Dot (R2)",
    "N4478": "Networking Library Proposal (Revision 5",
    "N4479": "Merge Fundamentals V1 into v2",
    "N4480": "Programming Languages \u2014 C++ Extensions for Library Fundamentals DTS",
    "N4481": "Working Draft, C++ Extensions for Library Fundamentals, Version 2",
    "N4482": "Some notes on executors and the Networking Library Proposal",
    "N4483": "Read-copy-update",
    "N4484": "C++ Standard Library Active Issues List (Revision R93)",
    "N4485": "C++ Standard Library Defect Report List (Revision R93)",
    "N4486": "C++ Standard Library Closed Issues List (Revision R93)",
    "N4487": "Constexpr lambdas",
    "N4488": "Responses to PDTS comments on Transactional Memory, version 2",
    "N4489": "WG21 2015-04-24 Telecon Minutes",
    "N4490": "WG21 2015-05 Lenexa Minutes",
    "N4491": "PL22.16 2015-05 Lenexa Minutes (Draft)",
    "N4492": "Thoughts about C++17",
    "N4494": "Multidimensional bounds, offset and array_view, revision 6",
    "N4495": "Operator dot",
    "N4496": "WG21 2014-11 Urbana Minutes (revision 1)",
    "N4497": "PL22.16 2014-11 Urbana Minutes (Final)",
    "N4498": "Variadic lock_guard (Rev. 2)",
    "N4499": "Draft wording for Coroutines (Revision 2)",
    "N4501": "Working Draft, Technical Specification for C++ Extensions for Concurrency",
    "N4502": "Proposing Standard Library Support for the C++ Detection Idiom, V2",
    "N4505": "Working Draft, Technical Specification for C++ Extensions for Parallelism",
    "N4506": "Parallelism TS Editor's Report",
    "N4507": "Technical Specification for C++ Extensions for Parallelism",
    "N4508": "A proposal to add shared_mutex (untimed) (Revision 4)",
    "N4509": "constexpr atomic::is_always_lock_free",
    "N4510": "Minimal incomplete type support for standard containers, revision 4",
    "N4511": "Adding [nothrow-]swappable traits, revision 1",
    "N4512": "Multidimensional bounds, offset and array_view, revision 7",
    "N4513": "Working Draft Technical Specification for C++ Extensions for Transactional Memory",
    "N4514": "Technical Specification for C++ Extensions for Transactional Memory",
    "N4515": "Editor's Report: Technical Specification for C++ Extensions for Transactional Memory",
    "N4516": "Variant: a type-safe union (v3)",
    "N4517": "Record of Response: National Body Comments ISO/IEC PDTS 19841",
    "N4518": "Make exception specifications be part of the type system, version 2",
    "N4519": "Source-Code Information Capture",
    "N4521": "Merge Fundamentals V1 into V2",
    "N4522": "std::atomic_object_fence(mo, T&&...)",
    "N4523": "constexpr std::thread::hardware_{true,false}_sharing_size",
    "N4524": "Respect vector::reserve(request) Relative to Reallocation",
    "N4525": "C++ Standard Library Issues Resolved Directly In Lenexa",
    "N4526": "Towards improved support for games, graphics, real-time, low latency, embedded systems",
    "N4527": "Working Draft, Standard for Programming Language C++",
    "N4528": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4529": "Working Draft, C++ Extensions for Library Fundamentals, Version 2",
    "N4530": "Editor's Report for the Library Fundamentals TS",
    "N4531": "std::rand replacement, revision 3",
    "N4532": "Proposed wording for default comparisons",
    "N4533": "Make exception specifications be part of the type system, version 3",
    "N4534": "Data-Invariant Functions (revision 3)",
    "N4535": "Feature-testing preprocessor predicates for C++17",
    "N4536": "An algorithm to \"clamp\" a value between a pair of boundary values",
    "N4537": "Adding Symmetry Between shared_ptr and weak_ptr",
    "N4538": "Technical Specification for C++ Extensions for Concurrency",
    "N4539": "Evolution Active Issues List (Revision R12)",
    "N4540": "Evolution Completed Issues List (Revision R12)",
    "N4541": "Evolution Closed Issues List (Revision R12)",
    "N4542": "Variant: a type-safe union (v4).",
    "N4543": "A polymorphic wrapper for all Callable objects",
    "N4544": "October 2015 WG21 Meeting (Kona)",
    "N4545": "PL22.16/WG21 draft agenda: 19-24 Oct 2015, Kona, HI/US",
    "N4546": "Agenda and Meeting Notice for WG21 Concepts Telecon",
    "N4547": "Business Plan and Convener's report",
    "N4548": "WG21 2015-07-20 Telecon Minutes",
    "N4549": "Programming Languages \u2014 C++ Extensions for Concepts",
    "N4550": "Record of Response: National Body Comments on ISO/IEC PDTS 19217, Technical Specification: C++ Extensions for Concepts",
    "N4551": "National Body Comments, ISO/IEC PDTS 19571, C++ Extensions for Concurrency",
    "N4552": "Pre-Kona WG21 Telecon",
    "N4553": "Working Draft, C++ extensions for Concepts",
    "N4554": "Editor's report for the Concepts TS",
    "N4555": "February 2016 WG21 Meeting",
    "N4556": "WG21 telecon minutes",
    "N4557": "WG21 2015-07-20 Telecon (revised)",
    "N4558": "Kona WG21 Minutes",
    "N4559": "Kona PL22.16 Minutes",
    "N4560": "Working Draft, C++ Extensions for Ranges",
    "N4561": "Ranges Editor's Report",
    "N4562": "Working Draft, C++ Extensions for Library Fundamentals, Version 2",
    "N4563": "Editor's Report for the Library Fundamentals TS",
    "N4564": "C++ Extensions for Library Fundamentals, Version 2 PDTS",
    "N4565": "Record of Response: National Body Comments ISO/IEC PDTS 19571 Technical Specification: C++ Extensions for Concurrency",
    "N4566": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4567": "Working Draft, Standard for Programming Language C++ Note:",
    "N4568": "PL22.16/WG21 draft agenda: 29 Feb-05 Mar 2016, Jacksonville, FL/US",
    "N4569": "Proposed Ranges TS working draft",
    "N4570": "Oulu Meeting Information",
    "N4571": "2016-11 Issaquah meeting information",
    "N4572": "WG21 telecon meeting: Pre-Jacksonville",
    "N4573": "2017-02 Kona WG21 Meeting Information",
    "N4575": "Networking TS Working Draft",
    "N4576": "Networking TS Editor's Report",
    "N4577": "Technical Specification for C++ Extensions for Concurrency",
    "N4578": "Working Draft, Technical Specification for C++ Extensions for Parallelism Version 2",
    "N4579": "Parallelism TS Editor's Report, pre-Jacksonville mailing",
    "N4580": "WG21 2016-02-19 Telecon Minutes",
    "N4581": "Revised WG21 2016-02-19 Telecon Minutes",
    "N4582": "Working Draft, Standard for Programming Language C++",
    "N4583": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4584": "Working Draft, C++ Extensions for Library Fundamentals, Version 2",
    "N4585": "Editor's Report for the Library Fundamentals TS",
    "N4586": "WG21 2016-02 Jacksonville Min",
    "N4587": "PL22.16 2016-02 Jacksonville Minutes (Draft)",
    "N4588": "Working Draft, C++ extensions for Networking Note:",
    "N4589": "Networking TS Editor's Report",
    "N4590": "PL22.16/WG21 draft agenda: 20-25 Jun 2016, Oulu, FI",
    "N4591": "WG21 telecon meeting: Pre-Oulu",
    "N4592": "Modules TS Working Draft",
    "N4593": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4594": "Working Draft, Standard for Programming Language C++",
    "N4595": "WG21 2016-06-10 Telecon Minutes",
    "N4596": "PL22.16 Jacksonville Minutes (revised)",
    "N4597": "WG21 2016-06 Oulu Minutes",
    "N4598": "PL22.16 2016-06 Oulu Minutes",
    "N4599": "2016-08 LWG Meeting",
    "N4600": "Working Draft, C++ Extensions for Library Fundamentals, Version 2",
    "N4601": "Editor's Report for the Library Fundamentals TS",
    "N4602": "WG21 telecon minutes - pre-Oulu (revised)",
    "N4603": "Editor's Report \u2014 Committee Draft, Standard for Programming Language C++",
    "N4604": "C++17 CD Ballot Document",
    "N4606": "Working Draft, Standard for Programming Language C++",
    "N4607": "Toronto Meeting Information",
    "N4608": "PL22.16/WG21 draft agenda: 7-12 Nov 2016, Issaquah, WA, US",
    "N4609": "Business Plan and Convener's Report",
    "N4610": "Working Draft, Extensions to C++ for Modules",
    "N4611": "Editor's Report for the Modules TS",
    "N4612": "Working Draft, C++ extensions for Networking",
    "N4613": "Networking TS - Editor's Report",
    "N4614": "WG21 telecon meeting: Pre-Issaquah",
    "N4615": "WG21 2016-10-28 Telecon Minutes",
    "N4616": "Response to NB Comments: SC22 N5097, ISO/IEC PDTS 19568 Part 2, Library Fundamentals, Part 2",
    "N4617": "Programming Languages \u2014 C++ Extensions for Library Fundamentals, Version 2 DTS",
    "N4618": "Working Draft, Standard for Programming Language C++",
    "N4619": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4620": "Working Draft, C++ Extensions for Ranges",
    "N4621": "Editor's Report for the Ranges TS",
    "N4622": "Programming Languages \u2014 C++ Extensions for Ranges PDTS",
    "N4623": "WG21 2016-11 Issaquah Minutes",
    "N4624": "PL22.16 2016-11 Issaquah Minutes",
    "N4625": "Programming Languages \u2014 C++ Extensions for Networking PDTS",
    "N4626": "Working Draft, C++ Extensions for Networking",
    "N4627": "Networking TS - Editor's Report",
    "N4628": "Working Draft, Technical Specification on C++ Extensions for Coroutines",
    "N4629": "Editor's report for the Coroutines TS",
    "N4630": "Working Draft, C++ extensions for Concepts",
    "N4631": "Editor's report for the Concepts TS",
    "N4632": "PL22.16/WG21 draft agenda: 27 Feb - 4 Mar 2017, Kona, HI, US",
    "N4633": "2017-11 Albuquerque WG21 meeting information",
    "N4634": "PL22.16 2016-11 Issaquah Minutes (final)",
    "N4635": "Pre-Kona WG21 Telecon Agenda",
    "N4636": "2017-07-10-15 ISO WG21 C++ Standard Meeting in Toronto",
    "N4637": "Working Draft, Extensions to C++ for Modules",
    "N4638": "Editor's Report for the Module TS",
    "N4639": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4640": "Working Draft, Standard for Programming Language C++",
    "N4641": "Working Draft, C++ extensions for Concepts",
    "N4642": "Editor's report for the Concepts TS",
    "N4643": "National Body Comments for PDTS 19216, C++ Extensions for Networking",
    "N4644": "National Body Comments for PDTS 21425, C++ Extensions for Ranges",
    "N4645": "WG21 Telecon Minutes",
    "N4647": "Working Draft, Extensions to C++ for Modules",
    "N4648": "Editor's Report for the Module TS",
    "N4649": "Working Draft, Technical Specification on C++ Extensions for Coroutines",
    "N4650": "Editor's report for the Coroutines TS",
    "N4651": "Working Draft, C++ Extensions for Ranges",
    "N4652": "Editor's Report for the Ranges TS",
    "N4653": "2017-02 Kona Record of Discussion ISO/IEC",
    "N4654": "WG21 2017-02 Kona Minutes",
    "N4655": "PL22.16 2017-02 Kona Minutes",
    "N4656": "Working Draft, C++ Extensions for Networking",
    "N4657": "Networking TS - Editor's Report",
    "N4658": "Alternative accommodation (student residence) for the 2017-07 Toronto WG21 Meeting",
    "N4659": "Working Draft, Standard for Programming Language C++ Note:",
    "N4660": "C++17 DIS Ballot Document",
    "N4661": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4662": "PL22.16/WG21 draft agenda: 10-15 Jul 2017, Toronto, ON, CA",
    "N4663": "Coroutines PDTS document",
    "N4664": "Responses to National Body Comments for ISO/IEC CD 14882",
    "N4665": "WG21 telecon meeting: Pre-Toronto",
    "N4666": "National Body Comments, SC22 N 5205, ISO/IEC PDTS 22277, C++ Extensions for Coroutines",
    "N4667": "Working Draft, Extensions to C++ for Modules",
    "N4668": "Editor's Report for the Module TS",
    "N4669": "Working Draft, Technical Specification for C++ Extensions for Parallelism Version 2",
    "N4670": "Parallelism TS Editor's Report, pre-Toronto mailing",
    "N4671": "Working Draft, C++ Extensions for Ranges",
    "N4672": "Editor's Report for the Ranges TS",
    "N4673": "Spring 2018 WG21 Meeting Information (Rapperswil)",
    "N4674": "Working Draft, C++ extensions for Concepts",
    "N4675": "Editor's report for the Concepts TS",
    "N4676": "WG21 Telecon Minutes",
    "N4677": "WG21 / PL22.16 Meeting, Jacksonville, FL, March 12 - 17, 2018",
    "N4678": "National Body Comments for ISO/IEC PDTS 22277, C++ Extensions for Coroutines",
    "N4679": "Editor's report for the Coroutines TS",
    "N4680": "C++ Extensions for Coroutines TS Document",
    "N4681": "Working Draft, Extensions to C++ for Modules",
    "N4682": "Editor's Report for the Module TS",
    "N4683": "Business Plan and Convener's Report",
    "N4684": "Ranges TS Ballot Document",
    "N4685": "Working Draft, C++ Extensions for Ranges",
    "N4686": "Editor's Report for the Ranges TS",
    "N4687": "Working Draft, Standard for Programming Language C++ Note:",
    "N4688": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4689": "Extensions to C++ for Modules Ballot Document",
    "N4690": "2017-07 Toronto Record of Discussion",
    "N4691": "WG21 2017-07 Toronto Minutes",
    "N4692": "PL22.16 2017-07 Toronto Minutes",
    "N4693": "PL22.16/WG21 draft agenda: 06-11 Nov 2017, Albuquerque, NM, US",
    "N4694": "Responses to National Body Comments to ISO/IEC PDTS 21425, C++ Extensions for Ranges",
    "N4697": "NB Comments, ISO/IEC PDTS 21544, C++ Extensions for Modules",
    "N4698": "Working Draft, Technical Specification for C++ Extensions for Parallelism Version 2",
    "N4699": "Parallelism TS Editor's Report",
    "N4700": "Working Draft, Standard for Programming Language C++ Note:",
    "N4701": "Editor's Report \u2014 Working Draft, Standard for Programming Language C++",
    "N4704": "WG21 telecon meeting: Pre-Albuquerque",
    "N4705": "WG21 2017-10-27 Telecon Minutes",
    "N4706": "Working Draft, Technical Specification for C++ Extensions for Parallelism Version 2",
    "N4707": "Parallelism TS Editor's Report",
    "N4708": "Responses to National Body Comments, ISO/IEC PDTS 19216, C++ Extensions for Networking",
    "N4709": "WG21 2017-11 Albuquerque Minutes",
    "N4710": "PL22.16 2017-11 Albuquerque Minutes",
    "N4711": "Working Draft, C ++ Extensions for Networking",
    "N4712": "Networking TS - Editor's Report",
    "N4713": "Working Draft, Standard for Programming Language C++",
    "N4714": "Editors' Report \u2014 Programming Languages \u2014 C++",
    "N4715": "2018-11 San Diego Meeting Information",
    "N4716": "PL22.16/WG21 draft agenda: 12-17 March 2018, Jacksonville, FL, US",
    "N4717": "WG21 telecon meeting: Pre-Jacksonville",
    "N4718": "WG21 telecon meeting: Modules TS publication",
    "N4719": "Programming Languages \u2014 Extensions to C++ for Modules",
    "N4720": "Working Draft, Extensions to C++ for Modules",
    "N4721": "Editor\u2019s Report for the Module TS",
    "N4722": "Responses to SC22 N5250, ISO/IEC PDTS 21544, C++ Extensions for Modules",
    "N4723": "Working Draft, C++ Extensions for Coroutines",
    "N4724": "Editor's report for the Coroutines TS",
    "N4725": "Working Draft, Technical Specification for C++ Extensions for Parallelism Version 2",
    "N4726": "Parallelism TS Editor\u2019s Report",
    "N4727": "Working Draft, Standard for Programming Language C++",
    "N4728": "Editors' Report \u2014 Programming Languages \u2013 C++",
    "N4729": "WG21 telecon meeting: Modules TS publication",
    "N4730": "WG21 pre-Jacksonville telecon minutes",
    "N4731": "SC22 WG14 Liaison Report (C Standard)",
    "N4732": "WG21 2018-03 Jacksonville Minutes",
    "N4734": "Working Draft, C ++ Extensions for Networking",
    "N4735": "Networking TS - Editor's Report",
    "N4736": "Working Draft, C ++ Extensions for Coroutines",
    "N4737": "Editor's report for the Coroutines TS",
    "N4738": "C++ Standardization Committee Meeting, HSR Rapperswil \u2013 Latest Info",
    "N4739": "Jacksonville 2018 LEWG Summary",
    "N4740": "N4740 Editors' Report - Programming Languages - C++",
    "N4741": "Working Draft, Standard for Programming Language C++",
    "N4742": "Working Draft, Technical Specification for C++ Extensions for Parallelism Version 2",
    "N4743": "Parallelism TS Editor\u2019s Report, post-Jacksonville mailing",
    "N4744": "Programming Languages - Technical Specification for C++ Extensions for Parallelism Version 2",
    "N4745": "PL22.16/WG21 draft agenda: 4-9 June 2018, Rapperswil, Switzerland",
    "N4746": "Working Draft, C++ Extensions for Reflection",
    "N4747": "Reflection TS - Editor\u2019s Report",
    "N4748": "WG21 telecon meeting: Pre-Rapperswil",
    "N4749": "Editors' Report - Programming Languages - C++",
    "N4750": "Working Draft, Standard for Programming Language C++",
    "N4751": "WG21 pre-Rapperswil telecon minutes",
    "N4752": "Responses to National Body Comments for ISO/IEC PDTS 19750, C++ Extensions for Parallelism Version 2",
    "N4753": "WG21 2018-06 Rapperswil Minutes",
    "N4754": "Rapperswil 2018 LEWG Summary",
    "N4755": "Working Draft, C++ Extensions for Parallelism Version 2",
    "N4756": "Parallelism TS Editor\u2019s Report, post-Rapperswil mailing",
    "N4757": "Programming Languages - C++ Extensions for Parallelism Version 2",
    "N4758": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4759": "Editor\u2019s Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4760": "Working Draft, C++ Extensions for Coroutines",
    "N4761": "Editor's report for the Coroutines TS",
    "N4762": "Working Draft, Standard for Programming Language C++",
    "N4763": "Collated Responses to National Body Comments, PDTS 19750, Parallelism, V2",
    "N4764": "Editors' Report - Programming Languages - C++",
    "N4765": "2019 Kona meeting information",
    "N4766": "Working Draft, C++ Extensions for Reflection",
    "N4767": "Reflection TS - Editor\u2019s Report",
    "N4768": "Business Plan and Convener's Report: ISO/IEC JTC1/SC22/WG21 (C++)",
    "N4769": "PL22.16/WG21 draft agenda: 5-10 November 2018, San-Diego, USA",
    "N4770": "2019 Kona meeting information (rev. 1)",
    "N4771": "Working Draft, C++ Extensions for Networking",
    "N4772": "Networking TS - Editor's Report",
    "N4773": "Working Draft, C++ Extensions for Parallelism Version 2",
    "N4774": "Parallelism TS Editor\u2019s Report, pre-San Diego mailing",
    "N4775": "Working Draft, C++ Extensions for Coroutines",
    "N4776": "Editor's report for the Coroutines TS",
    "N4777": "WG21 telecon meeting: Pre-San Diego",
    "N4778": "Working Draft, Standard for Programming Language C++",
    "N4779": "Editors' Report - Programming Languages - C++",
    "N4780": "2019 Cologne Meeting Invitation and Information",
    "N4781": "WG21 2018-06 Rapperswil Minutes",
    "N4782": "WG21 Autumn Meeting - Belfast, Northern Ireland",
    "N4783": "2019 Cologne Meeting Invitation and Information",
    "N4784": "WG21 pre-San Diego telecon minutes",
    "N4785": "San Diego 2018 LEWG Summary",
    "N4786": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4787": "Editor\u2019s Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4788": "",
    "N4789": "",
    "N4790": "WG21 2018-11 San Diego Minutes",
    "N4791": "Working Draft, Standard for Programming Language C++",
    "N4792": "Editors' Report - Programming Languages - C++",
    "N4793": "Working Draft, C++ Extensions for Parallelism Version 2",
    "N4794": "Parallelism TS Editor\u2019s Report, post-San Diego mailing",
    "N4795": "PL22.16/WG21 Draft agenda: 18-23 Febuary 2019, Kona, HI, USA",
    "N4796": "Working Draft, C++ Extensions for Parallelism Version 2",
    "N4797": "Parallelism TS Editor\u2019s Report, pre-Kona mailing",
    "N4798": "WG21 telecon meeting: Pre-Kona",
    "N4799": "Editors' Report - Programming Languages - C++",
    "N4800": "Working Draft, Standard for Programming Language C++",
    "N4801": "WG21 pre-Kona telecon minutes",
    "N4802": "WG21 2018-11 San Diego Minutes",
    "N4803": "Kona 2019 LEWG Summary",
    "N4805": "WG21 2019-02 Kona Minutes of Meeting",
    "N4806": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4807": "Editor\u2019s Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4808": "Working Draft, C++ Extensions for Parallelism Version 2",
    "N4809": "Parallelism TS Editor\u2019s Report, post-Kona mailing",
    "N4810": "Working Draft, Standard for Programming Language C++",
    "N4811": "Editors' Report - Programming Languages - C++",
    "N4812": "Editors' Report - Programming Languages - C++",
    "N4814": "2019 Belfast Meeting Invitation and Information",
    "N4815": "Cologne Agenda",
    "N4816": "WG21 telecon meeting: Pre-Cologne",
    "N4817": "2020 Prague Meeting Invitation and Information",
    "N4818": "Working Draft, C++ Extensions for Reflection",
    "N4819": "Reflection TS - Editor's Report",
    "N4820": "Working Draft, Standard for Programming Language C++",
    "N4821": "Editors' Report - Programming Languages - C++",
    "N4823": "Cologne 2019 LEWG Summary",
    "N4824": "Business plan and convener's report",
    "N4825": "2020 Varna Meeting Information",
    "N4826": "WG21 2019-07 Cologne Minutes of Meeting",
    "N4827": "",
    "N4828": "",
    "N4829": "Editors' Report - Programming Languages - C++",
    "N4830": "Committee Draft, Standard for Programming Language C++",
    "N4831": "2022 Portland Meeting Invitation and Information",
    "N4832": "2021 Kona meeting information",
    "N4833": "Agenda for Belfast",
    "N4834": "WG21 telecon meeting: Pre-Belfast",
    "N4835": "Working Draft, Standard for Programming Language C++",
    "N4836": "Editors\u2019 Report - Programming Languages - C++",
    "N4837": "2020 Varna Meeting Information",
    "N4838": "Pre-Belfast Minutes of Meeting",
    "N4839": "WG21 2019-11 Belfast Minutes of Meeting",
    "N4840": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4841": "Editor's Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4842": "Working Draft, Standard for Programming Language C++",
    "N4843": "Editors' Report - Programming Languages - C++",
    "N4844": "Collated CD 14882 Comments",
    "N4845": "Belfast 2019 LEWG Summary",
    "N4846": "Agenda - Prague, February 2020",
    "N4847": "WG21 telecon meeting: Pre-Prague",
    "N4848": "WG21 Autumn Meeting 2020 - New York, New York, USA",
    "N4849": "Working Draft, Standard for Programming Language C++",
    "N4850": "Editors' Report - Programming Languages - C++",
    "N4851": "Pre-Prague Telco Minutes of Meeting",
    "N4852": "Prague LEWG Summary",
    "N4853": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4854": "Editor's Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4855": "WG21 2020-02 Prague Minutes of Meeting",
    "N4856": "C++ Extensions for Reflection",
    "N4857": "Reflection TS - Responses",
    "N4858": "Disposition of Comments: SC22 5415, ISO/IEC CD 14882",
    "N4859": "Editors' Report - Programming Languages - C++",
    "N4860": "Draft International Standard - Programming Languages - C++",
    "N4861": "Working Draft, Standard for Programming Language C++",
    "N4862": "Business Plan and Convener's Report",
    "N4863": "Agenda for Fall Virtual WG21/PL22.16 Meeting",
    "N4864": "WG21 virtual meeting: Autumn 2020",
    "N4865": "Response to Editorial Comments: ISO/IEC DIS 14882, Programming Language C++",
    "N4866": "WG21 admin telecon meeting: Pre-Autumn 2020",
    "N4867": "Editors' Report - Programming Languages - C++",
    "N4868": "Working Draft, Standard for Programming Language C++",
    "N4869": "WG21 Pre-Autumn 2020 telecon minutes",
    "N4870": "WG21 2020-02 Prague Minutes of Meeting",
    "N4871": "WG21 Pre-Autumn 2020 telecon minutes",
    "N4873": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4874": "Editor's Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4875": "WG21 admin telecon meeting: Winter 2021",
    "N4876": "WG21 virtual meeting: Winter 2021",
    "N4877": "WG21 2020-11 Virtual Meeting Minutes of Meeting",
    "N4878": "Working Draft, Standard for Programming Language C++",
    "N4879": "Editors' Report - Programming Languages - C++",
    "N4880": "PL22.16/WG21 agenda: 22 February 2021, Virtual Meeting",
    "N4881": "WG21 virtual meetings: 2021-02, -06, and -10",
    "N4882": "WG21 admin telecon meetings: 2021-02, -05, and -09",
    "N4883": "WG21 February 2021 admin telecon minutes",
    "N4884": "WG21 2021-02 Virtual Meeting Minutes of Meeting",
    "N4885": "Working Draft, Standard for Programming Language C++",
    "N4886": "Editors\u2019 Report - Programming Languages - C++",
    "N4887": "PL22.16/WG21 agenda: 7 June 2021, Virtual Meeting",
    "N4888": "WG21 virtual meetings: 2021-06, and -10",
    "N4889": "WG21 admin telecon meeting: 2021-09",
    "N4890": "WG21 2021-05 Admin telecon minutes",
    "N4891": "WG21 2021-06 Virtual Meeting Minutes of Meeting",
    "N4892": "Working Draft, Standard for Programming Language C++",
    "N4893": "Editors' Report - Programming Languages - C++",
    "N4894": "Business Plan and Convener's Report",
    "N4895": "Working Draft, Extensions to C++ for Concurrency Version 2",
    "N4896": "PL22.16/WG21 agenda: 4 October 2021, Virtual Meeting",
    "N4897": "WG21 admin telecon meeting: September 2021",
    "N4898": "WG21 2021-10 Virtual Meeting Minutes of Meeting",
    "N4899": "WG21 admin telecon meetings: 2022",
    "N4900": "WG21 virtual plenary meeting(s): 2022",
    "N4901": "Working Draft, Standard for Programming Language C++",
    "N4902": "Editors' Report - Programming Languages - C++",
    "N4903": "PL22.16/WG21 agenda: 7 February 2022, Virtual Meeting",
    "N4904": "WG21 admin telecon meetings: 2022 summer and autumn (revision 1)",
    "N4905": "WG21 2022-01 Admin telecon minutes",
    "N4906": "Transactional Memory TS2",
    "N4907": "WG21 2022-02 Virtual Meeting Minutes of Meeting",
    "N4908": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4909": "Editor's Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4910": "Working Draft, Standard for Programming Language C++",
    "N4911": "Editors\u2019 Report - Programming Languages - C++",
    "N4912": "2022-11 Kona hybrid meeting information",
    "N4913": "PL22.16/WG21 agenda: 25 July 2022, Virtual Meeting",
    "N4914": "WG21 2022-07 Admin telecon minutes",
    "N4915": "Business Plan and Convener's Report: ISO/IEC JTC1/SC22/WG21 (C++)",
    "N4916": "WG21 2022-07 Virtual Meeting Minutes of Meeting",
    "N4917": "Working Draft, Standard for Programming Language C++",
    "N4918": "Editors\u2019 Report - Programming Languages \u2013 C++",
    "N4919": "Programming Languages - C++",
    "N4920": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4921": "Editor\u2019s Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4922": "INCITS C++/WG21 agenda: 7-12 November 2022, Kona, HI US",
    "N4923": "Working Draft, Extensions to C++ for Transactional Memory Version 2",
    "N4924": "WG21 2022-10 Admin telecon minutes",
    "N4925": "2023-02 Issaquah meeting information",
    "N4926": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4927": "Editor's Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4928": "Working Draft, Standard for Programming Language C++",
    "N4929": "Editors' Report - Programming Languages - C++",
    "N4933": "WG21 November 2022 Kona Minutes of Meeting",
    "N4934": "2023 WG21 admin telecon meetings",
    "N4935": "2023 Varna Meeting Invitation and Information",
    "N4936": "2023-11 Kona meeting information",
    "N4937": "Programming Languages \u2014 C++ Extensions for Library Fundamentals, Version 3",
    "N4938": "Editor's Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4939": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4940": "WG21 2022-11 Kona Minutes of Meeting V2",
    "N4941": "INCITS C++/WG21 Agenda: 6-11 February 2023, Issaquah, WA USA",
    "N4942": "WG21 2023-01 Admin telecon minutes",
    "N4943": "WG21 February 2023 Issaquah Minutes of Meeting",
    "N4944": "Working Draft, Standard for Programming Language C++",
    "N4945": "Editors' Report - Programming Languages - C++",
    "N4946": "2024-03 Tokyo meeting information",
    "N4947": "INCITS C++/WG21 agenda: 12-17 June 2023, Varna, Bulgaria",
    "N4948": "Working Draft, C++ Extensions for Library Fundamentals, Version 3",
    "N4949": "Editor's Report: C++ Extensions for Library Fundamentals, Version 3",
    "N4950": "Working Draft, Standard for Programming Language C++",
    "N4951": "Editors' Report - Programming Languages - C++",
    "N4953": "Concurrency TS2",
    "N4954": "2023 WG21 admin telecon meetings, rev. 1",
    "N4955": "WG21 2023-06 Admin telecon minutes",
    "N4956": "Concurrency TS2 PDTS",
    "N4957": "WG21 June 2023 Varna Minutes of Meeting",
    "N4958": "Working Draft, Programming Languages \u2014 C++",
    "N4959": "Editors' Report, Programming Languages \u2014 C++",
    "N4960": "Business Plan and Convener's Report: ISO/IEC JTC1/SC22/WG21 (C++)",
    "N4961": "2024-03 Tokyo meeting information",
    "N4962": "WG21 agenda: 6-11 November 2023, Kona, HI",
    "N4963": "2023 WG21 admin telecon meetings, rev. 2",
    "N4964": "Working Draft, Programming Languages \u2014 C++",
    "N4965": "Editors' Report, Programming Languages \u2014 C++",
    "N4966": "St. Louis Meeting Invitation and Information",
    "N4967": "WG21 2023-10 Admin telecon minutes",
    "N4970": "WG21 2023-11 Kona Minutes of Meeting",
    "N4971": "Working Draft, Programming Languages \u2014 C++",
    "N4972": "Editors' Report, Programming Languages \u2014 C++",
    "N4974": "2024-11 Wroclaw meeting information",
    "N4975": "2024 WG21 admin telecon meetings",
    "N4976": "WG21 agenda: 18-23 March 2024, Tokyo, Japan",
    "N4978": "WG21 2024-03 Admin telecon minutes",
    "N4979": "Hagenberg Meeting Invitation and Information",
    "N4980": "WG21 2024-03 Tokyo Minutes of Meeting",
    "N4981": "Working Draft, Programming Languages \u2014 C++",
    "N4982": "Editors' Report, Programming Languages \u2014 C++",
    "N4983": "WG21 agenda: 24-29 June 2024, St. Louis, MO, USA",
    "P0001R0": "Removing Deprecated Register Keyword",
    "P0001R1": "Removing Deprecated Register Keyword",
    "P0002R0": "Removing Deprecated Operator++ for bool",
    "P0002R1": "Removing Deprecated Operator++ for bool",
    "P0003R0": "Removing Deprecated Dynamic Exception Specifications",
    "P0003R1": "Removing Deprecated Exception Specifications from C++17",
    "P0003R2": "Removing Deprecated Dynamic Exception Specifications from C++17",
    "P0003R3": "Removing Deprecated Exception Specifications from C++17",
    "P0003R4": "Removing Deprecated Exception Specifications from C++17",
    "P0003R5": "Removing Deprecated Exception Specifications from C++17",
    "P0004R0": "Removing Deprecated Aliases in iostreams",
    "P0004R1": "Removing Deprecated Aliases in iostreams",
    "P0005R0": "Adopt not_fn from Library Fundamentals 2 for C++17",
    "P0005R1": "Adopt not_fn from Library Fundamentals 2 for C++17",
    "P0005R2": "Adopt not_fn from Library Fundamentals 2 for C++17",
    "P0005R3": "Adopt not_fn from Library Fundamentals 2 for C++17",
    "P0005R4": "Adopt `not_fn` from Library Fundamentals 2 for C++17",
    "P0006R0": "Adopt Type Traits Variable Templates from Library Fundamentals TS for C++17",
    "P0007R0": "Constant View: A proposal for a std::as_const helper function template",
    "P0007R1": "Constant View: A proposal for a `std::as_const` helper function template",
    "P0008R0": "C++ Executors",
    "P0009R0": "Polymorphic Multidimensional Array View",
    "P0009R1": "Polymorphic Multidimensional Array View",
    "P0009R2": "Polymorphic Multidimensional Array View",
    "P0009R3": "Polymorphic Multidimensional Array View",
    "P0009R4": "Polymorphic Multidimensional Array Reference",
    "P0009R5": "Polymorphic Multidimensional Array Reference",
    "P0009R6": "mdspan: A Non-Owning Multidimensional Array Reference",
    "P0009R7": "mdspan: A Non-Owning Multidimensional Array Reference",
    "P0009R8": "mdspan: A Non-Owning Multidimensional Array Reference",
    "P0009R9": "mdspan: A Non-Owning Multidimensional Array Reference",
    "P0009R10": "mdspan",
    "P0009R11": "MDSPAN",
    "P0009R12": "MDSPAN",
    "P0009R13": "MDSPAN",
    "P0009R14": "MDSPAN",
    "P0009R15": "MDSPAN",
    "P0009R16": "MDSPAN",
    "P0009R17": "MDSPAN",
    "P0009R18": "MDSPAN",
    "P0010R0": "Adding a subsection for concurrent random number generation in C++17",
    "P0011R0": "Additions to Filesystem supporting Relative Paths",
    "P0012R0": "Make exception specifications be part of the type system, version 4",
    "P0012R1": "Make exception specifications be part of the type system, version 5",
    "P0013R0": "Logical Operator Type Traits",
    "P0013R1": "Logical Operator Type Traits (revison 1)",
    "P0014R0": "Proposal to add the multiline option to std::regex for its ECMAScript engine",
    "P0014R1": "Proposal to add the multiline option to std::regex for its ECMAScript engine",
    "P0015R0": "A specialization-friendly std::common_type",
    "P0017R0": "Extension to aggregate initialization",
    "P0017R1": "Extension to aggregate initialization",
    "P0018R0": "Lambda Capture of *this by Value",
    "P0018R1": "Lambda Capture of *this by Value",
    "P0018R2": "Lambda Capture of *this by Value",
    "P0018R3": "Lambda Capture of `*this` by Value as `[=,*this]`",
    "P0019R0": "Atomic View",
    "P0019R1": "Atomic View",
    "P0019R2": "Atomic View",
    "P0019R3": "Atomic View",
    "P0019R4": "Atomic View",
    "P0019R5": "Atomic View",
    "P0019R6": "Atomic View",
    "P0019R7": "Atomic Ref",
    "P0019R8": "Atomic Ref",
    "P0020R0": "Floating Point Atomic View",
    "P0020R1": "Floating Point Atomic",
    "P0020R2": "Floating Point Atomic",
    "P0020R3": "Floating Point Atomic View",
    "P0020R4": "Floating Point Atomic",
    "P0020R5": "Floating Point Atomic",
    "P0020R6": "Floating Point Atomic",
    "P0021R0": "Working Draft, C++ Extensions for Ranges",
    "P0022R0": "Proxy Iterators for the Ranges Extensions",
    "P0022R1": "Proxy Iterators for the Ranges Extensions",
    "P0022R2": "Proxy Iterators for the Ranges Extensions",
    "P0023R0": "Relocator: Efficiently moving objects",
    "P0024R0": "The Parallelism TS Should be Standardized",
    "P0024R1": "The Parallelism TS Should be Standardized",
    "P0024R2": "The Parallelism TS Should be Standardized",
    "P0025R0": "An algorithm to \"clamp\" a value between a pair of boundary values",
    "P0025R1": "An algorithm to \"clamp\" a value between a pair of boundary values",
    "P0026R0": "multi-range-based for loops",
    "P0027R0": "Named Types",
    "P0028R0": "Using non-standard attributes",
    "P0028R1": "Using non-standard attributes",
    "P0028R2": "Using non-standard attributes",
    "P0028R3": "Using non-standard attributes",
    "P0028R4": "Using attribute namespaces without repetition",
    "P0029R0": "A Unified Proposal for Composable Hashing",
    "P0030R0": "Proposal to Introduce a 3-Argument Overload to std::hypot",
    "P0030R1": "Proposal to Introduce a 3-Argument Overload to std::hypot",
    "P0031R0": "A Proposal to Add Constexpr Modifiers to reverse_iterator, move_iterator, array and Range Access",
    "P0032R0": "Homogeneous interface for variant, any and optional",
    "P0032R1": "Homogeneous interface for variant, any and optional (Revision 1)",
    "P0032R2": "Homogeneous interface for variant, any and optional (Revision 2)",
    "P0032R3": "Homogeneous interface for variant, any and optional (Revision 3)",
    "P0033R0": "Re-enabling shared_from_this",
    "P0033R1": "Re-enabling shared_from_this (revision 1)",
    "P0034R0": "Civil Time for the Standard Library",
    "P0035R0": "Dynamic memory allocation for over-aligned data",
    "P0035R1": "Dynamic memory allocation for over-aligned data",
    "P0035R2": "Dynamic memory allocation for over-aligned data",
    "P0035R3": "Dynamic memory allocation for over-aligned data",
    "P0035R4": "Dynamic memory allocation for over-aligned data",
    "P0036R0": "Unary Folds and Empty Parameter Packs (Revision 1)",
    "P0037R0": "Fixed point real numbers",
    "P0037R1": "Fixed point real numbers",
    "P0037R2": "Fixed-point real numbers",
    "P0037R3": "Fixed-point real numbers",
    "P0037R4": "Fixed-point real numbers",
    "P0037R5": "Fixed-Point Real Numbers",
    "P0037R6": "Fixed-Point Real Numbers",
    "P0037R7": "Fixed-Point Real Numbers",
    "P0038R0": "Flat Containers",
    "P0039R0": "Extending raw_storage_iterator",
    "P0040R0": "Extending memory management tools",
    "P0040R1": "Extending memory management tools",
    "P0040R2": "Extending memory management tools",
    "P0040R3": "Extending memory management tools",
    "P0041R0": "Unstable remove algorithms",
    "P0042R0": "std::recover: undoing type erasure",
    "P0043R0": "Function wrappers with allocators and noexcept",
    "P0044R0": "unwinding_state: safe exception relativity",
    "P0045R0": "Overloaded and qualified std::function",
    "P0045R1": "Qualified std::function signatures",
    "P0046R0": "Change is_transparent to metafunction",
    "P0046R1": "Change is_transparent to metafunction",
    "P0047R0": "Transactional Memory (TM) Meeting Minutes 2015/06/01-2015/09/21",
    "P0048R0": "Games Dev/Low Latency/Financial Trading/Banking Meeting Minutes 2015/08/12-2015/09/23",
    "P0050R0": "C++ generic match function",
    "P0051R0": "C++ generic overload function",
    "P0051R1": "C++ generic overload function (Revision 1)",
    "P0051R2": "C++ generic overload function",
    "P0051R3": "C++ generic overload function",
    "P0052R0": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R1": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R2": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R3": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R4": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R5": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R6": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R7": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R8": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R9": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0052R10": "Generic Scope Guard and RAII Wrapper for the Standard Library",
    "P0053R0": "C++ Synchronized Buffered Ostream",
    "P0053R1": "C++ Synchronized Buffered Ostream",
    "P0053R2": "C++ Synchronized Buffered Ostream",
    "P0053R3": "DRAFT C++ Synchronized Buffered Ostream",
    "P0053R4": "DRAFT C++ Synchronized Buffered Ostream",
    "P0053R5": "C++ Synchronized Buffered Ostream",
    "P0053R6": "C++ Synchronized Buffered Ostream",
    "P0053R7": "C++ Synchronized Buffered Ostream",
    "P0054R0": "Coroutines: reports from the fields",
    "P0055R0": "On Interactions Between Coroutines and Networking Library",
    "P0055R1": "On Interactions Between Coroutines and Networking Library",
    "P0056R0": "Soft Keywords",
    "P0057R0": "Wording for Coroutines (Revision 3)",
    "P0057R1": "Wording for Coroutines",
    "P0057R2": "Wording for Coroutines",
    "P0057R3": "Wording for Coroutines",
    "P0057R4": "Wording for Coroutines",
    "P0057R5": "Wording for Coroutines",
    "P0057R6": "Wording for Coroutines",
    "P0057R7": "Wording for Coroutines",
    "P0057R8": "Working Draft, C++ Extensions for Coroutines",
    "P0058R0": "An Interface for Abstracting Execution",
    "P0058R1": "An Interface for Abstracting Execution",
    "P0059R0": "Add rings to the Standard Library",
    "P0059R1": "Add rings to the Standard Library",
    "P0059R2": "Add rings to the Standard Library",
    "P0059R3": "A proposal to add a ring span to the standard library",
    "P0059R4": "A proposal to add a ring span to the standard library",
    "P0060R0": "Function Object-Based Overloading of Operator Dot",
    "P0061R0": "Feature-testing preprocessor predicates for C++17",
    "P0061R1": "__has_include for C++17",
    "P0062R0": "When should compilers optimize atomics?",
    "P0062R1": "When should compilers optimize atomics?",
    "P0063R0": "C++17 should refer to C11 instead of C99",
    "P0063R1": "C++17 should refer to C11 instead of C99",
    "P0063R2": "C++17 should refer to C11 instead of C99",
    "P0063R3": "C++17 should refer to C11 instead of C99",
    "P0065R0": "Movable initializer lists, rev. 2",
    "P0066R0": "Accessors and views with lifetime extension",
    "P0067R0": "Elementary string conversions",
    "P0067R1": "Elementary string conversions",
    "P0067R2": "Elementary string conversions, revision 2",
    "P0067R3": "Elementary string conversions, revision 2",
    "P0067R4": "Elementary string conversions, revision 4",
    "P0067R5": "Elementary string conversions, revision 5",
    "P0068R0": "Proposal of [[unused]], [[nodiscard]] and [[fallthrough]] attributes",
    "P0069R0": "A C++ Compiler for Heterogeneous Computing",
    "P0070R0": "Coroutines: Return Before Await",
    "P0071R0": "Coroutines: Keyword alternatives",
    "P0072R0": "Light-Weight Execution Agents",
    "P0072R1": "Light-Weight Execution Agents",
    "P0073R0": "On unifying the coroutines and resumable functions proposals",
    "P0073R1": "On unifying the coroutines and resumable functions proposals",
    "P0073R2": "On unifying the coroutines and resumable functions proposals",
    "P0074R0": "Making `std::owner_less` more flexible",
    "P0075R0": "Template Library for Index-Based Loops",
    "P0075R1": "Template Library for Index-Based Loops",
    "P0075R2": "Template Library for Parallel For Loops",
    "P0076R0": "Vector and Wavefront Policies",
    "P0076R1": "Vector and Wavefront Policies",
    "P0076R2": "Vector and Wavefront Policies",
    "P0076R3": "Vector and Wavefront Policies",
    "P0076R4": "Vector and Wavefront Policies",
    "P0077R0": "is_callable, the missing INVOKE related trait",
    "P0077R1": "is_callable, the missing INVOKE related trai",
    "P0077R2": "is_callable, the missing INVOKE related trai",
    "P0078R0": "The [[pure]] attribute",
    "P0079R0": "Extension methods in C++",
    "P0080R0": "Variant: Discriminated Union with Value Semantics",
    "P0081R0": "A proposal to add sincos to the standard library",
    "P0082R0": "For Loop Exit Strategies (Revision 1)",
    "P0082R1": "For Loop Exit Strategies (Revision 1)",
    "P0082R2": "For Loop Exit Strategies (Revision 3)",
    "P0083R0": "Splicing Maps and Sets (Revision 2)",
    "P0083R1": "Splicing Maps and Sets (Revision 3)",
    "P0083R2": "Splicing Maps and Sets (Revision 4)",
    "P0083R3": "Splicing Maps and Sets (Revision 5)",
    "P0084R0": "Emplace Return Type",
    "P0084R1": "Emplace Return Type (Revision 1)",
    "P0084R2": "Emplace Return Type (Revision 1)",
    "P0085R0": "Oo... adding a coherent character sequence to begin octal-literals",
    "P0086R0": "Variant design review",
    "P0087R0": "Variant: a type-safe union without undefined behavior (v2)",
    "P0088R0": "Variant: a type-safe union that is rarely invalid (v5)",
    "P0088R1": "Variant: a type-safe union that is rarely invalid (v6)",
    "P0088R2": "Variant: a type-safe union for C++17 (v7)",
    "P0088R3": "Variant: a type-safe union for C++17 (v8)",
    "P0089R0": "Quantifying Memory-Allocatiom Strategies",
    "P0089R1": "Quantifying Memory-Allocation Strategies",
    "P0090R0": "Removing result_type, etc.",
    "P0091R0": "Template parameter deduction for constructors (Rev. 3)",
    "P0091R1": "Template parameter deduction for constructors (Rev. 3)",
    "P0091R2": "Template argument deduction for class templates (Rev. 5)",
    "P0091R3": "Template argument deduction for class templates (Rev. 6)",
    "P0091R4": "Template argument deduction for class templates (Rev. 7)",
    "P0092R0": "Polishing <chrono>",
    "P0092R1": "Polishing `<chrono>`",
    "P0093R0": "Simply a strong variant",
    "P0094R0": "Simply a basic variant",
    "P0095R0": "The case for a language based variant",
    "P0095R1": "Pattern Matching and Language Variants",
    "P0095R2": "Language Variants",
    "P0096R0": "Feature-testing recommendations for C++",
    "P0096R1": "Feature-testing recommendations for C++",
    "P0096R2": "Feature-testing recommendations for C++",
    "P0096R3": "Feature-testing recommendations for C++",
    "P0096R4": "Feature-testing recommendations for C++",
    "P0096R5": "Feature-testing recommendations for C++",
    "P0097R0": "Use Cases for Thread-Local Storage",
    "P0098R0": "Towards Implementation and Use of memory order consume",
    "P0098R1": "Towards Implementation and Use of memory order consume",
    "P0099R0": "A low-level API for stackful context switching",
    "P0099R1": "A low-level API for stackful context switching",
    "P0100R0": "Comparison in C++",
    "P0100R1": "Comparison in C++",
    "P0100R2": "Comparison in C++",
    "P0101R0": "An Outline of a C++ Numbers Technical Specification,",
    "P0102R0": "C++ Parametric Number Type Aliases",
    "P0103R0": "Overflow-Detecting and Double-Wide Arithmetic Operations",
    "P0103R1": "Overflow-Detecting and Double-Wide Arithmetic Operations",
    "P0104R0": "Multi-Word Integer Operations and Types",
    "P0104R1": "Multi-Word Integer Operations and Types",
    "P0105R0": "Rounding and Overflow in C++",
    "P0105R1": "Rounding and Overflow in C++",
    "P0106R0": "C++ Binary Fixed-Point Arithmetic",
    "P0107R0": "Better support for constexpr in std::array",
    "P0108R0": "Skeleton Proposal for Thread-Local Storage (TLS)",
    "P0108R1": "Skeleton Proposal for Thread-Local Storage (TLS)",
    "P0109R0": "Function Aliases + Extended Inheritance = Opaque Typedefs",
    "P0110R0": "Implementing the strong guarantee for variant<> assignment",
    "P0112R0": "Networking Library (Revision 6)",
    "P0112R1": "Networking Library (Revision 7)",
    "P0113R0": "Executors and Asynchronous Operations, Revision 2",
    "P0114R0": "Resumable Expressions (revision 1)",
    "P0116R0": "Boolean conversion for Standard Library types",
    "P0117R0": "Generic to_string/to_wstring functions",
    "P0118R0": "Concepts-TS editors report",
    "P0119R0": "Overload sets as function arguments",
    "P0119R1": "Overload sets as function arguments",
    "P0119R2": "Overload sets as function arguments",
    "P0120R0": "constexpr unions and common initial sequences",
    "P0121R0": "Working Draft, C++ extensions for Concepts",
    "P0122R0": "array_view: bounds-safe views for sequences of objects",
    "P0122R1": "span: bounds-safe views of objects for sequences",
    "P0122R2": "span: bounds-safe views for sequences of objects",
    "P0122R3": "span: bounds-safe views for sequences of objects",
    "P0122R4": "span: bounds-safe views for sequences of objects",
    "P0122R5": "span: bounds-safe views for sequences of objects",
    "P0122R6": "span: bounds-safe views for sequences of objects",
    "P0122R7": "span: bounds-safe views for sequences of objects",
    "P0123R0": "Unifying the interfaces of string_view and array_view",
    "P0123R1": "string_span: bounds-safe views for sequences of characters",
    "P0123R2": "string_span: bounds-safe views for sequences of objects",
    "P0124R0": "Linux-Kernel Memory Model",
    "P0124R1": "Linux-Kernel Memory Model",
    "P0124R2": "Linux-Kernel Memory Model",
    "P0124R3": "Linux-Kernel Memory Model",
    "P0124R4": "Linux-Kernel Memory Model",
    "P0124R5": "Linux-Kernel Memory Model",
    "P0124R6": "Linux-Kernel Memory Model",
    "P0124R7": "Linux-Kernel Memory Model",
    "P0124R8": "Linux-Kernel Memory Model",
    "P0125R0": "std::bitset inclusion test methods",
    "P0126R0": "std::synchronic",
    "P0126R1": "std::synchronic<T>",
    "P0126R2": "std::synchronic<T>",
    "P0127R0": "Declaring non-type template arguments with auto",
    "P0127R1": "Declaring non-type template arguments with auto",
    "P0127R2": "Declaring non-type template arguments with auto",
    "P0128R0": "constexpr_if",
    "P0128R1": "constexpr_if",
    "P0129R0": "We cannot (realistically) get rid of throwing moves",
    "P0130R0": "Comparing virtual functions",
    "P0131R0": "Unified call syntax concerns",
    "P0132R0": "Non-throwing container operations",
    "P0132R1": "Non-throwing container operations",
    "P0133R0": "Putting noexcept(auto) on hold, again",
    "P0134R0": "Introducing a name for brace-or-equal-initializers for non-static data members",
    "P0135R0": "Guaranteed copy elision through simplified value categories",
    "P0135R1": "Wording for guaranteed copy elision through simplified value categories",
    "P0136R0": "Rewording inheriting constructors (core issue 1941 et al)",
    "P0136R1": "Rewording inheriting constructors (core issue 1941 et al)",
    "P0137R0": "Core Issue 1776: Replacement of class objects containing reference members",
    "P0137R1": "Core Issue 1776: Replacement of class objects containing reference members",
    "P0138R0": "Construction Rules for enum class Values",
    "P0138R1": "Construction Rules for enum class Values",
    "P0138R2": "Construction Rules for enum class Values",
    "P0141R0": "Modules, Componentization, and Transitional Paths",
    "P0142R0": "A Module System for C++ (Revision 4)",
    "P0143R0": "Wording for Modules",
    "P0143R1": "Wording for Modules",
    "P0143R2": "Wording for Modules",
    "P0144R0": "Structured Bindings",
    "P0144R1": "Structured Bindings",
    "P0144R2": "Structured Bindings",
    "P0145R0": "Expression Order of Evaluation",
    "P0145R1": "Refining Expression Evaluation Order for Idiomatic C++ (Revision 2)",
    "P0145R2": "Refining Expression Evaluation Order for Idiomatic C++",
    "P0145R3": "Refining Expression Evaluation Order for Idiomatic C++",
    "P0146R0": "Regular Void",
    "P0146R1": "Regular Void",
    "P0147R0": "The Use and Implementation of Contracts",
    "P0148R0": "memory_resource_ptr: A Limited Smart Pointer for memory_resource Correctness",
    "P0149R0": "Generalised member pointers",
    "P0151R0": "Proposal of Multi-Declarators",
    "P0152R0": "constexpr atomic::is_always_lock_free",
    "P0152R1": "`constexpr atomic<T>::is_always_lock_free`",
    "P0153R0": "std::atomic_object_fence(mo, T&&...)",
    "P0154R0": "constexpr std::thread::hardware_{true,false}_sharing_size",
    "P0154R1": "`constexpr std::thread::hardware_{true,false}_sharing_size`",
    "P0155R0": "Task Block R5",
    "P0156R0": "Variadic lock_guard (Rev. 3)",
    "P0156R1": "Variadic lock_guard (Rev. 4)",
    "P0156R2": "Variadic `lock_guard` (Rev. 4)",
    "P0157R0": "Handling Disappointment in C++",
    "P0158R0": "Couroutines belong in a TS",
    "P0159R0": "Draft of Technical Specification for C++ Extensions for Concurrency",
    "P0160R0": "Wording for removing defaults for unary folds",
    "P0161R0": "Bitset Iterators, Masks, and Container Operations",
    "P0162R0": "A response to \"P0055R0: On Interactions Between Coroutines and Networking Library\"",
    "P0163R0": "`shared_ptr::weak_type`",
    "P0164R0": "Core Language Working Group \"ready\" Issues",
    "P0165R0": "C++ Standard Library Issues to be moved in Kona",
    "P0165R1": "C++ Standard Library Issues to be moved in Jacksonville",
    "P0165R2": "C++ Standard Library Issues to be moved in Oulu",
    "P0165R3": "C++ Standard Library Issues to be moved in Issaquah",
    "P0165R4": "C++ Standard Library Issues to be moved in Kona",
    "P0166R0": "Three interesting questions about contracts",
    "P0167R0": "Core Language Working Group \"ready\" Issues after the October, 2015 (Kona) meeting",
    "P0167R1": "Core Language Working Group \"ready\" Issues for the February, 2016 (Jacksonville) meeting",
    "P0167R2": "Core Language Working Group \"ready\" Issues for the February, 2016 (Jacksonville) meeting",
    "P0169R0": "regex and Unicode character types",
    "P0170R0": "Wording for Constexpr Lambda",
    "P0170R1": "Wording for Constexpr Lambda",
    "P0171R0": "Response To: Resumable Expressions P0114R0",
    "P0172R0": "Abominable Function Types",
    "P0174R0": "Deprecating Vestigial Library Parts in C++17",
    "P0174R1": "Deprecating Vestigial Library Parts in C++17",
    "P0174R2": "Deprecating Vestigial Library Parts in C++17",
    "P0175R0": "Synopses for the C library",
    "P0175R1": "Synopses for the C library",
    "P0177R0": "Cleaning up allocator_traits",
    "P0177R1": "Cleaning up allocator_traits",
    "P0177R2": "Cleaning up allocator_traits",
    "P0178R0": "Allocators and swap",
    "P0180R0": "Reserve a New Library Namespace Future Standardization",
    "P0180R1": "Reserve a New Library Namespace Future Standardization",
    "P0180R2": "Reserve a New Library Namespace Future Standardization",
    "P0181R0": "Ordered By Default",
    "P0181R1": "Ordered By Default",
    "P0184R0": "Generalizing the Range-Based For Loop",
    "P0185R0": "Adding [nothrow-] swappable traits",
    "P0185R1": "Adding [nothrow-]swappable traits, revision 3",
    "P0186R0": "Iterator Facade Library Proposal for Ranges",
    "P0187R0": "Proposal of Bitfield Default Member Initializers",
    "P0187R1": "Proposal/Wording for Bit-field Default Member Initializer Syntax",
    "P0188R0": "Wording for [[fallthrough]] attribute",
    "P0188R1": "Wording for `[[fallthrough]]` attribute",
    "P0189R0": "Wording for [[nodiscard]] attribute",
    "P0189R1": "Wording for `[[nodiscard]]` attribute",
    "P0190R0": "Proposal for New memory order consume Definition",
    "P0190R1": "Proposal for New memory order consume Definition",
    "P0190R2": "Proposal for New memory order consume Definition",
    "P0190R3": "Proposal for New memory order consume Definition",
    "P0190R4": "Proposal for New memory order consume Definition",
    "P0191R1": "C++ virtual member function pointer comparison",
    "P0192R0": "Adding a Fundamental Type for Short Float",
    "P0192R1": "Adding a Fundamental Type for Short Float",
    "P0192R4": "`short float` and fixed-size floating point types",
    "P0193R0": "Where is Vectorization in C++\u203d",
    "P0193R1": "Where is Vectorization in C++\u203d",
    "P0194R0": "Static reflection (revision 4)",
    "P0194R1": "Static reflection (revision 4)",
    "P0194R2": "Static reflection",
    "P0194R3": "Static reflection",
    "P0194R4": "Static reflection",
    "P0194R5": "Static reflection",
    "P0194R6": "Static reflection",
    "P0195R0": "Modernizing using-declarations",
    "P0195R1": "Modernizing using-declarations",
    "P0195R2": "Pack expansions in <i>using-declaration</i>s",
    "P0196R0": "A generic none_t literal type for Nullable types",
    "P0196R1": "Generic none() factories for Nullable types",
    "P0196R2": "Generic none() factories for Nullable types",
    "P0196R3": "Generic none() factories for Nullable types",
    "P0196R4": "Generic none() factories for Nullable types",
    "P0196R5": "Generic none() factories for Nullable types",
    "P0197R0": "Default Tuple-like access",
    "P0198R0": "Default Swap",
    "P0199R0": "Default Hash",
    "P0200R0": "A Proposal to Add Y Combinator to the Standard Library",
    "P0201R0": "A cloning pointer-class for C++",
    "P0201R1": "An indirect value-type for C++",
    "P0201R2": "A polymorphic value-type for C++",
    "P0201R3": "A polymorphic value-type for C++",
    "P0201R4": "A polymorphic value-type for C++",
    "P0201R5": "A polymorphic value-type for C++",
    "P0201R6": "A polymorphic value-type for C++",
    "P0202R0": "Add Constexpr Modifiers to Functions in <algorithm> and <cstring> Headers",
    "P0202R1": "Add Constexpr Modifiers to Functions in <algorithm> and <cstring> Headers",
    "P0202R2": "Add Constexpr Modifiers to Functions in <algorithm> and <cstring> Headers",
    "P0202R3": "Add Constexpr Modifiers to Functions in `<algorithm>` and `<utility>` Headers",
    "P0203R0": "Considerations for the design of expressive portable SIMD vectors",
    "P0205R0": "Allow Seeding Random Number Engines With std::random_device",
    "P0205R1": "Efficient Seeding of Random Number Engines",
    "P0206R0": "Discussion about std::thread and RAII",
    "P0206R1": "A joining thread",
    "P0207R0": "Ruminations on lambda captures",
    "P0208R0": "Copy-swap helper",
    "P0208R1": "Copy-swap Transaction",
    "P0209R0": "make_from_tuple: apply for construction",
    "P0209R1": "make_from_tuple: apply for construction",
    "P0209R2": "`make_from_tuple`: apply for construction",
    "P0210R0": "A light-weight, dynamic array",
    "P0211R0": "Allocator-aware library wrappers for dynamic allocation",
    "P0211R1": "Allocator-aware library wrappers for dynamic allocation",
    "P0211R2": "Allocator-aware library wrappers for dynamic allocation",
    "P0211R3": "Allocator-aware library wrappers for dynamic allocation",
    "P0212R0": "Wording for [[maybe_unused]] attribute",
    "P0212R1": "Wording for `[[maybe_unused]]` attribute",
    "P0213R0": "Reexamining the Performance of Memory-Allocation Strategies",
    "P0214R0": "Data-Parallel Vector Types & Operations",
    "P0214R1": "Data-Parallel Vector Types & Operations",
    "P0214R2": "Data-Parallel Vector Types & Operations",
    "P0214R3": "Data-Parallel Vector Types & Operations",
    "P0214R4": "Data-Parallel Vector Types & Operations",
    "P0214R5": "Data-Parallel Vector Types & Operations",
    "P0214R6": "Data-Parallel Vector Types & Operations",
    "P0214R7": "Data-Parallel Vector Types & Operations",
    "P0214R8": "Data-Parallel Vector Types & Operations",
    "P0214R9": "Data-Parallel Vector Types & Operations",
    "P0215R0": "A Civil-Time Library",
    "P0216R0": "A Time-Zone Library",
    "P0217R0": "Proposed wording for structured bindings",
    "P0217R1": "Proposed wording for structured bindings",
    "P0217R2": "Proposed wording for structured bindings",
    "P0217R3": "Proposed wording for structured bindings",
    "P0218R0": "Adopt File System TS for C++17",
    "P0218R1": "Adopt File System TS for C++17",
    "P0219R0": "Relative Paths for Filesystem",
    "P0219R1": "Relative Paths for Filesystem",
    "P0220R0": "Adopt Library Fundamentals TS for C++17",
    "P0220R1": "Adopt Library Fundamentals V1 TS Components for C++17 (R1)",
    "P0221R0": "Proposed wording for default comparisons, revision 2",
    "P0221R1": "Proposed wording for default comparisons, revision 3",
    "P0221R2": "Proposed wording for default comparisons, revision 4",
    "P0222R0": "Allowing Anonymous Structs as Return Values",
    "P0223R0": "Class Namespace",
    "P0224R0": "Implicit Return Type",
    "P0225R0": "Why I want Concepts, and why I want them sooner rather than later",
    "P0226R0": "Mathematical Special Functions for C++17, v4",
    "P0226R1": "Mathematical Special Functions for C++17, v5",
    "P0227R0": "Weakening the iterator categories of some standard algorithms",
    "P0228R0": "A Proposal to Add Safe Integer Types to the Standard Library Technical Report",
    "P0228R3": "unique_function: a move-only std::function",
    "P0228R6": "any_invocable",
    "P0229R0": "SG5 Transactional Memory Meeting minutes 2015/11/02-2016/02/08",
    "P0230R0": "SG14 Games Dev/Low Latency/Financial Meeting Minutes 2015/10/14-2015/02/10",
    "P0231R0": "Extending the Transactional Memory Technical Specification to Support Commit Actions",
    "P0232R0": "A Concurrency ToolKit for Structured Deferral/Optimistic Speculation",
    "P0233R0": "Hazard Pointers: Safe Reclamation for Optimistic Concurrency",
    "P0233R1": "Hazard Pointers: Safe Reclamation for Optimistic Concurrency",
    "P0233R2": "Hazard Pointers: Safe Reclamation for Optimistic Concurrency",
    "P0233R3": "Hazard Pointers: Safe Reclamation for Optimistic Concurrency",
    "P0233R4": "Hazard Pointers: Safe Reclamation for Optimistic Concurrency",
    "P0233R5": "Hazard Pointers: Safe Reclamation for Optimistic Concurrency",
    "P0233R6": "Hazard Pointers: Safe Reclamation for Optimistic Concurrency",
    "P0234R0": "Towards Massive Parallelism(aka Heterogeneous Devices/Accelerators/GPGPU) support in C++",
    "P0235R0": "A Packaging System for C++",
    "P0236R0": "Khronos's OpenCL SYCL to support Heterogeneous Devices for C++",
    "P0237R0": "On the standardization of fundamental bit manipulation utilities",
    "P0237R1": "Wording for fundamental bit manipulation utilities",
    "P0237R2": "Wording for fundamental bit manipulation utilities",
    "P0237R3": "Wording for fundamental bit manipulation utilities",
    "P0237R4": "Wording for fundamental bit manipulation utilities",
    "P0237R5": "Wording for fundamental bit manipulation utilities",
    "P0237R6": "Wording for fundamental bit manipulation utilities",
    "P0237R7": "Wording for fundamental bit manipulation utilities",
    "P0237R8": "Wording for fundamental bit manipulation utilities",
    "P0237R9": "Wording for fundamental bit manipulation utilities",
    "P0237R10": "Wording for fundamental bit manipulation utilities",
    "P0238R0": "Return type deduction and SFINAE",
    "P0238R1": "Return type deduction and SFINAE",
    "P0239R0": "valueless_by_exception",
    "P0240R0": "Why I want Concepts, but why they should come later rather than sooner",
    "P0241R0": "Remove Future-Related Explicit Specializations for Void",
    "P0242R0": "Standard Library Support For Void",
    "P0244R0": "Text_view: A C++ concepts and range based character encoding and code point enumeration library",
    "P0244R1": "Text_view: A C++ concepts and range based character encoding and code point enumeration library",
    "P0244R2": "Text_view: A C++ concepts and range based character encoding and code point enumeration library",
    "P0245R0": "Hexadecimal float literals for C++",
    "P0245R1": "Hexadecimal float literals for C++",
    "P0246R0": "Contract Assert Support Merged Proposal",
    "P0247R0": "Criteria for Contract Support",
    "P0248R0": "Concepts in C++17",
    "P0249R0": "Input Devices For 2D Graphics",
    "P0249R2": "Input Devices For 2D Graphics",
    "P0250R0": "Wording improvements for initialization and thread ids (CWG 2046)",
    "P0250R1": "Wording improvements for initialization and thread ids (CWG 2046)",
    "P0250R2": "Wording improvements for initialization and thread ids (CWG 2046, 1784)",
    "P0250R3": "Wording improvements for initialization and thread ids (CWG 2046, 1784)",
    "P0251R0": "Unified Call Syntax Wording",
    "P0252R0": "Operator Dot Wording",
    "P0252R1": "Operator Dot Wording",
    "P0252R2": "Operator Dot Wording",
    "P0253R0": "Fixing a design mistake in the searchers interface in Library Fundamentals",
    "P0253R1": "Fixing a design mistake in the searchers interface in Library Fundamentals",
    "P0254R0": "Integrating std::string_view and std::string",
    "P0254R1": "Integrating std::string_view and std::string",
    "P0254R2": "Integrating `std::string_view` and `std::string`",
    "P0255R0": "C++ Static Reflection via template pack expansion",
    "P0256R0": "C++ Reflection Light",
    "P0257R0": "A byte type for the standard library.",
    "P0257R1": "A byte type for increased type safety",
    "P0258R0": "is_contiguous_layout",
    "P0258R1": "is_contiguous_layout",
    "P0258R2": "has_unique_object_representations - wording",
    "P0259R0": "fixed_string: a compile-time string",
    "P0260R0": "C++ Concurrent Queues",
    "P0260R1": "C++ Concurrent Queues",
    "P0260R2": "C++ Concurrent Queues",
    "P0260R3": "C++ Concurrent Queues",
    "P0260R4": "C++ Concurrent Queues",
    "P0260R5": "C++ Concurrent Queues",
    "P0260R6": "C++ Concurrent Queues",
    "P0260R7": "C++ Concurrent Queues",
    "P0260R8": "C++ Concurrent Queues",
    "P0260R9": "C++ Concurrent Queues",
    "P0261R0": "C++ Distributed Counters",
    "P0261R1": "C++ Distributed Counters",
    "P0261R2": "C++ Distributed Counters",
    "P0261R3": "C++ Distributed Counters",
    "P0261R4": "C++ Distributed Counters",
    "P0262R0": "A Class for Status and Optional Value",
    "P0262R1": "A Class for Status and Optional Value",
    "P0263R0": "Core Language Working Group \"tentatively ready\" Issues for the February, 2016 (Jacksonville) Meeting",
    "P0263R1": "Core Language Working Group \"tentatively ready\" Issues for the February, 2016 (Jacksonville) Meeting",
    "P0264R0": "auto operator= considered dangerous",
    "P0265R0": "SG5 is NOT proposing Transactional Memory for C++17",
    "P0266R0": "Removing Restrictions on requires-Expressions",
    "P0266R1": "Removing Restrictions on requires-Expressions",
    "P0266R2": "Lifting Restrictions on requires-Expressions",
    "P0267R0": "A Proposal to Add 2D Graphics Rendering and Display to C++,",
    "P0267R1": "A Proposal to Add 2D Graphics Rendering and Display to C++,",
    "P0267R2": "A Proposal to Add 2D Graphics Rendering and Display to C++,",
    "P0267R3": "A Proposal to Add 2D Graphics Rendering and Display to C++,",
    "P0267R4": "A Proposal to Add 2D Graphics Rendering and Display to C++,",
    "P0267R5": "A Proposal to Add 2D Graphics Rendering and Display to C++,",
    "P0267R6": "A Proposal to Add 2D Graphics Rendering and Display to C++,",
    "P0267R7": "A Proposal to Add 2D Graphics Rendering and Display to C++",
    "P0267R8": "A Proposal to Add 2D Graphics Rendering and Display to C++",
    "P0267R9": "A Proposal to Add 2D Graphics Rendering and Display to C++",
    "P0267R10": "A Proposal to Add 2D Graphics Rendering and Display to C++",
    "P0268R0": "up-to expression",
    "P0269R0": "Allocator-aware regular expressions",
    "P0270R0": "Removing C dependencies from signal handler wording",
    "P0270R1": "Removing C dependencies from signal handler wording",
    "P0270R2": "Removing C dependencies from signal handler wording",
    "P0270R3": "Removing C dependencies from signal handler wording",
    "P0271R0": "std::direct_init<T> for plugging the metaprogramming constructor hole",
    "P0272R0": "Give 'std::string' a non-const '.data()' member function",
    "P0272R1": "Give 'std::string' a non-const '.data()' member function",
    "P0273R0": "Proposed modules changes from implementation and deployment experience",
    "P0273R1": "Proposed modules changes from implementation and deployment experience",
    "P0274R0": "Clump - A Vector-like Sequence Container with Embedded Storage",
    "P0275R0": "A Proposal to add Classes and Functions Required for Dynamic Library Load",
    "P0275R1": "A Proposal to add Classes and Functions Required for Dynamic Library Load",
    "P0275R2": "A Proposal to add Classes and Functions Required for Dynamic Library Load",
    "P0275R3": "A Proposal to add Classes and Functions Required for Dynamic Library Load",
    "P0275R4": "A Proposal to add Classes and Functions Required for Dynamic Library Load",
    "P0276R0": "A Proposal to add Attribute [[visible]]",
    "P0277R0": "const Inheritance",
    "P0277R1": "const Inheritance",
    "P0278R0": "volatile solutions",
    "P0279R0": "Read-Copy Update (RCU) for C++",
    "P0279R1": "Read-Copy Update (RCU) for C++",
    "P0280R0": "Initialize unspecified aggregate members with direct list initialization",
    "P0281R0": "Remove comma elision in variadic function declarations",
    "P0282R0": "Const-preserving overloads for the strtox family of functions",
    "P0283R0": "Standard and non-standard attributes",
    "P0283R1": "Standard and non-standard attributes",
    "P0283R2": "Standard and non-standard attributes",
    "P0284R0": "Unqualified enumerators in case labels",
    "P0285R0": "Using customization points to unify executors",
    "P0286R0": "A networking library extension to support co_await-based coroutines",
    "P0287R0": "Simple Contracts for C++",
    "P0288R0": "A polymorphic wrapper for all Callable objects",
    "P0288R1": "A polymorphic wrapper for all Callable objects",
    "P0288R4": "any_invocable",
    "P0288R5": "any_invocable",
    "P0288R6": "any_invocable",
    "P0288R7": "any_invocable",
    "P0288R8": "move_only_function (was any_invocable)",
    "P0288R9": "move_only_function (was any_invocable)",
    "P0289R0": "Forward declarations of nested classes",
    "P0290R0": "apply() for synchronized_value<T>",
    "P0290R1": "apply() for synchronized_value<T>",
    "P0290R2": "apply() for synchronized_value<T>",
    "P0290R3": "apply() for synchronized_value",
    "P0290R4": "apply() for synchronized_value",
    "P0292R0": "constexpr if: A slightly different syntax",
    "P0292R1": "constexpr if: A slightly different syntax",
    "P0292R2": "constexpr if: A slightly different syntax",
    "P0293R0": "Template deduction for nested classes",
    "P0295R0": "Adopt Selected Library Fundamentals V2 Components for C++17",
    "P0296R0": "Forward progress guarantees: Base definitions",
    "P0296R1": "Forward progress guarantees: Base definitions",
    "P0296R2": "Forward progress guarantees: Base definitions",
    "P0298R0": "A byte type definition",
    "P0298R1": "A byte type definition",
    "P0298R2": "A byte type definition",
    "P0298R3": "A byte type definition",
    "P0299R0": "Forward progress guarantees for the Parallelism TS v2",
    "P0299R1": "Forward progress guarantees for the Parallelism TS features",
    "P0301R0": "Wording for Unified Call Syntax",
    "P0301R1": "Wording for Unified Call Syntax (revision 1)",
    "P0302R0": "Deprecating Allocator Support in std::function",
    "P0302R1": "Removing Allocator Support in std::function (rev 1)",
    "P0303R0": "Extensions to C++ for Short Float Type",
    "P0304R0": "C++ Standard Library Issues Resolved Directly In Jacksonville",
    "P0304R1": "C++ Standard Library Issues Resolved Directly In Issaquah",
    "P0305R0": "If statement with initializer",
    "P0305R1": "Selection statements with initializer",
    "P0306R0": "Comma elision and comma deletion",
    "P0306R1": "Comma elision and comma deletion",
    "P0306R2": "Comma elision and comma deletion",
    "P0306R3": "Comma elision and comma deletion",
    "P0306R4": "Comma elision and comma deletion",
    "P0307R0": "Making Optional Greater Equal Again",
    "P0307R2": "Making Optional Greater Equal Again",
    "P0308R0": "Valueless Variants Considered Harmful",
    "P0309R0": "Partial class",
    "P0310R0": "Splitting node and array allocation in allocators",
    "P0311R0": "A Unified Vision for Manipulating Tuple-like Objects",
    "P0312R0": "Make Pointers to Members Callable",
    "P0312R1": "Make Pointers to Members Callable",
    "P0313R0": "Comparison operators in fold-expressions",
    "P0314R0": "Querying the alignment of an object",
    "P0315R0": "Lambdas in unevaluated context",
    "P0315R1": "Lambdas in unevaluated context",
    "P0315R2": "Lambdas in unevaluated context",
    "P0315R3": "Lambdas in unevaluated context",
    "P0315R4": "Wording for lambdas in unevaluated contexts",
    "P0316R0": "allocate_unique and allocator_delete",
    "P0317R0": "Directory Entry Caching for Filesystem",
    "P0317R1": "Directory Entry Caching for Filesystem",
    "P0318R0": "decay_unwrap and unwrap_reference",
    "P0318R1": "unwrap_ref_decay and unwrap_reference",
    "P0319R0": "Adding Emplace functions for promise<T>/future<T>",
    "P0319R1": "Adding Emplace functions for promise<T>/future<T>",
    "P0319R2": "Adding Emplace functions for promise<T>/future<T> (revision 2)",
    "P0320R0": "Thread Constructor Attributes",
    "P0320R1": "Thread Constructor Attributes",
    "P0322R0": "exception_list",
    "P0323R0": "A proposal to add a utility class to represent expected monad (Revision 2)",
    "P0323R1": "A proposal to add a utility class to represent expected object (Revision 3)",
    "P0323R2": "A proposal to add a utility class to represent expected object (Revision 4)",
    "P0323R3": "Utility class to represent expected object",
    "P0323R4": "std::expected",
    "P0323R5": "std::expected",
    "P0323R6": "std::expected",
    "P0323R7": "std::expected",
    "P0323R8": "std::expected",
    "P0323R9": "std::expected",
    "P0323R10": "std::expected",
    "P0323R11": "std::expected",
    "P0323R12": "std::expected",
    "P0324R0": "One Concept Definition Syntax",
    "P0325R0": "Propose to adopt make_array in C++17",
    "P0325R1": "Propose to adopt make_array into the IS",
    "P0325R2": "to_array from LFTS with updates",
    "P0325R3": "to_array from LFTS with updates",
    "P0325R4": "to_array from LFTS with updates",
    "P0326R0": "Structured binding: customization point issues",
    "P0327R0": "Product types access",
    "P0327R1": "Product types access",
    "P0327R2": "Product types access",
    "P0327R3": "Product types access",
    "P0329R0": "Designated Initialization",
    "P0329R1": "Designated Initialization Wording",
    "P0329R2": "Designated Initialization Wording",
    "P0329R3": "Designated Initialization Wording",
    "P0329R4": "Designated Initialization Wording",
    "P0330R0": "User-Defined Literals for size_t",
    "P0330R1": "User-Defined Literals for size_t",
    "P0330R2": "Literal Suffixes for ptrdiff_t and size_t",
    "P0330R3": "Literal Suffixes for ptrdiff_t and size_t",
    "P0330R4": "Literal Suffixes for ptrdiff_t and size_t",
    "P0330R5": "Literal Suffixes for ptrdiff_t and size_t",
    "P0330R6": "Literal Suffixes for ptrdiff_t and size_t",
    "P0330R7": "Literal Suffixes for ptrdiff_t and size_t",
    "P0330R8": "Literal Suffixes for (signed) size_t",
    "P0331R0": "Motivation and Examples for Multidimensional Array",
    "P0332R0": "Relaxed Incomplete Multidimensional Array Type Declaration",
    "P0332R1": "Relaxed Incomplete Multidimensional Array Type Declaration",
    "P0332R2": "Relaxed Incomplete Multidimensional Array Type Declaration",
    "P0333R0": "Improving Parallel Algorithm Exception Handling",
    "P0334R0": "Immutable Persistent Containers",
    "P0335R0": "Context Tokens for Parallel Algorithms",
    "P0335R1": "Context Tokens for Parallel Algorithms",
    "P0336R0": "Better Names for Parallel Execution Policies in C++17",
    "P0336R1": "Better Names for Parallel Execution Policies in C++17",
    "P0337R0": "Delete operator= for polymorphic_allocator",
    "P0338R0": "C++ generic factories",
    "P0338R1": "C++ generic factories",
    "P0338R2": "C++ generic factories",
    "P0338R3": "C++ generic factories",
    "P0339R0": "polymorphic_allocator<void> as a vocabulary type",
    "P0339R1": "polymorphic_allocator<void> as a vocabulary type",
    "P0339R2": "polymorphic_allocator<void> as a vocabulary type",
    "P0339R3": "polymorphic_allocator<void> as a vocabulary type",
    "P0339R4": "polymorphic_allocator<> as a vocabulary type",
    "P0339R5": "polymorphic_allocator<> as a vocabulary type",
    "P0339R6": "polymorphic_allocator<> as a vocabulary type",
    "P0340R0": "Making std::underlying_type SFINAE-friendly",
    "P0340R1": "Making std::underlying_type SFINAE-friendly",
    "P0340R2": "Making std::underlying_type SFINAE-friendly",
    "P0340R3": "Making std::underlying_type SFINAE-friendly",
    "P0341R0": "parameter packs outside of templates",
    "P0342R0": "Timing barriers",
    "P0342R1": "What does \"current time\" mean?",
    "P0342R2": "pessimize_hint",
    "P0343R0": "Meta-programming High-Order Functions",
    "P0343R1": "Meta-programming High-Order Functions",
    "P0345R0": "Allowing any unsigned integral type as parameter type for literal operators",
    "P0346R0": "A <random> Nomenclature Tweak",
    "P0346R1": "A <random> Nomenclature Tweak",
    "P0347R0": "Simplifying simple uses of <random>",
    "P0347R1": "Simplifying simple uses of <random>",
    "P0348R0": "Validity testing issues",
    "P0349R0": "Assumptions about the size of datapar",
    "P0350R0": "Integrating datapar with parallel algorithms and executors",
    "P0350R1": "Integrating simd with parallel algorithms",
    "P0350R2": "Integrating simd with parallel algorithms",
    "P0350R3": "Integrating simd with parallel algorithms",
    "P0350R4": "Integrating simd with parallel algorithms",
    "P0352R0": "Smart References through Delegation: An Alternative to N4477's Operator Dot",
    "P0352R1": "Smart References through Delegation (2nd revision)",
    "P0353R0": "Unicode Encoding Conversions for the Standard Library",
    "P0353R1": "Unicode Friendly Encoding Conversions for the Standard Library",
    "P0354R0": "default == is >, default < is < so",
    "P0355R0": "Extending <chrono> to Calendars and Time Zones",
    "P0355R1": "Extending <code><chrono></code> to Calendars and Time Zones",
    "P0355R2": "Extending <chrono> to Calendars and Time Zones",
    "P0355R3": "Extending <code><chrono></code> to Calendars and Time Zones",
    "P0355R4": "Extending <code><chrono></code> to Calendars and Time Zones",
    "P0355R5": "Extending <chrono> to Calendars and Time Zones",
    "P0355R6": "Extending chrono to Calendars and Time Zones",
    "P0355R7": "Extending `<chrono>` to Calendars and Time Zones",
    "P0356R0": "Simplified partial function application",
    "P0356R1": "Simplified partial function application",
    "P0356R2": "Simplified partial function application",
    "P0356R3": "Simplified partial function application",
    "P0356R4": "Simplified partial function application",
    "P0356R5": "Simplified partial function application",
    "P0357R0": "reference_wrapper for incomplete types",
    "P0357R1": "reference_wrapper for incomplete types",
    "P0357R2": "'reference_wrapper' for incomplete types",
    "P0357R3": "'reference_wrapper' for incomplete types",
    "P0358R0": "Fixes for not_fn",
    "P0358R1": "Fixes for not_fn",
    "P0359R0": "SG5: Transactional Memory (TM) Meeting Minutes 2016/02/22-2016/05/23",
    "P0360R0": "SG14: Low Latency Meeting Minutes 2016/02/17-2015/05/25",
    "P0361R0": "Invoking Algorithms asynchronously",
    "P0361R1": "Invoking Algorithms asynchronously",
    "P0362R0": "Towards support for Heterogeneous Devices in C++ (Concurrency aspects)",
    "P0363R0": "Towards support for Heterogeneous Devices in C++ (Language aspects)",
    "P0364R0": "Report on Exception Handling Lite (Disappointment) from SG14",
    "P0365R0": "Report on SG14, a year later and future directions",
    "P0366R0": "Extending the Transactional Memory Technical Specification with an in_transaction Statemen",
    "P0367R0": "a C++ standard library class to qualify data accesses",
    "P0369R0": "2017-07 Toronto ISO WG21 C++ Standard Meeting information",
    "P0370R0": "Ranges TS Design Updates Omnibus",
    "P0370R1": "Ranges TS Design Updates Omnibus",
    "P0370R2": "Ranges TS Design Updates Omnibus",
    "P0370R3": "Ranges TS Design Updates Omnibus",
    "P0371R0": "Temporarily deprecate memory_order_consume",
    "P0371R1": "Temporarily discourage memory_order_consume",
    "P0372R0": "A type for utf-8 data",
    "P0373R0": "Proposal of File Literals",
    "P0374R0": "Stream parallelism patterns",
    "P0375R0": "[[exhaustive]] attribute for enums",
    "P0376R0": "A Single Generalization of std::invoke, std::apply, and std::visit",
    "P0377R0": "std::integral_constant with a Deduced Value Type",
    "P0379R0": "Why a joining thread from P0206 is a Bad Idea",
    "P0380R0": "A Contract Design",
    "P0380R1": "A Contract Design",
    "P0381R0": "Numeric Width",
    "P0381R1": "Numeric Width",
    "P0382R0": "Comments on P0119: Overload sets as function arguments",
    "P0384R0": "Core Language Working Group \"tentatively ready\" Issues for the June, 2016 (Oulu) meeting",
    "P0385R0": "Static reflection: Rationale, design and evolution",
    "P0385R1": "Static reflection: Rationale, design and evolution",
    "P0385R2": "Static reflection: Rationale, design and evolution",
    "P0386R0": "Inline Variables",
    "P0386R2": "Inline Variables",
    "P0387R0": "Memory Model Issues for Concurrent Data Structures",
    "P0387R1": "Memory Model Issues for Concurrent Data Structures",
    "P0388R0": "Permit conversions to arrays of unknown bound",
    "P0388R1": "Permit conversions to arrays of unknown bound",
    "P0388R2": "Permit conversions to arrays of unknown bound",
    "P0388R3": "Permit conversions to arrays of unknown bound",
    "P0388R4": "Permit conversions to arrays of unknown bound",
    "P0389R0": "template keyword in unqualified-ids",
    "P0390R0": "A Proposal to Add Pointer Cast Functions with Move Semantics to the Standard Library",
    "P0391R0": "Introducing the term \"templated entity\"",
    "P0392R0": "Adapting string_view by filesystem paths",
    "P0393R3": "Making Variant Greater Equal",
    "P0394R4": "Hotel Parallelifornia: terminate() for Parallel Algorithms Exception Handling",
    "P0396R0": "C++ Concepts Active Issues List (Snapshot of Revision 4)",
    "P0397R0": "C++ Standard Library Priority 1 Issues Resolved Directly In Oulu",
    "P0398R0": "Core issue 1518: Explicit default constructors and copy-list-initialization",
    "P0399R0": "Networking TS & Threadpools",
    "P0400R0": "Wording for Order of Evaluation of Function Arguments",
    "P0401R0": "Extensions to the Allocator interface",
    "P0401R1": "Providing size feedback in the Allocator interface",
    "P0401R2": "Providing size feedback in the Allocator interface",
    "P0401R3": "Providing size feedback in the Allocator interface",
    "P0401R4": "Providing size feedback in the Allocator interface",
    "P0401R5": "Providing size feedback in the Allocator interface",
    "P0401R6": "Providing size feedback in the Allocator interface",
    "P0403R0": "Literal suffixes for basic_string_view",
    "P0403R1": "Literal suffixes for basic_string_view",
    "P0404R0": "Matching Types: 404 Syntax Not found",
    "P0405R0": "Wording for Networking TS changes from Kona",
    "P0406R1": "Intrusive Containers",
    "P0407R0": "Allocator-aware basic stringbuf",
    "P0407R1": "Allocator-aware basic stringbuf",
    "P0407R2": "Allocator-aware basic_stringbuf",
    "P0408R0": "Efficient Access to basic stringbuf's Buffer",
    "P0408R1": "Efficient Access to basic stringbuf's Buffer",
    "P0408R2": "Efficient Access to basic stringbuf's Buffer",
    "P0408R3": "Efficient Access to basic_stringbuf's Buffer",
    "P0408R4": "Efficient Access to basic_stringbuf\u2019s Buffer",
    "P0408R5": "Efficient Access to basic_stringbuf\u2019s Buffer",
    "P0408R6": "Efficient Access to basic_stringbuf\u2019s Buffer",
    "P0408R7": "Efficient Access to basic_stringbuf\u2019s Buffer",
    "P0409R0": "Allow lambda capture [=, this]",
    "P0409R1": "Allow lambda capture [=, this]",
    "P0409R2": "Allow lambda capture [=, this]",
    "P0411R0": "Separating Library Requirements and Preconditions",
    "P0412R0": "Benchmarking primitives",
    "P0413R0": "Updating Parallel Execution Policy Names in the Parallelism TS",
    "P0414R0": "Merging shared_ptr changes from Library Fundamentals to C++17",
    "P0414R1": "Merging shared_ptr changes from Library Fundamentals to C++17",
    "P0414R2": "Merging shared_ptr changes from Library Fundamentals to C++17",
    "P0415R0": "Constexpr for std::complex",
    "P0415R1": "Constexpr for std::complex",
    "P0416R0": "Operator Dot (R3)",
    "P0416R1": "Operator Dot (R3)",
    "P0417R0": "C++17 should refer to ISO/IEC 10646 2014 instead of 1994",
    "P0417R1": "C++17 should refer to ISO/IEC 10646 2014 instead of 1994 (R1)",
    "P0418R1": "Fail or succeed: there is no atomic lattice",
    "P0418R2": "Fail or succeed: there is no atomic lattice",
    "P0421R0": "Static class constructor",
    "P0422R0": "Out-of-Thin-Air Execution is Vacuous",
    "P0423R0": "Variable templates for Networking TS traits",
    "P0424R0": "Reconsidering literal operator templates for strings",
    "P0424R1": "Reconsidering literal operator templates for strings",
    "P0424R2": "String literals as non-type template parameters",
    "P0425R0": "Metaprogramming by design, not by accident",
    "P0426R0": "Constexpr for std::char_traits",
    "P0426R1": "Constexpr for std::char_traits",
    "P0428R0": "Familiar template syntax for generic lambdas",
    "P0428R1": "Familiar template syntax for generic lambdas",
    "P0428R2": "Familiar template syntax for generic lambdas",
    "P0429R0": "A Standard flat_map",
    "P0429R1": "A Standard flat_map",
    "P0429R2": "A Standard flat_map",
    "P0429R3": "A Standard flat_map",
    "P0429R4": "A Standard flatmap",
    "P0429R5": "A Standard flat_map",
    "P0429R6": "A Standard flatmap",
    "P0429R7": "A Standard flat_map",
    "P0429R8": "A Standard flat_map",
    "P0429R9": "A Standard flat_map",
    "P0430R0": "File system library on non-POSIX-like operating systems",
    "P0430R1": "File system library on non-POSIX-like operating systems",
    "P0430R2": "File system library on non-POSIX-like operating systems",
    "P0431R0": "Correcting Evaluation Order for C++",
    "P0432R0": "Implicit and Explicit Default Comparison Operators",
    "P0433R0": "Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library",
    "P0433R1": "Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library",
    "P0433R2": "Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library",
    "P0433R3": "Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library",
    "P0434R0": "Portable Interrupt Library",
    "P0435R0": "Resolving LWG Issues re common_type",
    "P0435R1": "Resolving LWG Issues re common_type",
    "P0436R0": "An Extensible Approach to Obtaining Selected Operators",
    "P0436R1": "An Extensible Approach to Obtaining Selected Operators",
    "P0437R0": "Numeric Traits for the Next Standard Library",
    "P0437R1": "Numeric Traits for the Standard Library",
    "P0438R0": "Toward a <random> Technical Specification",
    "P0439R0": "Make memory_order a scoped enumeration",
    "P0440R0": "Floating Point Atomic View",
    "P0440R1": "Floating Point Atomic View",
    "P0441R0": "Ranges: Merging Writable and MoveWritable",
    "P0441R1": "Ranges: Merging Writable and MoveWritable",
    "P0443R0": "A Unified Executors Proposal for C++",
    "P0443R1": "A Unified Executors Proposal for C++",
    "P0443R2": "A Unified Executors Proposal for C++",
    "P0443R3": "A Unified Executors Proposal for C++",
    "P0443R4": "A Unified Executors Proposal for C++",
    "P0443R5": "A Unified Executors Proposal for C++",
    "P0443R6": "A Unified Executors Proposal for C++",
    "P0443R7": "A Unified Executors Proposal for C++",
    "P0443R9": "A Unified Executors Proposal for C++",
    "P0443R10": "A Unified Executors Proposal for C++",
    "P0443R11": "A Unified Executors Proposal for C++",
    "P0443R12": "A Unified Executors Proposal for C++",
    "P0443R13": "A Unified Executors Proposal for C++",
    "P0443R14": "A Unified Executors Proposal for C++",
    "P0444R0": "Unifying suspend-by-call and suspend-by-return",
    "P0445R0": "SG14: Low Latency Meeting Minutes 2016/09/21-2016/10/13",
    "P0446R0": "SG5: Transactional Memory (TM) Meeting Minutes 2016/07/18-2016/10/10",
    "P0447R0": "Introduction of std::colony to the standard library",
    "P0447R1": "Introduction of std::colony to the standard library",
    "P0447R2": "Introduction of std::colony to the standard library",
    "P0447R3": "Introduction of std::colony to the standard library",
    "P0447R4": "Introduction of std::colony to the standard library",
    "P0447R8": "Introduction of std::colony to the standard library",
    "P0447R9": "Introduction of std::colony to the standard library",
    "P0447R10": "Introduction of std::colony to the standard library",
    "P0447R11": "Introduction of std::colony to the standard library",
    "P0447R12": "Introduction of std::colony to the standard library",
    "P0447R13": "Introduction of std::colony to the standard library",
    "P0447R14": "Introduction of std::colony to the standard library",
    "P0447R15": "Introduction of std::hive to the standard library",
    "P0447R16": "Introduction of std::hive to the standard library",
    "P0447R17": "Introduction of std::hive to the standard library",
    "P0447R18": "Introduction of std::hive to the standard library",
    "P0447R19": "Introduction of std::hive to the standard library",
    "P0447R20": "Introduction of std::hive to the standard library",
    "P0447R21": "Introduction of std::hive to the standard library",
    "P0447R22": "Introduction of std::hive to the standard library",
    "P0447R23": "Introduction of std::hive to the standard library",
    "P0447R24": "Introduction of std::hive to the standard library",
    "P0447R25": "Introduction of std::hive to the standard library",
    "P0447R26": "Introduction of std::hive to the standard library",
    "P0448R0": "A strstream replacement using span<charT> as",
    "P0448R1": "A strstream replacement using span<charT> as",
    "P0448R2": "A strstream replacement using span<charT> as buffer",
    "P0448R3": "A strstream replacement using span as buffer",
    "P0448R4": "A strstream replacement using span as buffer",
    "P0451R0": "Future-Proofing Parallel Algorithms Exception Handling",
    "P0452R0": "Binary transform_reduce(): The Missing Overload",
    "P0452R1": "Unifying <numeric> Parallel Algorithms",
    "P0454R0": "Wording for a Minimal mdspan",
    "P0457R0": "String Prefix and Suffix Checking",
    "P0457R1": "String Prefix and Suffix Checking",
    "P0457R2": "String Prefix and Suffix Checking",
    "P0458R0": "Checking for Existence of an Element in Associative Containers",
    "P0458R1": "Checking for Existence of an Element in Associative Containers",
    "P0458R2": "Checking for Existence of an Element in Associative Containers",
    "P0459R0": "C++ Extensions for Ranges, Speculative Combined Proposal Document",
    "P0460R0": "Flat containers wording",
    "P0461R0": "Proposed RCU C++ API",
    "P0461R1": "Proposed RCU C++ API",
    "P0461R2": "Proposed RCU C++ API",
    "P0462R0": "Marking memory order consume Dependency Chains",
    "P0462R1": "Marking memory order consume Dependency Chains",
    "P0463R0": "endian, Just endian",
    "P0463R1": "endian, Just endian",
    "P0464R0": "Revisiting the meaning of \"foo(ConceptName,ConceptName)\"",
    "P0464R1": "Revisiting the meaning of \"foo(ConceptName,ConceptName)\"",
    "P0464R2": "Revisiting the meaning of \"foo(ConceptName,ConceptName)\"",
    "P0465R0": "Procedural Function Interfaces",
    "P0466R0": "Layout-compatibility and Pointer-interconvertibility Traits",
    "P0466R1": "Layout-compatibility and Pointer-interconvertibility Traits",
    "P0466R2": "Layout-compatibility and Pointer-interconvertibility Traits",
    "P0466R3": "Layout-compatibility and Pointer-interconvertibility Traits",
    "P0466R4": "Layout-compatibility and Pointer-interconvertibility Traits",
    "P0466R5": "Layout-compatibility and Pointer-interconvertibility Traits",
    "P0467R0": "Iterator Concerns for Parallel Algorithms",
    "P0467R1": "Iterator Concerns for Parallel Algorithms",
    "P0467R2": "Iterator Concerns for Parallel Algorithms",
    "P0468R0": "A Proposal to Add an Intrusive Smart Pointer to the C++ Standard Library",
    "P0468R1": "An Intrusive Smart Pointer",
    "P0469R0": "Sample in place",
    "P0471R0": "Single argument std::inserter",
    "P0472R0": "Move 'std::monostate' to <utility>",
    "P0473R0": "+ for std::vector concatenation",
    "P0474R0": "Comparison in C++: Basic Facilities",
    "P0475R0": "LWG 2511: guaranteed copy elision for piecewise construction",
    "P0475R1": "LWG 2511: guaranteed copy elision for piecewise construction",
    "P0476R0": "Bit-casting object representations",
    "P0476R1": "Bit-casting object representations",
    "P0476R2": "Bit-casting object representations",
    "P0477R0": "std::monostate_function<>",
    "P0478R0": "Template argument deduction for non-terminal function parameter packs",
    "P0479R0": "Attributes for Likely and Unlikely Branches",
    "P0479R1": "Attributes for Likely and Unlikely Branches",
    "P0479R2": "Attributes for Likely and Unlikely Branches",
    "P0479R4": "Proposed wording for likely and unlikely attributes",
    "P0479R5": "Proposed wording for likely and unlikely attributes",
    "P0480R0": "Explicit type checking with structured bindings",
    "P0480R1": "Structured bindings with explicit types",
    "P0481R0": "Bravely Default",
    "P0482R0": "char8_t: A type for UTF-8 characters and strings",
    "P0482R1": "char8_t: A type for UTF-8 characters and strings",
    "P0482R2": "char8_t: A type for UTF-8 characters and strings",
    "P0482R3": "char8_t: A type for UTF-8 characters and strings (Revision 3)",
    "P0482R4": "char8_t: A type for UTF-8 characters and strings",
    "P0482R5": "char8_t: A type for UTF-8 characters and strings",
    "P0482R6": "`char8_t`: A type for UTF-8 characters and strings (Revision 6)",
    "P0483R0": "Extending Memory Management Tools, And a Bit More",
    "P0483R2": "static_vector",
    "P0484R0": "Enhancing Thread Constructor Attributes",
    "P0484R1": "Enhancing Thread Constructor Attributes",
    "P0485R0": "Amended rules for Partial Ordering of function templates",
    "P0486R0": "for_each_iter algorithm proposal",
    "P0487R0": "Fixing operator>> (basic_istream&, CharT*) (LWG 2499)",
    "P0487R1": "Fixing operator>>(basic_istream&, CharT*) (LWG 2499)",
    "P0488R0": "WG21 Working paper: NB Comments, ISO/IEC CD 14882",
    "P0489R0": "WG21 Working paper: Late Comments on CD 14882",
    "P0490R0": "Core language changes addressing National Body comments for CD C++17",
    "P0492R0": "Proposed Resolution of C++17 National Body Comments for Filesystem",
    "P0492R1": "Proposed Resolution of C++17 National Body Comments for Filesystem",
    "P0492R2": "Proposed Resolution of C++17 National Body Comments for Filesystem",
    "P0493R0": "Atomic maximum/minimum",
    "P0493R1": "Atomic maximum/minimum",
    "P0493R2": "Atomic maximum/minimum",
    "P0493R3": "Atomic maximum/minimum",
    "P0493R4": "Atomic maximum/minimum",
    "P0493R5": "Atomic maximum/minimum",
    "P0494R0": "contiguous_container proposal",
    "P0495R0": "Concurrency Safety in C++ Data Structures",
    "P0497R0": "Fixes to shared_ptr support for arrays",
    "P0500R0": "Resolved Module TS (N4610) Issues",
    "P0501R0": "C++ Module TS Issues List",
    "P0501R1": "C++ Module TS Issues List",
    "P0501R2": "C++ Module TS Issues List",
    "P0501R3": "C++ Module TS Issues List",
    "P0502R0": "Throwing out of a parallel algorithm terminates--but how?",
    "P0503R0": "Correcting library usage of \"literal type\"",
    "P0504R0": "Revisiting in-place tag types for any/optional/variant",
    "P0505R0": "Wording for GB 50",
    "P0506R0": "use string_view for library function parameters instead of const string & / const char *",
    "P0506R1": "use string_view for library function parameters instead of const string & / const char *",
    "P0506R2": "use string_view for library function parameters instead of const string & / const char *",
    "P0507R0": "Core Issue 1343: Sequencing of non-class initialization",
    "P0508R0": "Wording for GB 58",
    "P0509R1": "Updating \"Restrictions on exception handling\"",
    "P0510R0": "Disallowing references, incomplete types, arrays, and empty variants",
    "P0511R0": "Deduction guide for std::array",
    "P0511R1": "Deduction guide for std::array",
    "P0512R0": "Class Template Argument Deduction Assorted NB resolution and issues",
    "P0513R0": "Poisoning the Hash",
    "P0514R0": "Enhancing std::atomic_flag for waiting",
    "P0514R1": "Enhancing std::atomic_flag for waiting",
    "P0514R2": "Efficient waiting for concurrent programs",
    "P0514R3": "Efficient concurrent waiting for C++20",
    "P0514R4": "Efficient concurrent waiting for C++20",
    "P0515R0": "Consistent comparison",
    "P0515R1": "Consistent comparison",
    "P0515R2": "Consistent comparison",
    "P0515R3": "Consistent comparison",
    "P0516R0": "Clarify That shared_future's Copy Operations have Wide Contracts",
    "P0517R0": "Make future_error Constructible",
    "P0518R0": "Allowing copies as arguments to function objects given to parallel algorithms in response to CH11",
    "P0518R1": "Allowing copies as arguments to function objects given to parallel algorithms in response to CH11",
    "P0519R0": "Core Language Working Group \"ready\" Issues for the November, 2016 (Issaquah) meeting",
    "P0520R0": "Core Language Working Group \"tentatively ready\" Issues for the November, 2016 (Issaquah) meeting",
    "P0521R0": "Proposed Resolution for CA 14 (shared_ptr use_count/unique)",
    "P0522R0": "DR: Matching of template template-arguments excludes compatible templates",
    "P0523R0": "Wording for CH 10: Complexity of parallel algorithms",
    "P0523R1": "Wording for CH 10: Complexity of parallel algorithms",
    "P0527R0": "Implicitly move from rvalue references in return statements",
    "P0527R1": "Implicitly move from rvalue references in return statements",
    "P0528R0": "The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange",
    "P0528R1": "The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange",
    "P0528R2": "The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange",
    "P0528R3": "The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange",
    "P0529R0": "Wording changes for proposed Modules TS extensions",
    "P0532R0": "On std::launder()",
    "P0533R0": "constexpr for <cmath> and <cstdlib>",
    "P0533R1": "constexpr for <cmath> and <cstdlib>",
    "P0533R2": "constexpr for <cmath> and <cstdlib>",
    "P0533R3": "constexpr for <cmath> and <cstdlib>",
    "P0533R4": "constexpr for <cmath> and <cstdlib>",
    "P0533R5": "constexpr for <cmath> and <cstdlib>",
    "P0533R6": "constexpr for <cmath> and <cstdlib>",
    "P0533R7": "constexpr for cmath and cstdlib",
    "P0533R8": "constexpr for cmath and cstdlib",
    "P0533R9": "constexpr for cmath and cstdlib",
    "P0534R0": "call/cc (call-with-current-continuation): A low-level API for stackful context switching",
    "P0534R1": "call/cc (call-with-current-continuation): A low-level API for stackful context switching",
    "P0534R2": "call/cc (call-with-current-continuation): A low-level API for stackful context switching",
    "P0534R3": "call/cc (call-with-current-continuation): A low-level API for stackful context switching",
    "P0535R0": "Generalized Unpacking and Parameter Pack Slicing",
    "P0536R0": "Implicit Return Type and Allowing Anonymous Types as Return Values",
    "P0537R0": "Allow Attributes on Template Explicit Instantiations",
    "P0538R0": "A Qualified Replacement for #pragma once",
    "P0539R0": "Wide Integer Class",
    "P0539R1": "A Proposal to add wide_int Template Class",
    "P0539R2": "A Proposal to add wide_int Template Class",
    "P0539R3": "A Proposal to add wide_int Template Class",
    "P0539R4": "A Proposal to add wide_int Template Class",
    "P0539R5": "A Proposal to add wide_int Template Class",
    "P0540R0": "A Proposal to Add split/join of string/string_view to the Standard Library",
    "P0540R1": "A Proposal to Add split/join of string/string_view to the Standard Library",
    "P0541R0": "Post-Increment on Input and Output Iterators",
    "P0541R1": "Ranges TS: Post-Increment on Input and Output Iterators",
    "P0542R0": "Support for contract based programming in C++",
    "P0542R1": "Support for contract based programming in C++",
    "P0542R2": "Support for contract based programming in C++",
    "P0542R3": "Support for contract based programming in C++",
    "P0542R4": "Support for contract based programming in C++",
    "P0542R5": "Support for contract based programming in C++",
    "P0543R0": "Saturation arithmetic",
    "P0543R1": "Saturation arithmetic",
    "P0543R2": "Saturation arithmetic",
    "P0543R3": "Saturation arithmetic",
    "P0544R0": "User Injection of Filesystems",
    "P0545R0": "Supporting offsetof for Stable-layout Classes",
    "P0546R0": "Span - foundation for the future",
    "P0546R1": "Span - foundation for the future",
    "P0546R2": "Span - foundation for the future",
    "P0547R0": "Assorted Object Concept Fixes",
    "P0547R1": "Ranges TS: Assorted Object Concept Fixes",
    "P0547R2": "Ranges TS: Assorted Object Concept Fixes",
    "P0548R0": "common_type and duration",
    "P0548R1": "common_type and duration",
    "P0549R0": "Adjuncts to std::hash",
    "P0549R1": "Adjuncts to std::hash",
    "P0549R2": "Adjuncts to std::hash",
    "P0549R3": "Adjuncts to std::hash",
    "P0549R4": "Adjuncts to std::hash",
    "P0549R5": "Adjuncts to std::hash",
    "P0549R6": "Adjuncts to std::hash",
    "P0549R7": "Adjuncts to std::hash",
    "P0550R0": "Transformation Trait uncvref",
    "P0550R1": "Transformation Trait uncvref",
    "P0550R2": "Transformation Trait remove_cvref",
    "P0551R0": "Thou Shalt Not Specialize std Function Templates!",
    "P0551R1": "Thou Shalt Not Specialize std Function Templates!",
    "P0551R2": "Thou Shalt Not Specialize std Function Templates!",
    "P0551R3": "Thou Shalt Not Specialize std Function Templates!",
    "P0552R0": "enable_if vs. requires",
    "P0553R0": "Bit Operations",
    "P0553R1": "Bit Operations",
    "P0553R2": "Bit operations",
    "P0553R3": "Bit operations",
    "P0553R4": "Bit operations",
    "P0554R0": "Composition of Arithmetic Types",
    "P0554R1": "Composition of Arithmetic Types",
    "P0555R0": "string_view for source_location",
    "P0556R0": "Integral power-of-2 operations",
    "P0556R1": "Integral power-of-2 operations",
    "P0556R2": "Integral power-of-2 operations",
    "P0556R3": "Integral power-of-2 operations",
    "P0557R0": "Concepts: The Future of Generic Programming",
    "P0558R0": "Resolving atomic<T> named base class inconsistencies",
    "P0558R1": "Resolving atomic<T> named base class inconsistencies",
    "P0559R0": "Operating principles for evolving C++",
    "P0560R0": "Class template deduction guides for \"diamond operators\"",
    "P0561R0": "RAII Interface for Deferred Reclamation",
    "P0561R1": "RAII Interface for Deferred Reclamation",
    "P0561R2": "RAII Interface for Deferred Reclamation",
    "P0561R3": "An RAII Interface for Deferred Reclamation",
    "P0561R4": "An RAII Interface for Deferred Reclamation",
    "P0561R5": "An RAII Interface for Deferred Reclamation",
    "P0561R6": "An RAII Interface for Deferred Reclamation",
    "P0562R0": "Initialization List Symmetry",
    "P0562R1": "Initialization List Symmetry",
    "P0562R2": "Trailing Commas in Base-clauses and Ctor-initializers",
    "P0563R0": "Vector Front Operations",
    "P0564R0": "Wording for three-way comparisons",
    "P0565R0": "Prefix for operator as a pack generator and postfix operator[] for pack indexing",
    "P0566R0": "Proposed Wording for Concurrent Data Structures: Hazard Pointer and Read-Copy-Update (RCU)",
    "P0566R1": "Proposed Wording for Concurrent Data Structures: Hazard Pointer and Read-Copy-Update (RCU)",
    "P0566R2": "Proposed Wording for Concurrent Data Structures: Hazard Pointer and Read-Copy-Update (RCU)",
    "P0566R3": "Proposed Wording for Concurrent Data Structures: Hazard Pointer and Read-Copy-Update (RCU)",
    "P0566R4": "Proposed Wording for Concurrent Data Structures: Hazard Pointer and Read-Copy-Update (RCU)",
    "P0566R5": "Proposed Wording for Concurrent Data Structures: Hazard Pointer and Read\u00adCopy\u00adUpdate (RCU)",
    "P0567R0": "Asynchronous managed pointer for Heterogeneous computing",
    "P0567R1": "Asynchronous managed pointer for Heterogeneous computing",
    "P0568R0": "Towards Better Embedded programming support for C++ and an update on the status of SG14, two years later",
    "P0569R0": "SG5: Transactional Memory (TM) Meeting Minutes 2016/07/18-2016/10/10",
    "P0570R0": "SG14: Low Latency Meeting Minutes 2016/12/14-2017/02/01",
    "P0571R0": "Type Requirements for <numeric> Algorithms",
    "P0571R1": "Type Requirements for <numeric> Algorithms",
    "P0571R2": "Type Requirements for <numeric> Algorithms",
    "P0572R0": "bit_sizeof and bit_offsetof",
    "P0572R1": "bit_sizeof and bit_offsetof",
    "P0572R2": "Static reflection of bit fields",
    "P0573R0": "Abbreviated Lambdas for Fun and Profit",
    "P0573R1": "Abbreviated Lambdas for Fun and Profit",
    "P0573R2": "Abbreviated Lambdas for Fun and Profit",
    "P0574R0": "Algorithm Complexity Constraints and Parallel Overloads",
    "P0574R1": "Algorithm Complexity Constraints and Parallel Overloads",
    "P0575R0": "Core Language Working Group \"ready\" Issues for the February, 2016 (Kona) meeting",
    "P0575R1": "Core Language Working Group \"ready\" Issues for the February, 2016 (Kona) meeting",
    "P0575R2": "Core Language Working Group \"ready\" Issues for the February, 2016 (Kona) meeting",
    "P0576R0": "Core Language Working Group \"tentatively ready\" Issues for the February, 2016 (Kona) meeting",
    "P0576R1": "Core Language Working Group \"tentatively ready\" Issues for the February, 2016 (Kona) meeting",
    "P0577R0": "Keep that Temporary!",
    "P0577R1": "Kept-value statement for guard objects",
    "P0578R0": "Static Reflection in a Nutshell",
    "P0578R1": "Static Reflection in a Nutshell",
    "P0579R0": "Constexpr for <experimental/ranges/iterator>",
    "P0579R1": "Constexpr for <experimental/ranges/iterator>",
    "P0581R0": "Standard Library Modules",
    "P0581R1": "Standard Library Modules",
    "P0582R0": "Modules: Contexts of template instantiations and name lookup",
    "P0583R0": "std::byte is the correct name",
    "P0584R0": "Module Interface and Preamble",
    "P0586R0": "Safe integral comparisons",
    "P0586R1": "Safe integral comparisons",
    "P0586R2": "Safe integral comparisons",
    "P0587R0": "Concepts TS revisited",
    "P0588R0": "Simplifying implicit lambda capture",
    "P0588R1": "Simplifying implicit lambda capture",
    "P0589R0": "Tuple-based for loops",
    "P0590R0": "A design static reflection",
    "P0591R0": "Utility functions to implement uses-allocator construction",
    "P0591R1": "Utility functions to implement uses-allocator construction",
    "P0591R2": "Utility functions to implement uses-allocator construction",
    "P0591R3": "Utility functions to implement uses-allocator construction",
    "P0591R4": "Utility functions to implement uses-allocator construction",
    "P0592R0": "To boldly suggest an overall plan for C++20",
    "P0592R1": "To boldly suggest an overall plan for C++23",
    "P0592R2": "To boldly suggest an overall plan for C++23",
    "P0592R3": "To boldly suggest an overall plan for C++23",
    "P0592R4": "To boldly suggest an overall plan for C++23",
    "P0592R5": "To boldly suggest an overall plan for C++26",
    "P0593R0": "What to do with buffers that are not arrays, and undefined behavior thereof?",
    "P0593R1": "Implicit creation of objects for low-level object manipulation",
    "P0593R2": "Implicit creation of objects for low-level object manipulation",
    "P0593R3": "Implicit creation of objects for low-level object manipulation",
    "P0593R4": "Implicit creation of objects for low-level object manipulation",
    "P0593R5": "Implicit creation of objects for low-level object manipulation",
    "P0593R6": "Implicit creation of objects for low-level object manipulation",
    "P0594R0": "Relative comparisons and std::less<T*>",
    "P0595R0": "The \"constexpr\" Operator",
    "P0595R1": "std::is_constant_evaluated()",
    "P0595R2": "`std::is_constant_evaluated`",
    "P0596R0": "std::constexpr_trace and std::constexpr_assert",
    "P0596R1": "Side-effects in constant evaluation: Output and consteval variables",
    "P0597R0": "std::constexpr_vector<T>",
    "P0598R0": "Reflect Through Values Instead of Types",
    "P0599R0": "US140: noxecept for hash functions",
    "P0599R1": "US140: noxecept for hash functions",
    "P0600R0": "applying [[nodiscard]] for C++17",
    "P0600R1": "[[nodiscard]] in the Library",
    "P0601R0": "Establishing a direction for SIMD-enabled functions",
    "P0602R0": "variant and optional should propagate copy/move triviality",
    "P0602R1": "variant and optional should propagate copy/move triviality",
    "P0602R2": "variant and optional should propagate copy/move triviality",
    "P0602R3": "variant and optional should propagate copy/move triviality",
    "P0602R4": "variant and optional should propagate copy/move triviality",
    "P0603R0": "safe memcpy: A simpler implementation primitive for seqlock and friends",
    "P0604R0": "Resolving GB 55, US 84, US 85, US 86",
    "P0606R0": "Concepts Are Ready",
    "P0607R0": "Inline Variables for the Standard Library",
    "P0608R0": "A sane variant converting constructor (LEWG 227)",
    "P0608R1": "A sane variant converting constructor",
    "P0608R2": "A sane variant converting constructor",
    "P0608R3": "A sane variant converting constructor",
    "P0609R0": "Attributes for Structured Bindings",
    "P0609R1": "Attributes for Structured Bindings",
    "P0609R2": "Attributes for Structured Bindings",
    "P0609R3": "Attributes for Structured Bindings",
    "P0610R0": "C++ Standard Library \"Review\" Issues Resolved in Kona",
    "P0611R0": "More Better Operators",
    "P0612R0": "NB comment CH 2: volatile",
    "P0613R0": "NB comment GB15: Resolution of Core Issue 2011",
    "P0614R0": "Range-based for statements with initializer",
    "P0614R1": "Range-based for statements with initializer",
    "P0615R0": "Renaming for structured bindings",
    "P0616R0": "de-pessimize legacy <numeric> algorithms with std::move",
    "P0618R0": "Deprecating <codecvt>",
    "P0619R0": "Reviewing Deprecated Facilities of C++17 for C++20",
    "P0619R1": "Reviewing Deprecated Facilities of C++17 for C++20",
    "P0619R2": "Reviewing Deprecated Facilities of C++17 for C++20",
    "P0619R3": "Reviewing Deprecated Facilities of C++17 for C++20",
    "P0619R4": "Reviewing Deprecated Facilities of C++17 for C++20",
    "P0620R0": "Drafting for class template argument deduction issues",
    "P0621R0": "Ready Ranges TS Issues",
    "P0622R0": "Additional Core Language Working Group \"ready\" and \"tentatively ready\" Issues for the February, 2017 (Kona) meeting",
    "P0623R0": "Final C++17 Parallel Algorithms Fixes",
    "P0624R0": "Default constructible stateless lambdas",
    "P0624R1": "Default constructible stateless lambdas",
    "P0624R2": "Default constructible and assignable stateless lambdas",
    "P0625R0": "C++ Standard Library Issues Resolved Directly In Kona",
    "P0627R0": "Attribute to mark unreachable code",
    "P0627R1": "Attribute to mark unreachable code",
    "P0627R3": "Function to mark unreachable code",
    "P0627R5": "Function to mark unreachable code",
    "P0627R6": "Function to mark unreachable code",
    "P0629R0": "Module interface vs. imiplementation",
    "P0630R0": "To boldly suggest a pub crawl for C++ Toronto",
    "P0631R0": "Math Constants",
    "P0631R1": "Math Constants",
    "P0631R2": "Math Constants",
    "P0631R3": "Math Constants",
    "P0631R4": "Math Constants",
    "P0631R5": "Math Constants",
    "P0631R6": "Math Constants",
    "P0631R7": "Math Constants",
    "P0631R8": "Math Constants",
    "P0632R0": "Proposal of [[uninitialized]] attribute",
    "P0633R0": "Exploring the design space of metaprogramming and reflection",
    "P0634R0": "Down with `typename`!",
    "P0634R1": "Down with `typename`!",
    "P0634R2": "Down with typename!",
    "P0634R3": "Down with typename!",
    "P0635R0": "Add c_array method to std::array",
    "P0636R0": "Changes between C++14 and C++17",
    "P0636R1": "Changes between C++14 and C++17",
    "P0636R2": "Changes between C++14 and C++17",
    "P0636R3": "Changes between C++14 and C++17",
    "P0637R0": "Capture *this with initialize",
    "P0638R0": "Crochemore-Perrin search algorithm for std::search",
    "P0639R0": "Changing attack vector of the constexpr_vector",
    "P0640R0": "User-defined exception information and diagnostic information in exception objects",
    "P0641R0": "Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)",
    "P0641R1": "Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)",
    "P0641R2": "Resolving Core Issue #1331 (const mismatch with defaulted copy constructor)",
    "P0642R0": "Structural Support for C++ Concurrency",
    "P0642R1": "Structural Support for C++ Concurrency",
    "P0642R2": "The Concurrent Invocation Library",
    "P0642R3": "The Concurrent Invocation Library",
    "P0642R4": "The Concurrent Invocation Library",
    "P0643R0": "Omnibus paper:Toronto 2017 meeting",
    "P0644R0": "Forward without forward",
    "P0644R1": "Forward without forward",
    "P0645R0": "Text Formatting",
    "P0645R1": "Text Formatting",
    "P0645R2": "Text Formatting",
    "P0645R3": "Text Formatting",
    "P0645R4": "Text Formatting",
    "P0645R5": "Text Formatting",
    "P0645R7": "Text Formatting",
    "P0645R9": "Text Formatting",
    "P0645R10": "Text Formatting",
    "P0646R0": "Improving the Return Value of Erase-Like Algorithms",
    "P0646R1": "Improving the Return Value of Erase-Like Algorithms I: list/forward list",
    "P0647R0": "Floating point value access for std::ratio",
    "P0647R1": "Floating point value access for std::ratio",
    "P0648R0": "Extending Tuple-like algorithms to Product-Typ",
    "P0649R0": "Other Product-Type algorithms",
    "P0650R0": "C++ Monadic interface",
    "P0650R1": "C++ Monadic interface",
    "P0650R2": "C++ Monadic interface",
    "P0651R0": "Switch the Ranges TS to Use Variable Concepts",
    "P0651R1": "Switch the Ranges TS to Use Variable Concepts",
    "P0652R0": "Concurrent associative data structure with unsynchronized view",
    "P0652R1": "Concurrent associative data structure with unsynchronized view",
    "P0652R2": "Concurrent associative data structure with unsynchronized view",
    "P0652R3": "Concurrent associative data structure with unsynchronized view",
    "P0653R0": "pointer_traits utility to convert to raw pointer",
    "P0653R1": "Utility to convert a pointer to a raw pointer",
    "P0653R2": "Utility to convert a pointer to a raw pointer",
    "P0654R0": "Explicit struct",
    "P0655R0": "visit<R>: Explicit Return Type for visit",
    "P0655R1": "visit<R>: Explicit Return Type for visit",
    "P0656R0": "Reducing <ratio>",
    "P0657R0": "Deprecate Certain Declarations in the Global Namespace",
    "P0657R1": "Deprecate Certain Declarations in the Global Namespace",
    "P0657R2": "Deprecate Certain Declarations in the Global Namespace",
    "P0658R0": "Proposal for adding alias declarations to concepts",
    "P0658R1": "Proposal for adding alias declarations to concepts",
    "P0659R0": "Adding status() to std::future",
    "P0660R0": "A Cooperatively Interruptible Joining Thread",
    "P0660R2": "A Cooperatively Interruptible Joining Thread, Rev 2",
    "P0660R3": "A Cooperatively Interruptible Joining Thread",
    "P0660R4": "A Cooperatively Interruptible Joining Thread",
    "P0660R5": "A Cooperatively Interruptible Joining Thread",
    "P0660R6": "A Cooperatively Interruptible Joining Thread, Rev 6",
    "P0660R7": "Interrupt Tokens and a Joining Thread, Rev 7",
    "P0660R8": "Stop Tokens and a Joining Thread",
    "P0660R9": "Stop Token and Joining Thread",
    "P0660R10": "Stop Token and Joining Thread",
    "P0661R0": "slot_map Container in C++",
    "P0662R0": "Wording for Ranges TS Issue 345 / US-2: Update ranged-for-loop wording",
    "P0663R0": "Ranges TS \"Ready\" Issues for the July 2017 (Toronto) meeting",
    "P0664R0": "Coroutines TS Issues",
    "P0664R1": "Coroutines TS Issues",
    "P0664R2": "C++ Coroutine TS Issues",
    "P0664R3": "C++ Coroutine TS Issues",
    "P0664R4": "C++ Coroutine TS Issues",
    "P0664R5": "C++ Coroutine TS Issues",
    "P0664R6": "C++ Coroutine TS Issues",
    "P0664R7": "C++ Coroutine TS Issues",
    "P0664R8": "C++ Coroutine TS Issues",
    "P0665R0": "Allowing Class Template Specializations in Unrelated Namespaces",
    "P0665R1": "Allowing Class Template Specializations in Associated Namespaces (revision 1)",
    "P0666R0": "C++ Latches and Barriers",
    "P0666R1": "Revised Latches and Barriers for C++20",
    "P0666R2": "Revised Latches and Barriers for C++20",
    "P0667R0": "The future of std::future extensions",
    "P0668R0": "Revising the C++ memory model",
    "P0668R1": "Revising the C++ memory model",
    "P0668R2": "Revising the C++ memory model",
    "P0668R3": "Revising the C++ memory model",
    "P0668R4": "Revising the C++ memory model",
    "P0668R5": "Revising the C++ memory model",
    "P0669R0": "Why We Should Standardize 2D Graphics for C++",
    "P0670R0": "Static reflection of functions",
    "P0670R1": "Static reflection of functions",
    "P0670R2": "Static reflection of functions",
    "P0670R3": "Function reflection",
    "P0670R4": "Function reflection",
    "P0671R0": "Parametric Functions",
    "P0671R1": "Parametric Functions",
    "P0671R2": "Self-explanatory Function Arguments",
    "P0672R0": "Implicit Evaluation of \"auto\" Variables",
    "P0673R0": "Merge Concurrency TS atomic pointers into C++20 working draft",
    "P0674R0": "Extending make_shared to Support Arrays",
    "P0674R1": "Extending make_shared to Support Arrays",
    "P0675R0": "Numeric Traits for Type Composition",
    "P0676R0": "Towards a Good Future",
    "P0678R0": "Business Requrements for Modules",
    "P0679R0": "Forward progress vs. futures and continuations",
    "P0680R0": "SG1 efficiency",
    "P0681R0": "Precise Semantics for Assertions",
    "P0682R0": "Repairing elementary string conversions",
    "P0682R1": "Repairing elementary string conversions",
    "P0683R0": "Default member initializers for bit-fields",
    "P0683R1": "Default member initializers for bit-fields",
    "P0684R0": "C++ Stability, Velocity, and Deployment Plans",
    "P0684R1": "C++ Stability, Velocity, and Deployment Plans",
    "P0684R2": "C++ Stability, Velocity, and Deployment Plans",
    "P0685R0": "SG5: Transactional Memory (TM) Meeting Minutes 2017/01/30-2017/06/05",
    "P0686R0": "SG14: Low Latency Meeting Minutes 2017/03/09-2017/06/14",
    "P0687R0": "Data Movement in C++",
    "P0688R0": "A Proposal to Simplify the Unified Executors Design",
    "P0689R0": "A Word about Modules",
    "P0690R0": "Tearable Atomics",
    "P0690R1": "Tearable Atomics",
    "P0691R0": "Integrating Concepts: \"Open\" items for consideration",
    "P0692R0": "Access Specifiers and Specializations",
    "P0692R1": "Access Checking on Specializations",
    "P0694R0": "Function declarations using concepts",
    "P0695R0": "Alternative concepts",
    "P0696R0": "Remove abbreviated functions and template-introduction syntax from the Concepts TS",
    "P0696R1": "Remove abbreviated functions and template-introduction syntax from the Concepts TS",
    "P0697R0": "Clarifying the status of feature test macros",
    "P0698R0": "C++ Standard Library Issues to be moved in Toronto",
    "P0699R0": "C++ Standard Library Issues Resolved Directly In Toronto",
    "P0700R0": "Alternatives to operator dot",
    "P0701R0": "Back to the std2::future",
    "P0701R1": "Back to the std2::future",
    "P0701R2": "Back to the std2::future Part II",
    "P0702R0": "Language support for Constructor Template Argument Deduction",
    "P0702R1": "Language support for Constructor Template Argument Deduction",
    "P0703R0": "Networking TS Issues",
    "P0704R0": "Fixing const-qualified pointers to members",
    "P0704R1": "Fixing const-qualified pointers to members",
    "P0705R0": "Implicit and Explicit conversions",
    "P0706R0": "Efficient headers for modules (or not)",
    "P0707R0": "Metaclasses",
    "P0707R1": "Metaclasses: Generative C++",
    "P0707R2": "Metaclasses: Generative C++",
    "P0707R3": "Metaclasses: Generative C++",
    "P0707R4": "Metaclasses: Generative C++",
    "P0709R0": "Zero-overhead deterministic exceptions: Throwing values",
    "P0709R1": "Zero-overhead deterministic exceptions: Throwing values",
    "P0709R2": "Zero-overhead deterministic exceptions: Throwing values",
    "P0709R3": "Zero-overhead deterministic exceptions: Throwing values",
    "P0709R4": "Zero-overhead deterministic exceptions: Throwing values",
    "P0710R0": "Core Language Working Group \"ready\" Issues for the July, 2017 (Toronto) meeting",
    "P0710R1": "Core Language Working Group \"ready\" Issues for the July, 2017 (Toronto) meeting",
    "P0711R0": "Core Language Working Group \"tentatively ready\" Issues for the July, 2017 (Toronto) meeting",
    "P0712R0": "Implementing language support for compile-time programming",
    "P0713R0": "Identifying Module Source Code",
    "P0713R1": "Identifying Module Source",
    "P0714R0": "Identically Named Namespaces and non-Exported Symbols",
    "P0715R0": "Exporting Using Directives",
    "P0716R0": "Unified concept definition syntax",
    "P0717R0": "Semantic constraint matching for concepts",
    "P0717R1": "Semantic constraint matching for concepts",
    "P0718R0": "Revising atomic_shared_ptr for C++20",
    "P0718R2": "Revising atomic_shared_ptr for C++20",
    "P0721R0": "Exporting Using Declarations",
    "P0722R0": "Controlling destruction in delete expressions",
    "P0722R1": "Efficient sized delete for variable sized classes",
    "P0722R2": "Efficient sized delete for variable sized classes",
    "P0722R3": "Efficient sized delete for variable sized classes",
    "P0723R0": "Response to \"Clarifying the status of feature test macros\"",
    "P0724R0": "Merge the Concepts TS Working Draft into the C++20 working draft",
    "P0725R0": "Remove the requirement for constrained-type-specifiers to be deduced to the same type from the Concepts TS",
    "P0726R0": "Does the Concepts TS Improve on C++17?",
    "P0727R0": "Core Issue 1299: Temporary objects vs temporary expressions",
    "P0728R0": "Wording for Networking PDTS ballot comment 005",
    "P0729R0": "Proposed wording for Networking TS NB comment GB 9",
    "P0730R0": "Options for addressing requires-clause syntax ambiguities",
    "P0730R1": "Options for addressing requires-clause syntax ambiguities",
    "P0731R0": "Module Interface Imports",
    "P0732R0": "Class Types in Non-Type Template Parameters",
    "P0732R1": "Class Types in Non-Type Template Parameters",
    "P0732R2": "Class Types in Non-Type Template Parameters",
    "P0734R0": "Wording Paper, C++ extensions for Concepts",
    "P0735R0": "Interaction of memory_order_consume with release sequences",
    "P0735R1": "Interaction of memory_order_consume with release sequences",
    "P0736R0": "Nameless parameters and unutterable specializations",
    "P0736R1": "Nameless parameters and unutterable specializations",
    "P0737R0": "Execution Context of Execution Agents",
    "P0738R0": "I Stream, You Stream, We All Stream for istream_iterator",
    "P0738R1": "I Stream, You Stream, We All Stream for istream_iterator",
    "P0738R2": "I Stream, You Stream, We All Stream for istream_iterator",
    "P0739R0": "Some improvements to class template argument deduction integration into the standard library",
    "P0740R0": "Ranges TS \"Immediate\" Issues from the July 2017 (Toronto) meeting",
    "P0742R0": "Wording for Networking PDTS ballot comment resolutions",
    "P0745R0": "Concepts in-place syntax",
    "P0745R1": "Concepts in-place syntax",
    "P0746R0": "Wording for Networking PDTS ballot comment 011 (US-10)",
    "P0747R0": "Wording for Networking PDTS ballot comments 026 (GB-15) and 027 (GB-16)",
    "P0747R1": "Wording for Networking PDTS ballot comment 026 (GB-15), but not 027 (GB-16)",
    "P0748R0": "Wording for Networking PDTS ballot comments on reentrancy",
    "P0749R0": "Namespace Pervasiveness & Modules",
    "P0750R0": "Consume",
    "P0750R1": "Consume",
    "P0752R0": "std::vector Destruction Order",
    "P0753R0": "Manipulators for C++ Synchronized Buffered Ostream",
    "P0753R1": "Manipulators for C++ Synchronized Buffered Ostream",
    "P0753R2": "Manipulators for C++ Synchronized Buffered Ostream",
    "P0754R0": "<version>",
    "P0754R1": "<version>",
    "P0754R2": "`<version>`",
    "P0756R0": "Lambda syntax should be more liberal in what it accepts",
    "P0757R0": "regex_iterator should be iterable",
    "P0758R0": "Implicit conversion traits and utility functions",
    "P0758R1": "Implicit conversion traits and utility functions",
    "P0759R0": "fpos Requirements",
    "P0759R1": "fpos requirements",
    "P0761R0": "Executors Design Document",
    "P0761R1": "Executors Design Document",
    "P0761R2": "Executors Design Document",
    "P0762R0": "Concerns about expected<T, E> from the Boost.Outcome peer review",
    "P0766R0": "Fixing small-ish functionality gaps in constraints",
    "P0766R1": "Fixing small-ish functionality gaps in constraints",
    "P0767R0": "Expunge POD",
    "P0767R1": "Deprecate POD",
    "P0768R0": "Library Support for the Spaceship (Comparison) Operaton",
    "P0768R1": "Library Support for the Spaceship (Comparison) Operator",
    "P0769R0": "Add shift to <algorithm>",
    "P0769R1": "Add shift to <algorithm>",
    "P0769R2": "Add shift to `<algorithm>`",
    "P0770R0": "A Proposal to Specify Behavior in Case of Exception Allocation Failure",
    "P0771R0": "std::function move operations should be noexcept",
    "P0771R1": "std::function move constructor should be noexcept",
    "P0772R0": "Execution-Agent Local Storage",
    "P0772R1": "Execution Agent Local Storage",
    "P0773R0": "Towards meaningful fancy pointers",
    "P0774R0": "Module-decl location",
    "P0775R0": "module partitions",
    "P0776R0": "Rebase the Concurrency TS onto C++17 Standard",
    "P0776R1": "Rebase the Parallelism TS onto the C++17 Standard",
    "P0777R0": "Treating Unnecessary decay",
    "P0777R1": "Treating Unnecessary decay",
    "P0778R0": "Module Names",
    "P0779R0": "Proposing operator try() (with added native C++ macro functions!)",
    "P0780R0": "Allow pack expansion in lambda init-capture",
    "P0780R1": "Allow pack expansion in lambda init-capture",
    "P0780R2": "Allow pack expansion in lambda init-capture",
    "P0781R0": "A Modern C++ Signature for main",
    "P0782R0": "A Case for Simplifying/Improving Natural Syntax Concepts",
    "P0782R1": "Constraining Concepts Overload Sets",
    "P0782R2": "Constraining Concepts Overload Sets",
    "P0783R0": "Continuations without overcomplicating the future",
    "P0784R0": "Standard containers and constexpr",
    "P0784R1": "Standard containers and constexpr",
    "P0784R2": "Standard containers and constexpr",
    "P0784R3": "More constexpr containers",
    "P0784R4": "More constexpr containers",
    "P0784R5": "More constexpr containers",
    "P0784R6": "More constexpr containers",
    "P0784R7": "More constexpr containers",
    "P0785R0": "Runtime-sized arrays and a C++ wrapper",
    "P0786R0": "SuccessOrFailure, ValuedOrError and ValuedOrNone types",
    "P0786R1": "ValuedOrError and ValueOrNone types",
    "P0787R0": "Proclaimed Ownership",
    "P0788R0": "Standard Library Specification in a Concepts and Contracts World",
    "P0788R1": "Standard Library Specification in a Concepts and Contracts World",
    "P0788R2": "Standard Library Specification in a Concepts and Contracts World",
    "P0788R3": "Standard Library Specification in a Concepts and Contracts World",
    "P0789R0": "Range Adaptors and Utilities",
    "P0789R1": "Range Adaptors and Utilities",
    "P0789R2": "Range Adaptors and Utilities",
    "P0789R3": "Range Adaptors and Utilities",
    "P0790R0": "Effect of `operator<=>` on the C++ Standard Library",
    "P0790R1": "Effect of operator<=> on the C++ Standard Library",
    "P0790R2": "Effect of operator<=> on the C++ Standard Library",
    "P0791R0": "Concepts are Adjectives, not Nouns",
    "P0792R0": "function_ref: a non-owning reference to a Callable",
    "P0792R1": "function_ref: a non-owning reference to a Callable",
    "P0792R2": "function_ref: a non-owning reference to a Callable",
    "P0792R3": "function_ref: a non-owning reference to a Callable",
    "P0792R4": "function_ref: a non-owning reference to a Callable",
    "P0792R5": "function_ref: a non-owning reference to a Callable",
    "P0792R6": "function_ref: a non-owning reference to a Callable",
    "P0792R7": "function_ref: a non-owning reference to a Callable",
    "P0792R8": "function_ref: a non-owning reference to a Callable",
    "P0792R9": "function_ref: a non-owning reference to a Callable",
    "P0792R10": "function_ref: a non-owning reference to a Callable",
    "P0792R11": "function_ref: a non-owning reference to a Callable",
    "P0792R12": "function_ref: a non-owning reference to a Callable",
    "P0792R13": "function_ref: a non-owning reference to a Callable",
    "P0792R14": "function_ref: a non-owning reference to a Callable",
    "P0793R0": "SG5: Transactional Memory (TM) Meeting Minutes 2017/06/19-2017/10/09",
    "P0794R0": "SG14: Low Latency Meeting Minutes 2017/08/09-2017/10/11",
    "P0795R0": "From Vulkan with love: a plea to reconsider the Module Keyword to be contextual",
    "P0796R0": "Supporting Heterogeneous & Distributed Computing Through Affinity",
    "P0796R1": "Supporting Heterogeneous & Distributed Computing Through Affinity",
    "P0796R2": "Supporting Heterogeneous & Distributed Computing Through Affinity",
    "P0796R3": "Supporting Heterogeneous & Distributed Computing Through Affinity",
    "P0797R0": "Exception Handling in Parallel STL Algorithms",
    "P0797R1": "Handling Concurrent Exceptions with Executors",
    "P0797R2": "Handling Concurrent Exceptions with Executors",
    "P0798R0": "Monadic operations for std::optional",
    "P0798R2": "Monadic operations for std::optional",
    "P0798R3": "Monadic operations for std::optional",
    "P0798R4": "Monadic operations for std::optional",
    "P0798R6": "Monadic operations for std::optional",
    "P0798R8": "Monadic operations for std::optional",
    "P0799R0": "Programming vulnerabilities for C++ (part of WG23 N0746)",
    "P0799R1": "Vulnerability descriptions for the programming language C++",
    "P0800R0": "The Concepts TS improves upon C++",
    "P0801R0": "Extensions for Disambiguation Tags",
    "P0802R0": "Applying Concepts to the Standard Library",
    "P0803R0": "Endian Library Request for Comments",
    "P0804R0": "Impact of the Modules TS on the C++ tools ecosystem",
    "P0805R0": "Comparing containers",
    "P0805R1": "Comparing Containers",
    "P0805R2": "Comparing Containers",
    "P0806R0": "Deprecate Implicit Capture of thist",
    "P0806R1": "Deprecate implicit capture of this via [=]",
    "P0806R2": "Deprecate implicit capture of this via [=]",
    "P0807R0": "An Adjective Syntax for Concepts",
    "P0808R0": "Ranges Naming",
    "P0809R0": "Comparing Unordered Containers",
    "P0810R0": "constexpr in Practice",
    "P0811R0": "Well-behaved interpolation for numbers and pointers",
    "P0811R1": "Well-behaved interpolation for numbers and pointers",
    "P0811R2": "Well-behaved interpolation for numbers and pointers",
    "P0811R3": "Well-behaved interpolation for numbers and pointers",
    "P0812R0": "copy-list-initialization is inherently un-=",
    "P0813R0": "construct() shall Return the Replaced Address",
    "P0813R1": "construct() shall Return the Replaced Address",
    "P0814R0": "hash_combine() Again",
    "P0814R2": "hash_combine() Again",
    "P0815R0": "C++ Standard Library Issues to be moved in Albuquerque",
    "P0816R0": "No More Nested Namespaces in Library Design",
    "P0817R0": "Core Language Working Group \"ready\" Issues for the November, 2017 (Albuquerque) meeting",
    "P0818R0": "Core Language Working Group \"tentatively ready\" Issues for the November, 2017 (Albuquerque) meeting",
    "P0818R1": "Core Language Working Group \"tentatively ready\" Issues for the November, 2017 (Albuquerque) meeting",
    "P0819R0": "Formally Supporting Feature Macros",
    "P0820R0": "Feedback on P0214R5",
    "P0820R1": "Feedback on P0214r6",
    "P0820R2": "Feedback on P0214",
    "P0820R3": "Feedback on P0214",
    "P0820R4": "Feedback on P0214",
    "P0821R0": "Teaching Concepts TS Online",
    "P0822R0": "C++ Modules Are a Tooling Opportunity",
    "P0824R0": "Summary of SG14 discussion on <system_error>: towards exception-less error handling",
    "P0824R1": "Summary of SG14 discussion on <system_error>",
    "P0825R0": "A friendlier tuple get",
    "P0825R1": "A friendlier tuple get",
    "P0826R0": "SFINAE-friendly std::bind",
    "P0827R0": "General-Purpose Constant Value Type",
    "P0828R0": "Elastic Integers",
    "P0828R1": "Elastic Integers",
    "P0829R0": "Freestanding proposal",
    "P0829R1": "Freestanding Proposal",
    "P0829R2": "Freestanding Proposal",
    "P0829R3": "Freestanding Proposal",
    "P0829R4": "Freestanding Proposal",
    "P0830R0": "Using Concepts and requires in the C++ Standard Library",
    "P0831R0": "Keep alias syntax extendable",
    "P0832R0": "Module TS Does Not Support Intended Use Case",
    "P0834R0": "Lifting overload sets into objects",
    "P0835R0": "Adopt SD-6 feature macros into the C++20 working draft",
    "P0836R0": "Introduce Parallelism to the Ranges TS",
    "P0836R1": "Introduce Parallelism to the Ranges TS",
    "P0837R0": "Ruminations on modular macros",
    "P0838R0": "A conditional transform algorithm for C++",
    "P0839R0": "Recursive Lambdas",
    "P0840R0": "Lamguage support for empty objects",
    "P0840R1": "Language support for empty objects",
    "P0840R2": "Language support for empty objects",
    "P0841R0": "Modules at scale",
    "P0842R0": "Unknown Exports by Example",
    "P0843R0": "fixed_capacity_vector",
    "P0843R1": "fixed_capacity_vector",
    "P0843R2": "static_vector",
    "P0843R3": "static_vector",
    "P0843R4": "static_vector",
    "P0843R5": "static_vector",
    "P0843R6": "static_vector",
    "P0843R7": "inplace_vector",
    "P0843R8": "inplace_vector",
    "P0843R9": "inplace_vector",
    "P0843R10": "inplace_vector",
    "P0843R11": "inplace_vector",
    "P0843R12": "inplace_vector",
    "P0844R0": "Type functions and beyond",
    "P0845R0": "Common Subset of C++03 and C++17: Binders",
    "P0846R0": "ADL and Function Templates that are not Visible",
    "P0847R0": "Deducing this",
    "P0847R1": "Deducing this",
    "P0847R2": "Deducing this",
    "P0847R4": "Deducing this",
    "P0847R5": "Deducing this",
    "P0847R6": "Deducing this",
    "P0847R7": "Deducing this",
    "P0848R0": "Conditionally Trivial Special Member Functions",
    "P0848R1": "Conditionally Trivial Special Member Functions",
    "P0848R2": "Conditionally Trivial Special Member Functions",
    "P0848R3": "Conditionally Trivial Special Member Functions",
    "P0849R0": "auto(x): DECAY_COPY in the language",
    "P0849R1": "auto(x): decay-copy in the language",
    "P0849R2": "auto(x): decay-copy in the language",
    "P0849R3": "auto(x): decay-copy in the language",
    "P0849R4": "auto(x): decay-copy in the language",
    "P0849R5": "auto(x): decay-copy in the language",
    "P0849R6": "auto(x): decay-copy in the language",
    "P0849R7": "auto(x): decay-copy in the language",
    "P0849R8": "auto(x): decay-copy in the language",
    "P0851R0": "simd<T> is neither a product type nor a container type",
    "P0856R0": "Restrict Access Property for mdspan and span",
    "P0857R0": "Wording for \"functionality gaps in constraints\"",
    "P0858R0": "Constexpr iterator requirements",
    "P0859R0": "Core Issue 1581: When are constexpr member functions defined?",
    "P0860R0": "Atomic Access Property for span and mdspan",
    "P0860R1": "Atomic Access Property for mdspan",
    "P0863R0": "Fixing the partial_order comparison algorithm",
    "P0863R1": "Fixing the partial_order comparison algorithm",
    "P0864R0": "C++ Standard Library Issues Resolved Directly In Albuquerque",
    "P0866R0": "Response to \u201cFibers under the magnifying glass\u201d",
    "P0867R0": "'Module Interface' is Misleading",
    "P0868R0": "Selected RCU Litmus Tests",
    "P0868R1": "Selected RCU Litmus Tests",
    "P0868R2": "Selected RCU Litmus Tests",
    "P0870R0": "A proposal for a type trait to detect narrowing conversions",
    "P0870R1": "A proposal for a type trait to detect narrowing conversions",
    "P0870R2": "A proposal for a type trait to detect narrowing conversions",
    "P0870R3": "A proposal for a type trait to detect narrowing conversions",
    "P0870R4": "A proposal for a type trait to detect narrowing conversions",
    "P0870R5": "A proposal for a type trait to detect narrowing conversions",
    "P0872R0": "Discussion Summary: Applying Concepts to the Standard Library",
    "P0873R0": "A plea for a consistent, terse and intuitive declaration syntax",
    "P0873R1": "A plea for a consistent, terse and intuitive declaration syntax",
    "P0874R0": "Syntax to anonymously refer to the current declaration contexts",
    "P0875R0": "WG21 2017-11 Albuquerque Record of Discussion",
    "P0876R0": "fibers without scheduler",
    "P0876R2": "fiber_context - fibers without scheduler",
    "P0876R3": "fiber_handle - fibers without scheduler",
    "P0876R5": "fiber_context - fibers without scheduler",
    "P0876R6": "fiber_context - fibers without scheduler",
    "P0876R8": "fiber_context - fibers without scheduler",
    "P0876R9": "fiber_context - fibers without scheduler",
    "P0876R10": "fiber_context - fibers without scheduler",
    "P0876R11": "fiber_context - fibers without scheduler",
    "P0876R12": "fiber_context - fibers without scheduler",
    "P0876R13": "fiber_context - fibers without scheduler",
    "P0876R14": "fiber_context - fibers without scheduler",
    "P0876R15": "fiber_context - fibers without scheduler",
    "P0876R16": "fiber_context - fibers without scheduler",
    "P0877R0": "A proposal for modular macros",
    "P0878R0": "Subobjects copy elision",
    "P0879R0": "Constexpr for swap and swap related functions",
    "P0880R0": "Numbers interaction",
    "P0880R1": "Numbers interaction",
    "P0880R2": "Numbers interaction",
    "P0881R0": "A Proposal to add stack trace library",
    "P0881R1": "A Proposal to add stack trace library",
    "P0881R2": "A Proposal to add stack trace library",
    "P0881R3": "A Proposal to add stacktrace library",
    "P0881R4": "A Proposal to add stacktrace library",
    "P0881R5": "A Proposal to add stacktrace library",
    "P0881R6": "A Proposal to add stacktrace library",
    "P0881R7": "A Proposal to add stacktrace library",
    "P0882R0": "User-defined Literals for std::filesystem::path",
    "P0883R0": "Fixing Atomic Initialization",
    "P0883R1": "Fixing Atomic Initialization",
    "P0883R2": "Fixing Atomic Initialization",
    "P0884R0": "Extending the noexcept Policy",
    "P0886R0": "The assume aligned attribute",
    "P0887R0": "The identity metafunction",
    "P0887R1": "The identity metafunction",
    "P0888R0": "C++ Standard Library Issues to be moved in Jacksonville",
    "P0889R0": "Ultimate copy elision",
    "P0889R1": "Ultimate copy elision",
    "P0891R0": "Let strong_order Truly Be a Customization Point!",
    "P0891R1": "Everyone Deserves a Little Order",
    "P0891R2": "Make `strong_order` a Customization Point!",
    "P0892R0": "explicit(bool)",
    "P0892R1": "explicit(bool)",
    "P0892R2": "`explicit(bool)`",
    "P0893R0": "Chaining Comparisons",
    "P0893R1": "Chaining Comparisons",
    "P0894R0": "`realloc()` for C++",
    "P0894R1": "realloc() for C++",
    "P0895R0": "Renaming cell<> to latest<>",
    "P0896R0": "Merging the Ranges TS",
    "P0896R1": "Merging the Ranges TS",
    "P0896R2": "The One Ranges Proposal",
    "P0896R3": "The One Ranges Proposal",
    "P0896R4": "The One Ranges Proposal",
    "P0897R0": "Supporting offsetof for All Classes",
    "P0898R0": "Standard Library Concepts",
    "P0898R1": "Standard Library Concepts",
    "P0898R2": "Standard Library Concepts",
    "P0898R3": "Standard Library Concepts",
    "P0899R0": "LWG 3016 is Not a Defect",
    "P0899R1": "LWG 3016 is Not a Defect",
    "P0900R0": "An Ontology for Properties of mdspan",
    "P0901R0": "Size feedback in operator new",
    "P0901R1": "Size feedback in operator new",
    "P0901R2": "Size feedback in operator new",
    "P0901R3": "Size feedback in operator new",
    "P0901R4": "Size feedback in operator new",
    "P0901R5": "Size feedback in operator new",
    "P0901R6": "Size feedback in operator new",
    "P0901R7": "Size feedback in operator new",
    "P0901R8": "Size feedback in operator new",
    "P0901R9": "Size feedback in operator new",
    "P0901R10": "Size feedback in operator new",
    "P0901R11": "Size feedback in operator new",
    "P0902R0": "Move-only iterators",
    "P0903R0": "Define basic_string_view(nullptr) and basic_string(nullptr)",
    "P0903R1": "Define basic_string_view(nullptr)",
    "P0903R2": "Define basic_string_view(nullptr)",
    "P0904R0": "A strawman Future API",
    "P0905R0": "Symmetry for spaceship",
    "P0905R1": "Symmetry for spaceship",
    "P0906R0": "Improvement suggestions for the Modules TS",
    "P0906R1": "Improvement suggestions for the Modules TS",
    "P0907R0": "Signed Integers are Two\u2019s Complement",
    "P0907R1": "Signed Integers are Two\u2019s Complement",
    "P0907R2": "Signed Integers are Two\u2019s Complement",
    "P0907R3": "Signed Integers are Two\u2019s Complement",
    "P0907R4": "Signed Integers are Two\u2019s Complement",
    "P0908R0": "Offsetof for Pointers to Members",
    "P0909R0": "Module TS Supports Legacy Integration",
    "P0911R0": "Rebase the Coroutines TS onto the C++17 Standard",
    "P0911R1": "Rebase the Coroutines TS onto the C++17 Standard",
    "P0912R0": "Merge Coroutines TS into C++20 working draft",
    "P0912R1": "Merge Coroutines TS into C++20 working draft",
    "P0912R2": "Merge Coroutines TS into C++20 working draft",
    "P0912R3": "Merge Coroutines TS into C++20 working draft",
    "P0912R4": "Merge Coroutines TS into C++20 working draft",
    "P0912R5": "Merge Coroutines TS into C++20 working draft",
    "P0913R0": "Add symmetric coroutine control transfer",
    "P0913R1": "Add symmetric coroutine control transfer",
    "P0914R0": "Add parameter preview to coroutine promise constructor",
    "P0914R1": "Add parameter preview to coroutine promise constructor",
    "P0915R0": "Concept-constrained auto",
    "P0916R0": "Naming implementation-defined simd_abi tag types",
    "P0917R0": "Making operator?: overloadable",
    "P0917R1": "Making operator?: overloadable",
    "P0917R2": "Making operator?: overloadable",
    "P0917R3": "Making operator?: overloadable",
    "P0918R0": "More simd<> Operations",
    "P0918R1": "More simd<> Operations",
    "P0918R2": "More simd<> Operations",
    "P0919R0": "Heterogeneous lookup for unordered containers",
    "P0919R1": "Heterogeneous lookup for unordered containers",
    "P0919R2": "Heterogeneous lookup for unordered containers",
    "P0919R3": "Heterogeneous lookup for unordered containers",
    "P0920R0": "Precalculated hash values in lookup",
    "P0920R1": "Precalculated hash values in lookup",
    "P0920R2": "Precalculated hash values in lookup",
    "P0921R0": "Standard Library Compatibility Promises",
    "P0921R2": "Standard Library Compatibility",
    "P0922R0": "LEWG wishlist for EWG",
    "P0923R0": "Modules: Dependent ADL",
    "P0923R1": "Modules:Dependent ADL",
    "P0924R0": "Modules: Context-Sensitive Keyword",
    "P0924R1": "Modules:Context-Sensitive Keyword",
    "P0925R0": "Modules: Unqualified Using Declarations",
    "P0927R0": "Towards A (Lazy) Forwarding Mechanism for C++",
    "P0927R1": "Towards A (Lazy) Forwarding Mechanism for C++",
    "P0927R2": "Towards A (Lazy) Forwarding Mechanism for C++",
    "P0928R0": "Mitigating Speculation Attacks in C++",
    "P0928R1": "Mitigating Spectre v1 Attacks in C++",
    "P0929R0": "Checking for abstract class types",
    "P0929R1": "Checking for abstract class types",
    "P0929R2": "Checking for abstract class types",
    "P0930R0": "Semifying Awaitables",
    "P0931R0": "Structured bindings with polymorphic lambas",
    "P0932R0": "Tightening the constraints on std::function",
    "P0932R1": "Tightening the constraints on std::function",
    "P0933R0": "Runtime type introspection with std::exception ptr",
    "P0933R1": "Runtime type introspection with std::exception_ptr",
    "P0934R0": "A Modest Proposal: Fixing ADL",
    "P0935R0": "Eradicating unnecessarily explicit default constructors from the standard library",
    "P0936R0": "Bind Returned/Initialized Objects to the Lifetime of Parameters",
    "P0937R0": "SG5: Transactional Memory (TM) Meeting Minutes 2017/10/23-2018/1/29",
    "P0938R0": "SG14: Low Latency Meeting Minutes 2017/12/13-2018/01/10",
    "P0939R0": "Direction for ISO C++",
    "P0939R1": "Directions for ISO C++",
    "P0939R2": "Direction for ISO C++",
    "P0939R3": "Direction for ISO C++",
    "P0939R4": "Direction for ISO C++",
    "P0940R0": "Concurrency TS is growing: Concurrent Utilities and Data Structures",
    "P0940R1": "Concurrency TS is growing: Concurrent Utilities and Data Structures",
    "P0940R2": "Concurrency TS is growing: Concurrent Utilities and Data Structures",
    "P0940R3": "Concurrency TS is growing: Concurrent Utilities and Data Structures",
    "P0941R0": "Integrating feature-test macros into the C++ WD",
    "P0941R1": "Integrating feature-test macros into the C++ WD",
    "P0941R2": "Integrating feature-test macros into the C++ WD",
    "P0942R0": "Introducing a <smart_ptr> header",
    "P0943R0": "Support C atomics in C++",
    "P0943R1": "Support C atomics in C++",
    "P0943R2": "Support C atomics in C++",
    "P0943R3": "Support C atomics in C++",
    "P0943R4": "Support C atomics in C++",
    "P0943R5": "Support C atomics in C++",
    "P0943R6": "Support C atomics in C++",
    "P0944R0": "Contiguous Ranges",
    "P0945R0": "Generalizing alias declarations",
    "P0946R0": "Towards consistency between <=> and other comparison operators",
    "P0947R0": "Another take on Modules",
    "P0947R1": "Another take on Modules",
    "P0949R0": "Adding support for type-based metaprogramming to the standard library",
    "P0952R0": "A new specification for std::generate_canonical",
    "P0952R1": "A new specification for std::generate_canonical",
    "P0952R2": "A new specification for std::generate_canonical",
    "P0953R0": "constexpr reflexpr",
    "P0953R1": "constexpr reflexpr",
    "P0953R2": "constexpr reflexpr",
    "P0954R0": "What do we want to do with reflection?",
    "P0955R0": "Modules and macros",
    "P0956R0": "Answers to concept syntax suggestions",
    "P0957R0": "PFA: A Generic, Extendable and Efficient Solution for Polymorphic Programming",
    "P0957R1": "PFA: A Generic, Extendable and Efficient Solution for Polymorphic Programming",
    "P0957R2": "PFA: A Generic, Extendable and Efficient Solution for Polymorphic Programming",
    "P0957R3": "PFA: A Generic, Extendable and Efficient Solution for Polymorphic Programming",
    "P0957R4": "PFA: A Generic, Extendable and Efficient Solution for Polymorphic Programming",
    "P0957R5": "Proxy: A Polymorphic Programming Library",
    "P0957R6": "Proxy: A Polymorphic Programming Library",
    "P0957R7": "Proxy: A Polymorphic Programming Library",
    "P0957R8": "Proxy: A Polymorphic Programming Library",
    "P0957R9": "Proxy: A Polymorphic Programming Library",
    "P0958R0": "Networking TS changes to support proposed Executors TS",
    "P0958R1": "Networking TS changes to support proposed Executors TS",
    "P0958R2": "Networking TS changes to support proposed Executors TS",
    "P0958R3": "Networking TS changes to support proposed Executors TS",
    "P0959R0": "A Proposal for a Universally Unique Identifier Library",
    "P0959R1": "A Proposal for a Universally Unique Identifier Library",
    "P0959R2": "A Proposal for a Universally Unique Identifier Library",
    "P0960R0": "Allow initializing aggregates from a parenthesized list of values",
    "P0960R1": "Allow initializing aggregates from a parenthesized list of values",
    "P0960R2": "Allow initializing aggregates from a parenthesized list of values",
    "P0960R3": "Allow initializing aggregates from a parenthesized list of values",
    "P0961R0": "Relaxing the structured bindings customization point finding rules",
    "P0961R1": "Relaxing the structured bindings customization point finding rules",
    "P0962R0": "Relaxing the range-for loop customization point finding rules",
    "P0962R1": "Relaxing the range-for loop customization point finding rules",
    "P0963R0": "Structured binding declaration as a condition",
    "P0963R1": "Structured binding declaration as a condition",
    "P0963R2": "Structured binding declaration as a condition",
    "P0964R0": "Finding the right set of traits for simd<T>",
    "P0964R1": "Finding the right set of traits for simd<T>",
    "P0964R2": "Finding the right set of traits for simd<T>",
    "P0965R0": "Initializers of objects with automatic and dynamic storage duration have funny inconsistencies",
    "P0966R0": "string::reserve Should Not Shrink",
    "P0966R1": "string::reserve Should Not Shrink",
    "P0968R0": "Core Language Working Group \"tentatively ready\" Issues for the March, 2018 (Jacksonville) meeting",
    "P0969R0": "Allow structured bindings to accessible members",
    "P0970R0": "Better, Safer Range Access Customization Points",
    "P0970R1": "Better, Safer Range Access Customization Points",
    "P0972R0": "<chrono> zero(), min(), and max() should be noexcept",
    "P0973R0": "Coroutines TS Use Cases and Design Issues",
    "P0974R0": "A Function Returning Whether An Underlying Type Value Is a Valid Enumerator of a Given Enumeration",
    "P0975R0": "Impact of coroutines on current and upcoming library facilities",
    "P0976R0": "The Evils of Paradigms",
    "P0977R0": "Remember the Vasa!",
    "P0978R0": "A Response to \"P0973r0: Coroutines TS Use Cases and Design Issues\"",
    "P0980R0": "Making std::string constexpr",
    "P0980R1": "Making `std::string` constexpr",
    "P0981R0": "Halo: coroutine Heap Allocation eLision Optimization: the joint response",
    "P0982R0": "Weaken Release Sequences",
    "P0982R1": "Weaken release sequences",
    "P0983R0": "Plan of Record for Making C++ Modules Available in C++ Standards",
    "P0984R0": "All (*)()-Pointers Replaced by Ideal Lambdas",
    "P0985R0": "LWG Chair post-meeting report",
    "P0985R1": "LWG Chair post-meeting report",
    "P0985R2": "LWG Chair post-meeting report",
    "P0985R3": "LWG Chair post-meeting report",
    "P0985R4": "LWG Chair post-meeting report",
    "P0986R0": "Comparison of Modules Proposals",
    "P0987R0": "polymorphic_allocator<byte> instead of type-erasure",
    "P0987R1": "polymorphic_allocator instead of type-erasure",
    "P0987R2": "polymorphic_allocator instead of type-erasure",
    "P0988R0": "Ruminations on 2D graphics in the C++ International Standard",
    "P0989R0": "Standardizing Extended Integers",
    "P0990R0": "Rebuttal of Implementation Concerns for Bit Entanglement",
    "P0991R0": "Comparison of Stackful Coroutine Proposals",
    "P0992R0": "Translation and evaluation",
    "P0993R0": "Value-based Reflection",
    "P0994R0": "String View Conversion for Function Arguments",
    "P0995R0": "Improving atomic_flag",
    "P0995R1": "Improving atomic_flag",
    "P0996R1": "Rebase Library Fundamentals TS on C++17",
    "P0997R0": "Retire Pernicious Language Constructs in Module Contexts",
    "P0999R0": "More Natural Arithmetic in C++",
    "P04116R0": "Completing support for emotive programming in C++",
    "P1000R0": "C++ IS schedule",
    "P1000R1": "C++ IS schedule",
    "P1000R2": "C++ IS schedule",
    "P1000R3": "C++ IS schedule",
    "P1000R4": "C++ IS schedule",
    "P1000R5": "C++ IS schedule",
    "P1000R6": "C++ IS schedule",
    "P1001R0": "Target Vectorization Policies from Parallelism V2 TS to C++20",
    "P1001R1": "Target Vectorization Policies from Parallelism V2 TS to C++20",
    "P1001R2": "Target Vectorization Policies from Parallelism V2 TS to C++20",
    "P1002R0": "Try-catch blocks in constexpr functions",
    "P1002R1": "Try-catch blocks in constexpr functions",
    "P1003R0": "C++ Standard Library Issues Resolved Directly In Jacksonville",
    "P1004R0": "Making std::vector constexpr",
    "P1004R1": "Making std::vector constexpr",
    "P1004R2": "Making `std::vector` constexpr",
    "P1005R0": "namespace std { namespace fs = filesystem; }",
    "P1005R1": "namespace std { namespace fs = filesystem; }",
    "P1006R0": "Constexpr in std::pointer_traits",
    "P1006R1": "Constexpr in std::pointer_traits",
    "P1007R0": "std::assume_aligned",
    "P1007R1": "std::assume_aligned",
    "P1007R2": "std::assume_aligned",
    "P1007R3": "std::assume_aligned",
    "P1008R0": "Prohibit aggregate types with user-declared constructors",
    "P1008R1": "Prohibit aggregates with user-declared constructors",
    "P1009R0": "Array size deduction in new-expressions",
    "P1009R1": "Array size deduction in new-expressions",
    "P1009R2": "Array size deduction in new-expressions",
    "P1010R0": "Container support for implicit lifetime types",
    "P1010R1": "Container support for implicit lifetime types",
    "P1011R0": "Constant Pointer View - std::as_const Strikes Back!",
    "P1012R0": "Ternary Right Fold Expression",
    "P1012R1": "Ternary Right Fold Expression",
    "P1013R0": "Explicit concept expressions",
    "P1013R1": "Explicit concept expressions",
    "P1014R0": "A Unit Type for C++",
    "P1015R0": "WG21 2018-03 Jacksonville Record of Discussion",
    "P1016R0": "A few additional type manipulation utilities",
    "P1017R0": "Executors should be variadic",
    "P1018R0": "Evolution status after Jacksonville 2018",
    "P1018R1": "Evolution status after Rapperswil 2018",
    "P1018R2": "Evolution status after San Diego 2018",
    "P1018R3": "Evolution status after Kona 2019",
    "P1018R4": "Evolution status after Cologne 2019",
    "P1018R5": "Language Evolution status after Belfast 2019",
    "P1018R6": "Language Evolution status after Prague 2020",
    "P1018R7": "C++ Language Evolution status - pandemic edition - 2020/03\u20132020/10",
    "P1018R8": "C++ Language Evolution status - pandemic edition \u2013 2020/11-2021/01",
    "P1018R9": "C++ Language Evolution status - pandemic edition - 2021/01\u20132021/03",
    "P1018R10": "C++ Language Evolution status - pandemic edition - 2021/04",
    "P1018R11": "C++ Language Evolution status - pandemic edition - 2021/05",
    "P1018R12": "C++ Language Evolution status - pandemic edition \u2013 2021/06-2021/08",
    "P1018R13": "C++ Language Evolution status - pandemic edition \u2013 2021/06-2021/08",
    "P1018R14": "C++ Language Evolution status - pandemic edition - 2021/09-2022/01",
    "P1018R15": "C++ Language Evolution status - pandemic edition \u2013 2022/01-2022/02",
    "P1018R16": "C++ Language Evolution status - pandemic edition \u2013 2022/02-2022/06",
    "P1018R17": "C++ Language Evolution status - pandemic edition - 2022/06-2022/07",
    "P1018R18": "C++ Language Evolution status - pandemic edition \u2013 2022/07-2022/11",
    "P1018R19": "C++ Language Evolution status",
    "P1019R0": "Integrating Executors with Parallel Algorithms",
    "P1019R1": "Integrating Executors with Parallel Algorithms",
    "P1019R2": "Integrating Executors with Parallel Algorithms",
    "P1020R0": "Smart pointer creation with default initialization",
    "P1020R1": "Smart pointer creation with default initialization",
    "P1021R0": "Extensions to Class Template Argument Deduction",
    "P1021R1": "Filling holes in Class Template Argument Deduction",
    "P1021R2": "Filling holes in Class Template Argument Deduction",
    "P1021R3": "Filling holes in Class Template Argument Deduction",
    "P1021R4": "Filling holes in Class Template Argument Deduction",
    "P1021R5": "Filling holes in Class Template Argument Deduction",
    "P1021R6": "Filling holes in Class Template Argument Deduction",
    "P1022R0": "Material for 2018 JAX Discussions of Hazard Pointer and Read-Copy-Update (RCU)",
    "P1023R0": "constexpr comparison operators for std::array",
    "P1024R0": "Usability Enhancements for std::span",
    "P1024R1": "Usability Enhancements for std::span",
    "P1024R2": "Usability Enhancements for std::span",
    "P1024R3": "Usability Enhancements for `std::span`",
    "P1025R0": "Update The Reference To The Unicode Standard",
    "P1025R1": "Update The Reference To The Unicode Standard",
    "P1026R0": "A call for a Data Persistence (iostream v2) study group",
    "P1026R1": "A call for an `Elsewhere Memory' study group",
    "P1028R0": "SG14 status_code and standard error object for P0709 Zero-overhead deterministic exceptions",
    "P1028R1": "status_code and standard error object for P0709 Zero-overhead deterministic exceptions",
    "P1028R2": "SG14 status_code and standard error object for P0709 Zero-overhead deterministic exceptions",
    "P1028R3": "SG14 status_code and standard error object",
    "P1028R4": "SG14 status_code and standard error object",
    "P1028R5": "SG14 status_code and standard error object",
    "P1028R6": "SG14 status_code and standard error object",
    "P1029R0": "SG14 [[move_relocates]]",
    "P1029R1": "[[move_relocates]]",
    "P1029R2": "move = relocates",
    "P1029R3": "move = bitcopies",
    "P1030R0": "std::filesystem::path_view",
    "P1030R1": "std::filesystem::path_view",
    "P1030R2": "std::filesystem::path_view",
    "P1030R3": "std::filesystem::path_view",
    "P1030R4": "std::filesystem::path_view",
    "P1030R5": "std::filesystem::path_view",
    "P1030R6": "std::filesystem::path_view",
    "P1031R0": "Low level file i/o library",
    "P1031R1": "Low level file i/o library",
    "P1031R2": "Low level file i/o library",
    "P1032R0": "Misc constexpr bits",
    "P1032R1": "Misc constexpr bits",
    "P1033R0": "Rangify the uninitialised memory algorithms!",
    "P1033R1": "Rangify the uninitialised memory algorithms!",
    "P1035R0": "Input range adaptors",
    "P1035R1": "Input range adaptors",
    "P1035R2": "Input range adaptors",
    "P1035R3": "Input range adaptors",
    "P1035R4": "Input range adaptors",
    "P1035R5": "Input Range Adaptors",
    "P1035R6": "Input Range Adaptors",
    "P1035R7": "Input Range Adaptors",
    "P1037R0": "Deep Integration of the Ranges TS",
    "P1039R0": "I got you, FAM: Flexible Array Members for C++",
    "P1040R0": "std::embed",
    "P1040R1": "std::embed",
    "P1040R2": "std::embed",
    "P1040R3": "std::embed",
    "P1040R4": "std::embed",
    "P1040R5": "std::embed and #depend",
    "P1040R6": "std::embed and #depend",
    "P1041R0": "Make char16_t/char32_t string literals be UTF-16/32",
    "P1041R1": "Make char16_t/char32_t string literals be UTF-16/32",
    "P1041R3": "Make char16_t/char32_t string literals be UTF-16/32",
    "P1041R4": "Make char16_t/char32_t string literals be UTF-16/32",
    "P1042R0": "__VA_OPT__ wording clarifications",
    "P1042R1": "__VA_OPT__ wording clarifications",
    "P1043R0": "Narrow contracts in string_view versus P0903R1",
    "P1044R0": "std::async() in an Executors World",
    "P1045R0": "constexpr Function Parameters",
    "P1045R1": "constexpr Function Parameters",
    "P1046R0": "Automatically Generate More Operators",
    "P1046R1": "Automatically Generate More Operators",
    "P1046R2": "Automatically Generate More Operators",
    "P1048R0": "A proposal for a type trait to detect scoped enumerations",
    "P1048R1": "A proposal for a type trait to detect scoped enumerations",
    "P1050R0": "Fractional Numeric Type",
    "P1050R1": "Fractional Numeric Type",
    "P1051R0": "std::experimental::expected LWG design issues",
    "P1052R0": "Modules, Macros, and Build Systems",
    "P1053R0": "Future-proofing continuations for executors",
    "P1053R1": "Future-proofing continuations for executors",
    "P1054R0": "A Unified Futures Proposal for C++",
    "P1055R0": "A Modest Executor Proposal",
    "P1056R0": "Add coroutine task type",
    "P1056R1": "Add lazy coroutine (coroutine task) type",
    "P1059R0": "Adapting Asio to use std::expected",
    "P1061R0": "Structured Bindings can introduce a Pack",
    "P1061R1": "Structured Bindings can introduce a Pack",
    "P1061R2": "Structured Bindings can introduce a Pack",
    "P1061R3": "Structured Bindings can introduce a Pack",
    "P1061R4": "Structured Bindings can introduce a Pack",
    "P1061R5": "Structured Bindings can introduce a Pack",
    "P1061R6": "Structured Bindings can introduce a Pack",
    "P1061R7": "Structured Bindings can introduce a Pack",
    "P1061R8": "Structured Bindings can introduce a Pack",
    "P1062R0": "Diet Graphics",
    "P1063R0": "Core Coroutines",
    "P1063R1": "Core Coroutines",
    "P1063R2": "Core Coroutines",
    "P1064R0": "Allowing Virtual Function Calls in Constant Expressions",
    "P1065R0": "constexpr INVOKE",
    "P1065R1": "constexpr INVOKE",
    "P1065R2": "constexpr _`INVOKE`_",
    "P1066R0": "How to catch an exception_ptr without even try-ing",
    "P1066R1": "How to catch an exception_ptr without even try-ing",
    "P1067R0": "C++ Dependency Management: Package Consumption vs Development",
    "P1068R0": "Vector API for random number generation",
    "P1068R1": "Vector API for random number generation",
    "P1068R2": "Vector API for random number generation",
    "P1068R3": "Vector API for random number generation",
    "P1068R4": "Vector API for random number generation",
    "P1068R5": "Vector API for random number generation",
    "P1068R6": "Vector API for random number generation",
    "P1068R7": "Vector API for random number generation",
    "P1068R8": "Vector API for random number generation",
    "P1068R9": "Vector API for random number generation",
    "P1068R10": "Vector API for random number generation",
    "P1068R11": "Vector API for random number generation",
    "P1069R0": "Refining standard library support for Class Template Argument Deduction",
    "P1069R1": "Inferencing heap objects",
    "P1070R0": "SG5: Transactional Memory (TM) Meeting Minutes 2018/04/09",
    "P1071R0": "SG14: Low Latency Meeting Minutes 2018/04/11- 2018/05/02",
    "P1072R0": "Default Initialization for basic_string",
    "P1072R1": "Optimized Initialization for basic_string and vector",
    "P1072R2": "basic_string::resize_default_init",
    "P1072R3": "basic_string::resize_default_init",
    "P1072R4": "basic_string::resize_default_init",
    "P1072R5": "basic_string::resize_default_init",
    "P1072R6": "basic_string::resize_and_overwrite",
    "P1072R7": "basic_string::resize_and_overwrite",
    "P1072R8": "basic_string::resize_and_overwrite",
    "P1072R9": "basic_string::resize_and_overwrite",
    "P1072R10": "basic_string::resize_and_overwrite",
    "P1073R0": "constexpr! functions",
    "P1073R1": "constexpr! functions",
    "P1073R2": "Immediate functions",
    "P1073R3": "Immediate functions",
    "P1074R0": "CWG defect Defined Behavior of Invalid Pointers",
    "P1076R0": "Editorial clause reorganization",
    "P1076R1": "Editorial clause reorganization",
    "P1077R0": "Allowing Virtual Destructors to be \u201cTrivial\u201d",
    "P1079R0": "A minimal solution to the concepts syntax problems",
    "P1080R0": "SG16: Unicode meeting summaries 2018/03/28 - 2018/04/25",
    "P1081R0": "On empty structs in the standard library",
    "P1082R0": "C++ Standard Library Issues to be moved in Rapperswil",
    "P1083R0": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R1": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R2": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R3": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R4": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R5": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R6": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R7": "Move resource_adaptor from Library TS to the C++ WP",
    "P1083R8": "Move resource_adaptor from Library TS to the C++ WP",
    "P1084R0": "Today's return-type-requirements Are Insufficient",
    "P1084R1": "Today's return-type-requirements Are Insufficient",
    "P1084R2": "Today's return-type-requirements Are Insufficient",
    "P1085R0": "Should Span be Regular?",
    "P1085R1": "Should Span be Regular?",
    "P1085R2": "Should Span be Regular?",
    "P1086R0": "Natural Syntax: Keep It Simple",
    "P1087R0": "Modules for Standard C++",
    "P1089R0": "Sizes Should Only span Unsigned",
    "P1089R2": "Sizes Should Only span Unsigned",
    "P1090R0": "Aggregate initialization in the presence of deleted constructors",
    "P1091R0": "Extending structured bindings to be more like variable declarations",
    "P1091R1": "Extending structured bindings to be more like variable declarations",
    "P1091R2": "Extending structured bindings to be more like variable declarations",
    "P1091R3": "Extending structured bindings to be more like variable declarations",
    "P1093R0": "Is undefined behaviour preserved?",
    "P1094R0": "Nested Inline Namespaces",
    "P1094R1": "Nested Inline Namespaces",
    "P1094R2": "Nested Inline Namespaces",
    "P1095R0": "Zero overhead deterministic failure - A unified mechanism for C and C++",
    "P1096R0": "Simplify the customization point for structured bindings",
    "P1097R0": "Named character escapes",
    "P1097R1": "Named character escapes",
    "P1097R2": "Named character escapes",
    "P1099R0": "Using Enum",
    "P1099R2": "Using Enum",
    "P1099R3": "Using Enum",
    "P1099R4": "Using Enum",
    "P1099R5": "Using Enum",
    "P1100R0": "Efficient composition with DynamicBuffer",
    "P1101R0": "Vector Length Agnostic SIMD",
    "P1102R0": "Down with ()!",
    "P1102R1": "Down with ()!",
    "P1102R2": "Down with ()!",
    "P1103R0": "Merging Modules",
    "P1103R1": "Merging Modules",
    "P1103R2": "Merging Modules",
    "P1103R3": "Merging Modules",
    "P1105R0": "Leaving no room for a lower-level language: A C++ Subset",
    "P1105R1": "Leaving no room for a lower-level language: A C++ Subset",
    "P1108R0": "web_view",
    "P1108R1": "web_view",
    "P1108R2": "web_view",
    "P1108R3": "web_view",
    "P1108R4": "web_view",
    "P1109R0": "WG21 2018-06 Rapperswil Record of Discussion",
    "P1109R1": "WG21 2018-06 Rapperswil Record of Discussion",
    "P1110R0": "A placeholder with no name",
    "P1111R0": "Resolutions to NB Comments on the Parallelism TS v2",
    "P1112R0": "Language support for class layout control",
    "P1112R1": "Language support for class layout control",
    "P1112R2": "Language support for class layout control",
    "P1112R3": "Language support for class layout control",
    "P1112R4": "Language support for class layout control",
    "P1112R5": "Language support for class layout control",
    "P1113R0": "Core Language Working Group \"ready\" Issues for the June, 2018 (Rapperswil) meeting",
    "P1114R0": "Core Language Working Group \"tentatively ready\" Issues for the June, 2018 (Rapperswil) meeting",
    "P1115R0": "Improving the Return Value of Erase-Like Algorithms II: Free erase/erase if",
    "P1115R1": "Improving the Return Value of Erase-Like Algorithms II: Free erase/erase if",
    "P1115R2": "Improving the Return Value of Erase-Like Algorithms II: Free erase/erase if",
    "P1115R3": "Improving the Return Value of Erase-Like Algorithms II: Free erase/erase_if",
    "P1116R0": "Re-Gaining Exclusive Ownership from shared_ptrs",
    "P1118R0": "Concat and Split on simd<> objects",
    "P1119R0": "ABI for std::hardware_{constructive,destructive}_interference_size",
    "P1120R0": "Consistency improvements for <=> and other comparison operators",
    "P1121R0": "Hazard Pointers: Proposed Interface and Wording for Concurrency TS 2",
    "P1121R1": "Hazard Pointers: Proposed Interface and Wording for Concurrency TS 2",
    "P1121R2": "Hazard Pointers: Proposed Interface and Wording for Concurrency TS 2",
    "P1121R3": "Hazard Pointers: Proposed Interface and Wording for Concurrency TS 2",
    "P1122R0": "Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)",
    "P1122R1": "Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)",
    "P1122R2": "Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)",
    "P1122R3": "Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)",
    "P1122R4": "Proposed Wording for Concurrent Data Structures: Read-Copy-Update (RCU)",
    "P1123R0": "Editorial Guidance for merging P0019r8 and P0528r3",
    "P1128R0": "Summer 2018 WG21 Batavia LWG Meeting Information",
    "P1130R1": "Module Resource Requirement Propagation",
    "P1131R0": "Core Issue 2292: simple-template-id is ambiguous between class-name and type-name",
    "P1131R1": "Core Issue 2292: simple-template-id is ambiguous between class-name and type-name",
    "P1131R2": "Core Issue 2292: simple-template-id is ambiguous between class-name and type-name",
    "P1132R0": "out_ptr - a scalable output pointer abstraction",
    "P1132R1": "out_ptr - a scalable output pointer abstraction",
    "P1132R2": "out_ptr - a scalable output pointer abstraction",
    "P1132R3": "out_ptr - a scalable output pointer abstraction",
    "P1132R4": "out_ptr - a scalable output pointer abstraction",
    "P1132R5": "out_ptr - a scalable output pointer abstraction",
    "P1132R6": "out_ptr - a scalable output pointer abstraction",
    "P1132R7": "out_ptr - a scalable output pointer abstraction",
    "P1132R8": "out_ptr - a scalable output pointer abstraction",
    "P1133R0": "Networking TS Associations For Call Wrappers",
    "P1135R0": "The C++20 Synchronization Library",
    "P1135R1": "The C++20 Synchronization Library",
    "P1135R2": "The C++20 Synchronization Library",
    "P1135R3": "The C++20 Synchronization Library",
    "P1135R4": "The C++20 Synchronization Library",
    "P1135R5": "The C++20 Synchronization Library",
    "P1135R6": "The C++20 Synchronization Library",
    "P1136R0": "2018-09 Bellevue ad-hoc meeting information",
    "P1137R0": "SG16: Unicode meeting summaries 2018/05/16 - 2018/06/20",
    "P1138R0": "Deprecating ATOMIC_VAR_INIT",
    "P1139R0": "Address wording issues related to ISO 10646",
    "P1139R1": "Address wording issues related to ISO 10646",
    "P1139R2": "Address wording issues related to ISO 10646",
    "P1141R0": "Yet another approach for constrained declarations",
    "P1141R1": "Yet another approach for constrained declarations",
    "P1141R2": "Yet another approach for constrained declarations",
    "P1142R0": "Thoughts on a conservative terse syntax for constraints",
    "P1143R0": "Adding the `[[constinit]]` attribute",
    "P1143R1": "Adding the constinit keyword",
    "P1143R2": "Adding the `constinit` keyword",
    "P1144R0": "Object relocation in terms of move plus destroy",
    "P1144R1": "Object relocation in terms of move plus destroy",
    "P1144R2": "Object relocation in terms of move plus destroy",
    "P1144R3": "Object relocation in terms of move plus destroy",
    "P1144R4": "Object relocation in terms of move plus destroy",
    "P1144R5": "Object relocation in terms of move plus destroy",
    "P1144R6": "Object relocation in terms of move plus destroy",
    "P1144R7": "std::is_trivially_relocatable",
    "P1144R8": "std::is_trivially_relocatable",
    "P1144R9": "std::is_trivially_relocatable",
    "P1144R10": "std::is_trivially_relocatable",
    "P1144R11": "std::is_trivially_relocatable",
    "P1145R0": "Buffer Sequence Adaptors",
    "P1147R0": "Printing `volatile` Pointers",
    "P1147R1": "Printing `volatile` Pointers",
    "P1148R0": "Cleaning up Clause 20",
    "P1149R0": "Constexpr regex",
    "P1152R0": "Deprecating volatile",
    "P1152R1": "Deprecating volatile",
    "P1152R2": "Deprecating volatile",
    "P1152R3": "Deprecating volatile",
    "P1152R4": "Deprecating volatile",
    "P1153R0": "Copying volatile subobjects is not trivial",
    "P1154R0": "Type traits for structural comparison",
    "P1154R1": "Type traits for structural comparison",
    "P1154R2": "Type traits for structural comparison",
    "P1155R0": "More implicit moves",
    "P1155R1": "More implicit moves",
    "P1155R2": "More implicit moves",
    "P1155R3": "More implicit moves",
    "P1156R0": "Merged Modules and Tooling",
    "P1157R0": "Multi-argument constrained-parameter",
    "P1158R0": "Concept-defined placeholder types",
    "P1159R0": "Type Erased Iterators for modern C++",
    "P1160R0": "Add Test Polymorphic Memory Resource to the Standard Library",
    "P1160R1": "Add Test Polymorphic Memory Resource to the Standard Library",
    "P1161R0": "Deprecate uses of the comma operator in subscripting expressions",
    "P1161R1": "Deprecate uses of the comma operator in subscripting expressions",
    "P1161R2": "Deprecate uses of the comma operator in subscripting expressions",
    "P1161R3": "Deprecate uses of the comma operator in subscripting expressions",
    "P1163R0": "Explicitly Implicifying explicit Constructors",
    "P1164R0": "Make create_directory() Intuitive",
    "P1164R1": "Make create_directory() intuitive",
    "P1165R0": "Fixing allocator usage for operator+(basic_string)",
    "P1165R1": "Make stateful allocator propagation more consistent for operator+(basic_string)",
    "P1166R0": "What do we need from a linear algebra library?",
    "P1167R0": "Improving function templates with Class Template Argument Deduction",
    "P1168R0": "How to make Terse Notation soar with Class Template Argument Deduction",
    "P1169R0": "static operator()",
    "P1169R1": "static operator()",
    "P1169R2": "static operator()",
    "P1169R3": "static operator()",
    "P1169R4": "static operator()",
    "P1170R0": "Overload sets as function parameters",
    "P1171R0": "Synchronously waiting on asynchronous operations",
    "P1172R0": "The Concept of Memory Allocator",
    "P1172R1": "The Concept of Memory Allocator",
    "P1175R0": "A simple and practical optional reference for C++",
    "P1177R0": "Package Ecosystem Plan",
    "P1177R1": "Package Ecosystem Plan",
    "P1178R0": "C++ Compile",
    "P1179R0": "Lifetime safety: Preventing common dangling",
    "P1179R1": "Lifetime safety: Preventing common dangling",
    "P1180R0": "Response to P1156",
    "P1181R0": "Proposing unless",
    "P1182R0": "New names for the power-of-2 templates (and their header)",
    "P1184R0": "A Module Mapper",
    "P1184R1": "A Module Mapper",
    "P1184R2": "A Module Mapper",
    "P1185R0": "<=> != ==",
    "P1185R1": "<=> != ==",
    "P1185R2": "`<=> != ==`",
    "P1186R0": "When do you actually use `<=>`?",
    "P1186R1": "When do you actually use `<=>`?",
    "P1186R2": "When do you actually use `<=>`?",
    "P1186R3": "When do you actually use `<=>`?",
    "P1187R0": "A type trait for std::compare_3way()'s type",
    "P1188R0": "Library utilities for `<=>`",
    "P1189R0": "Adding `<=>` to library",
    "P1190R0": "I did not order this! Why is it on my bill?",
    "P1191R0": "Adding `operator<=>` to types that are not currently comparable",
    "P1192R0": "Experience report - integrating Executors with Parallel Algorithms",
    "P1192R1": "Experience report - integrating Executors with Parallel Algorithms",
    "P1193R0": "Explicitly Specified Returns for (Implicit) Conversions",
    "P1194R0": "The Compromise Executors Proposal: A lazy simplification of P0443",
    "P1195R0": "Making <system_error> constexpr",
    "P1196R0": "Value-based std::error_category comparison",
    "P1197R0": "A non-allocating overload of error_category::message()",
    "P1198R0": "Adding error_category::failed()",
    "P1199R0": "A simple proposal for unifying generic and object-oriented programming",
    "P1200R0": "High noon for the 2D Graphics proposal",
    "P1201R0": "Variant direct comparisons",
    "P1202R0": "Asymmetric fences",
    "P1202R1": "Asymmetric Fences",
    "P1202R2": "Asymmetric Fences",
    "P1202R3": "Asymmetric Fences",
    "P1202R4": "Asymmetric Fences",
    "P1202R5": "Asymmetric Fences",
    "P1203R0": "Modular main()",
    "P1204R0": "Canonical Project Structure",
    "P1205R0": "Teleportation via co_await",
    "P1206R0": "Range constructors for standard containers and views",
    "P1206R1": "ranges::to: A function to convert any range to a container",
    "P1206R2": "ranges::to: A function to convert any range to a container",
    "P1206R3": "ranges::to: A function to convert any range to a container",
    "P1206R4": "Conversions from ranges to containers",
    "P1206R5": "Conversions from ranges to containers",
    "P1206R6": "Conversions from ranges to containers",
    "P1206R7": "Conversions from ranges to containers",
    "P1207R0": "Movability of Single-pass Iterators",
    "P1207R1": "Movability of Single-pass Iterators",
    "P1207R2": "Movability of Single-pass Iterators",
    "P1207R3": "Movability of Single-pass Iterators",
    "P1207R4": "Movability of Single-pass Iterators",
    "P1208R0": "Adopt source_location from Library Fundamentals V3 for C++20",
    "P1208R1": "Adopt source_location from Library Fundamentals V3 for C++20",
    "P1208R3": "Source-Code Information Capture",
    "P1208R4": "Adopt source location from Library Fundamentals V3 for C++20",
    "P1208R5": "Adopt source location from Library Fundamentals V3 for C++20",
    "P1208R6": "Adopt source location from Library Fundamentals V3 for C++20",
    "P1209R0": "Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20",
    "P1210R0": "Completing the Rebase of Library Fundamentals, Version 3, Working Draft",
    "P1212R0": "Modules and Freestanding",
    "P1213R0": "Global Module Fragment is Unnecessary",
    "P1213R1": "Global Module Fragment Is Unnecessary",
    "P1214R0": "Pointer to Member Functions and Member Objects are just Callables!",
    "P1217R0": "Out-of-thin-air, revisited, again",
    "P1217R1": "Out-of-thin-air, revisited, again",
    "P1217R2": "Out-of-thin-air, revisited, again",
    "P1218R0": "Redefinitions in Legacy Imports",
    "P1219R0": "Homogeneous variadic function parameters",
    "P1219R1": "Homogeneous variadic function parameters",
    "P1219R2": "Homogeneous variadic function parameters",
    "P1220R0": "Controlling When Inline Functions are Emitted",
    "P1221R0": "Parametric Expressions",
    "P1221R1": "Parametric Expressions",
    "P1222R0": "A Standard flat_set",
    "P1222R1": "A Standard flatset",
    "P1222R2": "A Standard flat_set",
    "P1222R3": "A Standard flat_set",
    "P1222R4": "A Standard flat_set",
    "P1223R0": "find_backward",
    "P1223R1": "find_backward",
    "P1223R2": "find_backward",
    "P1223R3": "find_last",
    "P1223R4": "find_last",
    "P1223R5": "find_last",
    "P1224R0": "C++ Standard Library Issues to be moved in San Diego",
    "P1225R0": "Feedback on 2D Graphics",
    "P1227R0": "Signed size() functions",
    "P1227R1": "Signed ssize() functions, unsigned size() functions",
    "P1227R2": "Signed ssize() functions, unsigned size() functions",
    "P1228R1": "A proposal to add an efficient string concatenation routine to the Standard Library",
    "P1229R0": "Labelled Parameters",
    "P1230R0": "Recursive Type Template Instantiation",
    "P1231R0": "Proposal for Study Group: C++ Education",
    "P1232R0": "Integrating executors with the standard library through customization",
    "P1233R0": "Shift-by-negative in shift_left and shift_right",
    "P1233R1": "Shift-by-negative in shift_left and shift_right",
    "P1235R0": "Implicit constexpr",
    "P1236R0": "Alternative Wording for P0907R4 Signed Integers are Two's Complement",
    "P1236R1": "Alternative Wording for P0907R4 Signed Integers are Two's Complement",
    "P1237R0": "SG16: Unicode meeting summaries 2018/07/11 - 2018/10/03",
    "P1238R0": "SG16: Unicode Direction",
    "P1238R1": "SG16: Unicode Direction",
    "P1239R0": "Placed Before",
    "P1240R0": "Scalable Reflection in C++",
    "P1240R1": "Scalable Reflection in C++",
    "P1240R2": "Scalable Reflection",
    "P1241R0": "In support of merging coroutines into C++20",
    "P1242R0": "Single-file modules with the Atom semantic properties rule",
    "P1242R1": "Single-file modules with the Atom semantic properties rule",
    "P1243R0": "Rangify New Algorithms",
    "P1243R1": "Rangify New Algorithms",
    "P1243R2": "Rangify New Algorithms",
    "P1243R3": "Rangify New Algorithms",
    "P1243R4": "Rangify New Algorithms",
    "P1244R0": "Dependent Execution for a Unified Executors Proposal for C++",
    "P1245R0": "export module containing [[attribute]];",
    "P1246R0": "The no_float function attribute",
    "P1247R0": "Disabling static destructors: introducing no_destroy and always_destroy attributes",
    "P1248R0": "Fixing 'Relation's",
    "P1248R1": "Remove CommonReference requirement from StrictWeakOrdering",
    "P1249R0": "std::forward from std::initializer_list",
    "P1250R0": "Extension by inspecting members of User Defined Types?",
    "P1251R0": "A more constexpr bitset",
    "P1251R1": "A more constexpr bitset",
    "P1252R0": "Ranges Design Cleanup",
    "P1252R1": "Ranges Design Cleanup",
    "P1252R2": "Ranges Design Cleanup",
    "P1253R0": "Guidelines for when a WG21 proposal should be reviewed by SG16, the text and Unicode study group",
    "P1254R0": "Notes on C++ Package Management",
    "P1255R0": "A view of 0 or 1 elements: view::maybe",
    "P1255R1": "A view of 0 or 1 elements: view::maybe",
    "P1255R2": "A view of 0 or 1 elements: view::maybe",
    "P1255R3": "A view of 0 or 1 elements: view::maybe",
    "P1255R4": "A view of 0 or 1 elements: view::maybe",
    "P1255R5": "A view of 0 or 1 elements: views::maybe",
    "P1255R6": "A view of 0 or 1 elements: views::maybe",
    "P1255R7": "A view of 0 or 1 elements: views::maybe",
    "P1255R8": "A view of 0 or 1 elements: views::maybe",
    "P1255R9": "A view of 0 or 1 elements: views::maybe",
    "P1255R10": "A view of 0 or 1 elements: views::maybe",
    "P1255R11": "A view of 0 or 1 elements: views::maybe",
    "P1255R12": "A view of 0 or 1 elements: views::maybe",
    "P1255R13": "A view of 0 or 1 elements: views::nullable And a concept to constrain maybes",
    "P1256R0": "Executors Should Go To A TS",
    "P1257R0": "Implementation experience on trying to implement concurrent data and control structures with executors",
    "P1258R0": "Don't Make C++ Unimplementable On Small CPUs",
    "P1259R0": "Merge most of Networking TS into C++ Working Draft",
    "P1259R1": "Merge most of Networking TS into C++ Working Draft",
    "P1260R0": "Pattern Matching",
    "P1261R0": "Supporting Pipelines in C++",
    "P1263R0": "Controlling the instantiation of vtables and RTTI",
    "P1264R0": "Revising the wording of stream input operations",
    "P1264R1": "Revising the wording of stream input operations",
    "P1264R2": "Revising the wording of stream input operations",
    "P1267R0": "Custom Constraint Diagnostics",
    "P1269R0": "Three Years with the Networking TS",
    "P1271R0": "Move resource_adaptor from Library TS to the C++ WP",
    "P1272R0": "Byteswapping for fun&&nuf",
    "P1272R1": "Byteswapping for fun&&nuf",
    "P1272R2": "Byteswapping for fun&&nuf",
    "P1272R3": "Byteswapping for fun&&nuf",
    "P1272R4": "Byteswapping for fun&&nuf",
    "P1273R0": "86 The Absurd (From Exceptions)",
    "P1274R0": "Bang For The Buck",
    "P1275R0": "Desert Sessions: Improving hostile environment interactions",
    "P1276R0": "Void Main",
    "P1277R0": "Subscripts On Parade",
    "P1278R0": "offsetof For the Modern Era",
    "P1279R0": "std::breakpoint",
    "P1280R0": "Integer Width Literals",
    "P1280R1": "Integer Width Literals",
    "P1280R2": "Integer Width Literals",
    "P1281R0": "Feature Presentation",
    "P1282R0": "Ceci N\u2019est Pas Une Pipe: Adding a workflow operator to C++",
    "P1283R0": "Sharing is Caring",
    "P1284R0": "Allowing Inlining of Replaceable Functions",
    "P1285R0": "Improving Completeness Requirements for Type Traits",
    "P1286R0": "Contra CWG DR1778",
    "P1286R1": "Contra CWG DR1778",
    "P1286R2": "Contra CWG DR1778",
    "P1287R0": "Supporting async use-cases for interrupt_token",
    "P1288R0": "Coroutine concepts and metafunctions",
    "P1289R0": "Access control in contract conditions",
    "P1289R1": "Access control in contract conditions",
    "P1290R0": "Avoiding undefined behavior in contracts",
    "P1290R1": "Avoiding undefined behavior in contracts",
    "P1290R2": "Avoiding undefined behavior in contracts",
    "P1290R3": "Avoiding undefined behavior in contracts",
    "P1291R0": "std::ranges::less<> Should Be More!",
    "P1292R0": "Customization Point Functions",
    "P1293R0": "ostream_joiner",
    "P1293R1": "ostream_joiner",
    "P1293R2": "ostream_joiner",
    "P1294R0": "Proposed resolution for US104: Allocator-aware regular expressions (rev 3)",
    "P1295R0": "Spaceship library update",
    "P1296R0": "[[assert: std::disjoint(A,nA, B,nB)]]: Contract assertions as an alternate spelling of \u2018restrict\u2019",
    "P1298R0": "Reserve more freedom for atomic_ref<> implementers",
    "P1299R0": "Module Preamble is Unnecessary",
    "P1299R1": "Module Preamble is Unnecessarily Fragile",
    "P1299R2": "Replacement for placeholder",
    "P1299R3": "Module Preamble is Unnecessarily Fragile",
    "P1300R0": "Remember the FORTRAN",
    "P1301R0": "nodiscard should have a reason",
    "P1301R1": "[[nodiscard(\"should have a reason\")]]",
    "P1301R2": "[[nodiscard(\"should have a reason\")]]",
    "P1301R3": "[[nodiscard(\"should have a reason\")]]",
    "P1301R4": "`[[nodiscard(\"should have a reason\")]]`",
    "P1302R0": "Implicit Module Partition Lookup",
    "P1302R1": "Implicit Module Partition Lookup",
    "P1303R0": "Inline Module Partitions",
    "P1304R0": "Simplifying Extern Template",
    "P1305R0": "Deprecate The Addressof Operator",
    "P1306R0": "Expansion statements",
    "P1306R1": "Expansion statements",
    "P1306R2": "Expansion statements",
    "P1307R0": "weak_equality considered harmful",
    "P1308R0": "Pattern Matching",
    "P1310R0": "Unifying the many ways to compare",
    "P1312R0": "Comparison Concepts",
    "P1313R0": "Let's Talk About Package Specification",
    "P1314R0": "unique_val: a default-on-move",
    "P1314R1": "unique_val: a default-on-move type",
    "P1315R0": "secure_val: a secure-clear-on-move type",
    "P1315R1": "secure_val: a secure-clear-on-move type",
    "P1315R2": "secure_clear",
    "P1315R3": "secure_clear",
    "P1315R4": "secure_clear",
    "P1315R5": "secure_clear",
    "P1315R6": "secure_clear (update to N2599)",
    "P1315R7": "secure_clear",
    "P1316R0": "A when_all() operator for coroutines",
    "P1317R0": "Remove return type deduction in std::apply",
    "P1317R1": "Remove return type deduction in std::apply",
    "P1318R0": "Tuple application traits",
    "P1319R0": "Changes between C++11 and C++14",
    "P1320R0": "Allowing contract predicates on non-first declarations",
    "P1320R1": "Allowing contract predicates on non-first declarations",
    "P1320R2": "Allowing contract predicates on non-first declarations",
    "P1321R0": "UB in contract violations",
    "P1322R0": "Networking TS enhancement to enable custom I/O executors",
    "P1322R1": "Networking TS enhancement to enable custom I/O executors",
    "P1322R2": "Networking TS enhancement to enable custom I/O executors",
    "P1322R3": "Networking TS enhancement to enable custom I/O executors",
    "P1323R0": "Contract postconditions and return type deduction",
    "P1323R1": "Contract postconditions and return type deduction",
    "P1323R2": "Contract postconditions and return type deduction",
    "P1324R0": "RE: Yet another approach for constrained declarations",
    "P1324R1": "RE: Yet another approach for constrained declarations",
    "P1327R0": "Allowing dynamic_cast, polymorphic typeid in Constant Expressions",
    "P1327R1": "Allowing dynamic_cast, polymorphic typeid in Constant Expressions",
    "P1328R0": "Making std::type_info::operator== constexpr",
    "P1328R1": "Making std::type_info::operator== constexpr",
    "P1329R0": "On the Coroutines TS",
    "P1330R0": "Changing the active member of a union inside constexpr",
    "P1331R0": "Permitting trivial default initialization in constexpr contexts",
    "P1331R1": "Permitting trivial default initialization in constexpr contexts",
    "P1331R2": "Permitting trivial default initialization in constexpr contexts",
    "P1332R0": "Contract Checking in C++: A (long-term) Road Map",
    "P1333R0": "Assigning Concrete Semantics to Contract-Checking Levels at Compile Time",
    "P1334R0": "Specifying Concrete Semantics Directly in Contract-Checking Statements",
    "P1335R0": "\"Avoiding undefined behavior in contracts\" [P1290R0] Explained",
    "P1337R0": "Aliasing the standard library as a means to save C++",
    "P1338R0": "WG21 2018-11 San Diego Record of Discussion",
    "P1338R1": "WG21 2018-11 San Diego Record of Discussion",
    "P1339R0": "Disallowing the friending of names in namespace std",
    "P1339R1": "Disallowing the friending of names in namespace std",
    "P1341R0": "Unifying Asynchronous APIs in the Standard Library",
    "P1342R0": "Unifying Coroutines TS and Core Coroutines",
    "P1343": "Simplify proposed WD change #2.",
    "P1344R0": "Pre/Post vs. Enspects/Exsures",
    "P1344R1": "Pre/Post vs. Enspects/Exsures",
    "P1344R2": "pre/post with WD wording",
    "P1347R0": "Modules: ADL & Internal Linkage",
    "P1347R1": "Modules: ADL & Internal Linkage",
    "P1348R0": "An Executor Property for Occupancy of Execution Agents",
    "P1349R0": "Better Integration of Sender Executors",
    "P1350R0": "Core Language Working Group \"tentatively ready\" Issues for the November, 2018 (San Diego) meeting",
    "P1351R0": "Intrusive smart pointer feedback",
    "P1353R0": "Missing Feature Test Macros",
    "P1354R0": "SG7 Guidelines for Review of Proposals",
    "P1355R0": "Exposing a narrow contract for ceil2",
    "P1355R1": "Exposing a narrow contract for ceil2",
    "P1355R2": "Exposing a narrow contract for ceil2",
    "P1356R0": "Coroutine TS ready issues (25 and 27)",
    "P1357R0": "Traits for [Un]bounded Arrays",
    "P1357R1": "Traits for [Un]bounded Arrays",
    "P1358R0": "Core \"ready\" Issues",
    "P1359R0": "Core \"tentatively ready\" Issues",
    "P1360R0": "Towards Machine Learning for C++: Study Group 19",
    "P1361R0": "Integration of chrono with text formatting",
    "P1361R1": "Integration of chrono with text formatting",
    "P1361R2": "Integration of chrono with text formatting",
    "P1362R0": "Incremental Approach: Coroutine TS + Core Coroutines",
    "P1364R0": "Fibers under the magnifying glass",
    "P1365R0": "Using Coroutine TS with zero dynamic allocations",
    "P1367R0": "Not All Agents Have TLS",
    "P1367R1": "Not All Agents Have TLS",
    "P1368R0": "Multiplication and division of fixed-point numbers",
    "P1368R1": "Multiplication and division of fixed-point numbers",
    "P1369R0": "Guidelines for Formulating Library Semantics Specifications",
    "P1370R0": "Generic numerical algorithm development with(out) numeric_limits",
    "P1370R1": "Generic numerical algorithm development with(out) numeric_limits",
    "P1371R0": "Pattern Matching",
    "P1371R1": "Pattern Matching",
    "P1371R2": "Pattern Matching",
    "P1371R3": "Pattern Matching",
    "P1372R0": "Giving atomic_ref implementers more flexibility by providing customization points for non-lock-free implementation",
    "P1373R0": "Syntax alternatives for modules",
    "P1374R0": "Resolving LWG #2307 for C++20: Consistently Explicit Constructors",
    "P1375R0": "More Constrained: Apples or Oranges? On the road to semantic constraint matching",
    "P1375R1": "More Constrained: Apples or Oranges? On the road to semantic constraint matching",
    "P1375R2": "More Constrained: Apples or Oranges?",
    "P1376R0": "Summary of freestanding evening session discussions",
    "P1377R0": "Summary of Dec 2018 SG14 freestanding discussions",
    "P1378R0": "std::string_literal",
    "P1380R0": "Ambiguity and Insecurities with Three-Way Comparison",
    "P1380R1": "Ambiguity and Insecurities with Three-Way Comparison",
    "P1381R0": "Reference capture of structured bindings",
    "P1381R1": "Reference capture of structured bindings",
    "P1382R0": "volatile_load<T> and volatile_store<T>",
    "P1382R1": "volatile_load<T> and volatile_store<T>",
    "P1383R0": "More constexpr for <cmath> and <complex>",
    "P1383R1": "More constexpr for cmath and complex",
    "P1383R2": "More constexpr for cmath and complex",
    "P1385R0": "A proposal to add linear algebra support to the C++ standard library",
    "P1385R1": "A proposal to add linear algebra support to the C++ standard library",
    "P1385R2": "A proposal to add linear algebra support to the C++ standard library",
    "P1385R3": "A proposal to add linear algebra support to the C++ standard library",
    "P1385R4": "A proposal to add linear algebra support to the C++ standard library",
    "P1385R5": "A proposal to add linear algebra support to the C++ standard library",
    "P1385R6": "A proposal to add linear algebra support to the C++ standard library",
    "P1385R7": "A proposal to add linear algebra support to the C++ standard library",
    "P1386R0": "A Standard Audio API for C++: Motivation, Scope, and Basic Design",
    "P1386R1": "A Standard Audio API for C++: Motivation, Scope, and Basic Design",
    "P1386R2": "A Standard Audio API for C++: Motivation, Scope, and Basic Design",
    "P1388R0": "2019-01-11 SG20 Telecon Minutes",
    "P1389R0": "Standing Document for SG20: Guidelines for Teaching C++ to Beginners",
    "P1389R1": "Standing Document for SG20: Guidelines for Teaching C++ to Beginners",
    "P1390R0": "Suggested Reflection TS NB Resolutions",
    "P1390R1": "Reflection TS NB comment resolutions: summary and rationale",
    "P1391R0": "Range constructor for std::string_view",
    "P1391R1": "Range constructor for std::string_view",
    "P1391R2": "Range constructor for std::string_view",
    "P1391R3": "Range constructor for std::string_view",
    "P1391R4": "Range constructor for std::string_view",
    "P1392R0": "Differences Between Functions and Function Templates",
    "P1393R0": "A General Property Customization Mechanism",
    "P1394R0": "Range constructor for std::span",
    "P1394R1": "Range constructor for std::span",
    "P1394R2": "Range constructor for std::span",
    "P1394R3": "Range constructor for std::span",
    "P1394R4": "Range constructor for std::span",
    "P1395R0": "Modules: Partitions Are Not a Panacea",
    "P1401R0": "Narrowing contextual conversions to bool",
    "P1401R1": "Narrowing contextual conversions to bool",
    "P1401R2": "Narrowing contextual conversions to bool",
    "P1401R3": "Narrowing contextual conversions to bool",
    "P1401R4": "Narrowing contextual conversions to bool",
    "P1401R5": "Narrowing contextual conversions to bool",
    "P1402R0": "std::cstring_view - a C compatible std::string_view adapter",
    "P1403R0": "Experience Report: Implementing a Coroutines TS Frontend to an Existing Tasking Library",
    "P1404R0": "bad_alloc is not out-of-memory!",
    "P1404R1": "bad_alloc is not out-of-memory!",
    "P1405R0": "C++20 Executors are Resilient to ABI Breakage",
    "P1406R0": "Add more std::hash specializations",
    "P1406R1": "Add more std::hash specializations",
    "P1407R0": "Tell Programmers About Signed Integer Overflow Behavior",
    "P1407R1": "Tell Programmers About Signed Integer Overflow Behavior",
    "P1408R0": "Abandon observer_ptr",
    "P1410R0": "Remove deprecated strstream",
    "P1411R0": "Please reconsider <scope> for C++20",
    "P1412R0": "Class Natures for Safety Critical Code: On user-declared and user-defined special member functions",
    "P1413R0": "A safer interface for std::aligned_storage",
    "P1413R1": "Deprecate std::aligned_storage and std::aligned_union",
    "P1413R2": "Deprecate std::aligned_storage and std::aligned_union",
    "P1413R3": "Deprecate std::aligned_storage and std::aligned_union",
    "P1415R0": "SG19 Machine Learning Layered List",
    "P1415R1": "SG19 Machine Learning Layered List",
    "P1416R0": "SG19 Linear Algebra for Data Science and Machine Learning",
    "P1417R0": "Historical lessons for C++ linear algebra library standardization",
    "P1419R0": "A SFINAE-friendly trait to determine the extent of statically sized containers",
    "P1421R0": "Assigning semantics to different Contract Checking Statements",
    "P1422R0": "SG16: Unicode meeting summaries 2018/10/17 - 2019/01/09",
    "P1423R0": "char8_t backward compatibility remediation",
    "P1423R1": "char8_t backward compatibility remediation",
    "P1423R2": "char8_t backward compatibility remediation",
    "P1423R3": "`char8_t` backward compatibility remediation",
    "P1424R0": "'constexpr' feature macro concerns",
    "P1424R1": "'constexpr' feature macro concerns",
    "P1425R0": "Iterators pair constructors for stack and queue",
    "P1425R1": "Iterators pair constructors for stack and queue",
    "P1425R2": "Iterators pair constructors for stack and queue",
    "P1425R3": "Iterators pair constructors for stack and queue",
    "P1425R4": "Iterators pair constructors for stack and queue",
    "P1426R0": "Pull the Plug on Contracts?",
    "P1427R0": "Concerns about module toolability",
    "P1428R0": "Subscripts and sizes should be signed",
    "P1429R0": "Contracts That Work",
    "P1429R1": "Contracts That Work",
    "P1429R2": "Contracts That Work",
    "P1429R3": "Contracts That Work",
    "P1430R0": "First-class symmetric coroutines in C++",
    "P1430R1": "First-class symmetric coroutines in C++",
    "P1433R0": "Compile Time Regular Expressions",
    "P1434R0": "Discussing Pointer Provenance",
    "P1436R0": "Executor properties for affinity-based execution",
    "P1436R1": "Executor properties for affinity-based execution",
    "P1436R2": "Executor properties for affinity-based execution",
    "P1436R3": "Executor properties for affinity-based execution",
    "P1438R0": "A Rational Number Library for C++",
    "P1438R1": "A Rational Number Library for C++",
    "P1439R0": "Charset Transcoding, Transformation, and Transliteration",
    "P1439R1": "Charset Transcoding, Transformation, and Transliteration",
    "P1440R0": "is_clamped",
    "P1441R0": "Are modules fast?",
    "P1441R1": "Are modules fast?",
    "P1442R0": "A Medley of Networking TS improvements",
    "P1443R0": "SG14: Low Latency Meeting Minutes 2018/07/11 - 2019/01/09",
    "P1444R0": "SG19: Machine Learning 2018/12/14 - 2019/01/11",
    "P1445R0": "Concurrency TS: to update or not update",
    "P1446R0": "Reconsider the Networking TS for inclusion in C++20",
    "P1447R0": "constexpr C++ is not constexpr C",
    "P1448R0": "Simplifying Mixed Contract Modes",
    "P1449R0": "Towards Tree and Graph Data Structures for C++",
    "P1450R0": "Enriching type modification traits",
    "P1450R1": "Enriching type modification traits",
    "P1450R2": "Enriching type modification traits",
    "P1450R3": "Enriching type modification traits",
    "P1452R0": "On the non-uniform semantics of return-type-requirements",
    "P1452R1": "On the non-uniform semantics of return-type-requirements",
    "P1452R2": "On the non-uniform semantics of return-type-requirements",
    "P1453R0": "Modularizing the Standard Library is a Reorganization Opportunity",
    "P1456R0": "Move-only views",
    "P1456R1": "Move-only views",
    "P1457R0": "C++ Standard Library Issues to be moved in Kona",
    "P1458R0": "Mandating the Standard Library: Clause 16 - Language support library",
    "P1458R1": "Mandating the Standard Library: Clause 16 - Language support library",
    "P1459R0": "Mandating the Standard Library: Clause 18 - Diagnostics library",
    "P1459R1": "Mandating the Standard Library: Clause 18 - Diagnostics library",
    "P1460R0": "Mandating the Standard Library: Clause 20 - Utilities library",
    "P1460R1": "Mandating the Standard Library: Clause 20 - Utilities library",
    "P1462R0": "Mandating the Standard Library: Clause 20 - Strings library",
    "P1462R1": "Mandating the Standard Library: Clause 20 - Strings library",
    "P1463R0": "Mandating the Standard Library: Clause 21 - Containers library",
    "P1463R1": "Mandating the Standard Library: Clause 21 - Containers library",
    "P1464R0": "Mandating the Standard Library: Clause 22 - Iterators library",
    "P1464R1": "Mandating the Standard Library: Clause 22 - Iterators library",
    "P1465R0": "Function optimization hint attributes: [[always_inline]], [[never_inline]]",
    "P1466R0": "Miscellaneous minor fixes for chrono",
    "P1466R1": "Miscellaneous minor fixes for chrono",
    "P1466R2": "Miscellaneous minor fixes for chrono",
    "P1466R3": "Miscellaneous minor fixes for chrono",
    "P1467R0": "Extended floating-point types",
    "P1467R1": "Extended floating-point types",
    "P1467R2": "Extended floating-point types",
    "P1467R3": "Extended floating-point types",
    "P1467R4": "Extended floating-point types and standard names",
    "P1467R5": "Extended floating-point types and standard names",
    "P1467R6": "Extended floating-point types and standard names",
    "P1467R7": "Extended floating-point types and standard names",
    "P1467R8": "Extended floating-point types and standard names",
    "P1467R9": "Extended floating-point types and standard names",
    "P1468R0": "Fixed-layout floating-point type aliases",
    "P1468R1": "Fixed-layout floating-point type aliases",
    "P1468R2": "Fixed-layout floating-point type aliases",
    "P1468R3": "Fixed-layout floating-point type aliases",
    "P1468R4": "Fixed-layout floating-point type aliases",
    "P1469R0": "Disallow _ Usage in C++20 for Pattern Matching in C++23",
    "P1470R0": "Against a standard concurrent hashmap",
    "P1471R0": "The trouble with coroutine_traits",
    "P1472R0": "SG5: Transactional Memory (TM) Meeting Minutes (June 2018 - January 2019)",
    "P1473R0": "Shadow namespaces",
    "P1474R0": "Helpful pointers for ContiguousIterator",
    "P1474R1": "Helpful pointers for ContiguousIterator",
    "P1477R0": "Coroutines TS Simplifications",
    "P1477R1": "Coroutines TS Simplifications",
    "P1478R0": "Byte-wise atomic memcpy",
    "P1478R1": "Byte-wise atomic memcpy",
    "P1478R2": "Byte-wise atomic memcpy",
    "P1478R3": "Byte-wise atomic memcpy",
    "P1478R4": "Byte-wise atomic memcpy",
    "P1478R5": "Byte-wise atomic memcpy",
    "P1478R6": "Byte-wise atomic memcpy",
    "P1478R7": "Byte-wise atomic memcpy",
    "P1478R8": "Byte-wise atomic memcpy",
    "P1479R0": "ostringstream wrapper",
    "P1481R0": "constexpr structured bindings",
    "P1482R0": "Modules Feedback",
    "P1484R1": "A uniform and predefined mapping from modules to filenames",
    "P1485R0": "Better keywords for the Coroutines TS",
    "P1485R1": "Better keywords for the Coroutines",
    "P1486R0": "United Amendment to Contracts Facility for C++20",
    "P1486R1": "United Amendment to Contracts Facility for C++20",
    "P1487R0": "User Experience with Contracts That Work",
    "P1490R0": "Contract-Related Issues",
    "P1491R0": "Don\u2019t add to the signed/unsigned mess",
    "P1492R0": "Coroutines: Language and Implementation Impact",
    "P1493R0": "Coroutines: Use-cases and Trade-offs",
    "P1494R0": "Partial program correctness",
    "P1494R1": "Partial program correctness",
    "P1494R2": "Partial program correctness",
    "P1494R3": "Partial program correctness",
    "P1496R0": "Formatting of Negative Zero",
    "P1496R1": "Formatting of Negative Zero",
    "P1496R2": "Formatting of Negative Zero",
    "P1498R0": "Constrained Internal Linkage for Modules",
    "P1498R1": "Constrained Internal Linkage for Modules",
    "P1502R0": "Standard library header units for C++20",
    "P1502R1": "Standard library header units for C++20",
    "P1505R0": "Mandating the Standard Library: Clause 30 - Atomic operations library",
    "P1505R1": "Mandating the Standard Library: Clause 31 - Atomic operations library",
    "P1510R0": "Core Language Working Group \"tentatively ready\" Issues for the July, 2019 (Cologne) meeting",
    "P1517R0": "Contract Requirements for Iterative High-Assurance Systems",
    "P1518R0": "Stop overconstraining allocators in container deduction guides",
    "P1518R1": "Stop overconstraining allocators in container deduction guides",
    "P1518R2": "Stop overconstraining allocators in container deduction guides",
    "P1520R0": "Response to response to \u201cFibers under the magnifying glass\u201d",
    "P1522R0": "Iterator Difference Type and Integer Overflow",
    "P1522R1": "Iterator Difference Type and Integer Overflow",
    "P1523R0": "Views and Size Types",
    "P1523R1": "Views and Size Types",
    "P1525R0": "One-Way execute is a Poor Basis Operation",
    "P1525R1": "One-Way execute is a Poor Basis Operation",
    "P1601R0": "Recommendations for Specifying \u201cHidden Friends\u201d",
    "P1602R0": "Make Me A Module",
    "P1604R0": "The inline keyword is not in line with the design of modules.",
    "P1604R1": "The inline keyword is not in line with the design of modules",
    "P1605R0": "Member Layout Control",
    "P1606R0": "Requirements for Contract Roles",
    "P1607R0": "Minimizing Contracts",
    "P1607R1": "Minimizing Contracts",
    "P1609R0": "C++ Should Support Just-in-Time Compilation",
    "P1609R1": "C++ Should Support Just-in-Time Compilation",
    "P1609R2": "C++ Should Support Just-in-Time Compilation",
    "P1609R3": "C++ Should Support Just-in-Time Compilation",
    "P1610R0": "Rename await_resume() to await_result()",
    "P1611R0": "WG21 2019-02 Kona Record of Discussion",
    "P1612R0": "Relocate Endian's Specification",
    "P1612R1": "Relocate Endian's Specification",
    "P1614R0": "The Mothership Has Landed: Adding `<=>` to the Library",
    "P1614R1": "The Mothership Has Landed: Adding `<=>` to the Library",
    "P1614R2": "The Mothership Has Landed: Adding `<=>` to the Library",
    "P1616R0": "Using unconstrained template template parameters with constrained templates",
    "P1616R1": "Using unconstrained template template parameters with constrained templates",
    "P1619R0": "Functions for Testing Boundary Conditions on Integer Operations",
    "P1619R1": "Functions for Testing Boundary Conditions on Integer Operations",
    "P1619R2": "Functions for Testing Boundary Conditions on Integer Operations",
    "P1622R0": "Mandating the Standard Library: Clause 31 - Thread support library",
    "P1622R1": "Mandating the Standard Library: Clause 31 - Thread support library",
    "P1622R2": "Mandating the Standard Library: Clause 32 - Thread support library",
    "P1622R3": "Mandating the Standard Library: Clause 32 - Thread support library",
    "P1624R0": "Resolving technical issues in parameter mapping equivalence and related problems",
    "P1624R1": "Resolving technical issues in parameter mapping equivalence and related problems",
    "P1625R0": "Contracts: why the house is not on fire (i.e. why the status quo is tolerable)",
    "P1628R0": "Unicode characters properties",
    "P1629R0": "Standard Text Encoding",
    "P1629R1": "Transcoding the world - Standard Text Encoding",
    "P1630R0": "Spaceship needs a tune-up: Addressing some discovered issues with P0515 and P1185",
    "P1630R1": "Spaceship needs a tune-up",
    "P1631R0": "Object detachment and attachment",
    "P1631R1": "Object detachment and attachment",
    "P1633R0": "Amendments to the C++20 Synchronization Library",
    "P1633R1": "Amendments to the C++20 Synchronization Library",
    "P1634R0": "Naming guidelines for modules",
    "P1635R0": "A Design for an Inter-Operable and Customizable Linear Algebra Library",
    "P1636R0": "Formatters for library types",
    "P1636R1": "Formatters for library types",
    "P1636R2": "Formatters for library types",
    "P1638R0": "basic_istream_view's iterator should not be copyable",
    "P1638R1": "basic_istream_view's iterator should not be copyable",
    "P1639R0": "Unifying source_location and contract_violation",
    "P1640R0": "Error size benchmarking",
    "P1640R1": "Error size benchmarking: Redux",
    "P1641R0": "Freestanding Library: Rewording the Status Quo",
    "P1641R1": "Freestanding Library: Rewording the Status Quo",
    "P1641R2": "Freestanding Library: Rewording the Status Quo",
    "P1641R3": "Freestanding Library: Rewording the Status Quo",
    "P1642R0": "Freestanding Library: Easy [utilities]",
    "P1642R1": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R2": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R3": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R4": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R5": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R6": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R7": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R8": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R9": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R10": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1642R11": "Freestanding Library: Easy [utilities], [ranges], and [iterators]",
    "P1643R0": "Add wait/notify to atomic_ref<T>",
    "P1643R1": "Add wait/notify to atomic_ref",
    "P1644R0": "Add wait/notify to atomic<shared_ptr<T>>",
    "P1645R0": "constexpr for numeric algorithms",
    "P1645R1": "constexpr for numeric algorithms",
    "P1648R0": "The Concept of Extending Argument and a Support Library",
    "P1648R1": "The Concept of Extending Argument and a Support Library",
    "P1648R2": "A Library for Sink Argument Passing",
    "P1649R0": "A Generic Library for Compile-time Routing",
    "P1650R0": "Output std::chrono::days with 'd' suffix",
    "P1651R0": "bind_front should not unwrap reference_wrapper",
    "P1652R0": "Printf corner cases in std::format",
    "P1652R1": "Printf corner cases in std::format",
    "P1654R0": "ABI breakage - summary of initial comments",
    "P1654R1": "ABI breakage - summary of initial comments",
    "P1655R0": "LEWG Omnibus Design Policy Paper",
    "P1656R0": "\"Throws: Nothing\" should be noexcept",
    "P1656R1": "\"Throws: Nothing\" should be noexcept",
    "P1656R2": "\"Throws: Nothing\" should be noexcept",
    "P1657R0": "String substring checking",
    "P1658R0": "Suggestions for Consensus on Executors",
    "P1659R0": "starts_with and ends_with",
    "P1659R1": "starts_with and ends_with",
    "P1659R2": "starts_with and ends_with",
    "P1659R3": "starts_with and ends_with",
    "P1660R0": "A Compromise Executor Design Sketch",
    "P1661R0": "Remove dedicated precalculated hash lookup interface",
    "P1661R1": "Remove dedicated precalculated hash lookup interface",
    "P1662R0": "Adding async RAII support to coroutines",
    "P1663R0": "Supporting return-value-optimisation in coroutines",
    "P1664R0": "reconstructible_range - a concept for putting ranges back together",
    "P1664R1": "reconstructible_range - a concept for putting ranges back together",
    "P1664R2": "reconstructible_range - a concept for putting ranges back together",
    "P1664R3": "reconstructible_range - a concept for putting ranges back together",
    "P1664R4": "reconstructible_range - a concept for putting ranges back together",
    "P1664R5": "reconstructible_range - a concept for putting ranges back together",
    "P1664R6": "reconstructible_range - a concept for putting ranges back together",
    "P1664R7": "reconstructible_range - a concept for putting ranges back together",
    "P1665R0": "Tag Based Customization Point Functions",
    "P1666R0": "SG16: Unicode meeting summaries 2019/01/23 - 2019/05/22",
    "P1667R0": "Concept-aware noexcept specifiers",
    "P1668R0": "Enabling constexpr Intrinsics By Permitting Unevaluated inline-assembly in constexpr Functions",
    "P1668R1": "Enabling constexpr Intrinsics By Permitting Unevaluated inline-assembly in constexpr Functions",
    "P1669R0": "Callsite Based Inlining Hints: [[always_inline]] and [[never_inline]]",
    "P1670R0": "Side Effects of Checked Contracts and Predicate Elision",
    "P1671R0": "Contract Evaluation in Constant Expressions",
    "P1672R0": "\"Axiom\" is a False Friend",
    "P1673R0": "A free function linear algebra interface based on the BLAS",
    "P1673R1": "A free function linear algebra interface based on the BLAS",
    "P1673R2": "A free function linear algebra interface based on the BLAS",
    "P1673R3": "A free function linear algebra interface based on the BLAS",
    "P1673R4": "A free function linear algebra interface based on the BLAS",
    "P1673R5": "A free function linear algebra interface based on the BLAS",
    "P1673R6": "A free function linear algebra interface based on the BLAS",
    "P1673R7": "A free function linear algebra interface based on the BLAS",
    "P1673R8": "A free function linear algebra interface based on the BLAS",
    "P1673R9": "A free function linear algebra interface based on the BLAS",
    "P1673R10": "A free function linear algebra interface based on the BLAS",
    "P1673R11": "A free function linear algebra interface based on the BLAS",
    "P1673R12": "A free function linear algebra interface based on the BLAS",
    "P1673R13": "A free function linear algebra interface based on the BLAS",
    "P1674R0": "Evolving a Standard C++ Linear Algebra Library from the BLAS",
    "P1674R1": "Evolving a Standard C++ Linear Algebra Library from the BLAS",
    "P1674R2": "Evolving a Standard C++ Linear Algebra Library from the BLAS",
    "P1675R0": "rethrow_exception must be allowed to copy",
    "P1675R1": "rethrow_exception must be allowed to copy",
    "P1675R2": "rethrow_exception must be allowed to copy",
    "P1676R0": "C++ Exception Optimizations. An experiment.",
    "P1677R0": "Cancellation is not an Error",
    "P1677R1": "Cancellation is not an Error",
    "P1677R2": "Cancellation is not an Error",
    "P1678R0": "Callbacks and Composition",
    "P1678R1": "Callbacks and Composition",
    "P1678R2": "Callbacks and Composition",
    "P1679R0": "String Contains function",
    "P1679R1": "String Contains function",
    "P1679R2": "String Contains function",
    "P1679R3": "String Contains function",
    "P1680R0": "Implementing Contracts in GCC",
    "P1681R0": "Revisiting allocator model for coroutine lazy/task/generator",
    "P1682R0": "std::to_underlying",
    "P1682R1": "std::to_underlying",
    "P1682R2": "std::to_underlying",
    "P1682R3": "std::to_underlying",
    "P1683R0": "References for Standard Library Vocabulary Types - an optional case study",
    "P1684R0": "mdarray: An Owning Multidimensional Array Analog of mdspan",
    "P1684R1": "mdarray: An Owning Multidimensional Array Analog of mdspan",
    "P1684R2": "mdarray: An Owning Multidimensional Array Analog of mdspan",
    "P1684R3": "mdarray: An Owning Multidimensional Array Analog of mdspan",
    "P1684R4": "mdarray: An Owning Multidimensional Array Analog of mdspan",
    "P1684R5": "mdarray: An Owning Multidimensional Array Analog of mdspan",
    "P1685R0": "Make get/set_default_resource replaceable",
    "P1686R0": "Mandating the Standard Library: Clause 27 - Time library",
    "P1686R1": "Mandating the Standard Library: Clause 27 - Time library",
    "P1686R2": "Mandating the Standard Library: Clause 27 - Time library",
    "P1687R0": "Summary of the Tooling Study Group's Pre-Cologne Telecons on Modules Tooling Interactions",
    "P1687R1": "Summary of the Tooling Study Group's Modules Ecosystem Technical Report Telecons",
    "P1688R0": "Towards a C++ Ecosystem Technical Report",
    "P1689R0": "Format for describing dependencies of source files",
    "P1689R1": "Format for describing dependencies of source files",
    "P1689R2": "Format for describing dependencies of source files",
    "P1689R3": "Format for describing dependencies of source files",
    "P1689R4": "Format for describing dependencies of source files",
    "P1689R5": "Format for describing dependencies of source files",
    "P1690R0": "Refinement Proposal for P0919 Heterogeneous lookup for unordered containers",
    "P1690R1": "Refinement Proposal for P0919 Heterogeneous lookup for unordered containers",
    "P1696R0": "Refinement proposal for P0920 Precalculated hash values in lookup",
    "P1697R0": "Require a diagnostic for \"declaration changes meaning\"",
    "P1700R0": "Target-audience tables",
    "P1701R0": "Inline Namespaces: Fragility Bites",
    "P1701R1": "Inline Namespaces: Fragility Bites",
    "P1701R2": "Inline Namespaces: Fragility Bites",
    "P1702R0": "Annex D Means Deprecated",
    "P1703R0": "Recognizing Header Unit Imports Requires Full Preprocessing",
    "P1703R1": "Recognizing Header Unit Imports Requires Full Preprocessing",
    "P1704R0": "Undefined functions in axiom-level contract statements",
    "P1705R0": "Enumerating Core Undefined Behavior",
    "P1705R1": "Enumerating Core Undefined Behavior",
    "P1706R0": "Programming Language Vulnerabilities for C++ update",
    "P1706R1": "Programming Language Vulnerabilities for C++ update",
    "P1706R2": "Programming Language Vulnerabilities for Safety Critical C++",
    "P1706R3": "Programming Language Vulnerabilities for Safety Critical C++",
    "P1708R0": "Simple Statistics functions",
    "P1708R1": "Simple Statistical Functions",
    "P1708R2": "Simple Statistical Functions",
    "P1708R3": "Simple Statistical Functions",
    "P1708R4": "Simple Statistical Functions",
    "P1708R5": "Simple Statistical Functions",
    "P1708R6": "Simple Statistical Functions",
    "P1708R7": "Basic Statistics",
    "P1708R8": "Basic Statistics",
    "P1709R0": "Graph Data Structures",
    "P1709R1": "Graph Data Structures",
    "P1709R2": "Graph Library",
    "P1709R3": "Graph Library",
    "P1709R4": "Graph Library",
    "P1709R5": "Graph Library",
    "P1710R0": "Adding a global contract assumption mode",
    "P1711R0": "What to do about contracts?",
    "P1713R0": "Allowing both co_return; and co_return value; in the same coroutine",
    "P1714R0": "NTTP are incomplete without float, double, and long double!",
    "P1714R1": "NTTP are incomplete without float, double, and long double!",
    "P1715R0": "Loosen restrictions on \"_t\" typedefs and \"_v\" values.",
    "P1715R1": "Loosen restrictions on \"_t\" typedefs and \"_v\" values.",
    "P1716R0": "ranges compare algorithm are over-constrained",
    "P1716R1": "ranges compare algorithm are over-constrained",
    "P1716R2": "ranges compare algorithm are over-constrained",
    "P1716R3": "ranges compare algorithm are over-constrained",
    "P1717R0": "Compile-time Metaprogramming in C++",
    "P1718R0": "Mandating the Standard Library: Clause 25 - Algorithms library",
    "P1718R1": "Mandating the Standard Library: Clause 25 - Algorithms library",
    "P1718R2": "Mandating the Standard Library: Clause 25 - Algorithms library",
    "P1719R0": "Mandating the Standard Library: Clause 26 - Numerics library",
    "P1719R1": "Mandating the Standard Library: Clause 26 - Numerics library",
    "P1719R2": "Mandating the Standard Library: Clause 26 - Numerics library",
    "P1720R0": "Mandating the Standard Library: Clause 28 - Localization library",
    "P1720R1": "Mandating the Standard Library: Clause 28 - Localization library",
    "P1720R2": "Mandating the Standard Library: Clause 28 - Localization library",
    "P1721R0": "Mandating the Standard Library: Clause 29 - Input/Output library",
    "P1721R1": "Mandating the Standard Library: Clause 29 - Input/Output library",
    "P1721R2": "Mandating the Standard Library: Clause 29 - Input/Output library",
    "P1722R0": "Mandating the Standard Library: Clause 30 - Regular Expression library",
    "P1722R1": "Mandating the Standard Library: Clause 30 - Regular Expression library",
    "P1722R2": "Mandating the Standard Library: Clause 30 - Regular Expression library",
    "P1723R0": "Mandating the Standard Library: Clause 31 - Atomics library",
    "P1723R1": "Mandating the Standard Library: Clause 31 - Atomics library",
    "P1723R2": "Mandating the Standard Library: Clause 31 - Atomics library",
    "P1724R0": "C++ Standard Library Issues to be moved in Cologne",
    "P1725R0": "Modular Topic Design",
    "P1725R1": "Modular Topic Design",
    "P1726R0": "Pointer lifetime-end zap",
    "P1726R1": "Pointer lifetime-end zap",
    "P1726R2": "Pointer lifetime-end zap",
    "P1726R3": "Pointer lifetime-end zap",
    "P1726R4": "Pointer lifetime-end zap",
    "P1726R5": "Pointer lifetime-end zap (informational/historical)",
    "P1727R0": "Issues with current flat_map proposal",
    "P1728R0": "Preconditions, axiom-level contracts and assumptions \u2014 an in depth study",
    "P1729R0": "Text Parsing",
    "P1729R1": "Text Parsing",
    "P1729R2": "Text Parsing",
    "P1729R3": "Text Parsing",
    "P1729R4": "Text Parsing",
    "P1730R0": "Adding a global contract assumption mode",
    "P1731R0": "Memory helper functions for containers",
    "P1731R1": "Memory helper functions for containers",
    "P1732R0": "Do not promise support for function syntax of operators",
    "P1732R1": "Do not promise support for function syntax of operators",
    "P1732R2": "Do not promise support for function syntax of operators",
    "P1732R3": "Do not promise support for function syntax of operators",
    "P1732R4": "Do not promise support for function syntax of operators",
    "P1733R0": "User-friendly and Evolution-friendly Reflection: A Compromise",
    "P1734R0": "Defaultable default constructors and destructors for all unions",
    "P1735R0": "SG19: Machine Learning 2019/04/11-2019/06/13",
    "P1736R0": "SG14: Low Latency Meeting Minutes 2019/04/17-2019/06/12",
    "P1737R0": "unique_function vs. any_invokable - Bikeshedding Off the Rails",
    "P1738R0": "The Executor Concept Hierarchy Needs a Single Root",
    "P1739R0": "Type erasure for forwarding ranges in combination with \"subrange-y\" view adaptors",
    "P1739R1": "Type erasure for forwarding ranges in combination with \"subrange-y\" view adaptors",
    "P1739R2": "Avoid template bloat for forwarding ranges in combination with 'subrange-y' view adaptors.",
    "P1739R3": "Avoid template bloat for safe_ranges in combination with 'subrange-y' view adaptors.",
    "P1739R4": "Avoid template bloat for safe_ranges in combination with 'subrange-y' view adaptors.",
    "P1743R0": "Contracts, Undefined Behavior, and Defensive Programming",
    "P1744R0": "Avoiding Misuse of Contract-Checking",
    "P1745R0": "Coroutine changes for C++20 and beyond",
    "P1746R0": "Feedback on [P1386R2] std::audio",
    "P1746R1": "Feedback on P1386R2 std::audio",
    "P1747R0": "Don't use `char8_t` and `std::u8string` yet in P1389",
    "P1748R0": "Fill in [delay.cpp] TODO in D1389",
    "P1748R1": "Fill in [delay.cpp] TODO in D1389",
    "P1749R0": "Access control for reflection",
    "P1750R0": "A Proposal to Add Process Management to the C++ Standard Library",
    "P1750R1": "A Proposal to Add Process Management to the C++ Standard Library",
    "P1751R0": "Numeric Type Families",
    "P1753R0": "Name Lookup Should \"Find the First Thing of That Name\"",
    "P1754R0": "Rename concepts to standard_case for C++20, while we still can",
    "P1754R1": "Rename concepts to standard_case for C++20, while we still can",
    "P1756R0": "Pointer lifetime-end zap",
    "P1759R0": "Native handle from file streams",
    "P1759R1": "Native handle from file streams",
    "P1759R2": "Native handle from file streams",
    "P1759R3": "Native handles and file streams",
    "P1759R4": "Native handles and file streams",
    "P1759R5": "Native handles and file streams",
    "P1759R6": "Native handles and file streams",
    "P1760R0": "snapshot_source - A Horse with a Better Name",
    "P1761R0": "Concurrent map customization options (SG1 version)",
    "P1762R0": "Concurrent map customization options (LEWG version)",
    "P1764R0": "ssize() Should be Named count()",
    "P1766R0": "Mitigating minor modules maladies",
    "P1766R1": "Mitigating minor modules maladies",
    "P1767R0": "Packaging C++ Modules",
    "P1768R0": "Contiguous Containers Should Contain .data()",
    "P1769R0": "The \"default\" contract build-level and continuation-mode should be implementation-defined",
    "P1770R0": "On vectors, tensors, matrices, and hypermatrices",
    "P1771R0": "[[nodiscard]] for constructors",
    "P1771R1": "`[[nodiscard]]` for constructors",
    "P1772R0": "Variadic overload sets and overload sequences",
    "P1772R1": "Variadic overload sets and overload sequences",
    "P1773R0": "Contracts have failed to provide a portable \"assume\"",
    "P1774R0": "Portable optimisation hints",
    "P1774R1": "Portable optimisation hints",
    "P1774R2": "Portable assumptions",
    "P1774R3": "Portable assumptions",
    "P1774R4": "Portable assumptions",
    "P1774R5": "Portable assumptions",
    "P1774R6": "Portable assumptions",
    "P1774R7": "Portable assumptions",
    "P1774R8": "Portable assumptions",
    "P1779R0": "ABI isolation for member functions",
    "P1779R1": "ABI isolation for member functions",
    "P1779R2": "ABI isolation for member functions",
    "P1779R3": "ABI isolation for member functions",
    "P1780R0": "Modular Relaxed Dependencies: A new approach to the Out-Of-Thin-Air Problem",
    "P1782R0": "Local contract restrictions",
    "P1782R1": "Local contract restrictions",
    "P1786R0": "Adding a global contract assumption mode",
    "P1787R0": "Declarations and where to find them",
    "P1787R1": "Declarations and where to find them",
    "P1787R2": "Declarations and where to find them",
    "P1787R3": "Declarations and where to find them",
    "P1787R4": "Declarations and where to find them",
    "P1787R5": "Declarations and where to find them",
    "P1787R6": "Declarations and where to find them",
    "P1788R0": "Reuse of the built modules (BMI)",
    "P1788R2": "Reuse of the built modules (BMI)",
    "P1788R3": "Reuse of the built modules (BMI)",
    "P1789R0": "Library Support for Expansion Statements",
    "P1790R0": "Networking TS changes to enable better DynamicBuffer composition",
    "P1790R1": "Networking TS changes to enable better DynamicBuffer composition",
    "P1791R0": "Evolution of the P0443 Unified Executors Proposal to accommodate new requirements",
    "P1792R0": "Simplifying and generalising Sender/Receiver for asynchronous operations",
    "P1793R0": "Simplifying Contract Syntax",
    "P1795R0": "System topology discovery for heterogeneous & distributed computing",
    "P1795R1": "System topology discovery for heterogeneous & distributed computing",
    "P1795R2": "System topology discovery for heterogeneous &amp; distributed computing",
    "P1796R0": "Effective Types: Examples",
    "P1797R0": "C/C++ Memory Object Model Papers - Introduction",
    "P1798R0": "SG14 Linear Algebra SIG Meeting Minutes 2018/10/10-2019/06/06",
    "P1801R0": "Clarifying atomic[thread::id]::compare_exchange_*",
    "P1803R0": "packexpr(args, I) - compile-time friendly pack inspection",
    "P1807R0": "An Overview of Contracts Papers for Cologne",
    "P1808R0": "Contra P0339 \"polymorphic_allocator as a vocabulary type\"",
    "P1810R0": "A Quick Look at What P1754 Will Change",
    "P1811R0": "Relaxing redefinition restrictions for re-exportation robustness",
    "P1812R0": "Axioms should be assumable: a minimal fix for contracts",
    "P1813R0": "A Concept Design for the Numeric Algorithms",
    "P1814R0": "Wording for Class Template Argument Deduction for Alias Templates",
    "P1815R0": "Translation-unit-local entities",
    "P1815R1": "Translation-unit-local entities",
    "P1815R2": "Translation-unit-local entities",
    "P1816R0": "Wording for class template argument deduction for aggregates",
    "P1818R0": "Narrowing and Widening Conversions",
    "P1818R1": "Narrowing and Widening Conversions",
    "P1819R0": "Interpolated Literals",
    "P1820R0": "Recommendations for a compromise on handling errors and cancellations in executors",
    "P1823R0": "Remove Contracts from C++20",
    "P1825R0": "Merged wording for P0527R1 and P1155R3",
    "P1830R0": "std::dependent_false",
    "P1830R1": "std::dependent_false",
    "P1831R0": "deprecating volatile: library",
    "P1831R1": "deprecating volatile: library",
    "P1832R0": "Improving Debug Builds Inline With User Expectation",
    "P1837R0": "Remove NTTPs of class type from C++20",
    "P1838R0": "Modules User-Facing Lexicon and File Extensions",
    "P1839R0": "Accessing Object Representations",
    "P1839R1": "Accessing Object Representations",
    "P1839R2": "Accessing Object Representations",
    "P1839R3": "Accessing Object Representations",
    "P1839R4": "Accessing Object Representations",
    "P1839R5": "Accessing object representations",
    "P1840R0": "Cologne 2019, Record of Discussion",
    "P1841R0": "Wording for Individually Specializable Numeric Traits",
    "P1841R1": "Wording for Individually Specializable Numeric Traits",
    "P1841R2": "Wording for Individually Specializable Numeric Traits",
    "P1841R3": "Wording for Individually Specializable Numeric Traits",
    "P1842R0": "Generalized Module (Dependency?) Mapper",
    "P1843R0": "Comparison and Hasher Requirements",
    "P1844R0": "Enhancement of regex",
    "P1844R1": "Enhancement of regex",
    "P1845R0": "2019-09-21 Denver Tooling Meeting",
    "P1846R0": "Teach class Last",
    "P1847R0": "Make declaration order layout mandated",
    "P1847R1": "Make declaration order layout mandated",
    "P1847R2": "Make declaration order layout mandated",
    "P1847R3": "Make declaration order layout mandated",
    "P1847R4": "Make declaration order layout mandated",
    "P1848R0": "Improve rules of standard layout",
    "P1851R0": "Guidelines For snake_case Concept Naming",
    "P1854R0": "Conversion to execution encoding should not lead to loss of meaning",
    "P1854R1": "Conversion to literal encoding should not lead to loss of meaning",
    "P1854R2": "Conversion to literal encoding should not lead to loss of meaning",
    "P1854R3": "Conversion to literal encoding should not lead to loss of meaning",
    "P1854R4": "Making non-encodable string literals ill-formed",
    "P1855R0": "Make <compare> freestanding",
    "P1856R0": "Bit operations do not work on bytes: a generic fix",
    "P1857R0": "Modules Dependency Discovery",
    "P1857R1": "Modules Dependency Discovery",
    "P1857R2": "Modules Dependency Discovery",
    "P1857R3": "Modules Dependency Discovery",
    "P1858R0": "Generalized pack declaration and usage",
    "P1858R1": "Generalized pack declaration and usage",
    "P1858R2": "Generalized pack declaration and usage",
    "P1859R0": "Standard terminology for execution character set encodings",
    "P1860R0": "C++ Networking Must Be Secure By Default",
    "P1861R0": "Secure Connections in Networking TS",
    "P1861R1": "Secure Networking in C++",
    "P1862R0": "Ranges adaptors for non-copyable iterators",
    "P1862R1": "Ranges adaptors for non-copyable iterators",
    "P1863R0": "ABI - Now or Never",
    "P1863R1": "ABI - Now or Never",
    "P1864R0": "Defining Target Tuplets",
    "P1865R0": "Add max() to latch and barrier",
    "P1865R1": "Add max() to latch and barrier",
    "P1868R0": "? width: clarifying units of width and precision in std::format",
    "P1868R1": "Unicorn width: clarifying units of width and precision in std::format",
    "P1868R2": "Unicorn width: clarifying units of width and precision in std::format",
    "P1869R0": "Rename 'condition_variable_any' interruptible wait methods",
    "P1869R1": "Rename 'condition_variable_any' interruptible wait methods",
    "P1870R0": "forwarding-range is too subtle",
    "P1870R1": "forwarding-range is too subtle",
    "P1871R0": "Should concepts be enabled or disabled?",
    "P1871R1": "Concept traits should be named after concepts",
    "P1872R0": "span should have size_type, not index_type",
    "P1873R0": "remove.dots.in.module.names",
    "P1873R1": "remove.dots.in.module.names",
    "P1874R0": "Dynamic Initialization Order of Non-Local Variables in Modules",
    "P1874R1": "Dynamic Initialization Order of Non-Local Variables in Modules",
    "P1875R0": "Transactional Memory Lite Support in C++",
    "P1875R1": "Transactional Memory Lite Support in C++",
    "P1875R2": "Transactional Memory Lite Support in C++",
    "P1876R0": "All The Module Names",
    "P1876R1": "All The Module Names",
    "P1877R0": "Saving Private Ranges: Recovering Lost Information from Comparison and Predicate Algorithms",
    "P1878R0": "Constraining Readable Types",
    "P1878R1": "Constraining Readable Types",
    "P1879R0": "Please Don't Rewrite My String Literals",
    "P1880R0": "uNstring Arguments Shall Be UTF-N Encoded",
    "P1881R0": "Epochs: a backward-compatible language evolution mechanism",
    "P1881R1": "Epochs: a backward-compatible language evolution mechanism",
    "P1882R0": "Addition of a filter to recursive_directory_iterator",
    "P1883R0": "Walkthrough of P1031s file_handle for LEWG-I",
    "P1883R1": "file_handle and mapped_file_handle",
    "P1883R2": "file_handle and mapped_file_handle",
    "P1884R0": "Private Module Partition: An Inconsistent Boundary",
    "P1885R0": "Naming Text Encodings to Demystify Them",
    "P1885R1": "Naming Text Encodings to Demystify Them",
    "P1885R2": "Naming Text Encodings to Demystify Them",
    "P1885R3": "Naming Text Encodings to Demystify Them",
    "P1885R4": "Naming Text Encodings to Demystify Them",
    "P1885R5": "Naming Text Encodings to Demystify Them",
    "P1885R6": "Naming Text Encodings to Demystify Them",
    "P1885R7": "Naming Text Encodings to Demystify Them",
    "P1885R8": "Naming Text Encodings to Demystify Them",
    "P1885R9": "Naming Text Encodings to Demystify Them",
    "P1885R10": "Naming Text Encodings to Demystify Them",
    "P1885R11": "Naming Text Encodings to Demystify Them",
    "P1885R12": "Naming Text Encodings to Demystify Them",
    "P1886R0": "Error speed benchmarking",
    "P1887R0": "Typesafe Reflection on attributes",
    "P1887R1": "Reflection on attributes",
    "P1888R0": "Executors without exception handling support",
    "P1889R0": "C++ Numerics Work In Progress",
    "P1889R1": "C++ Numerics Work In Progress",
    "P1890R0": "C++ Numerics Work In Progress Issues",
    "P1891R0": "The Linear-Algebra Effort",
    "P1892R0": "Extended locale-specific presentation specifiers for std::format",
    "P1892R1": "Extended locale-specific presentation specifiers for std::format",
    "P1893R0": "Proposal of Contract Primitives",
    "P1894R0": "Proposal of std::upto, std::indices and std::enumerate",
    "P1895R0": "tag_invoke: A general pattern for supporting customisable functions",
    "P1896R0": "SG16: Unicode meeting summaries 2019/06/12 - 2019/09/25",
    "P1897R0": "Towards C++23 executors: An initial set of algorithms",
    "P1897R1": "Towards C++23 executors: An initial set of algorithms",
    "P1897R2": "Towards C++23 executors: A proposal for an initial set of algorithms",
    "P1897R3": "Towards C++23 executors: A proposal for an initial set of algorithms",
    "P1898R0": "Forward progress delegation for executors",
    "P1898R1": "Forward progress delegation for executors",
    "P1899R0": "stride_view",
    "P1899R1": "stride_view",
    "P1899R2": "stride_view",
    "P1899R3": "stride_view",
    "P1900R0": "Concepts-Adjacent Problems",
    "P1901R0": "Enabling the Use of weak_ptr as Keys in Unordered Associative Containers",
    "P1901R1": "Enabling the Use of weak_ptr as Keys in Unordered Associative Containers",
    "P1901R2": "Enabling the Use of weak_ptr as Keys in Unordered Associative Containers",
    "P1902R0": "Missing feature-test macros 2018-2019",
    "P1902R1": "Missing feature-test macros 2017-2019",
    "P1905R0": "In-Source Mechanism to Identify Importable Headers",
    "P1906R0": "Provided operator= return lvalue-ref on rvalue",
    "P1907R0": "Inconsistencies with non-type template parameters",
    "P1907R1": "Inconsistencies with non-type template parameters",
    "P1908R0": "Reserving Attribute Names for Future Use",
    "P1908R1": "Reserving Attribute Names for Future Use",
    "P1908R2": "Reserving Attribute Names for Future Use",
    "P1909R0": "SG14: Low Latency Meeting Minutes 2019/08/14-2019/09/11",
    "P1910R0": "SG14: Linear Algebra Meeting Minutes 2019/08/07-2019/10/02",
    "P1911R0": "SG19: Machine Learning 2019/08/08-2019/09/11",
    "P1912R0": "Interconvertible object representations",
    "P1912R1": "Types with array-like object representations",
    "P1913R0": "Comments on Audio Devices",
    "P1914R0": "On the names of shift algorithms",
    "P1915R0": "Expected Feedback from simd in the Parallelism TS 2",
    "P1916R0": "There might not be an elegant OOTA fix",
    "P1917R0": "C++ Library Issues to be moved in Belfast",
    "P1919R0": "Expanding the Rights in SD-8",
    "P1919R1": "Expanding the Rights in SD-8",
    "P1919R2": "Expanding the Rights in SD-8",
    "P1919R3": "Expanding the Rights in SD-8",
    "P1920R0": "Proposal of Namespace Templates",
    "P1921R0": "What's in a Name?",
    "P1922R0": "Making std::list constexpr",
    "P1923R0": "Making std::deque constexpr",
    "P1924R0": "Making std::stack constexpr",
    "P1925R0": "Making std::queue constexpr",
    "P1926R0": "Making std::priority_queue constexpr",
    "P1927R0": "Add std::is_partitioned_until algorithm",
    "P1928R0": "Merge data-parallel types from the Parallelism TS 2",
    "P1928R1": "Merge data-parallel types from the Parallelism TS 2",
    "P1928R2": "Merge data-parallel types from the Parallelism TS 2",
    "P1928R3": "Merge data-parallel types from the Parallelism TS 2",
    "P1928R4": "std::simd - Merge data-parallel types from the Parallelism TS 2",
    "P1928R5": "std::simd - Merge data-parallel types from the Parallelism TS 2",
    "P1928R6": "std::simd - Merge data-parallel types from the Parallelism TS 2",
    "P1928R7": "std::simd - Merge data-parallel types from the Parallelism TS 2",
    "P1928R8": "std::simd - Merge data-parallel types from the Parallelism TS 2",
    "P1928R9": "std::simd - Merge data-parallel types from the Parallelism TS 2",
    "P1929R0": "Making std::forward_list constexpr",
    "P1930R0": "Towards a standard unit systems library",
    "P1932R0": "Extension of the C++ random number generators",
    "P1933R0": "Suggestions for bulk_execute",
    "P1934R0": "boolean Considered Harmful",
    "P1935R0": "A C++ Approach to Physical Units",
    "P1935R1": "A C++ Approach to Physical Units",
    "P1935R2": "A C++ Approach to Physical Units",
    "P1936R0": "Dependent Static Assertion",
    "P1937R0": "Fixing inconsistencies between `constexpr` and `consteval` functions",
    "P1937R1": "Fixing inconsistencies between `constexpr` and `consteval` functions",
    "P1937R2": "Fixing inconsistencies between `constexpr` and `consteval` functions",
    "P1938R0": "if consteval",
    "P1938R1": "if consteval",
    "P1938R2": "if consteval",
    "P1938R3": "if consteval",
    "P1943R0": "Networking TS changes to improve completion token flexibility and performance",
    "P1944R0": "Add Constexpr Modifiers to Functions in cstring and cwchar Headers",
    "P1944R1": "Add Constexpr Modifiers to Functions in cstring and cwchar Headers",
    "P1945R0": "Making More Objects Contiguous",
    "P1946R0": "Allow defaulting comparisons by value",
    "P1947R0": "C++ exceptions and alternatives",
    "P1948R0": "Modules: Keep the dot",
    "P1949R0": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1949R1": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1949R2": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1949R3": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1949R4": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1949R5": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1949R6": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1949R7": "C++ Identifier Syntax using Unicode Standard Annex 31",
    "P1950R0": "An indirect value-type for C++",
    "P1950R1": "An indirect value-type for C++",
    "P1950R2": "An indirect value-type for C++",
    "P1951R0": "Default Arguments for pair's Forwarding Constructor",
    "P1951R1": "Default Arguments for pair's Forwarding Constructor",
    "P1953R0": "Unicode Identifiers And Unicode",
    "P1955R0": "Top Level Is Constant Evaluated",
    "P1955R1": "Top Level Is Constant Evaluated",
    "P1956R0": "On the naming of low-level bit manipulation functions",
    "P1956R1": "On the naming of low-level bit manipulation functions",
    "P1957R0": "Converting from T* to bool should be considered narrowing (re: US 212)",
    "P1957R1": "Converting from T* to bool should be considered narrowing (re: US 212)",
    "P1957R2": "Converting from T* to bool should be considered narrowing (re: US 212)",
    "P1958R0": "C++ Concurrent Buffer Queue",
    "P1959R0": "Remove std::weak_equality and std::strong_equality",
    "P1960R0": "NB Comment Changes Reviewed by SG1",
    "P1961R0": "Harmonizing the definitions of total order for pointers",
    "P1962R0": "How can you be so certain?",
    "P1963R0": "Fixing US 313",
    "P1964R0": "Casting convertible_to<bool> considered harmful",
    "P1964R1": "Wording for boolean-testable",
    "P1964R2": "Wording for _`boolean-testable`_",
    "P1965R0": "Blanket Wording for Specifying \"Hidden Friends\"",
    "P1967R0": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R1": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R2": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R3": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R4": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R5": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R6": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R7": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R8": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R9": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R10": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R11": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1967R12": "#embed - a simple, scannable preprocessor-based resource acquisition method",
    "P1968R0": "Core Language Working Group \"tentatively ready\" issues for the November, 2019 (Belfast) meeting",
    "P1969R0": "Core Language Working Group \"ready\" issues for the November, 2019 (Belfast) meeting",
    "P1970R0": "Consistency for size() functions",
    "P1970R1": "Consistency for size() functions",
    "P1970R2": "Consistency for size() functions: add ranges::ssize()",
    "P1971R0": "Core Language Changes for NB Comments at the November, 2019 (Belfast) Meeting",
    "P1972R0": "US105 Check satisfaction of constraints for non-templates when forming pointer to function",
    "P1973R0": "Rename _default_init functions (NB Comment DE002)",
    "P1973R1": "Rename _default_init functions (NB Comment DE002)",
    "P1974R0": "Non-transient constexpr allocation using propconst",
    "P1975R0": "Fixing the wording of parenthesized aggregate-initialization",
    "P1976R0": "Fixed-size `span` construction from dynamic-size range",
    "P1976R1": "Fixed-size 'span' construction from dynamic-size range",
    "P1976R2": "Fixed-size `span` construction from dynamic range",
    "P1978R0": "Rename _default_init functions and do nothing more",
    "P1979R0": "US086 Resolution",
    "P1980R0": "Wording for CA 096",
    "P1981R0": "Rename leap to leap_second",
    "P1982R0": "Rename link to time_zone_link",
    "P1983R0": "Wording for GB301, US296, US292, US291, and US283",
    "P1985R0": "Universal template parameters",
    "P1985R1": "Universal template parameters",
    "P1985R3": "Universal template parameters",
    "P1988R0": "Allow Templates in Local Classes",
    "P1988R1": "Allow Templates in Local Classes",
    "P1989R0": "Range constructor for std::string_view 2: Constrain Harder",
    "P1989R1": "Range constructor for std::string_view 2: Constrain Harder",
    "P1989R2": "Range constructor for std::string_view 2: Constrain Harder",
    "P1990R0": "Add operator[] to std::initializer_list",
    "P1990R1": "Add operator[] to std::initializer_list",
    "P1991R0": "WG21 2019-11 Belfast Record of Discussion",
    "P1993R0": "Restore factories to bulk_execute",
    "P1993R1": "Restore shared state to bulk_execute",
    "P1994R0": "elements_view needs its own sentinel",
    "P1994R1": "elements_view needs its own sentinel",
    "P1995R0": "Contracts - Use Cases",
    "P1995R1": "Contracts - Use Cases",
    "P1996R0": "Propagated template parameters",
    "P1997R0": "Relaxing Restrictions on Arrays",
    "P1997R1": "Relaxing Restrictions on Arrays",
    "P1998R0": "Simple Facility for Lossless Integer Conversion",
    "P1998R1": "Simple Facility for Lossless Integer Conversion",
    "P1999R0": "Process proposal: double-check evolutionary material via a Tentatively Ready status",
    "P2000R0": "Direction for ISO C++",
    "P2000R1": "Direction for ISO C++",
    "P2000R2": "Direction for ISO C++",
    "P2000R3": "Direction for ISO C++",
    "P2000R4": "Direction for ISO C++",
    "P2002R0": "Defaulted comparison specification cleanups",
    "P2002R1": "Defaulted comparison specification cleanups",
    "P2003R0": "Fixing Internal and External Linkage Entities in Header Units",
    "P2004R0": "Numbers and their Scopes",
    "P2005R0": "A Brief 2D Graphics Review",
    "P2006R0": "Eliminating heap-allocations in sender/receiver with connect()/start() as basis operations",
    "P2006R1": "Eliminating heap-allocations in sender/receiver with connect()/start() as basis operations",
    "P2007R0": "`std::from_chars` should work with `std::string_view`",
    "P2008R0": "Enable variable template template parameters",
    "P2009R0": "SG16: Unicode meeting summaries 2019-10-09 through 2019-12-11",
    "P2010R0": "Remove iostream operators from P1889",
    "P2011R0": "A pipeline-rewrite operator",
    "P2011R1": "A pipeline-rewrite operator",
    "P2012R0": "Fix the range-based for loop, Rev0ix the range-based for loop",
    "P2012R1": "Fix the range-based for loop, Rev1",
    "P2012R2": "Fix the range-based for loop, Rev2",
    "P2013R0": "Freestanding Language: Optional ::operator new",
    "P2013R1": "Freestanding Language: Optional ::operator new",
    "P2013R2": "Freestanding Language: Optional ::operator new",
    "P2013R3": "Freestanding Language: Optional ::operator new",
    "P2013R4": "Freestanding Language: Optional ::operator new",
    "P2013R5": "Freestanding Language: Optional ::operator new",
    "P2014R0": "Proposed resolution for US061/US062 - aligned allocation of coroutine frames",
    "P2016R0": "A step parameter for iota",
    "P2017R0": "Conditionally safe ranges",
    "P2017R1": "Conditionally borrowed ranges",
    "P2019R0": "Usability improvements for std::thread",
    "P2019R1": "Usability improvements for std::thread",
    "P2019R2": "Usability improvements for std::thread",
    "P2019R3": "Thread attributes",
    "P2019R4": "Thread attributes",
    "P2019R5": "Thread attributes",
    "P2019R6": "Thread attributes",
    "P2020R0": "Locales, Encodings and Unicode",
    "P2021R0": "Negative zero strikes again",
    "P2022R0": "Rangified version of lexicographical_compare_three_way",
    "P2022R1": "Rangified version of lexicographical_compare_three_way",
    "P2022R2": "Rangified version of lexicographical_compare_three_way",
    "P2022R3": "Rangified version of lexicographical_compare_three_way",
    "P2024R0": "Bloomberg Analysis of Unified Executors",
    "P2025R0": "Guaranteed copy elision for named return objects",
    "P2025R1": "Guaranteed copy elision for return variables",
    "P2025R2": "Guaranteed copy elision for return variables",
    "P2026R0": "A Constituent Study Group for Safety-Critical Applications",
    "P2027R0": "Moved-from objects need not be valid",
    "P2028R0": "What is ABI, and What Should WG21 Do About It?",
    "P2029R0": "Proposed resolution for core issues 411, 1656, and 2333; escapes in character and string literals",
    "P2029R1": "Proposed resolution for core issues 411, 1656, and 2333; escapes in character and string literals",
    "P2029R2": "Proposed resolution for core issues 411, 1656, and 2333; escapes in character and string literals",
    "P2029R3": "Proposed resolution for core issues 411, 1656, and 2333; escapes in character and string literals",
    "P2029R4": "Proposed resolution for core issues 411, 1656, and 2333; escapes in character and string literals",
    "P2030R0": "SG19: Machine Learning 2019/10/10-2020/01/09",
    "P2031R0": "SG14: Meeting Minutes 2019/10/08-2020/01/07",
    "P2032R0": "Contracts - What Came Before",
    "P2033R0": "History of Executor Properties",
    "P2034R0": "Partially Mutable Lambda Captures",
    "P2034R1": "Partially Mutable Lambda Captures",
    "P2034R2": "Partially Mutable Lambda Captures",
    "P2034R3": "Partially Mutable Lambda Captures",
    "P2034R4": "Partially Mutable Lambda Captures",
    "P2035R0": "Value Proposition: Allocator-Aware (AA) Software",
    "P2036R0": "Changing scope for lambda trailing-return-type",
    "P2036R1": "Changing scope for lambda trailing-return-type",
    "P2036R2": "Changing scope for lambda trailing-return-type",
    "P2036R3": "Changing scope for lambda trailing-return-type",
    "P2037R0": "String's gratuitous assignment",
    "P2037R1": "String's gratuitous assignment",
    "P2038R0": "Proposed nomenclature for contract-related proposals",
    "P2039R0": "do_until Loop",
    "P2040R0": "Reflection-based lazy-evaluation",
    "P2041R0": "Deleting variable templates",
    "P2041R1": "template = delete",
    "P2042R0": "Alternate names for make_shared_default_init",
    "P2043R0": "Don't constexpr All The Things",
    "P2044R0": "Member Templates for Local Classes",
    "P2044R1": "Member Templates for Local Classes",
    "P2044R2": "Member Templates for Local Classes",
    "P2045R0": "Missing Mandates for the standard library",
    "P2045R1": "Missing Mandates for the standard library",
    "P2046R0": "Rangify New Algorithms",
    "P2047R0": "An allocator-aware optional type",
    "P2047R1": "An allocator-aware optional type",
    "P2047R2": "An allocator-aware optional type",
    "P2047R3": "An allocator-aware optional type",
    "P2047R4": "An allocator-aware optional type",
    "P2047R5": "An allocator-aware optional type",
    "P2047R6": "An allocator-aware optional type",
    "P2047R7": "An allocator-aware optional type",
    "P2048R0": "Prohibit zero and NULL from being used as null pointer literals",
    "P2049R0": "Constraint refinement for special-cased functions",
    "P2050R0": "Tweaks to the design of source code fragments",
    "P2051R0": "C++ Library Issues to be moved in Prague",
    "P2052R0": "Making modern C++ i/o a consistent API experience from bottom to top",
    "P2053R0": "Defensive Checks Versus Input Validation",
    "P2053R1": "Defensive Checks Versus Input Validation",
    "P2054R0": "Audio I/O Software Use Cases",
    "P2054R1": "Audio I/O Software Use Cases",
    "P2055R0": "A Relaxed Guide to memory_order_relaxed",
    "P2057R0": "SG14 SG19 Past, Present and Future status",
    "P2058R0": "Make std::random_device Less Inscrutable",
    "P2059R0": "Make Pseudo-random Numbers Portable",
    "P2060R0": "Make Random Number Engines Seedable",
    "P2061R0": "Sequential consistency for atomic memcpy",
    "P2062R0": "The Circle Meta-model",
    "P2064R0": "Assumptions",
    "P2065R0": "naming and aliases",
    "P2066R0": "Suggested draft TS for C++ Extensions for Transaction Memory Light",
    "P2066R1": "Suggested draft TS for C++ Extensions for Transaction Memory Light",
    "P2066R2": "Suggested draft TS for C++ Extensions for Transaction Memory Light",
    "P2066R3": "Suggested draft TS for C++ Extensions for Transaction Memory Light",
    "P2066R4": "Suggested draft TS for C++ Extensions for Minimal Transactional Memory",
    "P2066R5": "Suggested draft TS for C++ Extensions for Minimal Transactional Memory",
    "P2066R6": "Suggested draft TS for C++ Extensions for Minimal Transactional Memory",
    "P2066R7": "Suggested draft TS for C++ Extensions for Minimal Transactional Memory",
    "P2066R8": "Suggested draft TS for C++ Extensions for Minimal Transactional Memory",
    "P2066R9": "Suggested draft TS for C++ Extensions for Minimal Transactional Memory",
    "P2066R10": "Suggested draft TS for C++ Extensions for Minimal Transactional Memory",
    "P2067R0": "Allowing trailing commas in ctor-initializer",
    "P2068R0": "Using ?: to reduce the scope of constexpr-if",
    "P2069R0": "Stackable, thread local, signal guards",
    "P2070R0": "A case for optional and object_ptr",
    "P2071R0": "Named universal character escapes",
    "P2071R1": "Named universal character escapes",
    "P2071R2": "Named universal character escapes",
    "P2072R0": "Differentiable programming for C++",
    "P2072R1": "Differentiable programming for C++",
    "P2073R0": "Debugging C++ coroutines",
    "P2074R0": "Asynchronous callstacks & coroutines",
    "P2075R0": "Philox as an extension of the C++ RNG engines",
    "P2075R1": "Philox as an extension of the C++ RNG engines",
    "P2075R2": "Philox as an extension of the C++ RNG engines",
    "P2075R3": "Philox as an extension of the C++ RNG engines",
    "P2075R4": "Philox as an extension of the C++ RNG engines",
    "P2075R5": "Philox as an extension of the C++ RNG engines",
    "P2076R0": "Previous disagreements on Contracts",
    "P2077R0": "Heterogeneous erasure overloads for associative containers",
    "P2077R1": "Heterogeneous erasure overloads for associative containers",
    "P2077R2": "Heterogeneous erasure overloads for associative containers",
    "P2077R3": "Heterogeneous erasure overloads for associative containers",
    "P2078R0": "Add new traits type std::is_complex",
    "P2079R0": "Shared execution engine for executors",
    "P2079R1": "Parallel Executor",
    "P2079R2": "System execution context",
    "P2079R3": "System execution context",
    "P2079R4": "System execution context",
    "P2080R0": "Polymorphic allocators: There is no such thing as One True Vocabulary Type",
    "P2081R0": "Rebase the Library Fundamentals v3 TS on C++20",
    "P2081R1": "Rebase the Library Fundamentals v3 TS on C++20",
    "P2082R0": "Fixing CTAD for aggregates",
    "P2082R1": "Fixing CTAD for aggregates",
    "P2085R0": "Consistent defaulted comparisons",
    "P2087R0": "Reflection Naming: fix reflexpr",
    "P2088R0": "Reflection Naming: Reification",
    "P2089R0": "Function parameter constraints are too fragile",
    "P2091R0": "Issues with Range Access CPOs",
    "P2092R0": "Disambiguating Nested-Requirements",
    "P2093R0": "Formatted output",
    "P2093R1": "Formatted output",
    "P2093R2": "Formatted output",
    "P2093R3": "Formatted output",
    "P2093R4": "Formatted output",
    "P2093R5": "Formatted output",
    "P2093R6": "Formatted output",
    "P2093R7": "Formatted output",
    "P2093R8": "Formatted output",
    "P2093R9": "Formatted output",
    "P2093R10": "Formatted output",
    "P2093R11": "Formatted output",
    "P2093R12": "Formatted output",
    "P2093R13": "Formatted output",
    "P2093R14": "Formatted output",
    "P2095R0": "Resolve lambda init-capture pack grammar (CWG2378)",
    "P2096R0": "Generalized wording for partial specializations",
    "P2096R1": "Generalized wording for partial specializations",
    "P2096R2": "Generalized wording for partial specializations",
    "P2098R0": "Proposing std::is_specialization_of",
    "P2098R1": "Proposing std::is_specialization_of",
    "P2100R0": "Keep unhandled_exception of a promise type mandatory - a response to US062 and FR066",
    "P2101R0": "\"Models\" subsumes \"satisfies\" (Wording for US298 and US300)",
    "P2102R0": "Make &quot;implicit expression variations&quot; more explicit (Wording for US185)",
    "P2103R0": "Core Language Changes for NB Comments at the February, 2020 (Prague) Meeting",
    "P2104R0": "Resolution for GB046 - Disallow changing concept values",
    "P2106R0": "Alternative wording for GB315 and GB316",
    "P2107R0": "Core issue 2436: US064 Copy semantics of coroutine parameters",
    "P2108R0": "Core Language Working Group \"ready\" issues for the February, 2020 (Prague) meeting",
    "P2109R0": "US084: Disallow \"export import foo\" outside of module interface",
    "P2113R0": "Proposed resolution for 2019 comment CA 112",
    "P2114R0": "Minimial Contract Use Cases",
    "P2115R0": "US069: Merging of multiple definitions for unnamed unscoped enumerations",
    "P2116R0": "Remove tuple-like protocol support from fixed-extent span",
    "P2117R0": "C++ Standard Library Issues Resolved Directly In Prague",
    "P2119R0": "Feedback on Simple Statistics functions",
    "P2120R0": "Simplified structured bindings protocol with pack aliases",
    "P2123R0": "interfaces: A Facility to Manage ABI/API Evolution",
    "P2125R0": "The Ecosystem Expense of Vocabulary Types",
    "P2126R0": "Unleashing the Power of Allocator-Aware (AA) Infrastructure",
    "P2127R0": "Making C++ Software Allocator Aware",
    "P2128R0": "Multidimensional subscript operator",
    "P2128R1": "Multidimensional subscript operator",
    "P2128R2": "Multidimensional subscript operator",
    "P2128R3": "Multidimensional subscript operator",
    "P2128R4": "Multidimensional subscript operator",
    "P2128R5": "Multidimensional subscript operator",
    "P2128R6": "Multidimensional subscript operator",
    "P2130R0": "WG21 2020-02 Prague Record of Discussion",
    "P2131R0": "Changes between C++17 and C++20",
    "P2132R0": "Language Evolution status after Prague 2020",
    "P2133R0": "The Incubator needs YOU!",
    "P2134R0": "Kaizen*: keep improving together!",
    "P2135R1": "P2055R1: A Relaxed Guide to memory_order_relaxed",
    "P2136R0": "invoke<R>",
    "P2136R1": "invoke_r",
    "P2136R2": "invoke_r",
    "P2136R3": "invoke_r",
    "P2137R0": "Goals and priorities for C++",
    "P2138R0": "Rules of Design<=>Wording engagement",
    "P2138R1": "Rules of Design<=>Wording engagement",
    "P2138R2": "Rules of Design<=>Wording engagement",
    "P2138R3": "Rules of Design <=> Specification engagement",
    "P2138R4": "Rules of Design<=>Specification engagement",
    "P2139R0": "Reviewing Deprecated Facilities of C++20 for C++23",
    "P2139R1": "Reviewing Deprecated Facilities of C++20 for C++23",
    "P2139R2": "Reviewing Deprecated Facilities of C++20 for C++23",
    "P2141R0": "Aggregates are named tuples",
    "P2141R1": "Aggregates are named tuples",
    "P2141R2": "Aggregates are named tuples",
    "P2142R1": "Allow '.' operator to work on pointers",
    "P2145R0": "Evolving C++ Remotely",
    "P2145R1": "Evolving C++ Remotely",
    "P2146R0": "Modern std::byte stream IO for C++",
    "P2146R1": "Modern std::byte stream IO for C++",
    "P2146R2": "Modern std::byte stream IO for C++",
    "P2148R0": "Library Evolution Design Guidelines",
    "P2149R0": "Remove system_executor",
    "P2150R0": "Down with typename in the library!",
    "P2152R0": "Querying the alignment of an object",
    "P2152R1": "Querying the alignment of an object",
    "P2155R0": "Policy property for describing adjacency",
    "P2156R0": "Allow Duplicate Attributes",
    "P2156R1": "Allow Duplicate Attributes",
    "P2159R0": "An Unbounded Decimal Floating-Point Type",
    "P2159R1": "A Big Decimal Type",
    "P2160R0": "Locks lock lockables (wording for LWG 2363)",
    "P2160R1": "Locks lock lockables (wording for LWG 2363)",
    "P2161R0": "Remove Default Candidate Executor",
    "P2161R1": "Remove Default Candidate Executor",
    "P2161R2": "Remove Default Candidate Executor",
    "P2162R0": "Inheriting from std::variant (resolving LWG3052)",
    "P2162R1": "Inheriting from std::variant (resolving LWG3052)",
    "P2162R2": "Inheriting from std::variant (resolving LWG3052)",
    "P2163R0": "Native tuples in C++",
    "P2164R0": "views::enumerate",
    "P2164R1": "views::enumerate",
    "P2164R2": "views::enumerate",
    "P2164R3": "views::enumerate",
    "P2164R4": "views::enumerate",
    "P2164R5": "views::enumerate",
    "P2164R6": "views::enumerate",
    "P2164R7": "views::enumerate",
    "P2164R8": "views::enumerate",
    "P2164R9": "views::enumerate",
    "P2165R0": "Comparing pair and tuples",
    "P2165R1": "Compatibility between tuple and tuple-like objects",
    "P2165R2": "Compatibility between tuple, pair and tuple-like objects",
    "P2165R3": "Compatibility between tuple, pair and tuple-like objects",
    "P2165R4": "Compatibility between tuple, pair and tuple-like objects",
    "P2166R0": "A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr",
    "P2166R1": "A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr",
    "P2167R0": "Improved Proposed Wording for LWG 2114",
    "P2167R1": "Improved Proposed Wording for LWG 2114 (contextually convertible to bool)",
    "P2167R2": "Improved Proposed Wording for LWG 2114 (contextually convertible to bool)",
    "P2167R3": "Improved Proposed Wording for LWG 2114 (contextually convertible to bool)",
    "P2168R0": "generator: A Synchronous Coroutine Generator Compatible With Ranges",
    "P2168R1": "generator: A Synchronous Coroutine Generator Compatible With Ranges",
    "P2168R2": "generator: A Synchronous Coroutine Generator Compatible With Ranges",
    "P2168R3": "generator: A Synchronous Coroutine Generator Compatible With Ranges",
    "P2169R0": "A Nice Placeholder With No Name",
    "P2169R1": "A Nice Placeholder With No Name",
    "P2169R2": "A Nice Placeholder With No Name",
    "P2169R3": "A Nice Placeholder With No Name",
    "P2169R4": "A Nice Placeholder With No Name",
    "P2170R0": "Feedback on implementing the proposed std::error type",
    "P2171R0": "Rebasing the Networking TS on C++20",
    "P2171R1": "Rebasing the Networking TS on C++20 (revision 1)",
    "P2171R2": "Rebasing the Networking TS on C++20 (revision 2)",
    "P2172R0": "What do we want from a modularized Standard Library?",
    "P2173R0": "Attributes on Lambda-Expressions",
    "P2173R1": "Attributes on Lambda-Expressions",
    "P2174R0": "Compound Literals",
    "P2174R1": "Compound Literals",
    "P2175R0": "Composable cancellation for sender-based async operations",
    "P2176R0": "A different take on inexpressible conditions",
    "P2178R0": "Misc lexing and string handling improvements",
    "P2178R1": "Misc lexing and string handling improvements",
    "P2179R0": "SG16: Unicode meeting summaries 2020-01-08 through 2020-05-27",
    "P2181R0": "Correcting the Design of Bulk Execution",
    "P2181R1": "Correcting the Design of Bulk Execution",
    "P2182R0": "Contract Support: Defining the Minimum Viable Feature Set",
    "P2182R1": "Contract Support: Defining the Minimum Viable Feature Set",
    "P2183R0": "Executors Review: Properties",
    "P2184R0": "Thriving in a crowded and changing world: C++ 2006-2020",
    "P2185R0": "Contracts Use Case Categorization",
    "P2186R0": "Removing Garbage Collection Support",
    "P2186R1": "Removing Garbage Collection Support",
    "P2186R2": "Removing Garbage Collection Support",
    "P2187R0": "std::swap_if, std::predictable",
    "P2187R3": "std::swap_if, std::predictable",
    "P2187R4": "std::swap_if, std::predictable",
    "P2187R5": "std::swap_if, std::predictable",
    "P2188R0": "Zap the Zap: Pointers should just be bags of bits",
    "P2188R1": "Zap the Zap: Pointers are sometimes just bags of bits",
    "P2191R0": "Modules: ADL & GMFs do not play together well (anymore)",
    "P2192R0": "std::valstat - function return type",
    "P2192R1": "std::valstat - function return type",
    "P2192R2": "std::valstat -Transparent Returns Handling",
    "P2192R3": "std::valstat - Returns Handling",
    "P2193R0": "How to structure a teaching topic",
    "P2193R1": "How to structure a teaching topic",
    "P2194R0": "The character set of the internal representation should be Unicode",
    "P2195R0": "Electronic Straw Polls",
    "P2195R1": "Electronic Straw Polls",
    "P2195R2": "Electronic Straw Polls",
    "P2196R0": "A lifetime-extending forwarder",
    "P2197R0": "Formatting for std::complex",
    "P2198R0": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2198R1": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2198R2": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2198R3": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2198R4": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2198R5": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2198R6": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2198R7": "Freestanding Feature-Test Macros and Implementation-Defined Extensions",
    "P2199R0": "Concepts to differentiate types",
    "P2201R0": "Mixed string literal concatenation",
    "P2201R1": "Mixed string literal concatenation",
    "P2202R0": "Senders/Receivers group Executors review report",
    "P2203R0": "LEWG Executors Customization Point Report",
    "P2205R0": "Executors Review - Polymorphic Executor",
    "P2206R0": "Executors Thread Pool review report",
    "P2207R0": "Executors review: concepts breakout group report",
    "P2209R0": "Bulk Schedule",
    "P2210R0": "Superior String Splitting",
    "P2210R1": "Superior String Splitting",
    "P2210R2": "Superior String Splitting",
    "P2211R0": "Exhaustiveness Checking for Pattern Matching",
    "P2212R0": "Relax Requirements for time_point::clock",
    "P2212R1": "Relax Requirements for time_point::clock",
    "P2212R2": "Relax Requirements for time_point::clock",
    "P2213R0": "Executors Naming",
    "P2213R1": "Executors Naming",
    "P2214R0": "A Plan for C++23 Ranges",
    "P2214R1": "A Plan for C++23 Ranges",
    "P2214R2": "A Plan for C++23 Ranges",
    "P2215R0": "\"Undefined behavior\" and the concurrency memory model",
    "P2215R1": "\"Undefined behavior\" and the concurrency memory model",
    "P2216R0": "std::format improvements",
    "P2216R1": "std::format improvements",
    "P2216R2": "std::format improvements",
    "P2216R3": "std::format improvements",
    "P2217R0": "SG16: Unicode meeting summaries 2020-06-10 through 2020-08-26",
    "P2218R0": "More flexible optional::value_or()",
    "P2219R0": "P0443 Executors Issues Needing Resolution",
    "P2220R0": "redefine properties in P0443",
    "P2221R0": "define P0443 cpos with tag_invoke",
    "P2223R0": "Trimming whitespaces before line splicing",
    "P2223R1": "Trimming whitespaces before line splicing",
    "P2223R2": "Trimming whitespaces before line splicing",
    "P2224R0": "A Better bulk_schedule",
    "P2226R0": "A function template to move from an object and reset it to its default constructed state",
    "P2227R0": "Update normative reference to POSIX",
    "P2228R0": "Slide Deck for P1949 EWG Presentation 20200924",
    "P2231R0": "Add further constexpr support for optional/variant",
    "P2231R1": "Add further constexpr support for optional/variant",
    "P2232R0": "Zero-Overhead Deterministic Exceptions: Catching Values",
    "P2233R0": "2020 Fall Library Evolution Polls",
    "P2233R1": "2020 Fall Library Evolution Polls",
    "P2233R2": "2020 Fall Library Evolution Polls",
    "P2233R3": "2020 Fall Library Evolution Polls",
    "P2234R0": "Consider a UB and IF-NDR Audit",
    "P2234R1": "Consider a UB and IF-NDR Audit",
    "P2235R0": "Disentangling schedulers and executors",
    "P2236R0": "C++ Standard Library Issues to be moved in Virtual Plenary, Nov. 2020",
    "P2237R0": "Metaprogramming",
    "P2238R0": "Core Language Working Group \"tentatively ready\" issues for the November, 2020 meeting",
    "P2242R0": "Non-literal variables (and labels and gotos) in constexpr functions",
    "P2242R1": "Non-literal variables (and labels and gotos) in constexpr functions",
    "P2242R2": "Non-literal variables (and labels and gotos) in constexpr functions",
    "P2242R3": "Non-literal variables (and labels and gotos) in constexpr functions",
    "P2244R0": "SG14: Low Latency/Games/Embedded/Finance/Simulation Meeting Minutes",
    "P2245R0": "SG19: Machine Learning Meeting Minutes",
    "P2246R0": "Character encoding of diagnostic text",
    "P2246R1": "Character encoding of diagnostic text",
    "P2247R0": "2020 Library Evolution Report",
    "P2247R1": "2020 Library Evolution Report",
    "P2248R0": "Enabling list-initialization for algorithms",
    "P2248R1": "Enabling list-initialization for algorithms",
    "P2248R2": "Enabling list-initialization for algorithms",
    "P2248R3": "Enabling list-initialization for algorithms",
    "P2248R4": "Enabling list-initialization for algorithms",
    "P2248R5": "Enabling list-initialization for algorithms",
    "P2248R6": "Enabling list-initialization for algorithms",
    "P2248R7": "Enabling list-initialization for algorithms",
    "P2248R8": "Enabling list-initialization for algorithms",
    "P2249R0": "Mixed comparisons for smart pointers",
    "P2249R1": "Mixed comparisons for smart pointers",
    "P2249R2": "Mixed comparisons for smart pointers",
    "P2249R3": "Mixed comparisons for smart pointers",
    "P2249R4": "Mixed comparisons for smart pointers",
    "P2249R5": "Mixed comparisons for smart pointers",
    "P2249R6": "Mixed comparisons for smart pointers",
    "P2250R0": "Scheduler vs Executor",
    "P2251R0": "Require span & basic_string_view to be Trivially Copyable",
    "P2251R1": "Require span & basic_string_view to be Trivially Copyable",
    "P2253R0": "SG16: Unicode meeting summaries 2020-09-09 through 2020-11-11",
    "P2254R0": "Executors Beyond Invocables",
    "P2255R0": "A type trait to detect reference binding to temporary",
    "P2255R1": "A type trait to detect reference binding to temporary",
    "P2255R2": "A type trait to detect reference binding to temporary",
    "P2257R0": "Blocking is an insufficient description for senders and receivers",
    "P2259R0": "Repairing input range adaptors and counted_iterator",
    "P2259R1": "Repairing input range adaptors and counted_iterator",
    "P2260R0": "WG21 2020-11 Virtual Meeting Record of Discussion",
    "P2262R0": "2020 Fall Library Evolution Poll Outcomes",
    "P2263R0": "A call for a WG21 managed chat service",
    "P2263R1": "A call for a WG21 managed chat service",
    "P2264R0": "Make assert() macro user friendly for C and C++",
    "P2264R1": "Make assert() macro user friendly for C and C++",
    "P2264R2": "Make assert() macro user friendly for C and C++",
    "P2264R3": "Make assert() macro user friendly for C and C++",
    "P2264R4": "Make assert() macro user friendly for C and C++",
    "P2264R5": "Make assert() macro user friendly for C and C++",
    "P2264R6": "Make assert() macro user friendly for C and C++",
    "P2264R7": "Make assert() macro user friendly for C and C++",
    "P2265R0": "Renaming any_invocable",
    "P2265R1": "Renaming any_invocable",
    "P2266R0": "Simpler implicit move",
    "P2266R1": "Simpler implicit move",
    "P2266R2": "Simpler implicit move",
    "P2266R3": "Simpler implicit move",
    "P2267R0": "Library Evolution Policies",
    "P2267R1": "Library Evolution Policies",
    "P2268R0": "Freestanding Roadmap",
    "P2272R0": "Safety & Security Review Board",
    "P2273R0": "Making std::unique_ptr constexpr",
    "P2273R1": "Making std::unique_ptr constexpr",
    "P2273R2": "Making std::unique_ptr constexpr",
    "P2273R3": "Making std::unique_ptr constexpr",
    "P2274R0": "C and C++ Compatibility Study Group",
    "P2276R0": "Fix std::cbegin(), std::ranges::cbegin, and cbegin() for span (fix of wrong fix of lwg3320)",
    "P2276R1": "Fix cbegin",
    "P2277R0": "Packs outside of Templates",
    "P2278R0": "cbegin should always return a constant iterator",
    "P2278R1": "cbegin should always return a constant iterator",
    "P2278R2": "cbegin should always return a constant iterator",
    "P2278R3": "cbegin should always return a constant iterator",
    "P2278R4": "cbegin should always return a constant iterator",
    "P2279R0": "We need a language mechanism for customization points",
    "P2280R0": "Using unknown references in constant expressions",
    "P2280R1": "Using unknown references in constant expressions",
    "P2280R2": "Using unknown references in constant expressions",
    "P2280R3": "Using unknown references in constant expressions",
    "P2280R4": "Using unknown references in constant expressions",
    "P2281R0": "Clarifying range adaptor objects",
    "P2281R1": "Clarifying range adaptor objects",
    "P2283R0": "constexpr for specialized memory algorithms",
    "P2283R1": "constexpr for specialized memory algorithms",
    "P2283R2": "constexpr for specialized memory algorithms",
    "P2285R0": "Are default function arguments in the immediate context?",
    "P2286R0": "Formatting Ranges",
    "P2286R1": "Formatting Ranges",
    "P2286R2": "Formatting Ranges",
    "P2286R3": "Formatting Ranges",
    "P2286R4": "Formatting Ranges",
    "P2286R5": "Formatting Ranges",
    "P2286R6": "Formatting Ranges",
    "P2286R7": "Formatting Ranges",
    "P2286R8": "Formatting Ranges",
    "P2287R0": "Designated-initializers for base classes",
    "P2287R1": "Designated-initializers for base classes",
    "P2287R2": "Designated-initializers for base classes",
    "P2289R0": "2021 Winter Library Evolution Polls",
    "P2290R0": "Delimited escape sequences",
    "P2290R1": "Delimited escape sequences",
    "P2290R2": "Delimited escape sequences",
    "P2290R3": "Delimited escape sequences",
    "P2291R0": "Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in Header",
    "P2291R1": "Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in Header",
    "P2291R2": "Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in Header",
    "P2291R3": "Add Constexpr Modifiers to Functions to_chars and from_chars for Integral Types in Header",
    "P2295R0": "Correct UTF-8 handling during phase 1 of translation",
    "P2295R1": "Correct UTF-8 handling during phase 1 of translation",
    "P2295R2": "Support for UTF-8 as a portable source file encoding",
    "P2295R3": "Support for UTF-8 as a portable source file encoding",
    "P2295R4": "Support for UTF-8 as a portable source file encoding",
    "P2295R5": "Support for UTF-8 as a portable source file encoding",
    "P2295R6": "Support for UTF-8 as a portable source file encoding",
    "P2297R0": "Wording improvements for encodings and character sets",
    "P2299R0": "`mdspan` and CTAD",
    "P2299R1": "`mdspan` and CTAD",
    "P2299R2": "`mdspan` and CTAD",
    "P2299R3": "`mdspan`s of All Dynamic Extents",
    "P2299R4": "`mdspan`s of All Dynamic Extents",
    "P2300R0": "std::execution",
    "P2300R1": "std::execution",
    "P2300R2": "std::execution",
    "P2300R3": "`std::execution`",
    "P2300R4": "std::execution",
    "P2300R5": "`std::execution`",
    "P2300R6": "`std::execution`",
    "P2300R7": "`std::execution`",
    "P2300R8": "`std::execution`",
    "P2300R9": "`std::execution`",
    "P2301R0": "Add a pmr alias for std::stacktrace",
    "P2301R1": "Add a pmr alias for std::stacktrace",
    "P2302R0": "Prefer std::ranges::contains over std::basic_string_view::contains",
    "P2302R1": "std::ranges::contains",
    "P2302R2": "std::ranges::contains",
    "P2302R3": "std::ranges::contains",
    "P2302R4": "std::ranges::contains",
    "P2303R0": "Function literals and value closures",
    "P2303R1": "Function literals and value closures",
    "P2303R2": "Function literals and value closures",
    "P2303R3": "Function literals and value closures",
    "P2303R4": "Basic lambdas for C",
    "P2304R0": "Improve type generic programming",
    "P2304R1": "Improve type generic programming",
    "P2304R2": "Improve type generic programming",
    "P2304R3": "Improve type generic programming",
    "P2305R0": "Type inference for variable definitions and function returns",
    "P2305R1": "Type inference for variable definitions and function returns",
    "P2305R2": "Type inference for variable definitions and function returns",
    "P2305R3": "Type inference for variable definitions and function returns",
    "P2305R4": "Type inference for variable definitions and function returns",
    "P2305R5": "Type inference for object definitions",
    "P2306R0": "Type-generic lambdas",
    "P2306R1": "Type-generic lambdas",
    "P2306R2": "Type-generic lambdas",
    "P2306R3": "Type-generic lambdas",
    "P2307R0": "Lvalue closures",
    "P2307R1": "Lvalue closures",
    "P2307R2": "Lvalue closures",
    "P2308R0": "Template parameter initialization",
    "P2308R1": "Template parameter initialization",
    "P2309R0": "A common C/C++ core specification",
    "P2310R0": "Revise spelling of keywords",
    "P2310R1": "Revise spelling of keywords",
    "P2311R0": "Make false and true first-class language features",
    "P2311R1": "Make false and true first-class language features",
    "P2311R2": "Make false and true first-class language features",
    "P2312R0": "Introduce the nullptr constant",
    "P2312R1": "Introduce the nullptr constant",
    "P2313R0": "Core Language Working Group \"tentatively ready\" issues for the February, 2021 meeting",
    "P2314R0": "Character sets and encodings",
    "P2314R1": "Character sets and encodings",
    "P2314R2": "Character sets and encodings",
    "P2314R3": "Character sets and encodings",
    "P2314R4": "Character sets and encodings",
    "P2315R0": "C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2021",
    "P2316R0": "Consistent character literal encoding",
    "P2316R1": "Consistent character literal encoding",
    "P2316R2": "Consistent character literal encoding",
    "P2317R0": "C++ - An Invisible foundation of everything",
    "P2318R0": "A Provenance-aware Memory Object Model for C",
    "P2318R1": "A Provenance-aware Memory Object Model for C",
    "P2320R0": "The Syntax of Static Reflection",
    "P2321R0": "zip",
    "P2321R1": "zip",
    "P2321R2": "zip",
    "P2322R0": "ranges::fold",
    "P2322R1": "ranges::fold",
    "P2322R2": "ranges::fold",
    "P2322R3": "ranges::fold",
    "P2322R4": "ranges::fold",
    "P2322R5": "ranges::fold",
    "P2322R6": "ranges::fold",
    "P2323R0": "maybe_unused attribute for labels",
    "P2324R0": "Labels at the end of compound statements (C compatibility)",
    "P2324R1": "Labels at the end of compound statements (C compatibility)",
    "P2324R2": "Labels at the end of compound statements (C compatibility)",
    "P2325R0": "Views should not be required to be default constructible",
    "P2325R1": "Views should not be required to be default constructible",
    "P2325R2": "Views should not be required to be default constructible",
    "P2325R3": "Views should not be required to be default constructible",
    "P2327R0": "De-deprecating volatile compound assignment",
    "P2327R1": "De-deprecating volatile compound operations",
    "P2328R0": "join_view should join all views of ranges",
    "P2328R1": "join_view should join all views of ranges",
    "P2329R0": "Move, Copy, and Locality at Scale",
    "P2330R0": "WG21 2021-02 Virtual Meeting Record of Discussion",
    "P2331R0": "Unsequenced functions",
    "P2332R0": "Establishing std::hive as replacement name for the proposed std::colony container",
    "P2333R0": "2021 Winter Library Evolution Poll Outcomes",
    "P2334R0": "Add support for preprocessing directives elifdef and elifndef",
    "P2334R1": "Add support for preprocessing directives elifdef and elifndef",
    "P2337R0": "Less constexpr for <cmath>",
    "P2338R0": "Freestanding Library: Character primitives and the C library",
    "P2338R1": "Freestanding Library: Character primitives and the C library",
    "P2338R2": "Freestanding Library: Character primitives and the C library",
    "P2338R3": "Freestanding Library: Character primitives and the C library",
    "P2338R4": "Freestanding Library: Character primitives and the C library",
    "P2339R0": "Contract violation handlers",
    "P2340R0": "Clarifying the status of the \u2018C headers\u2019",
    "P2340R1": "Clarifying the status of the \"C headers\"",
    "P2342R0": "For a Few Punctuators More",
    "P2345R0": "Relaxing Requirements of Moved-From Objects",
    "P2347R0": "Argument type deduction for non-trailing parameter packs",
    "P2347R1": "Argument type deduction for non-trailing parameter packs",
    "P2347R2": "Argument type deduction for non-trailing parameter packs",
    "P2348R0": "Whitespaces Wording Revamp",
    "P2348R1": "Whitespaces Wording Revamp",
    "P2348R2": "Whitespaces Wording Revamp",
    "P2348R3": "Whitespaces Wording Revamp",
    "P2350R0": "constexpr class",
    "P2350R1": "constexpr class",
    "P2350R2": "constexpr class",
    "P2351R0": "Mark all library static cast wrappers as [[nodiscard]]",
    "P2352R0": "SG16: Unicode meeting summaries 2020-12-09 through 2021-03-24",
    "P2353R0": "Metaprograms and fragments are needed in comma-separated contexts",
    "P2355R0": "Postfix fold expressions",
    "P2355R1": "Postfix fold expressions",
    "P2355R2": "Postfix fold expressions",
    "P2356R0": "Implementing Factory builder on top of P2320",
    "P2358R0": "Defining Contracts",
    "P2360R0": "Extend init-statement to allow alias-declaration",
    "P2361R0": "Unevaluated string literals",
    "P2361R1": "Unevaluated string literals",
    "P2361R2": "Unevaluated strings",
    "P2361R3": "Unevaluated strings",
    "P2361R4": "Unevaluated strings",
    "P2361R5": "Unevaluated strings",
    "P2361R6": "Unevaluated strings",
    "P2362R0": "Make obfuscating wide character literals ill-formed",
    "P2362R1": "Remove non-encodable wide character literals and multicharacter wide character literals",
    "P2362R2": "Remove non-encodable wide character literals and multicharacter wide character literals",
    "P2362R3": "Remove non-encodable wide character literals and multicharacter wide character literals",
    "P2363R0": "Extending associative containers with the remaining heterogeneous overloads",
    "P2363R1": "Extending associative containers with the remaining heterogeneous overloads",
    "P2363R2": "Extending associative containers with the remaining heterogeneous overloads",
    "P2363R3": "Extending associative containers with the remaining heterogeneous overloads",
    "P2363R4": "Extending associative containers with the remaining heterogeneous overloads",
    "P2363R5": "Extending associative containers with the remaining heterogeneous overloads",
    "P2367R0": "Remove misuses of list-initialization from Clause 24",
    "P2368R0": "2021 Spring Library Evolution Polls",
    "P2368R1": "2021 Spring Library Evolution Polls",
    "P2370R0": "Stacktrace from exception",
    "P2370R1": "Stacktrace from exception",
    "P2370R2": "Stacktrace from exception",
    "P2372R0": "Fixing locale handling in chrono formatters",
    "P2372R1": "Fixing locale handling in chrono formatters",
    "P2372R2": "Fixing locale handling in chrono formatters",
    "P2372R3": "Fixing locale handling in chrono formatters",
    "P2374R0": "views::cartesian_product",
    "P2374R1": "views::cartesian_product",
    "P2374R2": "views::cartesian_product",
    "P2374R3": "views::cartesian_product",
    "P2374R4": "views::cartesian_product",
    "P2375R0": "Generalisation of nth_element to a range of nths",
    "P2375R1": "Generalisation of nth_element to a range of nths",
    "P2376R0": "Comments on Simple Statistical Functions (p1708r4): Contracts, Exceptions and Special cases",
    "P2377R0": "[[nodiscard]] in the Standard Library: Clause 23 Iterators library",
    "P2378R0": "Properly define blocks as part of the grammar",
    "P2378R1": "Properly define blocks as part of the grammar",
    "P2380R0": "reference_wrapper Associations",
    "P2380R1": "reference_wrapper Associations",
    "P2381R0": "Pattern Matching with Exception Handling",
    "P2382R0": "Presentation Slides for P2123R0",
    "P2384R0": "2021 Spring Library Evolution Poll Outcomes",
    "P2384R1": "2021 Spring Library Evolution Poll Outcomes",
    "P2385R0": "C++ Standard Library Issues to be moved in Virtual Plenary, June 2021",
    "P2386R0": "Core Language Working Group \"ready\" Issues for the June, 2021 meeting",
    "P2387R0": "Pipe support for user-defined range adaptors",
    "P2387R1": "Pipe support for user-defined range adaptors",
    "P2387R2": "Pipe support for user-defined range adaptors",
    "P2387R3": "Pipe support for user-defined range adaptors",
    "P2388R0": "Abort-only contract support",
    "P2388R1": "Minimum Contract Support: either Ignore or Check_and_abort",
    "P2388R2": "Minimum Contract Support: either Ignore or Check_and_abort",
    "P2388R3": "Minimum Contract Support: either No_eval or Eval_and_abort",
    "P2388R4": "Minimum Contract Support: either No_eval or Eval_and_abort",
    "P2389R0": "`dextents` Index Type Parameter",
    "P2389R1": "`dextents` Index Type Parameter",
    "P2390R0": "Add annotations for unreachable control flow",
    "P2390R1": "Add annotations for unreachable control flow",
    "P2390R2": "Add annotations for unreachable control flow",
    "P2391R0": "C23 Update Report",
    "P2392R0": "Pattern matching using \u201cis\u201d and \u201cas\u201d",
    "P2392R1": "Pattern matching using &quot;is&quot; and &quot;as&quot;",
    "P2392R2": "Pattern matching using is and as",
    "P2393R0": "Cleaning up integer-class types",
    "P2393R1": "Cleaning up integer-class types",
    "P2395R0": "WG21 2021-06 Virtual Meeting Record of Discussion",
    "P2396R0": "Concurrency TS 2 fixes",
    "P2396R1": "Concurrency TS 2 fixes",
    "P2397R0": "SG16: Unicode meeting summaries 2021-04-14 through 2021-05-26",
    "P2400R0": "Library Evolution Report",
    "P2400R1": "Library Evolution Report: 2021-02-23 to 2021-05-25",
    "P2400R2": "Library Evolution Report: 2021-06-01 to 2021-09-20",
    "P2400R3": "Library Evolution Report: 2021-09-28 to 2022-01-25",
    "P2401R0": "Add a conditional noexcept specification to std::exchange",
    "P2402R0": "A free function linear algebra interface based on the BLAS (slides)",
    "P2403R0": "Presentation on P2300 - std::execution",
    "P2404R0": "Relaxing equality_comparable_with's and three_way_comparable_with's common reference requirements to",
    "P2404R1": "Move-only types for equality_comparable_with, totally_ordered_with, and three_way_comparable_with",
    "P2404R2": "Move-only types for equality_comparable_with, totally_ordered_with, and three_way_comparable_with",
    "P2404R3": "Move-only types for equality_comparable_with, totally_ordered_with, and three_way_comparable_with",
    "P2405R0": "nullopt_t and nullptr_t should both have operator and operator==",
    "P2406R0": "Fix counted_iterator interaction with input iterators",
    "P2406R1": "Fix counted_iterator interaction with input iterators",
    "P2406R2": "Add lazy_counted_iterator",
    "P2406R3": "Add lazy_counted_iterator",
    "P2406R4": "Add lazy_counted_iterator",
    "P2406R5": "Add lazy_counted_iterator",
    "P2407R0": "Freestanding Library: Partial Classes",
    "P2407R1": "Freestanding Library: Partial Classes",
    "P2407R2": "Freestanding Library: Partial Classes",
    "P2407R3": "Freestanding Library: Partial Classes",
    "P2407R4": "Freestanding Library: Partial Classes",
    "P2407R5": "Freestanding Library: Partial Classes",
    "P2408R0": "Ranges views as inputs to non-Ranges algorithms",
    "P2408R1": "Ranges views as inputs to non-Ranges algorithms",
    "P2408R2": "Ranges iterators as inputs to non-Ranges algorithms",
    "P2408R3": "Ranges iterators as inputs to non-Ranges algorithms",
    "P2408R4": "Ranges iterators as inputs to non-Ranges algorithms",
    "P2408R5": "Ranges iterators as inputs to non-Ranges algorithms",
    "P2409R0": "Requirements for Usage of C++ Modules at Bloomberg",
    "P2410R0": "Type-and-resource safety in modern C++",
    "P2411R0": "Thoughts on pattern matching",
    "P2412R0": "Minimal module support for the standard library",
    "P2413R0": "Remove unsafe conversions of unique_ptr",
    "P2413R1": "Remove unsafe conversions of unique_ptr",
    "P2414R0": "Pointer lifetime-end zap proposed solutions",
    "P2414R1": "Pointer lifetime-end zap proposed solutions",
    "P2414R2": "Pointer lifetime-end zap proposed solutions",
    "P2414R3": "Pointer lifetime-end zap proposed solutions",
    "P2415R0": "What is a view?",
    "P2415R1": "What is a view?",
    "P2415R2": "What is a view?",
    "P2416R0": "Presentation of requirements in the standard library",
    "P2416R1": "Presentation of requirements in the standard library",
    "P2416R2": "Presentation of requirements in the standard library",
    "P2417R0": "A more constexpr bitset",
    "P2417R1": "A more constexpr bitset",
    "P2417R2": "A more constexpr bitset",
    "P2418R0": "Add support for std::generator-like types to std::format",
    "P2418R1": "Add support for std::generator-like types to std::format",
    "P2418R2": "Add support for std::generator-like types to std::format",
    "P2419R0": "Clarify handling of encodings in localized formatting of chrono types",
    "P2419R1": "Clarify handling of encodings in localized formatting of chrono types",
    "P2419R2": "Clarify handling of encodings in localized formatting of chrono types",
    "P2420R0": "2021 Summer Library Evolution Polls",
    "P2422R0": "Remove nodiscard annotations from the standard library specification",
    "P2423R0": "C Floating Point Study Group Liaison Report",
    "P2424R0": "Abbreviated Parameters",
    "P2425R0": "Expression Function Body",
    "P2428R0": "Slides: BSI issues with P2300",
    "P2429R0": "Concepts Error Messages for Humans",
    "P2430R0": "Slides: Partial success scenarios with P2300",
    "P2431R0": "Presentation: Plans for P2300 Revision 2",
    "P2432R0": "Fixing istream_view",
    "P2432R1": "Fix istream_view, Rev 1",
    "P2434R0": "Nondeterministic pointer provenance",
    "P2434R1": "Nondeterministic pointer provenance",
    "P2435R0": "2021 Summer Library Evolution Poll Outcomes",
    "P2435R1": "2021 Summer Library Evolution Poll Outcomes",
    "P2436R0": "2021 September Library Evolution Polls",
    "P2437R0": "Support for #warning",
    "P2437R1": "Support for #warning",
    "P2438R0": "std::string::substr() &&",
    "P2438R1": "std::string::substr() &&",
    "P2438R2": "std::string::substr() &&",
    "P2439R0": "Slides for P2415R1, what is a view?",
    "P2440R0": "ranges::iota, ranges::shift_left, and ranges::shift_right",
    "P2440R1": "ranges::iota, ranges::shift_left, and ranges::shift_right",
    "P2441R0": "views::join_with",
    "P2441R1": "views::join_with",
    "P2441R2": "views::join_with",
    "P2442R0": "Windowing range adaptors: views::chunk and views::slide",
    "P2442R1": "Windowing range adaptors: views::chunk and views::slide",
    "P2443R0": "views::chunk_by",
    "P2443R1": "views::chunk_by",
    "P2444R0": "The Asio asynchronous model",
    "P2445R0": "forward_like",
    "P2445R1": "forward_like",
    "P2446R0": "views::move",
    "P2446R1": "views::all_move",
    "P2446R2": "views::as_rvalue",
    "P2447R0": "std::span and the missing constructor",
    "P2447R1": "std::span and the missing constructor",
    "P2447R2": "std::span and the missing constructor",
    "P2447R3": "std::span over an initializer list",
    "P2447R4": "std::span over an initializer list",
    "P2447R5": "std::span over an initializer list",
    "P2447R6": "std::span over an initializer list",
    "P2448R0": "Relaxing some constexpr restrictions",
    "P2448R1": "Relaxing some constexpr restrictions",
    "P2448R2": "Relaxing some constexpr restrictions",
    "P2450R0": "C++ Standard Library Issues to be moved in Virtual Plenary, Oct. 2021",
    "P2451R0": "2021 September Library Evolution Poll Outcomes",
    "P2452R0": "2021 October Library Evolution and Concurrency Polls on Networking and Executors",
    "P2453R0": "2021 October Library Evolution Poll Outcomes",
    "P2454R0": "2021 November Library Evolution Polls",
    "P2455R0": "2021 November Library Evolution Poll Outcomes",
    "P2456R0": "2021 December Library Evolution Polls",
    "P2457R0": "2021 December Library Evolution Poll Outcomes",
    "P2458R0": "2022 January Library Evolution Polls",
    "P2458R1": "2022 January Library Evolution Polls",
    "P2459R0": "2022 January Library Evolution Poll Outcomes",
    "P2460R0": "Relax requirements on wchar_t to match existing practices",
    "P2460R1": "Relax requirements on wchar_t to match existing practices",
    "P2460R2": "Relax requirements on wchar_t to match existing practices",
    "P2461R0": "Closure-based Syntax for Contracts",
    "P2461R1": "Closure-based Syntax for Contracts",
    "P2462R0": "Core Language Working Group \u201cready\u201d issues for the October, 2021 meeting",
    "P2463R0": "Slides for P2444r0 The Asio asynchronous model",
    "P2464R0": "Ruminations on networking and executors",
    "P2465R0": "Standard Library Modules std and std.all",
    "P2465R1": "Standard Library Modules std and std.compat",
    "P2465R2": "Standard Library Modules std and std.compat",
    "P2465R3": "Standard Library Modules std and std.compat",
    "P2466R0": "The notes on contract annotations",
    "P2467R0": "Support exclusive mode for fstreams",
    "P2467R1": "Support exclusive mode for fstreams",
    "P2468R0": "The Equality Operator You Are Looking For",
    "P2468R1": "The Equality Operator You Are Looking For",
    "P2468R2": "The Equality Operator You Are Looking For",
    "P2469R0": "Response to P2464: The Networking TS is baked, P2300 Sender/Receiver is not.",
    "P2470R0": "Slides for presentation of P2300R2: std::execution (sender/receiver)",
    "P2471R0": "NetTS, ASIO and Sender Library Design Comparison",
    "P2471R1": "NetTS, ASIO and Sender Library Design Comparison",
    "P2472R0": "make_function_ref: A More Functional function_ref",
    "P2472R1": "make function_ref more functional",
    "P2472R2": "make function_ref more functional",
    "P2472R3": "make function_ref more functional",
    "P2473R0": "Distributing C++ Module Libraries",
    "P2473R1": "Distributing C++ Module Libraries",
    "P2474R0": "views::repeat",
    "P2474R1": "views::repeat",
    "P2474R2": "views::repeat",
    "P2475R0": "WG21 2021-10 Virtual Meeting Record of Discussion",
    "P2477R0": "Allow programmer to control and detect coroutine elision by static constexpr bool should_elide() and",
    "P2477R1": "Allow programmer to control and detect coroutine elision by static constexpr bool must_elide() and",
    "P2477R2": "Allow programmer to control and detect coroutine elision",
    "P2477R3": "Allow programmers to control coroutine elision",
    "P2478R0": "_Thread_local for better C++ interoperability with C",
    "P2479R0": "Slides for P2464",
    "P2480R0": "Response to P2471: \"NetTS, Asio, and Sender library design comparison\" - corrected and expanded",
    "P2481R0": "Forwarding reference to specific type/template",
    "P2481R1": "Forwarding reference to specific type/template",
    "P2481R2": "Forwarding reference to specific type/template",
    "P2483R0": "Support Non-copyable Types for single_view",
    "P2484R0": "Extending class types as non-type template parameters",
    "P2485R0": "Do not add value_exists and value_or to C++23",
    "P2486R0": "Structured naming for function object and CPO values",
    "P2486R1": "Structured naming for function object and CPO values",
    "P2487R0": "Attribute-like syntax for contract annotations",
    "P2487R1": "Is attribute-like syntax adequate for contract annotations?",
    "P2489R0": "Library Evolution Plan for Completing C++23",
    "P2490R0": "Zero-overhead exception stacktraces",
    "P2490R3": "Zero-overhead exception stacktraces",
    "P2491R0": "Text encodings follow-up",
    "P2492R0": "Attending C++ Standards Committee Meetings During a Pandemic",
    "P2493R0": "Missing feature test macros for C++20 core papers",
    "P2494R0": "Relaxing range adaptors to allow for move only types",
    "P2494R1": "Relaxing range adaptors to allow for move only types",
    "P2494R2": "Relaxing range adaptors to allow for move only types",
    "P2495R0": "Interfacing stringstreams with string_view",
    "P2495R1": "Interfacing stringstreams with string_view",
    "P2495R2": "Interfacing stringstreams with string_view",
    "P2495R3": "Interfacing stringstreams with string_view",
    "P2497R0": "Testing for success or failure of charconv functions",
    "P2498R0": "Forward compatibility of text_encoding with additional encoding registries",
    "P2498R1": "Forward compatibility of text_encoding with additional encoding registries",
    "P2499R0": "string_view range constructor should be explicit",
    "P2500R0": "C++17 parallel algorithms and P2300",
    "P2500R1": "C++ parallel algorithms and P2300",
    "P2500R2": "C++ parallel algorithms and P2300",
    "P2501R0": "Undo the rename of views::move and views::as_const",
    "P2502R0": "std::generator: Synchronous Coroutine Generator for Ranges",
    "P2502R1": "std::generator: Synchronous Coroutine Generator for Ranges",
    "P2502R2": "std::generator: Synchronous Coroutine Generator for Ranges",
    "P2504R0": "Computations as a global solution to concurrency",
    "P2505R0": "Monadic Functions for std::expected",
    "P2505R1": "Monadic Functions for std::expected",
    "P2505R2": "Monadic Functions for std::expected",
    "P2505R3": "Monadic Functions for std::expected",
    "P2505R4": "Monadic Functions for std::expected",
    "P2505R5": "Monadic Functions for std::expected",
    "P2506R0": "std::lazy: a coroutine for deferred execution",
    "P2507R0": "Only [[assume]] conditional-expressions",
    "P2507R1": "Limit [[assume]] to conditional-expressions",
    "P2508R0": "Exposing std::basic-format-string",
    "P2508R1": "Exposing std::basic-format-string",
    "P2508R2": "Exposing std::basic-format-string",
    "P2509R0": "A proposal for a type trait to detect value-preserving conversions",
    "P2510R0": "Formatting pointers",
    "P2510R1": "Formatting pointers",
    "P2510R2": "Formatting pointers",
    "P2510R3": "Formatting pointers",
    "P2511R0": "Beyond operator(): NTTP callables in type-erased call wrappers",
    "P2511R1": "Beyond operator(): NTTP callables in type-erased call wrappers",
    "P2511R2": "Beyond operator(): NTTP callables in type-erased call wrappers",
    "P2512R0": "SG16: Unicode meeting summaries 2021-06-09 through 2021-12-15",
    "P2513R0": "char8_t Compatibility and Portability Fixes",
    "P2513R1": "char8_t Compatibility and Portability Fix",
    "P2513R2": "char8_t Compatibility and Portability Fix",
    "P2513R3": "char8_t Compatibility and Portability Fix",
    "P2513R4": "char8_t Compatibility and Portability Fix",
    "P2514R0": "std::breakpoint",
    "P2515R0": "std::is_debugger_present",
    "P2516R0": "string_view is implicitly convertible from what?",
    "P2517R0": "Add a conditional noexcept specification to std::apply",
    "P2517R1": "Add a conditional noexcept specification to std::apply",
    "P2520R0": "move_iterator should be a random access iterator",
    "P2521R0": "Contract support \u2014 Working Paper",
    "P2521R1": "Contract support \u2014 Working Paper",
    "P2521R2": "Contract support - Working Paper",
    "P2521R3": "Contract support \u2014 Record of SG21 consensus",
    "P2521R4": "Contract support \u2014 Record of SG21 consensus",
    "P2521R5": "Contract support \u2014 Record of SG21 consensus",
    "P2523R0": "Request for re-inclusion of std::hive proposal in C++23",
    "P2524R0": "SG14: Low Latency/Games/Embedded/Finance/Simulation 2020/12/09-2022/01/12",
    "P2525R0": "SG19: Machine Learning Meeting Minutes 2020/12/10-2022/01/13",
    "P2527R0": "std::variant_alternative_index and std::variant_alternative_index_v",
    "P2527R1": "std::variant_alternative_index and std::tuple_element_index",
    "P2527R2": "std::variant_alternative_index and std::tuple_element_index",
    "P2527R3": "std::variant_alternative_index and std::tuple_element_index",
    "P2528R0": "C/C++ Identifier Security using Unicode Standard Annex 39",
    "P2529R0": "generator should have T&& reference_type",
    "P2530R0": "Why Hazard Pointers should be in C++26",
    "P2530R1": "Why Hazard Pointers should be in C++26",
    "P2530R2": "Why Hazard Pointers should be in C++26",
    "P2530R3": "Hazard Pointers for C++26",
    "P2531R0": "C++ Standard Library Issues to be moved in Virtual Plenary, Feb. 2022",
    "P2532R0": "Removing exception_ptr from the Receiver Concepts",
    "P2533R0": "Core Language Working Group \"ready\" Issues for the February, 2022 meeting",
    "P2534R0": "Slides: function_ref in the wild (P0792R7 presentation)",
    "P2535R0": "Message fences",
    "P2536R0": "Distributing C++ Module Libraries with dependencies json files.",
    "P2537R0": "Relax va_start Requirements to Match C",
    "P2537R1": "Relax va_start Requirements to Match C",
    "P2537R2": "Relax va_start Requirements to Match C",
    "P2538R0": "ADL-proof std::projected",
    "P2538R1": "ADL-proof std::projected",
    "P2539R0": "Should the output of std::print to a terminal be synchronized with the underlying stream?",
    "P2539R1": "Should the output of std::print to a terminal be synchronized with the underlying stream?",
    "P2539R2": "Should the output of std::print to a terminal be synchronized with the underlying stream?",
    "P2539R3": "Should the output of std::print to a terminal be synchronized with the underlying stream?",
    "P2539R4": "Should the output of std::print to a terminal be synchronized with the underlying stream?",
    "P2540R0": "Empty Product for certain Views",
    "P2540R1": "Empty Product for certain Views",
    "P2541R0": "Consider renaming remove_quals",
    "P2542R0": "views::concat",
    "P2542R1": "views::concat",
    "P2542R2": "views::concat",
    "P2542R3": "views::concat",
    "P2542R4": "views::concat",
    "P2542R5": "views::concat",
    "P2542R6": "views::concat",
    "P2542R7": "views::concat",
    "P2542R8": "views::concat",
    "P2544R0": "C++ exceptions are becoming more and more problematic",
    "P2545R0": "Why RCU Should be in C++26",
    "P2545R1": "Why RCU Should be in C++26",
    "P2545R2": "Why RCU Should be in C++26",
    "P2545R3": "Why RCU Should be in C++26",
    "P2545R4": "Read-Copy Update (RCU)",
    "P2546R0": "Debugging Support",
    "P2546R1": "Debugging Support",
    "P2546R2": "Debugging Support",
    "P2546R3": "Debugging Support",
    "P2546R4": "Debugging Support",
    "P2546R5": "Debugging Support",
    "P2547R0": "Language support for customisable functions",
    "P2547R1": "Language support for customisable functions",
    "P2548R0": "copyable_function",
    "P2548R1": "copyable_function",
    "P2548R2": "copyable_function",
    "P2548R3": "copyable_function",
    "P2548R4": "copyable_function",
    "P2548R5": "copyable_function",
    "P2548R6": "copyable_function",
    "P2549R0": "std::unexpected should have error() as member accessor",
    "P2549R1": "std::unexpected should have error() as member accessor",
    "P2550R0": "ranges::copy should say output_iterator somewhere",
    "P2551R0": "Clarify intent of P1841 numeric traits",
    "P2551R1": "Clarify intent of P1841 numeric traits",
    "P2551R2": "Clarify intent of P1841 numeric traits",
    "P2552R0": "On the ignorability of standard attributes",
    "P2552R1": "On the ignorability of standard attributes",
    "P2552R2": "On the ignorability of standard attributes",
    "P2552R3": "On the ignorability of standard attributes",
    "P2553R0": "Make mdspan size_type controllable",
    "P2553R1": "Make mdspan size_type controllable",
    "P2554R0": "C-Array Interoperability of MDSpan",
    "P2555R0": "Naming improvements for std::execution",
    "P2555R1": "Naming improvements for std::execution",
    "P2557R0": "WG21 2022-02 Virtual Meeting Record of Discussion",
    "P2558R0": "Add @, $, and ` to the basic character set",
    "P2558R1": "Add @, $, and ` to the basic character set",
    "P2558R2": "Add @, $, and ` to the basic character set",
    "P2559R0": "Plan for Concurrency Technical Specification Version 2",
    "P2559R1": "Plan for Concurrency Technical Specification Version 2",
    "P2560R0": "Comparing value- and type-based reflection",
    "P2561R0": "operator??",
    "P2561R1": "An error propagation operator",
    "P2561R2": "A control flow operator",
    "P2562R0": "constexpr Stable Sorting",
    "P2562R1": "constexpr Stable Sorting",
    "P2564R0": "consteval needs to propagate up",
    "P2564R1": "consteval needs to propagate up",
    "P2564R2": "consteval needs to propagate up",
    "P2564R3": "consteval needs to propagate up",
    "P2565R0": "Supporting User-Defined Attributes",
    "P2568R0": "Proposal of std::map::at_ptr",
    "P2569R0": "*_HAS_SUBNORM==0 implies what?",
    "P2570R0": "On side effects in contract annotations",
    "P2570R1": "Contract predicates that are not predicates",
    "P2570R2": "Contract predicates that are not predicates",
    "P2572R0": "std::format() fill character allowances",
    "P2572R1": "std::format() fill character allowances",
    "P2573R0": "= delete(\"should have a reason\");",
    "P2573R1": "= delete(\"should have a reason\");",
    "P2573R2": "= delete(\"should have a reason\");",
    "P2574R0": "2022-05 Library Evolution Polls",
    "P2575R0": "2022-05 Library Evolution Poll Outcomes",
    "P2576R0": "The constexpr specifier for object definitions",
    "P2577R0": "C++ Modules Discovery in Prebuilt Library Releases",
    "P2577R1": "C++ Modules Discovery in Prebuilt Library Releases",
    "P2577R2": "C++ Modules Discovery in Prebuilt Library Releases",
    "P2579R0": "Mitigation strategies for P2036 \u201cChanging scope for lambda trailing-return-type\u201d",
    "P2580R0": "Tuple protocol for C-style arrays T[N]",
    "P2581R0": "Specifying the Interoperability of Binary Module Interface Files",
    "P2581R1": "Specifying the Interoperability of Built Module Interface Files",
    "P2581R2": "Specifying the Interoperability of Built Module Interface Files",
    "P2582R0": "Wording for class template argument deduction from inherited constructors",
    "P2582R1": "Wording for class template argument deduction from inherited constructors",
    "P2584R0": "A More Composable from_chars",
    "P2585R0": "Improving default container formatting",
    "P2585R1": "Improving default container formatting",
    "P2586R0": "Standard Secure Networking",
    "P2587R0": "to_string or not to_string",
    "P2587R1": "to_string or not to_string",
    "P2587R2": "to_string or not to_string",
    "P2587R3": "to_string or not to_string",
    "P2588R0": "Relax std::barrier phase completion step guarantees",
    "P2588R1": "Relax std::barrier phase completion step guarantees",
    "P2588R2": "Relax std::barrier phase completion step guarantees",
    "P2588R3": "Relax std::barrier phase completion step guarantees",
    "P2589R0": "static operator[]",
    "P2589R1": "static operator[]",
    "P2590R0": "Explicit lifetime management",
    "P2590R1": "Explicit lifetime management",
    "P2590R2": "Explicit lifetime management",
    "P2591R0": "Concatenation of strings and string views",
    "P2591R1": "Concatenation of strings and string views",
    "P2591R2": "Concatenation of strings and string views",
    "P2591R3": "Concatenation of strings and string views",
    "P2591R4": "Concatenation of strings and string views",
    "P2591R5": "Concatenation of strings and string views",
    "P2592R0": "Hashing support for std::chrono value classes",
    "P2592R1": "Hashing support for std::chrono value classes",
    "P2592R2": "Hashing support for std::chrono value classes",
    "P2592R3": "Hashing support for std::chrono value classes",
    "P2593R0": "Allowing static_assert(false)",
    "P2593R1": "Allowing static_assert(false)",
    "P2594R0": "Slides: Allow programmer to control and detect coroutine elision (P2477R2 Presentation))",
    "P2594R1": "Slides: Allow programmer to control coroutine elision (P2477R3 Presentation))",
    "P2596R0": "Improve std::hive::reshape",
    "P2598R0": "\u201cChanging scope for lambda trailing-return-type\u201d (P2036) should not be a DR",
    "P2599R0": "mdspan::size_type should be index_type",
    "P2599R1": "mdspan::size_type should be index_type",
    "P2599R2": "index _type & size_type in mdspan",
    "P2600R0": "A minimal ADL restriction to avoid ill-formed template instantiation",
    "P2601R0": "To make redundant empty angle brackets optional for class template argument lists",
    "P2601R1": "Make redundant empty angle brackets optional",
    "P2602R0": "Poison Pills are Too Toxic",
    "P2602R1": "Poison Pills are Too Toxic",
    "P2602R2": "Poison Pills are Too Toxic",
    "P2603R0": "member function pointer to function pointer",
    "P2603R1": "member function pointer to function pointer",
    "P2604R0": "MDSPAN: rename pointer and contiguous",
    "P2605R0": "SG16: Unicode meeting summaries 2022-01-12 through 2022-06-08",
    "P2607R0": "Let alignas specify minimum alignment",
    "P2608R0": "Allow multiple init-statements",
    "P2609R0": "Relaxing Ranges Just A Smidge",
    "P2609R1": "Relaxing Ranges Just A Smidge",
    "P2609R2": "Relaxing Ranges Just A Smidge",
    "P2609R3": "Relaxing Ranges Just A Smidge",
    "P2610R0": "2022-07 Library Evolution Polls",
    "P2611R0": "2022-07 Library Evolution Poll Outcomes",
    "P2613R0": "Add the missing `empty` to `mdspan`",
    "P2613R1": "Add the missing `empty` to `mdspan`",
    "P2614R0": "Deprecate numeric_limits::has_denorm",
    "P2614R1": "Deprecate numeric_limits::has_denorm",
    "P2614R2": "Deprecate numeric_limits::has_denorm",
    "P2615R0": "Meaningful exports",
    "P2615R1": "Meaningful exports",
    "P2616R0": "Making std::atomic notification/wait operations usable in more situations",
    "P2616R1": "Making std::atomic notification/wait operations usable in more situations",
    "P2616R2": "Making std::atomic notification/wait operations usable in more situations",
    "P2616R3": "Making std::atomic notification/wait operations usable in more situations",
    "P2616R4": "Making std::atomic notification/wait operations usable in more situations",
    "P2617R0": "Responses to NB comments on DTS 12907 \"Extensions to C++ for Transactional Memory Version 2\"",
    "P2618R0": "C++ Standard Library Issues to be moved in Virtual Plenary, Jul. 2022",
    "P2620R0": "Lifting artificial restriction on universal character names",
    "P2620R1": "Lifting artificial restriction on universal character names",
    "P2620R2": "Improve the wording for Universal Character Names in identifiers",
    "P2621R0": "UB? In my Lexer?",
    "P2621R1": "UB? In my Lexer?",
    "P2621R2": "UB? In my Lexer?",
    "P2621R3": "UB? In my Lexer?",
    "P2622R0": "Core Language Working Group \"ready\" Issues for the July, 2022 meeting",
    "P2623R0": "implicit constant initialization",
    "P2623R1": "implicit constant initialization",
    "P2623R2": "implicit constant initialization",
    "P2624R0": "Make operations on bools more portable",
    "P2625R0": "Slides: Life without operator() (P2511R1 presentation)",
    "P2626R0": "charN_t incremental adoption: Casting pointers of UTF character types",
    "P2627R0": "WG21 2022-07 Virtual Meeting Record of Discussion",
    "P2628R0": "Extend barrier APIs with memory_order",
    "P2629R0": "barrier token-less split arrive/wait",
    "P2630R0": "Submdspan",
    "P2630R1": "Submdspan",
    "P2630R2": "Submdspan",
    "P2630R3": "Submdspan",
    "P2630R4": "Submdspan",
    "P2631R0": "Publish TS Library Fundamentals v3 Now!",
    "P2632R0": "A plan for better template meta programming facilities in C++26",
    "P2633R0": "thread_local_inherit: Enhancing thread-local storage",
    "P2634R0": "Allow qualifiers in constructor declarations",
    "P2635R0": "Enhancing the break statement",
    "P2636R0": "References to ranges should always be viewable",
    "P2636R1": "References to ranges should always be viewable",
    "P2636R2": "References to ranges should always be viewable",
    "P2637R0": "Member visit and apply",
    "P2637R1": "Member visit",
    "P2637R2": "Member visit",
    "P2637R3": "Member visit",
    "P2638R0": "Intel's response to P1915R0 for std::simd parallelism in TS 2",
    "P2639R0": "Static Allocations",
    "P2640R0": "Modules: Inner-scope Namespace Entities: Exported or Not?",
    "P2640R1": "Modules: Inner-scope Namespace Entities: Exported or Not?",
    "P2640R2": "Modules: Inner-scope Namespace Entities: Exported or Not?",
    "P2641R0": "Checking if a union alternative is active",
    "P2641R1": "Checking if a union alternative is active",
    "P2641R2": "Checking if a union alternative is active",
    "P2641R3": "Checking if a union alternative is active",
    "P2641R4": "Checking if a union alternative is active",
    "P2642R0": "Padded mdspan layouts",
    "P2642R1": "Padded mdspan layouts",
    "P2642R2": "Padded mdspan layouts",
    "P2642R3": "Padded mdspan layouts",
    "P2642R4": "Padded mdspan layouts",
    "P2642R5": "Padded mdspan layouts",
    "P2643R0": "Improving C++ concurrency features",
    "P2643R1": "Improving C++ concurrency features",
    "P2643R2": "Improving C++ concurrency features",
    "P2644R0": "Get Fix of Broken Range-based for Loop Finally Done",
    "P2644R1": "Final Fix of Broken Range based for Loop Rev 1",
    "P2646R0": "Explicit Assumption Syntax Can Reduce Run Time",
    "P2647R0": "Permitting static constexpr variables in constexpr functions",
    "P2647R1": "Permitting static constexpr variables in constexpr functions",
    "P2648R0": "2022-10 Library Evolution Polls",
    "P2649R0": "2022-10 Library Evolution Poll Outcomes",
    "P2650R0": "2022-11 Library Evolution Polls",
    "P2652R0": "Disallow user specialization of allocator_traits",
    "P2652R1": "Disallow user specialization of allocator_traits",
    "P2652R2": "Disallow user specialization of allocator_traits",
    "P2653R0": "Update Annex E based on Unicode 15.0 UAX 31",
    "P2653R1": "Update Annex E based on Unicode 15.0 UAX 31",
    "P2654R0": "Modules and Macros",
    "P2655R0": "common_reference_t of reference_wrapper Should Be a Reference Type",
    "P2655R1": "common_reference_t of reference_wrapper Should Be a Reference Type",
    "P2655R2": "common_reference_t of reference_wrapper Should Be a Reference Type",
    "P2655R3": "common_reference_t of reference_wrapper Should Be a Reference Type",
    "P2656R0": "C++ Ecosystem International Standard",
    "P2656R1": "C++ Ecosystem International Standard",
    "P2656R2": "C++ Ecosystem International Standard",
    "P2657R0": "C++ is the next C++",
    "P2657R1": "C++ is the next C++",
    "P2658R0": "temporary storage class specifiers",
    "P2658R1": "temporary storage class specifiers",
    "P2659R0": "A Proposal to Publish a Technical Specification for Contracts",
    "P2659R1": "A Proposal to Publish a Technical Specification for Contracts",
    "P2659R2": "A Proposal to Publish a Technical Specification for Contracts",
    "P2660R0": "Proposed Contracts TS",
    "P2661R0": "Miscellaneous amendments to the Contracts TS",
    "P2662R0": "Pack Indexing",
    "P2662R1": "Pack Indexing",
    "P2662R2": "Pack Indexing",
    "P2662R3": "Pack Indexing",
    "P2663R0": "Proposal to support interleaved complex values in std::simd",
    "P2663R1": "Proposal to support interleaved complex values in std::simd",
    "P2663R2": "Proposal to support interleaved complex values in std::simd",
    "P2663R3": "Proposal to support interleaved complex values in std::simd",
    "P2663R4": "Proposal to support interleaved complex values in std::simd",
    "P2663R5": "Proposal to support interleaved complex values in std::simd",
    "P2664R0": "Proposal to extend std::simd with permutation API",
    "P2664R1": "Proposal to extend std::simd with permutation API",
    "P2664R2": "Proposal to extend std::simd with permutation API",
    "P2664R3": "Proposal to extend std::simd with permutation API",
    "P2664R4": "Proposal to extend std::simd with permutation API",
    "P2664R5": "Proposal to extend std::simd with permutation API",
    "P2664R6": "Proposal to extend std::simd with permutation API",
    "P2665R0": "Allow calling overload sets containing T, constT&",
    "P2666R0": "Last use optimization",
    "P2667R0": "Support for static and SBO vectors by allocators",
    "P2668R0": "Role based parameter passing",
    "P2669R0": "Deprecate changing kind of names in class template specializations",
    "P2670R0": "Non-transient constexpr allocation",
    "P2670R1": "Non-transient constexpr allocation",
    "P2671R0": "Syntax choices for generalized pack declaration and usage",
    "P2672R0": "Exploring the Design Space for a Pipeline Operator",
    "P2673R0": "Common Description Format for C++ Libraries and Packages",
    "P2674R0": "A trait for implicit lifetime types",
    "P2674R1": "A trait for implicit lifetime types",
    "P2675R0": "LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)",
    "P2675R1": "LWG3780: The Paper (format's width estimation is too approximate and not forward compatible)",
    "P2676R0": "The Val Object Model",
    "P2677R0": "Reconsidering concepts in-place syntax",
    "P2677R2": "Reconsidering concepts in-place syntax",
    "P2678R0": "SG16: Unicode meeting summaries 2022-06-22 through 2022-09-28",
    "P2679R0": "Fixing std::start_lifetime_as for arrays",
    "P2679R1": "Fixing std::start_lifetime_as and std::start_lifetime_as_array",
    "P2679R2": "Fixing std::start_lifetime_as and std::start_lifetime_as_array",
    "P2680R0": "Contracts for C++: Prioritizing Safety",
    "P2680R1": "Contracts for C++: Prioritizing Safety",
    "P2681R0": "More Stats Functions",
    "P2681R1": "More Basic Statistics",
    "P2682R0": "Transactional Memory TS2 Editor's Report",
    "P2683R0": "SG14: Low Latency/Games/Embedded/Finance/Simulation virtual meeting minutes 2022/02/09-2022/10/12",
    "P2684R0": "SG19: Machine Learning Virtual Meeting Minutes 2022/02/10-2022/10/13",
    "P2685R0": "Language Support For Scoped Allocators",
    "P2685R1": "Language Support For Scoped Objects",
    "P2686R0": "Updated wording and implementation experience for P1481 (constexpr structured bindings)",
    "P2686R1": "constexpr structured bindings and references to constexpr variables",
    "P2686R2": "constexpr structured bindings and references to constexpr variables",
    "P2686R3": "constexpr structured bindings and references to constexpr variables",
    "P2687R0": "Design Alternatives for Type-and-Resource Safe C++",
    "P2688R0": "Pattern Matching Discussion for Kona 2022",
    "P2688R1": "Pattern Matching: `match` Expression",
    "P2689R0": "atomic_accessor",
    "P2689R1": "atomic_accessor",
    "P2689R2": "atomic_accessor",
    "P2689R3": "Atomic Refs Bound to Memory Orderings & Atomic Accessors",
    "P2690R0": "C++17 parallel algorithms and P2300",
    "P2690R1": "Presentation for C++17 parallel algorithms and P2300",
    "P2691R0": "Allow referencing inline functions with internal linkage from outside their defining header unit",
    "P2692R0": "Generic Programming is just Programming",
    "P2693R0": "Formatting thread::id and stacktrace",
    "P2693R1": "Formatting thread::id and stacktrace",
    "P2695R0": "A proposed plan for contracts in C++",
    "P2695R1": "A proposed plan for contracts in C++",
    "P2696R0": "Introduce Cpp17Swappable as additional convenience requirements",
    "P2697R0": "Interfacing bitset with string_view",
    "P2697R1": "Interfacing bitset with string_view",
    "P2698R0": "Unconditional termination is a serious problem",
    "P2700R0": "Questions on P2680 \u201cContracts for C++: Prioritizing Safety\u201d",
    "P2700R1": "Questions on P2680 \"Contracts for C++: Prioritizing Safety\"",
    "P2701R0": "Translating Linker Input Files to Module Metadata Files",
    "P2702R0": "Specifying Importable Headers",
    "P2703R0": "C++ Standard Library Ready Issues to be moved in Kona, Nov. 2022",
    "P2704R0": "C++ Standard Library Immediate Issues to be moved in Kona, Nov. 2022",
    "P2705R0": "C++ Library Fundamentals TS Issues to be moved in Kona, Nov. 2022",
    "P2706R0": "Drafting for US 26-061: Redundant specification for defaulted functions",
    "P2708R0": "No Future Fundamentals TSes",
    "P2708R1": "No Future Fundamentals TSes",
    "P2709R0": "Core Language Working Group \u201cready\u201d Issues for the November, 2022 meeting",
    "P2710R0": "Core Language Working Group NB comment resolutions for the November, 2022 meeting",
    "P2711R0": "Making multi-param (and other converting) constructors of views explicit",
    "P2711R1": "Making multi-param constructors of views explicit",
    "P2712R0": "Classification of Contract-Checking Predicates",
    "P2713R0": "Escaping improvements in std::format",
    "P2713R1": "Escaping improvements in std::format",
    "P2714R0": "Bind front and back to NTTP callables",
    "P2714R1": "Bind front and back to NTTP callables",
    "P2717R0": "Tool Introspection",
    "P2717R1": "Tool Introspection",
    "P2717R2": "Tool Introspection",
    "P2717R3": "Tool Introspection",
    "P2717R4": "Tool Introspection",
    "P2717R5": "Tool Introspection",
    "P2718R0": "Wording for P2644R1 Fix for Range-based for Loop",
    "P2719R0": "Type-aware allocation and deallocation functions",
    "P2721R0": "Deprecating function",
    "P2722R0": "Slides: Beyond operator() (P2511R2 presentation)",
    "P2723R0": "Zero-initialize objects of automatic storage duration",
    "P2723R1": "Zero-initialize objects of automatic storage duration",
    "P2724R0": "constant dangling",
    "P2724R1": "constant dangling",
    "P2725R0": "std::integral_constant Literals",
    "P2725R1": "std::integral_constant Literals",
    "P2726R0": "Better std::tuple Indexing",
    "P2727R0": "std::iterator_interface",
    "P2727R1": "std::iterator_interface",
    "P2727R2": "std::iterator_interface",
    "P2727R3": "std::iterator_interface",
    "P2727R4": "std::iterator_interface",
    "P2728R0": "Unicode in the Library, Part 1: UTF Transcoding",
    "P2728R1": "Unicode in the Library, Part 1: UTF Transcoding",
    "P2728R2": "Unicode in the Library, Part 1: UTF Transcoding",
    "P2728R3": "Unicode in the Library, Part 1: UTF Transcoding",
    "P2728R4": "Unicode in the Library, Part 1: UTF Transcoding",
    "P2728R5": "Unicode in the Library, Part 1: UTF Transcoding",
    "P2728R6": "Unicode in the Library, Part 1: UTF Transcoding",
    "P2729R0": "Unicode in the Library, Part 2: Normalization",
    "P2730R0": "variable scope",
    "P2730R1": "variable scope",
    "P2732R0": "WG21 November 2022 Kona meeting Record of Discussion",
    "P2733R0": "Fix handling of empty specifiers in std::format",
    "P2733R1": "Fix handling of empty specifiers in std::format",
    "P2733R2": "Fix handling of empty specifiers in std::format",
    "P2733R3": "Fix handling of empty specifiers in std::format",
    "P2734R0": "Adding the new 2022 SI prefixes",
    "P2735R0": "C xor C++ Programming",
    "P2736R0": "Referencing the Unicode Standard",
    "P2736R2": "Referencing the Unicode Standard",
    "P2737R0": "Proposal of Condition-centric Contracts Syntax",
    "P2738R0": "constexpr cast from void*: towards constexpr type-erasure",
    "P2738R1": "constexpr cast from void*: towards constexpr type-erasure",
    "P2739R0": "A call to action: Think seriously about \"safety\" then do something sensible about it",
    "P2740R0": "Simpler implicit dangling resolution",
    "P2740R1": "Simpler implicit dangling resolution",
    "P2740R2": "Simpler implicit dangling resolution",
    "P2741R0": "user-generated static_assert messages",
    "P2741R1": "user-generated static_assert messages",
    "P2741R2": "user-generated static_assert messages",
    "P2741R3": "user-generated static_assert messages",
    "P2742R0": "indirect dangling identification",
    "P2742R1": "indirect dangling identification",
    "P2742R2": "indirect dangling identification",
    "P2743R0": "Contracts for C++: Prioritizing Safety - Presentation slides of P2680R0",
    "P2746R0": "Deprecate and Replace Fenv Rounding Modes",
    "P2746R1": "Deprecate and Replace Fenv Rounding Modes",
    "P2746R2": "Deprecate and Replace Fenv Rounding Modes",
    "P2746R3": "Deprecate and Replace Fenv Rounding Modes",
    "P2746R4": "Deprecate and Replace Fenv Rounding Modes",
    "P2746R5": "Deprecate and Replace Fenv Rounding Modes",
    "P2747R0": "Limited support for constexpr void*",
    "P2747R1": "constexpr placement new",
    "P2747R2": "constexpr placement new",
    "P2748R0": "Disallow Binding a Returned glvalue to a Temporary",
    "P2748R1": "Disallow Binding a Returned Glvalue to a Temporary",
    "P2748R2": "Disallow Binding a Returned Glvalue to a Temporary",
    "P2748R3": "Disallow Binding a Returned Glvalue to a Temporary",
    "P2748R4": "Disallow Binding a Returned Glvalue to a Temporary",
    "P2748R5": "Disallow Binding a Returned Glvalue to a Temporary",
    "P2749R0": "Down with \"character\"",
    "P2750R0": "C Dangling Reduction",
    "P2750R1": "C Dangling Reduction",
    "P2750R2": "C Dangling Reduction",
    "P2751R0": "Evaluation of Checked Contracts",
    "P2751R1": "Evaluation of Checked Contracts",
    "P2752R0": "Static storage for braced initializers",
    "P2752R1": "Static storage for braced initializers",
    "P2752R2": "Static storage for braced initializers",
    "P2752R3": "Static storage for braced initializers",
    "P2754R0": "Deconstructing Avoiding Uninitialized Reads of Auto Variables",
    "P2755R0": "A Bold Plan for a Complete Contracts Facility",
    "P2755R1": "A Bold Plan for a Complete Contracts Facility",
    "P2756R0": "Proposal of Simple Contract Side Effect Semantics",
    "P2757R0": "Type checking format args",
    "P2757R1": "Type checking format args",
    "P2757R2": "Type checking format args",
    "P2757R3": "Type checking format args",
    "P2758R0": "Emitting messages at compile time",
    "P2758R1": "Emitting messages at compile time",
    "P2758R2": "Emitting messages at compile time",
    "P2758R3": "Emitting messages at compile time",
    "P2759R0": "DG Opinion on Safety for ISO C++",
    "P2759R1": "DG Opinion on Safety for ISO C++",
    "P2760R0": "A Plan for C++26 Ranges",
    "P2760R1": "A Plan for C++26 Ranges",
    "P2761R0": "Slides: If structured binding (P0963R1 presentation)",
    "P2761R1": "Slides: If structured binding (P0963R1 presentation)",
    "P2762R0": "Sender/Receiver Interface For Networking",
    "P2762R1": "Sender/Receiver Interface For Networking",
    "P2762R2": "Sender/Receiver Interface For Networking",
    "P2763R0": "`layout_stride` static extents default constructor fix",
    "P2763R1": "`layout_stride` static extents default constructor fix",
    "P2764R0": "SG14: Low Latency/Games/Embedded/Finance/Simulation virtual meeting minutes 2023/01/11",
    "P2765R0": "SG19: Machine Learning Virtual Meeting Minutes 2022/12/08-2023/01/12",
    "P2766R0": "SG16: Unicode meeting summaries 2022-10-12 through 2022-12-14",
    "P2767R0": "flat_map/flat_set omnibus",
    "P2767R1": "flat_map/flat_set omnibus",
    "P2767R2": "flat_map/flat_set omnibus",
    "P2769R0": "get_element customization point object",
    "P2769R1": "get_element customization point object",
    "P2770R0": "Stashing stashing iterators for proper flattening",
    "P2771R0": "Towards memory safety in C++",
    "P2771R1": "Towards memory safety in C++",
    "P2772R0": "std::integral_constant literals do not suffice - constexpr_t?",
    "P2773R0": "Considerations for Unicode algorithms",
    "P2774R0": "Scoped thread-local storage",
    "P2774R1": "Concurrent object pool (was: Scoped thread-local storage)",
    "P2775R0": "2023-05 Library Evolution Polls",
    "P2776R0": "2023-05 Library Evolution Poll Outcomes",
    "P2779R0": "Make basic_string_view's range construction conditionally explicit",
    "P2779R1": "Make basic_string_view's range construction conditionally explicit",
    "P2780R0": "Caller-side precondition checking, and Eval_and_throw",
    "P2781R1": "std::constexpr_v",
    "P2781R2": "std::constexpr_v",
    "P2781R3": "std::constexpr_v",
    "P2781R4": "std::constexpr_wrapper",
    "P2782R0": "A proposal for a type trait to detect if value initialization can be achieved by zero-filling",
    "P2784R0": "Not halting the program after detected contract violation",
    "P2785R0": "Relocating prvalues",
    "P2785R1": "Relocating prvalues",
    "P2785R2": "Relocating prvalues",
    "P2785R3": "Relocating prvalues",
    "P2786R0": "Trivial relocatability options",
    "P2786R1": "Trivial relocatability options",
    "P2786R2": "Trivial relocatability options",
    "P2786R3": "Trivial Relocatability For C++26",
    "P2786R4": "Trivial Relocatability For C++26",
    "P2786R5": "Trivial Relocatability For C++26",
    "P2786R6": "Trivial Relocatability For C++26",
    "P2787R0": "pmr::generator - Promise Types are not Values",
    "P2787R1": "pmr::generator - Promise Types are not Values",
    "P2788R0": "Linkage for modular constants",
    "P2789R0": "C++ Standard Library Ready Issues to be moved in Issaquah, Feb. 2023",
    "P2790R0": "C++ Standard Library Immediate Issues to be moved in Issaquah, Feb. 2023",
    "P2791R0": "mandate concepts for new features",
    "P2795R0": "Correct and incorrect code, and &quot;erroneous behaviour&quot;",
    "P2795R1": "Erroneous behaviour for uninitialized reads",
    "P2795R2": "Erroneous behaviour for uninitialized reads",
    "P2795R3": "Erroneous behaviour for uninitialized reads",
    "P2795R4": "Erroneous behaviour for uninitialized reads",
    "P2795R5": "Erroneous behaviour for uninitialized reads",
    "P2796R0": "Core Language Working Group \"ready\" Issues for the February, 2023 meeting",
    "P2797R0": "Proposed resolution for CWG2692 Static and explicit object member functions with the same par",
    "P2798R0": "Fix layout mappings all static extent default constructor",
    "P2799R0": "Closed ranges may be a problem; breaking counted_iterator is not the solution",
    "P2800R0": "Dependency flag soup needs some fiber",
    "P2802R0": "Presentation of P1385R7 to LEWG at Issaquah 2023",
    "P2803R0": "std::simd Intro slides",
    "P2805R0": "fiber_context: fibers without scheduler - LEWG slides",
    "P2806R0": "do expressions",
    "P2806R1": "do expressions",
    "P2806R2": "do expressions",
    "P2807R0": "Issaquah Slides for Intel response to std::simd",
    "P2808R0": "Internal linkage in the global module",
    "P2809R0": "Trivial infinite loops are not Undefined Behavior",
    "P2809R1": "Trivial infinite loops are not Undefined Behavior",
    "P2809R2": "Trivial infinite loops are not Undefined Behavior",
    "P2809R3": "Trivial infinite loops are not Undefined Behavior",
    "P2810R0": "is_debugger_present is_replaceable",
    "P2810R1": "is_debugger_present is_replaceable",
    "P2810R2": "is_debugger_present is_replaceable",
    "P2810R3": "is_debugger_present is_replaceable",
    "P2810R4": "is_debugger_present is_replaceable",
    "P2811R0": "Contract Violation Handlers",
    "P2811R1": "Contract Violation Handlers",
    "P2811R2": "Contract Violation Handlers",
    "P2811R3": "Contract Violation Handlers",
    "P2811R4": "Contract Violation Handlers",
    "P2811R5": "Contract-Violation Handlers",
    "P2811R6": "Contract-Violation Handlers",
    "P2811R7": "Contract-Violation Handlers",
    "P2812R0": "P1673R11 LEWG presentation",
    "P2814R0": "Trivial Relocatability --- Comparing P1144 with P2786",
    "P2814R1": "Trivial Relocatability --- Comparing P1144 with P2786",
    "P2815R0": "Slides for presentation on P2188R1",
    "P2816R0": "Safety Profiles: Type-and-resource Safe programming in ISO Standard C++",
    "P2817R0": "The idea behind the contracts MVP",
    "P2818R0": "Uniform Call Syntax for explicit-object member functions",
    "P2819R0": "Add tuple protocol to complex",
    "P2819R1": "Add tuple protocol to complex",
    "P2819R2": "Add tuple protocol to complex",
    "P2821R0": "span.at()",
    "P2821R1": "span.at()",
    "P2821R2": "span.at()",
    "P2821R3": "span.at()",
    "P2821R4": "span.at()",
    "P2821R5": "span.at()",
    "P2822R0": "Providing user control of associated entities of class types",
    "P2822R1": "Providing user control of associated entities of class types",
    "P2824R0": "WG21 February 2023 Issaquah meeting Record of Discussion",
    "P2825R0": "calltarget(unevaluated-call-expression)",
    "P2825R1": "Overload Resolution hook: declcall(unevaluated-postfix-expression)",
    "P2825R2": "Overload Resolution hook: declcall(unevaluated-postfix-expression)",
    "P2826R0": "Replacement functions",
    "P2826R1": "Replacement functions",
    "P2826R2": "Replacement functions",
    "P2827R0": "Floating-point overflow and underflow in from_chars (LWG 3081)",
    "P2827R1": "Floating-point overflow and underflow in from_chars (LWG 3081)",
    "P2828R0": "Copy elision for direct-initialization with a conversion function (Core issue 2327)",
    "P2828R1": "Copy elision for direct-initialization with a conversion function (Core issue 2327)",
    "P2828R2": "Copy elision for direct-initialization with a conversion function (Core issue 2327)",
    "P2829R0": "Proposal of Contracts Supporting Const-On-Definition Style",
    "P2830R0": "constexpr type comparison",
    "P2830R1": "constexpr type comparison",
    "P2830R2": "Standardized Constexpr Type Ordering",
    "P2830R3": "Standardized Constexpr Type Ordering",
    "P2830R4": "Standardized Constexpr Type Ordering",
    "P2831R0": "Functions having a narrow contract should not be noexcept",
    "P2833R0": "Freestanding Library: inout expected span",
    "P2833R1": "Freestanding Library: inout expected span",
    "P2833R2": "Freestanding Library: inout expected span",
    "P2834R0": "Semantic Stability Across Contract-Checking Build Modes",
    "P2834R1": "Semantic Stability Across Contract-Checking Build Modes",
    "P2835R0": "Expose std::atomic_ref's object address",
    "P2835R1": "Expose std::atomic_ref's object address",
    "P2835R2": "Expose std::atomic_ref's object address",
    "P2835R3": "Expose std::atomic_ref's object address",
    "P2835R4": "Expose std::atomic_ref's object address",
    "P2836R0": "std::const_iterator often produces an unexpected type",
    "P2836R1": "std::basic_const_iterator should follow its underlying type's convertibility",
    "P2837R0": "Planning to Revisit the Lakos Rule",
    "P2838R0": "Unconditional contract violation handling of any kind is a serious problem",
    "P2839R0": "Nontrivial relocation via a new \"owning reference\" type",
    "P2841R0": "Concept Template Parameters",
    "P2841R1": "Concept Template Parameters",
    "P2841R2": "Concept and variable-template template-parameters",
    "P2841R3": "Concept and variable-template template-parameters",
    "P2842R0": "Destructor Semantics Do Not Affect Constructible Traits",
    "P2843R0": "Preprocessing is never undefined",
    "P2845R0": "Formatting of std::filesystem::path",
    "P2845R1": "Formatting of std::filesystem::path",
    "P2845R2": "Formatting of std::filesystem::path",
    "P2845R3": "Formatting of std::filesystem::path",
    "P2845R4": "Formatting of std::filesystem::path",
    "P2845R5": "Formatting of std::filesystem::path",
    "P2845R6": "Formatting of std::filesystem::path",
    "P2845R7": "Formatting of std::filesystem::path",
    "P2845R8": "Formatting of std::filesystem::path",
    "P2846R0": "size_hint: Eagerly reserving memory for not-quite-sized lazy ranges",
    "P2846R1": "size_hint: Eagerly reserving memory for not-quite-sized lazy ranges",
    "P2846R2": "reserve_hint: Eagerly reserving memory for not-quite-sized lazy ranges",
    "P2848R0": "std::is_uniqued",
    "P2849R0": "async-object - aka async-RAII objects",
    "P2850R0": "Minimal Compiler Preserved Dependencies",
    "P2852R0": "Contract violation handling semantics for the contracts MVP",
    "P2853R0": "Proposal of std::contract_violation",
    "P2855R0": "Member customization points for Senders and Receivers",
    "P2855R1": "Member customization points for Senders and Receivers",
    "P2857R0": "P2596R0 Critique",
    "P2858R0": "Noexcept vs contract violations",
    "P2861R0": "The Lakos Rule: Narrow Contracts And `noexcept` Are Inherently Incompatible",
    "P2862R0": "text_encoding::name() should never return null values",
    "P2862R1": "text_encoding::name() should never return null values",
    "P2863R0": "Review Annex D for C++26",
    "P2863R1": "Review Annex D for C++26",
    "P2863R2": "Review Annex D for C++26",
    "P2863R3": "Review Annex D for C++26",
    "P2863R4": "Review Annex D for C++26",
    "P2863R5": "Review Annex D for C++26",
    "P2864R0": "Remove Deprecated Arithmetic Conversion on Enumerations From C++26",
    "P2864R1": "Remove Deprecated Arithmetic Conversion on Enumerations From C++26",
    "P2864R2": "Remove Deprecated Arithmetic Conversion on Enumerations From C++26",
    "P2865R0": "Remove Deprecated Array Comparisons from C++26",
    "P2865R1": "Remove Deprecated Array Comparisons from C++26",
    "P2865R2": "Remove Deprecated Array Comparisons from C++26",
    "P2865R3": "Remove Deprecated Array Comparisons from C++26",
    "P2865R4": "Remove Deprecated Array Comparisons from C++26",
    "P2866R0": "Remove Deprecated Volatile Features From C++26",
    "P2866R1": "Remove Deprecated Volatile Features From C++26",
    "P2866R2": "Remove Deprecated Volatile Features From C++26",
    "P2867R0": "Remove Deprecated strstreams From C++26",
    "P2867R1": "Remove Deprecated strstreams From C++26",
    "P2867R2": "Remove Deprecated strstreams From C++26",
    "P2868R0": "Remove Deprecated `std::allocator` Typedef From C++26",
    "P2868R1": "Remove Deprecated `std::allocator` Typedef From C++26",
    "P2868R2": "Remove Deprecated `std::allocator` Typedef From C++26",
    "P2868R3": "Remove Deprecated `std::allocator` Typedef From C++26",
    "P2869R0": "Remove Deprecated `shared_ptr` Atomic Access APIs From C++26",
    "P2869R1": "Remove Deprecated `shared_ptr` Atomic Access APIs From C++26",
    "P2869R2": "Remove Deprecated `shared_ptr` Atomic Access APIs From C++26",
    "P2869R3": "Remove Deprecated `shared_ptr` Atomic Access APIs From C++26",
    "P2869R4": "Remove Deprecated `shared_ptr` Atomic Access APIs From C++26",
    "P2870R0": "Remove `basic_string::reserve()` From C++26",
    "P2870R1": "Remove `basic_string::reserve()` From C++26",
    "P2870R2": "Remove `basic_string::reserve()` From C++26",
    "P2870R3": "Remove `basic_string::reserve()` From C++26",
    "P2871R0": "Remove Deprecated Unicode Conversion Facets From C++26",
    "P2871R1": "Remove Deprecated Unicode Conversion Facets From C++26",
    "P2871R2": "Remove Deprecated Unicode Conversion Facets From C++26",
    "P2871R3": "Remove Deprecated Unicode Conversion Facets From C++26",
    "P2872R0": "Remove `wstring_convert` From C++26",
    "P2872R1": "Remove `wstring_convert` From C++26",
    "P2872R2": "Remove `wstring_convert` From C++26",
    "P2872R3": "Remove `wstring_convert` From C++26",
    "P2873R0": "Remove Deprecated locale category facets for Unicode from C++26",
    "P2873R1": "Remove Deprecated locale category facets for Unicode from C++26",
    "P2874R0": "Mandating Annex D",
    "P2874R1": "Mandating Annex D",
    "P2874R2": "Mandating Annex D",
    "P2875R0": "Undeprecate `polymorphic_allocator::destroy` For C++26",
    "P2875R1": "Undeprecate `polymorphic_allocator::destroy` For C++26",
    "P2875R2": "Undeprecate `polymorphic_allocator::destroy` For C++26",
    "P2875R3": "Undeprecate `polymorphic_allocator::destroy` For C++26",
    "P2875R4": "Undeprecate `polymorphic_allocator::destroy` For C++26",
    "P2876R0": "Proposal to extend std::simd with more constructors and accessors",
    "P2876R1": "Proposal to extend std::simd with more constructors and accessors",
    "P2877R0": "Contract Build Modes and Semantics",
    "P2878R0": "Reference checking",
    "P2878R1": "Reference checking",
    "P2878R2": "Reference checking",
    "P2878R3": "Reference checking",
    "P2878R4": "Reference checking",
    "P2878R5": "Reference checking",
    "P2878R6": "Reference checking",
    "P2880R0": "Algorithm-like vs std::simd based RNG API",
    "P2881R0": "Generator-based for loop",
    "P2882R0": "An Event Model for C++ Executors",
    "P2883R0": "`offsetof` Should Be A Keyword In C++26",
    "P2884R0": "`assert` Should Be A Keyword In C++26",
    "P2885R0": "Requirements for a Contracts syntax",
    "P2885R1": "Requirements for a Contracts syntax",
    "P2885R2": "Requirements for a Contracts syntax",
    "P2885R3": "Requirements for a Contracts syntax",
    "P2886R0": "Concurrency TS2 Editor's report",
    "P2887R0": "SG14: Low Latency/Games/Embedded/Finance/Simulation virtual meeting minutes to 2023/05/11",
    "P2888R0": "SG19: Machine Learning Virtual Meeting Minutes to 2023/05/12",
    "P2889R0": "Distributed Arrays",
    "P2890R0": "Contracts on lambdas",
    "P2890R1": "Contracts on lambdas",
    "P2890R2": "Contracts on lambdas",
    "P2891R0": "SG16: Unicode meeting summaries 2023-01-11 through 2023-05-10",
    "P2892R0": "std::simd Types Should be Regular",
    "P2893R0": "Variadic Friends",
    "P2893R1": "Variadic Friends",
    "P2893R2": "Variadic Friends",
    "P2893R3": "Variadic Friends",
    "P2894R0": "Constant evaluation of Contracts",
    "P2894R1": "Constant evaluation of Contracts",
    "P2894R2": "Constant evaluation of Contracts",
    "P2895R0": "noncopyable and nonmoveable utility classes",
    "P2896R0": "Outstanding design questions for the Contracts MVP",
    "P2897R0": "aligned_accessor: An mdspan accessor expressing pointer overalignment",
    "P2897R1": "aligned_accessor: An mdspan accessor expressing pointer overalignment",
    "P2898R0": "Importable Headers are Not Universally Implementable",
    "P2898R1": "Build System Requirements for Importable Headers",
    "P2900R0": "Contracts for C++",
    "P2900R1": "Contracts for C++",
    "P2900R2": "Contracts for C++",
    "P2900R3": "Contracts for C++",
    "P2900R4": "Contracts for C++",
    "P2900R5": "Contracts for C++",
    "P2900R6": "Contracts for C++",
    "P2900R7": "Contracts for C++",
    "P2901R0": "Extending linear algebra support to batched operations",
    "P2902R0": "constexpr 'Parallel' Algorithms",
    "P2904R0": "Removing exception in precedence rule(s) when using member pointer syntax",
    "P2905R0": "Runtime format strings",
    "P2905R1": "Runtime format strings",
    "P2905R2": "Runtime format strings",
    "P2906R0": "Structured bindings for std::extents",
    "P2909R0": "Dude, where's my char?",
    "P2909R1": "Fix formatting of code units as integers (Dude, where's my char?)",
    "P2909R2": "Fix formatting of code units as integers (Dude, where's my char?)",
    "P2909R3": "Fix formatting of code units as integers (Dude, where's my char?)",
    "P2909R4": "Fix formatting of code units as integers (Dude, where's my char?)",
    "P2910R0": "C++ Standard Library Ready Issues to be moved in Varna, Jun. 2023",
    "P2911R0": "Python Bindings with Value-Based Reflection",
    "P2911R1": "Python Bindings with Value-Based Reflection",
    "P2912R0": "Concurrent queues and sender/receivers",
    "P2915R0": "Proposed resolution to CWG1223",
    "P2917R0": "An in-line defaulted destructor should keep the copy- and move-operations",
    "P2917R1": "An in-line defaulted destructor should keep the copy- and move-operations",
    "P2918R0": "Runtime format strings II",
    "P2918R1": "Runtime format strings II",
    "P2918R2": "Runtime format strings II",
    "P2920R0": "Library Evolution Leadership's Understanding of the Noexcept Policy History",
    "P2921R0": "Exploring std::expected based API alternatives for buffer_queue",
    "P2922R0": "Core Language Working Group \"ready\" Issues for the June, 2023 meeting",
    "P2925R0": "inplace_vector - D0843R7 LEWG presentation",
    "P2926R0": "std::simd types should be regular - P2892R0 LEWG presentation",
    "P2927R0": "Observing exceptions stored in exception_ptr",
    "P2927R1": "Observing exceptions stored in exception_ptr",
    "P2927R2": "Observing exceptions stored in exception_ptr",
    "P2929R0": "simd_invoke",
    "P2930R0": "Formatter specializations for the standard library",
    "P2931R0": "WG21 June 2023 Varna Meeting Record of Discussion",
    "P2932R0": "A Principled Approach to Open Design Questions for Contracts",
    "P2932R1": "A Principled Approach to Open Design Questions for Contracts",
    "P2932R2": "A Principled Approach to Open Design Questions for Contracts",
    "P2932R3": "A Principled Approach to Open Design Questions for Contracts",
    "P2933R0": "std::simd overloads for <bit> header",
    "P2933R1": "std::simd overloads for <bit> header",
    "P2935R0": "An Attribute-Like Syntax for Contracts",
    "P2935R1": "An Attribute-Like Syntax for Contracts",
    "P2935R2": "An Attribute-Like Syntax for Contracts",
    "P2935R3": "An Attribute-Like Syntax for Contracts",
    "P2935R4": "An Attribute-Like Syntax for Contracts",
    "P2937R0": "Freestanding: Remove strtok",
    "P2940R0": "switch for Pattern Matching",
    "P2941R0": "Identifiers for Pattern Matching",
    "P2944R0": "Comparisons for reference_wrapper",
    "P2944R1": "Comparisons for reference_wrapper",
    "P2944R2": "Comparisons for reference_wrapper",
    "P2944R3": "Comparisons for reference_wrapper",
    "P2945R0": "Additional format specifiers for time_point",
    "P2946R0": "A flexible solution to the problems of `noexcept`",
    "P2946R1": "A flexible solution to the problems of `noexcept`",
    "P2947R0": "Contracts must avoid disclosing sensitive information",
    "P2949R0": "Slides for P2861R0: Narrow Contracts and `noexcept` are Inherently Incompatable",
    "P2950R0": "Slides for P2836R1: std::basic_const_iterator should follow its underlying type's convertibility",
    "P2951R0": "Shadowing is good for safety",
    "P2951R1": "Shadowing is good for safety",
    "P2951R2": "Shadowing is good for safety",
    "P2951R3": "Shadowing is good for safety",
    "P2952R0": "auto& operator=(X&&) = default",
    "P2952R1": "auto& operator=(X&&) = default",
    "P2953R0": "Forbid defaulting operator=(X&&) &&",
    "P2954R0": "Contracts and virtual functions for the Contracts MVP",
    "P2955R0": "Safer Range Access",
    "P2955R1": "Safer Range Access",
    "P2956R0": "Add saturating library support to std::simd",
    "P2957R0": "Contracts and coroutines",
    "P2957R1": "Contracts and coroutines",
    "P2958R0": "typeof and typeof_unqual",
    "P2959R0": "Container Relocation",
    "P2960R0": "Concurrency TS Editor's report for N4956",
    "P2961R0": "A natural syntax for Contracts",
    "P2961R1": "A natural syntax for Contracts",
    "P2961R2": "A natural syntax for Contracts",
    "P2962R0": "Communicating the Baseline Compile Command for C++ Modules support",
    "P2963R0": "Ordering of constraints involving fold expressions",
    "P2963R1": "Ordering of constraints involving fold expressions",
    "P2963R2": "Ordering of constraints involving fold expressions",
    "P2964R0": "Allowing user-defined types in std::simd",
    "P2964R1": "Allowing user-defined types in std::simd",
    "P2966R0": "Making C++ Better for Game Developers \u2014 Progress Report",
    "P2966R1": "Making C++ Better for Game Developers \u2014 Progress Report",
    "P2967R0": "Relocation Is A Library Interface",
    "P2967R1": "Relocation Is A Library Interface",
    "P2968R0": "Make std::ignore a first-class object",
    "P2968R1": "Make std::ignore a first-class object",
    "P2968R2": "Make std::ignore a first-class object",
    "P2969R0": "Contract annotations are potentially-throwing",
    "P2971R0": "Implication for C++",
    "P2971R1": "Implication for C++",
    "P2971R2": "Implication for C++",
    "P2972R0": "2023-09 Library Evolution Polls",
    "P2973R0": "Erroneous behaviour for missing return from assignment",
    "P2976R0": "Freestanding Library: algorithm, numeric, and random",
    "P2976R1": "Freestanding Library: algorithm, numeric, and random",
    "P2977R0": "Module commands database format",
    "P2977R1": "Build database files",
    "P2978R0": "A New Approach For Compiling C++",
    "P2979R0": "The Need for Design Policies in WG21",
    "P2980R0": "A motivation, scope, and plan for a physical quantities and units library",
    "P2980R1": "A motivation, scope, and plan for a quantities and units library",
    "P2981R0": "Improving our safety with a physical quantities and units library",
    "P2981R1": "Improving our safety with a physical quantities and units library",
    "P2982R0": "`std::quantity` as a numeric type",
    "P2982R1": "`std::quantity` as a numeric type",
    "P2984R0": "Reconsider Redeclaring static constexpr Data Members",
    "P2984R1": "Reconsider Redeclaring static constexpr Data Members",
    "P2985R0": "A type trait for detecting virtual base classes",
    "P2986R0": "Generic Function Pointer",
    "P2988R0": "std::optional<T&>",
    "P2988R1": "std::optional<T&>",
    "P2988R2": "std::optional\\",
    "P2988R3": "std::optional<T&>",
    "P2988R4": "std::optional<T&>",
    "P2988R5": "std::optional<T&>",
    "P2989R0": "A Simple Approach to Universal Template Parameters",
    "P2989R1": "A Simple Approach to Universal Template Parameters",
    "P2990R0": "C++ Modules Roadmap",
    "P2991R0": "Stop Forcing std::move to Pessimize",
    "P2992R0": "Attribute [[discard]] and attributes on expressions",
    "P2992R1": "Attribute [[discard(\"reason\")]]",
    "P2993R0": "Constrained Numbers",
    "P2994R0": "On the Naming of Packs",
    "P2994R1": "On the Naming of Packs",
    "P2995R0": "SG16: Unicode meeting summaries 2023-05-24 through 2023-09-27",
    "P2996R0": "Reflection for C++26",
    "P2996R1": "Reflection for C++26",
    "P2996R2": "Reflection for C++26",
    "P2996R3": "Reflection for C++26",
    "P2997R0": "Removing the common reference requirement from the indirectly invocable concepts",
    "P2997R1": "Removing the common reference requirement from the indirectly invocable concepts",
    "P2999R0": "Sender Algorithm Customization",
    "P2999R1": "Sender Algorithm Customization",
    "P2999R2": "Sender Algorithm Customization",
    "P2999R3": "Sender Algorithm Customization",
    "P3001R0": "std::hive and containers like it are not a good fit for the standard library",
    "P3002R0": "Guidelines for allocators in new library classes",
    "P3002R1": "Policies for Using Allocators in New Library Classes",
    "P3003R0": "The design of a library of number concepts",
    "P3004R0": "Principled Design for WG21",
    "P3005R0": "Memorializing Principled-Design Policies for WG21",
    "P3006R0": "Launder less",
    "P3007R0": "Return object semantics in postconditions",
    "P3008R0": "Atomic floating-point min/max",
    "P3008R1": "Atomic floating-point min/max",
    "P3008R2": "Atomic floating-point min/max",
    "P3009R0": "Injected class name in the base specifier list",
    "P3010R0": "Using Reflection to Replace a Metalanguage for Generating JS Bindings",
    "P3011R0": "Supporting document for Hive proposal #1: outreach for evidence of container-style use in industry",
    "P3012R0": "Supporting document for Hive proposal #2: use of std::list in open source codebases",
    "P3014R0": "Customizing std::expected's exception",
    "P3015R0": "Rebuttal to Additional format specifiers for time_point",
    "P3016R0": "Resolve inconsistencies in begin/end for valarray and braced initializer lists",
    "P3016R1": "Resolve inconsistencies in begin/end for valarray and braced initializer lists",
    "P3016R2": "Resolve inconsistencies in begin/end for valarray and braced initializer lists",
    "P3016R3": "Resolve inconsistencies in begin/end for valarray and braced initializer lists",
    "P3018R0": "Low-Level Integer Arithmetic",
    "P3019R0": "Vocabulary Types for Composite Class Design",
    "P3019R1": "Vocabulary Types for Composite Class Design",
    "P3019R2": "Vocabulary Types for Composite Class Design",
    "P3019R3": "Vocabulary Types for Composite Class Design",
    "P3019R4": "Vocabulary Types for Composite Class Design",
    "P3019R5": "Vocabulary Types for Composite Class Design",
    "P3019R6": "Vocabulary Types for Composite Class Design",
    "P3019R7": "Vocabulary Types for Composite Class Design",
    "P3019R8": "Vocabulary Types for Composite Class Design",
    "P3020R0": "2023-09 Library Evolution Poll Outcomes",
    "P3021R0": "Unified function call syntax (UFCS)",
    "P3022R0": "A Boring Thread Attributes Interface",
    "P3022R1": "A Boring Thread Attributes Interface",
    "P3023R0": "C++ Should Be C++",
    "P3023R1": "C++ Should Be C++",
    "P3024R0": "Interface Directions for std::simd",
    "P3025R0": "SG14: Low Latency/Games/Embedded/Financial trading/Simulation virtual Minutes to 2023/09/12",
    "P3026R0": "SG19: Machine Learning virtual Meeting Minutes to 2023/07/13",
    "P3027R0": "UFCS is a breaking change, of the absolutely worst kind",
    "P3028R0": "An Overview of Syntax Choices for Contracts",
    "P3029R0": "Better mdspan's CTAD",
    "P3029R1": "Better mdspan's CTAD",
    "P3031R0": "Resolve CWG2561: conversion function for lambda with explicit object parameter",
    "P3032R0": "Less transient constexpr allocation",
    "P3032R1": "Less transient constexpr allocation",
    "P3032R2": "Less transient constexpr allocation",
    "P3033R0": "Should we import function bodies to get the better optimizations?",
    "P3034R0": "Module Declarations Shouldn't be Macros",
    "P3034R1": "Module Declarations Shouldn't be Macros",
    "P3037R0": "constexpr std::shared_ptr",
    "P3037R1": "constexpr std::shared_ptr",
    "P3038R0": "Concrete suggestions for initial Profiles",
    "P3039R0": "Automatically Generate `operator->`",
    "P3040R0": "C++ Standard Library Ready Issues to be moved in Kona, Nov. 2023",
    "P3041R0": "Transitioning from \"#include\" World to Modules",
    "P3042R0": "Vocabulary Types for Composite Class Design",
    "P3043R0": "Slides: Using variable template template without meta programming",
    "P3044R0": "sub-string_view from string",
    "P3045R0": "Quantities and units library",
    "P3045R1": "Quantities and units library",
    "P3046R0": "Core Language Working Group \"ready\" Issues for the November, 2023 meeting",
    "P3047R0": "Remove deprecated namespace `relops` from C++26",
    "P3049R0": "node-handles for lists",
    "P3050R0": "Optimize linalg::conjugated for noncomplex value types",
    "P3050R1": "Fix C++26 by optimizing linalg::conjugated for noncomplex value types",
    "P3051R0": "Structured Response Files",
    "P3051R1": "Structured Response Files",
    "P3052R0": "view_interface::at()",
    "P3052R1": "view_interface::at()",
    "P3053R0": "2023-12 Library Evolution Polls",
    "P3054R0": "2023-12 Library Evolution Poll Outcomes",
    "P3055R0": "Relax wording to permit relocation optimizations in the STL",
    "P3055R1": "Relax wording to permit relocation optimizations in the STL",
    "P3056R0": "what ostream exception",
    "P3057R0": "Two finer-grained compilation model for named modules",
    "P3059R0": "Making user-defined constructors of view iterators/sentinels private",
    "P3059R1": "Making user-defined constructors of view iterators/sentinels private",
    "P3060R0": "Add std::ranges::upto(n)",
    "P3060R1": "Add std::views::upto(n)",
    "P3061R0": "WG21 2023-11 Kona Record of Discussion",
    "P3062R0": "C++ Should Be C++ - Presentation",
    "P3064R0": "How to Avoid OOTA Without Really Trying",
    "P3064R1": "How to Avoid OOTA Without Really Trying",
    "P3066R0": "Allow repeating contract annotations on non-first declarations",
    "P3067R0": "Provide predefined simd permute generator functions for common operations",
    "P3068R0": "Allowing exception throwing in constant-evaluation.",
    "P3068R1": "Allowing exception throwing in constant-evaluation.",
    "P3068R2": "Allowing exception throwing in constant-evaluation",
    "P3070R0": "Formatting enums",
    "P3071R0": "Protection against modifications in contracts",
    "P3071R1": "Protection against modifications in contracts",
    "P3072R0": "Hassle-free thread attributes",
    "P3072R1": "Hassle-free thread attributes",
    "P3072R2": "Hassle-free thread attributes",
    "P3073R0": "Remove evaluation_undefined_behavior and will_continue from the Contracts MVP",
    "P3074R0": "constexpr union lifetime",
    "P3074R1": "std::uninitialized<T>",
    "P3074R2": "std::uninitialized<T>",
    "P3074R3": "trivial union (was std::uninitialized<T>)",
    "P3075R0": "Adding an Undefined Behavior and IFNDR Annex",
    "P3079R0": "Should ignore and observe exist for constant evaluation of contracts?",
    "P3084R0": "Slides for LEWG views::maybe 20240109",
    "P3085R0": "`noexcept` policy for SD-9 (throws nothing)",
    "P3085R1": "`noexcept` policy for SD-9 (throws nothing)",
    "P3085R2": "`noexcept` policy for SD-9 (throws nothing)",
    "P3086R0": "Proxy: A Pointer-Semantics-Based Polymorphism Library",
    "P3086R1": "Proxy: A Pointer-Semantics-Based Polymorphism Library",
    "P3086R2": "Proxy: A Pointer-Semantics-Based Polymorphism Library",
    "P3087R0": "Make direct-initialization for enumeration types at least as permissive as direct-list-initialization",
    "P3088R0": "Attributes for contract assertions",
    "P3088R1": "Attributes for contract assertions",
    "P3090R0": "std::execution Introduction",
    "P3091R0": "Better lookups for `map` and `unordered_map`",
    "P3091R1": "Better lookups for `map` and `unordered_map`",
    "P3091R2": "Better lookups for `map` and `unordered_map`",
    "P3092R0": "Modules ABI requirement",
    "P3093R0": "Attributes on expressions",
    "P3094R0": "std::basic_fixed_string",
    "P3094R1": "std::basic_fixed_string",
    "P3094R2": "std::basic_fixed_string",
    "P3095R0": "ABI comparison with reflection",
    "P3096R0": "Function Parameter Reflection in Reflection for C++26",
    "P3096R1": "Function Parameter Reflection in Reflection for C++26",
    "P3097R0": "Contracts for C++: Support for virtual functions",
    "P3100R0": "Undefined and erroneous behaviour are contract violations",
    "P3101R0": "Differentiating potentially throwing and nonthrowing violation handlers",
    "P3102R0": "Refining Contract Violation Detection Modes",
    "P3103R0": "More bitset operations",
    "P3103R1": "More bitset operations",
    "P3103R2": "More bitset operations",
    "P3104R0": "Bit permutations",
    "P3104R1": "Bit permutations",
    "P3104R2": "Bit permutations",
    "P3105R0": "constexpr std::uncaught_exceptions()",
    "P3105R1": "constexpr std::uncaught_exceptions()",
    "P3105R2": "constexpr std::uncaught_exceptions()",
    "P3106R0": "Clarifying rules for brace elision in aggregate initialization",
    "P3106R1": "Clarifying rules for brace elision in aggregate initialization",
    "P3107R0": "Permit an efficient implementation of std::print",
    "P3107R1": "Permit an efficient implementation of std::print",
    "P3107R2": "Permit an efficient implementation of std::print",
    "P3107R3": "Permit an efficient implementation of std::print",
    "P3107R4": "Permit an efficient implementation of std::print",
    "P3107R5": "Permit an efficient implementation of std::print",
    "P3109R0": "A plan for std::execution for C++26",
    "P3110R0": "Array element initialization via pattern expansion",
    "P3111R0": "Atomic Reduction Operations",
    "P3112R0": "Specify Constructor of std::nullopt_t",
    "P3113R0": "Slides: Contract assertions, the noexcept operator, and deduced exception specifications",
    "P3114R0": "noexcept(contract_assert(_)) \u2014 slides",
    "P3115R0": "Data Member, Variable and Alias Declarations Can Introduce A Pack",
    "P3116R0": "Policy for explicit",
    "P3117R0": "Extending Conditionally Borrowed",
    "P3119R0": "Tokyo Technical Fixes to Contracts",
    "P3119R1": "Tokyo Technical Fixes to Contracts",
    "P3122R0": "[[nodiscard]] should be Recommended Practice",
    "P3122R1": "[[nodiscard]] should be Recommended Practice",
    "P3123R0": "2024-02 Library Evolution Polls",
    "P3125R0": "Pointer tagging",
    "P3126R0": "Graph Library: Overview",
    "P3126R1": "Graph Library: Overview",
    "P3127R0": "Graph Library: Background and Terminology",
    "P3128R0": "Graph Library: Algorithms",
    "P3129R0": "Graph Library: Views",
    "P3130R0": "Graph Library: Graph Container Interface",
    "P3130R1": "Graph Library: Graph Container Interface",
    "P3131R0": "Graph Library: Graph Containers",
    "P3131R1": "Graph Library: Containers",
    "P3133R0": "Fast first-factor finding function",
    "P3135R0": "Hazard Pointer Extensions",
    "P3135R1": "Hazard Pointer Extensions",
    "P3136R0": "Retiring niebloids",
    "P3137R0": "views::to_input",
    "P3137R1": "views::to_input",
    "P3138R0": "views::cache_last",
    "P3138R1": "views::cache_last",
    "P3139R0": "Pointer cast for unique_ptr",
    "P3140R0": "std::int_least128_t",
    "P3141": "std::terminates()",
    "P3142R0": "Printing Blank Lines with println",
    "P3143R0": "An in-depth walk through of the example in P3090R0",
    "P3144R0": "Deprecate Delete of Incomplete Class Type",
    "P3146R0": "Clarifying std::variant converting construction",
    "P3146R1": "Clarifying std::variant converting construction",
    "P3147R0": "A Direction for Vector",
    "P3147R1": "A Direction for Vector",
    "P3148R0": "Formatting of chrono Time Values",
    "P3149R0": "async_scope \u2014 Creating scopes for non-sequential concurrency",
    "P3149R1": "async_scope \u2014 Creating scopes for non-sequential concurrency",
    "P3149R2": "async_scope \u2014 Creating scopes for non-sequential concurrency",
    "P3149R3": "async_scope \u2014 Creating scopes for non-sequential concurrency",
    "P3150R0": "SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting Minutes 2023/12/13-2024/2/14",
    "P3151R0": "SG19: Machine Learning virtual Meeting Minutes to 2023/12/14-2024/02/8",
    "P3153R0": "An allocator-aware variant type",
    "P3154R0": "Deprecating signed character types in iostreams",
    "P3154R1": "Deprecating signed character types in iostreams",
    "P3155R0": "noexcept policy for SD-9 (The Lakos Rule)",
    "P3156R0": "empty_checkable_range",
    "P3157R0": "Generative Extensions for Reflection",
    "P3157R1": "Generative Extensions for Reflection",
    "P3158R0": "Headless Template Template Parameters",
    "P3159R0": "C++ Range Adaptors and Parallel Algorithms",
    "P3160R0": "An allocator-aware `inplace_vector`",
    "P3160R1": "An allocator-aware `inplace_vector`",
    "P3161R0": "Unified integer overflow arithmetic",
    "P3161R1": "Unified integer overflow arithmetic",
    "P3162R0": "LEWG [[nodiscard]] policy",
    "P3164R0": "Improving diagnostics for sender expressions",
    "P3165R0": "Contracts on virtual functions for the Contracts MVP",
    "P3166R0": "Static Exception Specifications",
    "P3167R0": "Attributes for the result name in a postcondition assertion",
    "P3168R0": "Give std::optional Range Support",
    "P3168R1": "Give std::optional Range Support",
    "P3169R0": "Inherited contracts",
    "P3170R0": "sinkable exception error message",
    "P3171R0": "Adding functionality to placeholder types",
    "P3172R0": "Using `this` in constructor preconditions",
    "P3173R0": "P2900R6 may be minimimal, but it is not viable",
    "P3174R0": "SG16: Unicode meeting summaries 2023-10-11 through 2024-02-21",
    "P3175R0": "Reconsidering the `std::execution::on` algorithm",
    "P3175R1": "Reconsidering the `std::execution::on` algorithm",
    "P3175R2": "Reconsidering the `std::execution::on` algorithm",
    "P3176R0": "The Oxford variadic comma",
    "P3177R0": "const prvalues in the conditional operator",
    "P3179R0": "C++ parallel range algorithms",
    "P3179R1": "C++ parallel range algorithms",
    "P3180R0": "C++ Standard Library Ready Issues to be moved in Tokyo, Mar. 2024",
    "P3181R0": "Atomic stores and object lifetimes",
    "P3182R0": "Add pop_value methods to container adaptors",
    "P3183R0": "Contract testing support",
    "P3183R1": "Contract testing support",
    "P3187R1": "remove ensure_started and start_detached from P2300",
    "P3188R0": "Proxy: A Pointer-Semantics-Based Polymorphism Library - Presentation slides for P3086R1",
    "P3189R0": "Slides for LEWG presentation of P2900R6: Contracts for C++",
    "P3190R0": "Slides for EWG presentation of D2900R7: Contracts for C++",
    "P3191R0": "Feedback on the scalability of contract violation handlers in P2900",
    "P3192R0": "LEWGI/SG18 Presentation of P3104R1 Bit Permutations",
    "P3194R0": "LEWGI/SG18 Presentation of P3105R1 constexpr std::uncaught_exceptions()",
    "P3196R0": "Core Language Working Group \"ready\" Issues for the March, 2024 meeting",
    "P3197R0": "A response to the Tokyo EWG polls on the Contracts MVP (P2900R6)",
    "P3198R0": "A takeaway from the Tokyo LEWG meeting on Contracts MVP",
    "P3199R0": "Choices for make_optional and value()",
    "P3201R0": "LEWG [[nodiscard]] policy",
    "P3201R1": "LEWG [[nodiscard]] policy",
    "P3203R0": "Implementation defined coroutine extensions",
    "P3205R0": "Throwing from a `noexcept` function should be a contract violation.",
    "P3207R0": "More & like",
    "P3208R0": "import std; and stream macros",
    "P3210R0": "A Postcondition *is* a Pattern Match",
    "P3210R1": "A Postcondition *is* a Pattern Match",
    "P3211R0": "views::transform_join",
    "P3213R0": "2024-04 Library Evolution Polls",
    "P3214R0": "2024-04 Library Evolution Poll Outcomes",
    "P3215R0": "Slides: Thread Attributes as Designators (P3072R2 presentation)",
    "P3216R0": "views::slice",
    "P3217R0": "Adjoints to \"Enabling list-initialization for algorithms\": find_last",
    "P3218R0": "const references to constexpr variables",
    "P3220R0": "views::delimit",
    "P3221R0": "Disable pointers to contracted functions",
    "P3222R0": "Fix C++26 by adding transposed special cases for P2642 layouts",
    "P3223R0": "Making std::basic_istream::ignore less surprising",
    "P3224R0": "Slides for P3087 - Make direct-initialization for enumeration types at least as permissive as direct",
    "P3225R0": "Slides for P3140 std::int_least128_t",
    "P3226R0": "Contracts for C++: Naming the \"Louis semantic\"",
    "P3228R0": "Contracts for C++: Revisiting contract check elision and duplication",
    "P3228R1": "Contracts for C++: Revisiting contract check elision and duplication",
    "P3230R0": "views::(take|drop)_exactly",
    "P3232R0": "User-defined erroneous behaviour",
    "P3233R0": "Issues with P2786 (Trivial Relocatability For C++26)",
    "P3234R0": "Utility to check if a pointer is in a given range",
    "P3234R1": "Utility to check if a pointer is in a given range",
    "P3235R0": "std::print more types faster with less memory",
    "P3236R0": "Please reject P2786 and adopt P1144",
    "P3236R1": "Please reject P2786 and adopt P1144",
    "P3237R0": "Matrix Representation of Contract Semantics",
    "P3238R0": "An alternate proposal for naming contract semantics",
    "P3239R0": "A Relocating Swap",
    "P3240R0": "Slides for EWGI presentation on allocators, Tokyo 2024",
    "P3241R0": "Slides for LEWG presentation on trivial relocation, April 2024",
    "P3242R0": "Copy and fill for mdspan",
    "P3243R0": "Give std::optional Range Support - Presentation, Tokyo 2024",
    "P3244R0": "[[nodiscard]] Policy - Presentation, Tokyo 2024",
    "P3245R0": "Allow `[[nodiscard]]` in type alias declarations",
    "P3247R0": "Deprecate the notion of trivial types",
    "P3247R1": "Deprecate the notion of trivial types",
    "P3248R0": "Require [u]intptr_t",
    "P3249R0": "A unified syntax for Pattern Matching and Contracts when introducing a new name",
    "P3250R0": "C++ contracts with regards to function pointers",
    "P3251R0": "C++ contracts and coroutines",
    "P3253R0": "Distinguishing between member and free coroutines",
    "P3254R0": "Reserve identifiers preceded by @ for non-ignorable annotation tokens",
    "P3255R0": "Expose whether atomic notifying operations are lock-free",
    "P3257R0": "Make the predicate of contract_assert more regular",
    "P3258R0": "Formatting charN_t",
    "P3259R0": "const by default",
    "P3263R0": "Encoded annotated char",
    "P3264R0": "Double-evaluation of preconditions",
    "P3264R1": "Double-evaluation of preconditions",
    "P3265R0": "Ship Contracts in a TS",
    "P3265R1": "Ship Contracts in a TS",
    "P3266R0": "non referenceable types",
    "P3267R0": "C++ contracts implementation strategies",
    "P3267R1": "Approaches to C++ Contracts",
    "P3268R0": "C++ Contracts Constification Challenges Concerning Current Code",
    "P3269R0": "Do Not Ship Contracts as a TS",
    "P3270R0": "Repetition, Elision, and Constification w.r.t. contract_assert",
    "P3271R0": "Function Usage Types (Contracts for Function Pointers)",
    "P3273R0": "Introspection of Closure Types",
    "P3274R0": "A framework for Profiles development",
    "P3275R0": "Replace simd operator[] with getter and setter functions - or not",
    "P3276R0": "P2900 Is Superior to a Contracts TS",
    "P3278R0": "Analysis of interaction between relocation, assignment, and swap",
    "P3279R0": "CWG2463: What 'trivially fooable' should mean",
    "P3281R0": "Contact checks should be regular C++",
    "P3282R0": "Static Storage for C++ Concurrent bounded_queue",
    "P3283R0": "Adding .first() and .last() to strings",
    "P3284R0": "`finally`, `write_env`, and `unstoppable` Sender Adaptors",
    "P3285R0": "Contracts: Protecting The Protector",
    "P3286R0": "Module Metadata Format for Distribution with Pre-Built Libraries",
    "P3287R0": "Exploration of namespaces for std::simd",
    "P3288R0": "std::elide",
    "P3289R0": "Consteval blocks",
    "P3290R0": "Integrating Existing Assertions With Contracts",
    "P3292R0": "Provenance and Concurrency",
    "P3293R0": "Splicing a base class subobject",
    "P3294R0": "Code Injection with Token Sequences",
    "P3295R0": "Freestanding constexpr containers and constexpr exception types",
    "P3296R0": "let_with_async_scope",
    "P3297R0": "C++26 Needs Contract Checking",
    "P3298R0": "Implicit user-defined conversion functions as operator.()",
    "P3299R0": "Range constructors for std::simd",
    "P3300R0": "C++ Asynchronous Parallel Algorithms",
    "P3301R0": "inplace_stoppable_base",
    "P3302R0": "SG16: Unicode meeting summaries 2024-03-13 through 2024-05-08",
    "P3303R0": "Fixing Lazy Sender Algorithm Customization",
    "P3304R0": "SG14: Low Latency/Games/Embedded/Financial Trading virtual Meeting Minutes 2024/04/10",
    "P3305R0": "SG19: Machine Learning virtual Meeting Minutes to 2024/04/11-2024/05/09",
    "P3306R0": "Atomic Read-Modify-Write Improvements",
    "P3307R0": "Floating-Point Maximum/Minimum Function Objects",
    "P3308R0": "mdarray design questions and answers",
    "P3309R0": "constexpr atomic and atomic_ref",
    "P3310R0": "Solving partial ordering issues introduced by P0522R0",
    "P3311R0": "An opt-in approach for integration of traditional assert facilities in C++ contracts",
    "P3312R0": "Overload Set Types",
    "P3313R0": "Impacts of noexept on ARM table based exception metadata",
    "P3316R0": "A more predictable unchecked semantic",
    "P3317R0": "Compile time resolved contracts",
    "P3318R0": "Throwing violation handlers, from an application programming perspective",
    "P3319R0": "Add an iota object for simd (and more)",
    "P3320R0": "EWG slides for P3144 \"Delete if Incomplete\"",
    "P4000R0": "To TS or not to TS: that is the question",
    "SD1": "PL22.16/WG21 document list",
    "SD3": "Study Group Organizational Information",
    "SD4": "Practices and Procedures: The \"How We Work\" Cheat Sheet",
    "SD5": "WG21 and PL22.16 (C++) Joint Mailing and Meeting Information",
    "SD6": "SG10 Feature Test Recommendations",
    "SD7": "Mailing Procedures and How to Write Papers",
    "SD8": "Standard Library Compatibility",
    "SD9": "Library Evolution Policies"
}
